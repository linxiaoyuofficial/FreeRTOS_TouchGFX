
FreeRTOS_TouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000271fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cdc  080274a0  080274a0  000284a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000b76  0802a17c  0802a17c  0002b17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000070  0802acf4  0802acf4  0002bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000e6480  0802ad64  0802ad64  0002bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000005a  081111e4  081111e4  001121e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  08111240  08111240  00112240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  08111248  08111248  00112248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  0811125c  0811125c  0011225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         0000027c  24000000  08111264  00113000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_ScratchbufferA 00000100  24000280  081114e0  00113280  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferB 00000100  24000380  081115e0  00113380  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000b33c  24000480  081116e0  00113480  2**3
                  ALLOC
 14 ._user_heap_stack 00003004  2400b7bc  081116e0  001137bc  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00113480  2**0
                  CONTENTS, READONLY
 16 .debug_info   000b4aea  00000000  00000000  001134ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00016045  00000000  00000000  001c7f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002f80  00000000  00000000  001ddfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00005675  00000000  00000000  001e0f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0004aa76  00000000  00000000  001e65d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00075fd3  00000000  00000000  0023104b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00195997  00000000  00000000  002a701e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000c2  00000000  00000000  0043c9b5  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000096e8  00000000  00000000  0043ca78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loclists 000288bb  00000000  00000000  00446160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000005a  00000000  00000000  0046ea1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000480 	.word	0x24000480
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08027484 	.word	0x08027484

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000484 	.word	0x24000484
 80002dc:	08027484 	.word	0x08027484

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a68:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a6a:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <MX_CRC_Init+0x24>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a6c:	2300      	movs	r3, #0
  hcrc.Instance = CRC;
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <MX_CRC_Init+0x28>)
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a70:	2201      	movs	r2, #1
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a72:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000a74:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a76:	6202      	str	r2, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a78:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a7c:	f001 ff92 	bl	80029a4 <HAL_CRC_Init>
 8000a80:	b900      	cbnz	r0, 8000a84 <MX_CRC_Init+0x1c>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a82:	bd08      	pop	{r3, pc}
 8000a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a88:	f000 bcfc 	b.w	8001484 <Error_Handler>
 8000a8c:	2400049c 	.word	0x2400049c
 8000a90:	58024c00 	.word	0x58024c00

08000a94 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_CRC_MspInit+0x2c>)
 8000a96:	6802      	ldr	r2, [r0, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d000      	beq.n	8000a9e <HAL_CRC_MspInit+0xa>
 8000a9c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a9e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
{
 8000aa2:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000aa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000aa8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000aac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000abc:	b002      	add	sp, #8
 8000abe:	4770      	bx	lr
 8000ac0:	58024c00 	.word	0x58024c00

08000ac4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <MX_DMA_Init+0x44>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	200b      	movs	r0, #11
{
 8000acc:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
{
 8000ad2:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad4:	f044 0401 	orr.w	r4, r4, #1
 8000ad8:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
 8000adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ae8:	f001 feae 	bl	8002848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aec:	200b      	movs	r0, #11
 8000aee:	f001 fee7 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000af2:	200c      	movs	r0, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	2105      	movs	r1, #5
 8000af8:	f001 fea6 	bl	8002848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000afc:	200c      	movs	r0, #12

}
 8000afe:	b002      	add	sp, #8
 8000b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b04:	f001 bedc 	b.w	80028c0 <HAL_NVIC_EnableIRQ>
 8000b08:	58024400 	.word	0x58024400

08000b0c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000b0c:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b0e:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <MX_DMA2D_Init+0x4c>)
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b10:	2300      	movs	r3, #0
 8000b12:	2202      	movs	r2, #2
  hdma2d.Instance = DMA2D;
 8000b14:	4911      	ldr	r1, [pc, #68]	@ (8000b5c <MX_DMA2D_Init+0x50>)
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000b16:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hdma2d.Instance = DMA2D;
 8000b18:	e9c0 1300 	strd	r1, r3, [r0]
  hdma2d.Init.OutputOffset = 0;
 8000b1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000b20:	e9c0 3211 	strd	r3, r2, [r0, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b24:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000b28:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b2c:	f002 fe72 	bl	8003814 <HAL_DMA2D_Init>
 8000b30:	b928      	cbnz	r0, 8000b3e <MX_DMA2D_Init+0x32>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b32:	2101      	movs	r1, #1
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_DMA2D_Init+0x4c>)
 8000b36:	f002 ff45 	bl	80039c4 <HAL_DMA2D_ConfigLayer>
 8000b3a:	b940      	cbnz	r0, 8000b4e <MX_DMA2D_Init+0x42>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b3c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b3e:	f000 fca1 	bl	8001484 <Error_Handler>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b42:	2101      	movs	r1, #1
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_DMA2D_Init+0x4c>)
 8000b46:	f002 ff3d 	bl	80039c4 <HAL_DMA2D_ConfigLayer>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d0f6      	beq.n	8000b3c <MX_DMA2D_Init+0x30>
}
 8000b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b52:	f000 bc97 	b.w	8001484 <Error_Handler>
 8000b56:	bf00      	nop
 8000b58:	240004c0 	.word	0x240004c0
 8000b5c:	52001000 	.word	0x52001000

08000b60 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_DMA2D_MspInit+0x40>)
 8000b62:	6802      	ldr	r2, [r0, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d000      	beq.n	8000b6a <HAL_DMA2D_MspInit+0xa>
 8000b68:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_DMA2D_MspInit+0x44>)

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000b6c:	205a      	movs	r0, #90	@ 0x5a
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2105      	movs	r1, #5
{
 8000b72:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b74:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
{
 8000b78:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b7a:	f044 0410 	orr.w	r4, r4, #16
 8000b7e:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
 8000b82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000b8e:	f001 fe5b 	bl	8002848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b92:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b94:	b002      	add	sp, #8
 8000b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b9a:	f001 be91 	b.w	80028c0 <HAL_NVIC_EnableIRQ>
 8000b9e:	bf00      	nop
 8000ba0:	52001000 	.word	0x52001000
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <MX_FMC_Init>:
	printf("SDRAM读写测试通过，系统正常\r\n");
	return SUCCESS;	 // 返回成功标志
}
/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000baa:	2202      	movs	r2, #2
{
 8000bac:	b08b      	sub	sp, #44	@ 0x2c
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bae:	4836      	ldr	r0, [pc, #216]	@ (8000c88 <MX_FMC_Init+0xe0>)
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bb0:	2307      	movs	r3, #7
  SdramTiming.LoadToActiveDelay = 2;
 8000bb2:	9202      	str	r2, [sp, #8]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000bb4:	2100      	movs	r1, #0
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8000bb6:	9208      	str	r2, [sp, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bbc:	9303      	str	r3, [sp, #12]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bbe:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  SdramTiming.RowCycleDelay = 7;
 8000bc2:	9305      	str	r3, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 8000bc4:	2304      	movs	r3, #4
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bc6:	6242      	str	r2, [r0, #36]	@ 0x24
 8000bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  SdramTiming.SelfRefreshTime = 4;
 8000bcc:	9304      	str	r3, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bce:	2302      	movs	r3, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bd0:	6282      	str	r2, [r0, #40]	@ 0x28
  SdramTiming.WriteRecoveryTime = 3;
 8000bd2:	2203      	movs	r2, #3
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bd4:	4d2d      	ldr	r5, [pc, #180]	@ (8000c8c <MX_FMC_Init+0xe4>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000bd6:	6041      	str	r1, [r0, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bd8:	61c1      	str	r1, [r0, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bda:	a902      	add	r1, sp, #8
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bdc:	6005      	str	r5, [r0, #0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bde:	6204      	str	r4, [r0, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000be4:	2201      	movs	r2, #1
 8000be6:	2308      	movs	r3, #8
 8000be8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bec:	2340      	movs	r3, #64	@ 0x40
 8000bee:	2210      	movs	r2, #16
 8000bf0:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bf4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bf8:	6183      	str	r3, [r0, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bfa:	f006 fd7b 	bl	80076f4 <HAL_SDRAM_Init>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d13f      	bne.n	8000c82 <MX_FMC_Init+0xda>
	Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;	// 开启SDRAM时钟
 8000c02:	4c23      	ldr	r4, [pc, #140]	@ (8000c90 <MX_FMC_Init+0xe8>)
 8000c04:	2501      	movs	r5, #1
	__IO uint32_t tmpmrd = 0;
 8000c06:	2600      	movs	r6, #0
	Command->CommandTarget = FMC_COMMAND_TARGET_BANK; 	// 选择要控制的区域
 8000c08:	2710      	movs	r7, #16
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c10:	481d      	ldr	r0, [pc, #116]	@ (8000c88 <MX_FMC_Init+0xe0>)
	__IO uint32_t tmpmrd = 0;
 8000c12:	9601      	str	r6, [sp, #4]
	Command->ModeRegisterDefinition = 0;
 8000c14:	60e6      	str	r6, [r4, #12]
	Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;	// 开启SDRAM时钟
 8000c16:	6025      	str	r5, [r4, #0]
	Command->AutoRefreshNumber = 1;
 8000c18:	e9c4 7501 	strd	r7, r5, [r4, #4]
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c1c:	f006 fda6 	bl	800776c <HAL_SDRAM_SendCommand>
	HAL_Delay(1);		// 延时等待
 8000c20:	4628      	mov	r0, r5
 8000c22:	f001 fde7 	bl	80027f4 <HAL_Delay>
	Command->CommandMode = FMC_SDRAM_CMD_PALL;		// 预充电命令
 8000c26:	2302      	movs	r3, #2
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // 发送控制指令
 8000c28:	4621      	mov	r1, r4
 8000c2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c2e:	4816      	ldr	r0, [pc, #88]	@ (8000c88 <MX_FMC_Init+0xe0>)
	Command->CommandMode = FMC_SDRAM_CMD_PALL;		// 预充电命令
 8000c30:	6023      	str	r3, [r4, #0]
	Command->ModeRegisterDefinition = 0;
 8000c32:	60e6      	str	r6, [r4, #12]
	Command->AutoRefreshNumber = 1;
 8000c34:	e9c4 7501 	strd	r7, r5, [r4, #4]
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // 发送控制指令
 8000c38:	f006 fd98 	bl	800776c <HAL_SDRAM_SendCommand>
	Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// 使用自动刷新
 8000c3c:	2203      	movs	r2, #3
	Command->AutoRefreshNumber = 8;                                // 自动刷新次数
 8000c3e:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c40:	4621      	mov	r1, r4
	Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// 使用自动刷新
 8000c42:	6022      	str	r2, [r4, #0]
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c48:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <MX_FMC_Init+0xe0>)
	Command->CommandTarget = FMC_COMMAND_TARGET_BANK;          // 选择要控制的区域
 8000c4a:	6067      	str	r7, [r4, #4]
	Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;	// 加载模式寄存器命令
 8000c4c:	2710      	movs	r7, #16
	Command->ModeRegisterDefinition = 0;
 8000c4e:	60e6      	str	r6, [r4, #12]
	Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;	// 加载模式寄存器命令
 8000c50:	2604      	movs	r6, #4
	Command->AutoRefreshNumber = 8;                                // 自动刷新次数
 8000c52:	60a3      	str	r3, [r4, #8]
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c54:	f006 fd8a 	bl	800776c <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2 |
 8000c58:	f240 2331 	movw	r3, #561	@ 0x231
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_FMC_Init+0xe0>)
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2 |
 8000c64:	9301      	str	r3, [sp, #4]
	Command->ModeRegisterDefinition = tmpmrd;
 8000c66:	9b01      	ldr	r3, [sp, #4]
	Command->AutoRefreshNumber = 1;
 8000c68:	60a5      	str	r5, [r4, #8]
	Command->ModeRegisterDefinition = tmpmrd;
 8000c6a:	60e3      	str	r3, [r4, #12]
	Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;	// 加载模式寄存器命令
 8000c6c:	e9c4 6700 	strd	r6, r7, [r4]
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// 发送控制指令
 8000c70:	f006 fd7c 	bl	800776c <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(hsdram, 918);  // 配置刷新率
 8000c74:	f240 3196 	movw	r1, #918	@ 0x396
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <MX_FMC_Init+0xe0>)
 8000c7a:	f006 fd97 	bl	80077ac <HAL_SDRAM_ProgramRefreshRate>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1,&command);//配置SDRAM
  /* USER CODE END FMC_Init 2 */
}
 8000c7e:	b00b      	add	sp, #44	@ 0x2c
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler( );
 8000c82:	f000 fbff 	bl	8001484 <Error_Handler>
 8000c86:	e7bc      	b.n	8000c02 <MX_FMC_Init+0x5a>
 8000c88:	24000540 	.word	0x24000540
 8000c8c:	52004140 	.word	0x52004140
 8000c90:	24000530 	.word	0x24000530

08000c94 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000c94:	4836      	ldr	r0, [pc, #216]	@ (8000d70 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 8000c9a:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c9c:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000ca2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000ca6:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8000ca8:	b109      	cbz	r1, 8000cae <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000caa:	b038      	add	sp, #224	@ 0xe0
 8000cac:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8000cae:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	22b8      	movs	r2, #184	@ 0xb8
  FMC_Initialized = 1;
 8000cb2:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	a80a      	add	r0, sp, #40	@ 0x28
 8000cb6:	f023 f9f3 	bl	80240a0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000cba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cbe:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000cc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc6:	f004 fab7 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d14c      	bne.n	8000d68 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cce:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cd0:	f64f 003f 	movw	r0, #63551	@ 0xf83f
 8000cd4:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd6:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cd8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cdc:	2600      	movs	r6, #0
 8000cde:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ce0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ce4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8000ce8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cec:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cf6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf8:	a902      	add	r1, sp, #8
 8000cfa:	481f      	ldr	r0, [pc, #124]	@ (8000d78 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cfc:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d02:	f002 fec9 	bl	8003a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000d06:	222c      	movs	r2, #44	@ 0x2c
 8000d08:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d0a:	a902      	add	r1, sp, #8
 8000d0c:	481b      	ldr	r0, [pc, #108]	@ (8000d7c <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d14:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d18:	f002 febe 	bl	8003a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d1c:	f248 1237 	movw	r2, #33079	@ 0x8137
 8000d20:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d22:	a902      	add	r1, sp, #8
 8000d24:	4816      	ldr	r0, [pc, #88]	@ (8000d80 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d26:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d30:	f002 feb2 	bl	8003a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d34:	f64f 7283 	movw	r2, #65411	@ 0xff83
 8000d38:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3a:	a902      	add	r1, sp, #8
 8000d3c:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d44:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d48:	f002 fea6 	bl	8003a98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d4c:	f24c 7203 	movw	r2, #50947	@ 0xc703
 8000d50:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	a902      	add	r1, sp, #8
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d56:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f002 fe9a 	bl	8003a98 <HAL_GPIO_Init>
}
 8000d64:	b038      	add	sp, #224	@ 0xe0
 8000d66:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8000d68:	f000 fb8c 	bl	8001484 <Error_Handler>
 8000d6c:	e7af      	b.n	8000cce <HAL_SDRAM_MspInit+0x3a>
 8000d6e:	bf00      	nop
 8000d70:	24000528 	.word	0x24000528
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58021400 	.word	0x58021400
 8000d7c:	58021c00 	.word	0x58021c00
 8000d80:	58021800 	.word	0x58021800
 8000d84:	58021000 	.word	0x58021000
 8000d88:	58020c00 	.word	0x58020c00

08000d8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
	printf("\033[34mDefaultTaskStart\033[0m\n");
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <StartDefaultTask+0x18>)
 8000d90:	f023 f886 	bl	8023ea0 <puts>
	MX_TouchGFX_Init();
 8000d94:	f00b fd1a 	bl	800c7cc <MX_TouchGFX_Init>
  /* Call PreOsInit function */
	MX_TouchGFX_PreOSInit();
 8000d98:	f00b fd16 	bl	800c7c8 <MX_TouchGFX_PreOSInit>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f008 ff8d 	bl	8009cbc <osDelay>
  for(;;)
 8000da2:	e7fb      	b.n	8000d9c <StartDefaultTask+0x10>
 8000da4:	080274e0 	.word	0x080274e0

08000da8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000da8:	b508      	push	{r3, lr}
	printf("OS StartUp\n");
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_FREERTOS_Init+0x18>)
 8000dac:	f023 f878 	bl	8023ea0 <puts>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <MX_FREERTOS_Init+0x1c>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <MX_FREERTOS_Init+0x20>)
 8000db6:	f008 ff3f 	bl	8009c38 <osThreadNew>
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <MX_FREERTOS_Init+0x24>)
 8000dbc:	6018      	str	r0, [r3, #0]
}
 8000dbe:	bd08      	pop	{r3, pc}
 8000dc0:	080274fc 	.word	0x080274fc
 8000dc4:	08027514 	.word	0x08027514
 8000dc8:	08000d8d 	.word	0x08000d8d
 8000dcc:	24000574 	.word	0x24000574

08000dd0 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd0:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <MX_GPIO_Init+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
{
 8000dd6:	b510      	push	{r4, lr}
 8000dd8:	b090      	sub	sp, #64	@ 0x40
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000dda:	4c42      	ldr	r4, [pc, #264]	@ (8000ee4 <MX_GPIO_Init+0x114>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8000de0:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 8000de4:	910e      	str	r1, [sp, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000de6:	4620      	mov	r0, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000dec:	f041 0110 	orr.w	r1, r1, #16
 8000df0:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000df4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000df8:	f001 0110 	and.w	r1, r1, #16
 8000dfc:	9101      	str	r1, [sp, #4]
 8000dfe:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e04:	f041 0104 	orr.w	r1, r1, #4
 8000e08:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e0c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e10:	f001 0104 	and.w	r1, r1, #4
 8000e14:	9102      	str	r1, [sp, #8]
 8000e16:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e18:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e1c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000e20:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e24:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e28:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8000e2c:	9103      	str	r1, [sp, #12]
 8000e2e:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e30:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e34:	f041 0120 	orr.w	r1, r1, #32
 8000e38:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e3c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e40:	f001 0120 	and.w	r1, r1, #32
 8000e44:	9104      	str	r1, [sp, #16]
 8000e46:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e48:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e4c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000e50:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e54:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e58:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000e5c:	9105      	str	r1, [sp, #20]
 8000e5e:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e64:	4311      	orrs	r1, r2
 8000e66:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e6a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e6e:	4011      	ands	r1, r2
 8000e70:	9106      	str	r1, [sp, #24]
 8000e72:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e78:	f041 0102 	orr.w	r1, r1, #2
 8000e7c:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e80:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e84:	f001 0102 	and.w	r1, r1, #2
 8000e88:	9107      	str	r1, [sp, #28]
 8000e8a:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e90:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8000e94:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000e98:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000e9c:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8000ea0:	9108      	str	r1, [sp, #32]
 8000ea2:	9908      	ldr	r1, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000ea8:	f041 0108 	orr.w	r1, r1, #8
 8000eac:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000eb0:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8000ebe:	f002 ff33 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec2:	2240      	movs	r2, #64	@ 0x40
 8000ec4:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ec6:	a90a      	add	r1, sp, #40	@ 0x28
 8000ec8:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed6:	f002 fddf 	bl	8003a98 <HAL_GPIO_Init>

}
 8000eda:	b010      	add	sp, #64	@ 0x40
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	bf00      	nop
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58021c00 	.word	0x58021c00

08000ee8 <LCD_RGB_Init>:
//  }
//
//}

void LCD_RGB_Init(void)
{
 8000ee8:	b430      	push	{r4, r5}
	}
	LCD.Layer = layer;	//记录当前所在的层

#else		// 如果只开启单层，默认操作 layer0

	LCD.LayerMemoryAdd = LCD_MemoryAdd;		// 获取 layer0 的显存地址
 8000eea:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <LCD_RGB_Init+0x64>)
	if( LCD.ColorMode == LTDC_PIXEL_FORMAT_RGB565	)	//将32位色转换为16位色
	{
		Red_Value   = (uint16_t)((Color&0x00F80000)>>8);
		Green_Value = (uint16_t)((Color&0x0000FC00)>>5);
		Blue_Value  = (uint16_t)((Color&0x000000F8)>>3);
		LCD.Color = (uint16_t)(Red_Value | Green_Value | Blue_Value);
 8000eec:	f64f 75ff 	movw	r5, #65535	@ 0xffff
*
***************************************************************************************************************/

void LCD_SetFont(pFONT *fonts)
{
  LCD_Fonts = fonts;
 8000ef0:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <LCD_RGB_Init+0x68>)
		LCD.BackColor	= (uint16_t)(Red_Value | Green_Value | Blue_Value);
 8000ef2:	2100      	movs	r1, #0
  LCD_Fonts = fonts;
 8000ef4:	4c17      	ldr	r4, [pc, #92]	@ (8000f54 <LCD_RGB_Init+0x6c>)
		LCD.Color = (uint16_t)(Red_Value | Green_Value | Blue_Value);
 8000ef6:	6015      	str	r5, [r2, #0]
	LCD.ColorMode      = ColorMode_0;      // 获取 layer0 的颜色格式
 8000ef8:	2502      	movs	r5, #2
  LCD_Fonts = fonts;
 8000efa:	6004      	str	r4, [r0, #0]
	LCD.LayerMemoryAdd = LCD_MemoryAdd;		// 获取 layer0 的显存地址
 8000efc:	f04f 4440 	mov.w	r4, #3221225472	@ 0xc0000000
***************************************************************************************************************/

void LCD_Clear(void)
{

	DMA2D->CR	  &=	~(DMA2D_CR_START);				//	停止DMA2D
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <LCD_RGB_Init+0x70>)
		LCD.BackColor	= (uint16_t)(Red_Value | Green_Value | Blue_Value);
 8000f02:	6051      	str	r1, [r2, #4]
	LCD.ColorMode      = ColorMode_0;      // 获取 layer0 的颜色格式
 8000f04:	e9c2 5402 	strd	r5, r4, [r2, #8]
	DMA2D->CR	  &=	~(DMA2D_CR_START);				//	停止DMA2D
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	f020 0001 	bic.w	r0, r0, #1
 8000f0e:	6018      	str	r0, [r3, #0]
	LCD.Layer = 0;		// 层标记设置为 layer0
 8000f10:	f04f 7081 	mov.w	r0, #16908288	@ 0x1020000
 8000f14:	6110      	str	r0, [r2, #16]
	DMA2D->CR		=	DMA2D_R2M;							//	寄存器到SDRAM
 8000f16:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
	DMA2D->OPFCCR	=	LCD.ColorMode;						//	设置颜色格式
	DMA2D->OOR		=	0;										//	设置行偏移
	DMA2D->OMAR		=	LCD.LayerMemoryAdd ;				// 地址
	DMA2D->NLR		=	(LCD_Width<<16)|(LCD_Height);	//	设定长度和宽度
 8000f1a:	4810      	ldr	r0, [pc, #64]	@ (8000f5c <LCD_RGB_Init+0x74>)
	DMA2D->CR		=	DMA2D_R2M;							//	寄存器到SDRAM
 8000f1c:	601a      	str	r2, [r3, #0]

加了之后，不管哪种格式，都需要17.6ms刷一屏，不过屏幕本身的刷新率只有60帧左右（LTDC时钟33MHz），
17.6ms的速度已经足够了，除非是对速度要求特别高的场合，不然建议加上判断垂直等待的语句，可以避免撕裂效应

******/
	while( LTDC->CDSR != 0X00000001);	// 判断 显示状态寄存器LTDC_CDSR 的第0位 VDES：垂直数据使能显示状态
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <LCD_RGB_Init+0x78>)
	DMA2D->OPFCCR	=	LCD.ColorMode;						//	设置颜色格式
 8000f20:	635d      	str	r5, [r3, #52]	@ 0x34
	DMA2D->OOR		=	0;										//	设置行偏移
 8000f22:	6419      	str	r1, [r3, #64]	@ 0x40
	DMA2D->OMAR		=	LCD.LayerMemoryAdd ;				// 地址
 8000f24:	63dc      	str	r4, [r3, #60]	@ 0x3c
	DMA2D->NLR		=	(LCD_Width<<16)|(LCD_Height);	//	设定长度和宽度
 8000f26:	6458      	str	r0, [r3, #68]	@ 0x44
	DMA2D->OCOLR	=	LCD.BackColor;						//	颜色
 8000f28:	6399      	str	r1, [r3, #56]	@ 0x38
	while( LTDC->CDSR != 0X00000001);	// 判断 显示状态寄存器LTDC_CDSR 的第0位 VDES：垂直数据使能显示状态
 8000f2a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d1fc      	bne.n	8000f2a <LCD_RGB_Init+0x42>

	DMA2D->CR	  |=	DMA2D_CR_START;					//	启动DMA2D
 8000f30:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <LCD_RGB_Init+0x70>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) ;				//	等待传输完成
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	07db      	lsls	r3, r3, #31
 8000f3e:	d4fc      	bmi.n	8000f3a <LCD_RGB_Init+0x52>
			LCD_Backlight_ON;
 8000f40:	2201      	movs	r2, #1
 8000f42:	2140      	movs	r1, #64	@ 0x40
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <LCD_RGB_Init+0x7c>)
}
 8000f46:	bc30      	pop	{r4, r5}
			LCD_Backlight_ON;
 8000f48:	f002 beee 	b.w	8003d28 <HAL_GPIO_WritePin>
 8000f4c:	24000578 	.word	0x24000578
 8000f50:	2400058c 	.word	0x2400058c
 8000f54:	24000004 	.word	0x24000004
 8000f58:	52001000 	.word	0x52001000
 8000f5c:	032001e0 	.word	0x032001e0
 8000f60:	50001000 	.word	0x50001000
 8000f64:	58021c00 	.word	0x58021c00

08000f68 <MX_LTDC_Init>:
*	函数功能:	初始化LTDC引脚的IO口、全局参数、层设置等
*	说    明:	无
*************************************************************************************************/

void MX_LTDC_Init(void)
{
 8000f68:	b530      	push	{r4, r5, lr}
 8000f6a:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};		          // layer0 相关参数
 8000f6c:	2234      	movs	r2, #52	@ 0x34
 8000f6e:	2100      	movs	r1, #0
 8000f70:	a801      	add	r0, sp, #4
 8000f72:	f023 f895 	bl	80240a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;                              // LTCD句柄配置
 8000f76:	482a      	ldr	r0, [pc, #168]	@ (8001020 <MX_LTDC_Init+0xb8>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;         // 低电平有效
 8000f78:	2300      	movs	r3, #0
  hltdc.Instance = LTDC;                              // LTCD句柄配置
 8000f7a:	492a      	ldr	r1, [pc, #168]	@ (8001024 <MX_LTDC_Init+0xbc>)
//  hltdc.Init.AccumulatedActiveH = 500;
//  hltdc.Init.TotalWidth = 1080;
//  hltdc.Init.TotalHeigh = 522;
  hltdc.Init.HorizontalSync 	= HSW - 1;
  hltdc.Init.VerticalSync 		= VSW	-1 ;
  hltdc.Init.AccumulatedHBP		= HBP + HSW -1;
 8000f7c:	2250      	movs	r2, #80	@ 0x50
  hltdc.Init.AccumulatedActiveW = LCD_Width  + HSW + HBP -1;
  hltdc.Init.AccumulatedActiveH = LCD_Height + VSW + VBP -1;
  hltdc.Init.TotalWidth 		= LCD_Width  + HSW + HBP + HFP - 1;
  hltdc.Init.TotalHeigh 		= LCD_Height + VSW + VBP + VFP - 1;
/*-----------------背景色初始化-------------------*/
  hltdc.Init.Backcolor.Blue = 0;
 8000f7e:	8683      	strh	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
 8000f80:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;         // 低电平有效
 8000f84:	e9c0 1300 	strd	r1, r3, [r0]
  hltdc.Init.AccumulatedHBP		= HBP + HSW -1;
 8000f88:	e9c0 3206 	strd	r3, r2, [r0, #24]
  hltdc.Init.AccumulatedVBP 	= VBP + VSW -1;
 8000f8c:	2128      	movs	r1, #40	@ 0x28
  hltdc.Init.AccumulatedActiveW = LCD_Width  + HSW + HBP -1;
 8000f8e:	f44f 725c 	mov.w	r2, #880	@ 0x370
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;	      // 低电平有效，要注意的是，很多面板都是高电平有效，但是750需要设置成低电平才能正常显示
 8000f92:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hltdc.Init.HorizontalSync 	= HSW - 1;
 8000f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hltdc.Init.AccumulatedActiveW = LCD_Width  + HSW + HBP -1;
 8000f9a:	e9c0 1208 	strd	r1, r2, [r0, #32]
  hltdc.Init.TotalWidth 		= LCD_Width  + HSW + HBP + HFP - 1;
 8000f9e:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000fa2:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8000fa6:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  hltdc.Init.TotalHeigh 		= LCD_Height + VSW + VBP + VFP - 1;
 8000faa:	f240 231e 	movw	r3, #542	@ 0x21e
 8000fae:	6303      	str	r3, [r0, #48]	@ 0x30
  /*--------------LTDC参数初始化-----------------*/
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fb0:	f002 febe 	bl	8003d30 <HAL_LTDC_Init>
 8000fb4:	bb70      	cbnz	r0, 8001014 <MX_LTDC_Init+0xac>
  {
    Error_Handler();
  }
  /*---------------------------------- layer0 显示配置 --------------------------------*/
  pLayerCfg.WindowX0 		= 0;							 // 水平起点
 8000fb6:	2200      	movs	r2, #0
  pLayerCfg.WindowX1 		= LCD_Width;					 // 水平终点
 8000fb8:	f44f 7048 	mov.w	r0, #800	@ 0x320
  pLayerCfg.WindowY0 		= 0;							 // 垂直起点
  pLayerCfg.WindowY1 		= LCD_Height;					 // 垂直终点
 8000fbc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.ImageWidth 		= LCD_Width;                     // 显示区域宽度
  pLayerCfg.ImageHeight 	= LCD_Height;                    // 显示区域高度
  pLayerCfg.PixelFormat 	= ColorMode_0;					 // 颜色格式
 8000fc0:	2502      	movs	r5, #2

// 设置 layer0 的层混合系数，最终写入 LTDC_LxBFCR 寄存器
// 该参数用于设置 layer0 和 底层背景 之间的颜色混合系数，计算公式为 ：
// 混合后的颜色 =  BF1 * layer0的颜色 + BF2 * 底层背景的颜色
// 如果 layer0 使用了透明色，则必须配置成 LTDC_BLENDING_FACTOR1_PAxCA 和 LTDC_BLENDING_FACTOR2_PAxCA，否则ARGB中的A通道不起作用
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;		// 混合系数1
 8000fc2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  pLayerCfg.Backcolor.Red   = 0;//layer0初始颜色，R
  pLayerCfg.Backcolor.Green = 0;//layer0初始颜色，G
  pLayerCfg.Backcolor.Blue  = 0;//layer0初始颜色，B

  /*-------------layer0参数初始化----------------*/
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fc6:	a901      	add	r1, sp, #4
  pLayerCfg.Alpha0          = 0;//layer0初始颜色，A
 8000fc8:	9207      	str	r2, [sp, #28]
  pLayerCfg.Backcolor.Red   = 0;//layer0初始颜色，R
 8000fca:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
  pLayerCfg.Backcolor.Blue  = 0;//layer0初始颜色，B
 8000fce:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
  pLayerCfg.ImageHeight 	= LCD_Height;                    // 显示区域高度
 8000fd2:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
  pLayerCfg.WindowY1 		= LCD_Height;					 // 垂直终点
 8000fd6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  pLayerCfg.Alpha = 255;//layer0恒定透明度
 8000fda:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.WindowX1 		= LCD_Width;					 // 水平终点
 8000fdc:	e9cd 2001 	strd	r2, r0, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;		// 混合系数2
 8000fe0:	2005      	movs	r0, #5
  pLayerCfg.Alpha = 255;//layer0恒定透明度
 8000fe2:	e9cd 5305 	strd	r5, r3, [sp, #20]
  pLayerCfg.FBStartAdress = LCD_MemoryAdd;                	// 显存地址
 8000fe6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;		// 混合系数2
 8000fea:	e9cd 4008 	strd	r4, r0, [sp, #32]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_LTDC_Init+0xb8>)
  pLayerCfg.FBStartAdress = LCD_MemoryAdd;                	// 显存地址
 8000ff0:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ff2:	f002 ff71 	bl	8003ed8 <HAL_LTDC_ConfigLayer>
 8000ff6:	b980      	cbnz	r0, 800101a <MX_LTDC_Init+0xb2>

	#endif

#endif
  /* USER CODE BEGIN LTDC_Init 2 */
	HAL_LTDC_ProgramLineEvent(&hltdc, 0);	    		// 设置行中断，第0行
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <MX_LTDC_Init+0xb8>)
 8000ffc:	f003 f840 	bl	8004080 <HAL_LTDC_ProgramLineEvent>
	HAL_NVIC_SetPriority(LTDC_IRQn, 15, 0);		    	// 设置优先级
 8001000:	2200      	movs	r2, #0
 8001002:	210f      	movs	r1, #15
 8001004:	2058      	movs	r0, #88	@ 0x58
 8001006:	f001 fc1f 	bl	8002848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LTDC_IRQn);						// 使能中断
 800100a:	2058      	movs	r0, #88	@ 0x58
 800100c:	f001 fc58 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END LTDC_Init 2 */

}
 8001010:	b00f      	add	sp, #60	@ 0x3c
 8001012:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001014:	f000 fa36 	bl	8001484 <Error_Handler>
 8001018:	e7cd      	b.n	8000fb6 <MX_LTDC_Init+0x4e>
    Error_Handler();
 800101a:	f000 fa33 	bl	8001484 <Error_Handler>
 800101e:	e7eb      	b.n	8000ff8 <MX_LTDC_Init+0x90>
 8001020:	24000590 	.word	0x24000590
 8001024:	50001000 	.word	0x50001000

08001028 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001028:	b570      	push	{r4, r5, r6, lr}
 800102a:	b0be      	sub	sp, #248	@ 0xf8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	2100      	movs	r1, #0
{
 800102e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	22c0      	movs	r2, #192	@ 0xc0
 8001032:	a80e      	add	r0, sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	910c      	str	r1, [sp, #48]	@ 0x30
 8001036:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800103a:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103e:	f023 f82f 	bl	80240a0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001042:	4b79      	ldr	r3, [pc, #484]	@ (8001228 <HAL_LTDC_MspInit+0x200>)
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d001      	beq.n	800104e <HAL_LTDC_MspInit+0x26>
	HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800104a:	b03e      	add	sp, #248	@ 0xf8
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800104e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001052:	2300      	movs	r3, #0
        PeriphClkInitStruct.PLL3.PLL3R = 5;
 8001054:	2105      	movs	r1, #5
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001056:	a80e      	add	r0, sp, #56	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001058:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
        PeriphClkInitStruct.PLL3.PLL3M = 1;
 800105c:	2201      	movs	r2, #1
 800105e:	2308      	movs	r3, #8
        PeriphClkInitStruct.PLL3.PLL3R = 5;
 8001060:	911c      	str	r1, [sp, #112]	@ 0x70
        PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001062:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8001066:	2202      	movs	r2, #2
 8001068:	2302      	movs	r3, #2
 800106a:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	f004 f8e3 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	2800      	cmp	r0, #0
 8001074:	f040 80d4 	bne.w	8001220 <HAL_LTDC_MspInit+0x1f8>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001078:	4b6c      	ldr	r3, [pc, #432]	@ (800122c <HAL_LTDC_MspInit+0x204>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800107a:	2060      	movs	r0, #96	@ 0x60
 800107c:	2102      	movs	r1, #2
 800107e:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001080:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001084:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001086:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001090:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001094:	f002 0208 	and.w	r2, r2, #8
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010a0:	f042 0210 	orr.w	r2, r2, #16
 80010a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010ac:	f002 0210 	and.w	r2, r2, #16
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010c4:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80010c8:	9202      	str	r2, [sp, #8]
 80010ca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010dc:	f002 0220 	and.w	r2, r2, #32
 80010e0:	9203      	str	r2, [sp, #12]
 80010e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010e8:	f042 0201 	orr.w	r2, r2, #1
 80010ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80010f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010f4:	f002 0201 	and.w	r2, r2, #1
 80010f8:	9204      	str	r2, [sp, #16]
 80010fa:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001100:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001104:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001108:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800110c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001110:	9205      	str	r2, [sp, #20]
 8001112:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001114:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800111c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001120:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001124:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001128:	9206      	str	r2, [sp, #24]
 800112a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001130:	f042 0208 	orr.w	r2, r2, #8
 8001134:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113c:	960c      	str	r6, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001142:	e9cd 0108 	strd	r0, r1, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001148:	a908      	add	r1, sp, #32
 800114a:	4839      	ldr	r0, [pc, #228]	@ (8001230 <HAL_LTDC_MspInit+0x208>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800114c:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800114e:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f002 fca1 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001156:	f240 62f7 	movw	r2, #1783	@ 0x6f7
 800115a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800115c:	a908      	add	r1, sp, #32
 800115e:	4835      	ldr	r0, [pc, #212]	@ (8001234 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001160:	960c      	str	r6, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8001162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001166:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800116a:	f002 fc95 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800116e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001172:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001174:	a908      	add	r1, sp, #32
 8001176:	4830      	ldr	r0, [pc, #192]	@ (8001238 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001178:	960c      	str	r6, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800117a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800117e:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001182:	f002 fc89 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001186:	2204      	movs	r2, #4
 8001188:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	a908      	add	r1, sp, #32
 800118c:	482b      	ldr	r0, [pc, #172]	@ (800123c <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118e:	960c      	str	r6, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001194:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f002 fc7e 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800119c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80011a0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011a2:	a908      	add	r1, sp, #32
 80011a4:	4826      	ldr	r0, [pc, #152]	@ (8001240 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a6:	960c      	str	r6, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80011ac:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011b0:	f002 fc72 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12|GPIO_PIN_13
 80011b4:	f247 02c0 	movw	r2, #28864	@ 0x70c0
 80011b8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	a908      	add	r1, sp, #32
 80011bc:	4821      	ldr	r0, [pc, #132]	@ (8001244 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011be:	960c      	str	r6, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12|GPIO_PIN_13
 80011c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80011c4:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c8:	f002 fc66 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	a908      	add	r1, sp, #32
 80011d4:	4819      	ldr	r0, [pc, #100]	@ (800123c <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80011da:	230d      	movs	r3, #13
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011dc:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80011e0:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f002 fc59 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e6:	2302      	movs	r3, #2
 80011e8:	2240      	movs	r2, #64	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	a908      	add	r1, sp, #32
 80011ec:	4816      	ldr	r0, [pc, #88]	@ (8001248 <HAL_LTDC_MspInit+0x220>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ee:	960c      	str	r6, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80011f4:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f002 fc4e 	bl	8003a98 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2105      	movs	r1, #5
 8001200:	2058      	movs	r0, #88	@ 0x58
 8001202:	f001 fb21 	bl	8002848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f001 fb5a 	bl	80028c0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2105      	movs	r1, #5
 8001210:	2059      	movs	r0, #89	@ 0x59
 8001212:	f001 fb19 	bl	8002848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001216:	2059      	movs	r0, #89	@ 0x59
 8001218:	f001 fb52 	bl	80028c0 <HAL_NVIC_EnableIRQ>
}
 800121c:	b03e      	add	sp, #248	@ 0xf8
 800121e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001220:	f000 f930 	bl	8001484 <Error_Handler>
 8001224:	e728      	b.n	8001078 <HAL_LTDC_MspInit+0x50>
 8001226:	bf00      	nop
 8001228:	50001000 	.word	0x50001000
 800122c:	58024400 	.word	0x58024400
 8001230:	58021000 	.word	0x58021000
 8001234:	58022000 	.word	0x58022000
 8001238:	58021400 	.word	0x58021400
 800123c:	58020000 	.word	0x58020000
 8001240:	58021c00 	.word	0x58021c00
 8001244:	58021800 	.word	0x58021800
 8001248:	58020c00 	.word	0x58020c00

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b530      	push	{r4, r5, lr}
 800124e:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001250:	224c      	movs	r2, #76	@ 0x4c
 8001252:	2100      	movs	r1, #0
 8001254:	a80c      	add	r0, sp, #48	@ 0x30
 8001256:	f022 ff23 	bl	80240a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125a:	2220      	movs	r2, #32
 800125c:	2100      	movs	r1, #0
 800125e:	a804      	add	r0, sp, #16
 8001260:	f022 ff1e 	bl	80240a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001264:	2002      	movs	r0, #2
 8001266:	f003 f899 	bl	800439c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126a:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <SystemClock_Config+0x114>)
 800126c:	2100      	movs	r1, #0
 800126e:	4a3d      	ldr	r2, [pc, #244]	@ (8001364 <SystemClock_Config+0x118>)
 8001270:	9101      	str	r1, [sp, #4]
 8001272:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001274:	f021 0101 	bic.w	r1, r1, #1
 8001278:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800127a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	6993      	ldr	r3, [r2, #24]
 8001284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	6993      	ldr	r3, [r2, #24]
 800128c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001294:	6993      	ldr	r3, [r2, #24]
 8001296:	0499      	lsls	r1, r3, #18
 8001298:	d5fc      	bpl.n	8001294 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <SystemClock_Config+0x11c>)
 800129c:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 80012a0:	f041 0102 	orr.w	r1, r1, #2
 80012a4:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012a8:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012b6:	9103      	str	r1, [sp, #12]
 80012b8:	6991      	ldr	r1, [r2, #24]
 80012ba:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <SystemClock_Config+0x114>)
 80012bc:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80012c0:	6191      	str	r1, [r2, #24]
 80012c2:	6992      	ldr	r2, [r2, #24]
 80012c4:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80012c8:	9203      	str	r2, [sp, #12]
 80012ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012cc:	4a25      	ldr	r2, [pc, #148]	@ (8001364 <SystemClock_Config+0x118>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ce:	f041 0101 	orr.w	r1, r1, #1
 80012d2:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80012d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012de:	6993      	ldr	r3, [r2, #24]
 80012e0:	049b      	lsls	r3, r3, #18
 80012e2:	d5fc      	bpl.n	80012de <SystemClock_Config+0x92>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012e4:	f003 f852 	bl	800438c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80012e8:	2405      	movs	r4, #5
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012ea:	f001 fa95 	bl	8002818 <HAL_GetREVID>
 80012ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <SystemClock_Config+0x11c>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80012f0:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f4:	2101      	movs	r1, #1
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012f6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	a80c      	add	r0, sp, #48	@ 0x30
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012fa:	f023 0318 	bic.w	r3, r3, #24
 80012fe:	6713      	str	r3, [r2, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001302:	2205      	movs	r2, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001304:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001306:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001308:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800130a:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800130c:	22c0      	movs	r2, #192	@ 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800130e:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001312:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001316:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001318:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131a:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 192;
 800131c:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800131e:	931e      	str	r3, [sp, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001320:	951a      	str	r5, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001322:	e9cd 431c 	strd	r4, r3, [sp, #112]	@ 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	f003 f929 	bl	800457c <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	b108      	cbz	r0, 8001332 <SystemClock_Config+0xe6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <SystemClock_Config+0xe4>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001336:	2340      	movs	r3, #64	@ 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001338:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800133e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001340:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001342:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001346:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001350:	f003 fc94 	bl	8004c7c <HAL_RCC_ClockConfig>
 8001354:	b108      	cbz	r0, 800135a <SystemClock_Config+0x10e>
 8001356:	b672      	cpsid	i
  while (1)
 8001358:	e7fe      	b.n	8001358 <SystemClock_Config+0x10c>
}
 800135a:	b021      	add	sp, #132	@ 0x84
 800135c:	bd30      	pop	{r4, r5, pc}
 800135e:	bf00      	nop
 8001360:	58000400 	.word	0x58000400
 8001364:	58024800 	.word	0x58024800
 8001368:	58024400 	.word	0x58024400

0800136c <BSP_Init>:
{
 800136c:	b508      	push	{r3, lr}
	MX_GPIO_Init();
 800136e:	f7ff fd2f 	bl	8000dd0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001372:	f7ff fba7 	bl	8000ac4 <MX_DMA_Init>
	MX_MDMA_Init();
 8001376:	f000 f887 	bl	8001488 <MX_MDMA_Init>
	MX_RTC_Init();
 800137a:	f000 f985 	bl	8001688 <MX_RTC_Init>
	MX_USART1_UART_Init();
 800137e:	f001 f89b 	bl	80024b8 <MX_USART1_UART_Init>
	MX_FMC_Init();
 8001382:	f7ff fc11 	bl	8000ba8 <MX_FMC_Init>
	MX_LTDC_Init();
 8001386:	f7ff fdef 	bl	8000f68 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 800138a:	f000 f8cb 	bl	8001524 <MX_QUADSPI_Init>
	MX_SDMMC1_SD_Init();
 800138e:	f000 f9c3 	bl	8001718 <MX_SDMMC1_SD_Init>
	MX_DMA2D_Init();
 8001392:	f7ff fbbb 	bl	8000b0c <MX_DMA2D_Init>
	MX_FATFS_Init();
 8001396:	f008 fa6b 	bl	8009870 <MX_FATFS_Init>
	MX_CRC_Init();
 800139a:	f7ff fb65 	bl	8000a68 <MX_CRC_Init>
}
 800139e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_RGB_Init();
 80013a2:	f7ff bda1 	b.w	8000ee8 <LCD_RGB_Init>
 80013a6:	bf00      	nop

080013a8 <main>:
{
 80013a8:	b500      	push	{lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013aa:	2300      	movs	r3, #0
{
 80013ac:	b085      	sub	sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013ae:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013b0:	e9cd 3300 	strd	r3, r3, [sp]
 80013b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  HAL_MPU_Disable();
 80013b8:	f001 faa6 	bl	8002908 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80013bc:	4a2f      	ldr	r2, [pc, #188]	@ (800147c <main+0xd4>)
 80013be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  MPU_InitStruct.BaseAddress = SDRAM_BANK_ADDR;
 80013c2:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013c6:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013c8:	f8ad 4000 	strh.w	r4, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80013cc:	9303      	str	r3, [sp, #12]
 80013ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013d2:	f001 fab7 	bl	8002944 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013d6:	2004      	movs	r0, #4
 80013d8:	f001 faa4 	bl	8002924 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013dc:	4a28      	ldr	r2, [pc, #160]	@ (8001480 <main+0xd8>)
 80013de:	6953      	ldr	r3, [r2, #20]
 80013e0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80013e4:	d111      	bne.n	800140a <main+0x62>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013ea:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013ee:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80013f6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013fa:	6953      	ldr	r3, [r2, #20]
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001402:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001406:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800140a:	481d      	ldr	r0, [pc, #116]	@ (8001480 <main+0xd8>)
 800140c:	6943      	ldr	r3, [r0, #20]
 800140e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8001412:	d126      	bne.n	8001462 <main+0xba>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001414:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001418:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800141c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001420:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001424:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001428:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 800142c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001430:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001434:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001436:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800143a:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800143c:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	d1f8      	bne.n	8001436 <main+0x8e>
    } while(sets-- != 0U);
 8001444:	f1ac 0c20 	sub.w	ip, ip, #32
 8001448:	f11c 0f20 	cmn.w	ip, #32
 800144c:	d1f0      	bne.n	8001430 <main+0x88>
 800144e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001452:	6943      	ldr	r3, [r0, #20]
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	6143      	str	r3, [r0, #20]
 800145a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800145e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001462:	f001 f985 	bl	8002770 <HAL_Init>
  SystemClock_Config();
 8001466:	f7ff fef1 	bl	800124c <SystemClock_Config>
  BSP_Init();
 800146a:	f7ff ff7f 	bl	800136c <BSP_Init>
  osKernelInitialize();
 800146e:	f008 fb9d 	bl	8009bac <osKernelInitialize>
  MX_FREERTOS_Init();
 8001472:	f7ff fc99 	bl	8000da8 <MX_FREERTOS_Init>
  osKernelStart();
 8001476:	f008 fbbd 	bl	8009bf4 <osKernelStart>
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0xd2>
 800147c:	03000018 	.word	0x03000018
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
  while (1)
 8001486:	e7fe      	b.n	8001486 <Error_Handler+0x2>

08001488 <MX_MDMA_Init>:
  */
void MX_MDMA_Init(void)
{

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001488:	4a23      	ldr	r2, [pc, #140]	@ (8001518 <MX_MDMA_Init+0x90>)

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800148a:	2300      	movs	r3, #0
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 800148c:	4823      	ldr	r0, [pc, #140]	@ (800151c <MX_MDMA_Init+0x94>)
  __HAL_RCC_MDMA_CLK_ENABLE();
 800148e:	f8d2 10d4 	ldr.w	r1, [r2, #212]	@ 0xd4
 8001492:	f041 0101 	orr.w	r1, r1, #1
{
 8001496:	b530      	push	{r4, r5, lr}
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8001498:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800149c:	6103      	str	r3, [r0, #16]
{
 800149e:	b083      	sub	sp, #12
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 80014a0:	4c1f      	ldr	r4, [pc, #124]	@ (8001520 <MX_MDMA_Init+0x98>)
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014a2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80014a6:	f8c2 10d4 	str.w	r1, [r2, #212]	@ 0xd4
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 80014aa:	211d      	movs	r1, #29
  __HAL_RCC_MDMA_CLK_ENABLE();
 80014ac:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 80014b0:	6004      	str	r4, [r0, #0]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80014b2:	2402      	movs	r4, #2
  __HAL_RCC_MDMA_CLK_ENABLE();
 80014b4:	f002 0201 	and.w	r2, r2, #1
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 80014b8:	6041      	str	r1, [r0, #4]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014ba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80014be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  __HAL_RCC_MDMA_CLK_ENABLE();
 80014c0:	9201      	str	r2, [sp, #4]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80014c2:	2208      	movs	r2, #8
  __HAL_RCC_MDMA_CLK_ENABLE();
 80014c4:	9d01      	ldr	r5, [sp, #4]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80014c6:	6303      	str	r3, [r0, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80014c8:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 80014cc:	2201      	movs	r2, #1
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 80014ce:	e9c0 330d 	strd	r3, r3, [r0, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 80014d2:	e9c0 1209 	strd	r1, r2, [r0, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_end_data_0) != HAL_OK)
 80014d6:	f002 fdf5 	bl	80040c4 <HAL_MDMA_Init>
 80014da:	b980      	cbnz	r0, 80014fe <MX_MDMA_Init+0x76>
  {
    Error_Handler();
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 80014dc:	2200      	movs	r2, #0
 80014de:	480f      	ldr	r0, [pc, #60]	@ (800151c <MX_MDMA_Init+0x94>)
 80014e0:	4611      	mov	r1, r2
 80014e2:	f002 fe69 	bl	80041b8 <HAL_MDMA_ConfigPostRequestMask>
 80014e6:	b998      	cbnz	r0, 8001510 <MX_MDMA_Init+0x88>
    Error_Handler();
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80014e8:	207a      	movs	r0, #122	@ 0x7a
 80014ea:	2200      	movs	r2, #0
 80014ec:	2105      	movs	r1, #5
 80014ee:	f001 f9ab 	bl	8002848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80014f2:	207a      	movs	r0, #122	@ 0x7a

}
 80014f4:	b003      	add	sp, #12
 80014f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80014fa:	f001 b9e1 	b.w	80028c0 <HAL_NVIC_EnableIRQ>
    Error_Handler();
 80014fe:	f7ff ffc1 	bl	8001484 <Error_Handler>
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8001502:	2200      	movs	r2, #0
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_MDMA_Init+0x94>)
 8001506:	4611      	mov	r1, r2
 8001508:	f002 fe56 	bl	80041b8 <HAL_MDMA_ConfigPostRequestMask>
 800150c:	2800      	cmp	r0, #0
 800150e:	d0eb      	beq.n	80014e8 <MX_MDMA_Init+0x60>
    Error_Handler();
 8001510:	f7ff ffb8 	bl	8001484 <Error_Handler>
 8001514:	e7e8      	b.n	80014e8 <MX_MDMA_Init+0x60>
 8001516:	bf00      	nop
 8001518:	58024400 	.word	0x58024400
 800151c:	24000638 	.word	0x24000638
 8001520:	52000040 	.word	0x52000040

08001524 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001524:	b510      	push	{r4, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001526:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.ClockPrescaler = 1;
 8001528:	2201      	movs	r2, #1
  hqspi.Instance = QUADSPI;
 800152a:	4c0c      	ldr	r4, [pc, #48]	@ (800155c <MX_QUADSPI_Init+0x38>)
  hqspi.Init.ClockPrescaler = 1;
 800152c:	2120      	movs	r1, #32
 800152e:	2300      	movs	r3, #0
 8001530:	6182      	str	r2, [r0, #24]
 8001532:	6081      	str	r1, [r0, #8]
 8001534:	2116      	movs	r1, #22
 8001536:	6143      	str	r3, [r0, #20]
 8001538:	e9c0 4200 	strd	r4, r2, [r0]
 800153c:	2410      	movs	r4, #16
 800153e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8001542:	e9c0 4103 	strd	r4, r1, [r0, #12]
  hqspi.Init.FlashSize = 22;
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001546:	f002 ff4d 	bl	80043e4 <HAL_QSPI_Init>
 800154a:	b900      	cbnz	r0, 800154e <MX_QUADSPI_Init+0x2a>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800154c:	bd10      	pop	{r4, pc}
 800154e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001552:	f7ff bf97 	b.w	8001484 <Error_Handler>
 8001556:	bf00      	nop
 8001558:	240006a8 	.word	0x240006a8
 800155c:	52005000 	.word	0x52005000

08001560 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001560:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001564:	b0ba      	sub	sp, #232	@ 0xe8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	2100      	movs	r1, #0
{
 8001568:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156a:	22c0      	movs	r2, #192	@ 0xc0
 800156c:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	9108      	str	r1, [sp, #32]
 8001570:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001574:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f022 fd92 	bl	80240a0 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800157c:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <HAL_QSPI_MspInit+0x114>)
 800157e:	6822      	ldr	r2, [r4, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d002      	beq.n	800158a <HAL_QSPI_MspInit+0x2a>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001584:	b03a      	add	sp, #232	@ 0xe8
 8001586:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800158a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800158e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001590:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001592:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001596:	f003 fe4f 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	2800      	cmp	r0, #0
 800159c:	d166      	bne.n	800166c <HAL_QSPI_MspInit+0x10c>
    __HAL_RCC_QSPI_CLK_ENABLE();
 800159e:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <HAL_QSPI_MspInit+0x118>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a0:	2400      	movs	r4, #0
 80015a2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015a4:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015aa:	f04f 0804 	mov.w	r8, #4
 80015ae:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	a904      	add	r1, sp, #16
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b8:	4830      	ldr	r0, [pc, #192]	@ (800167c <HAL_QSPI_MspInit+0x11c>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015ba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80015be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80015c2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80015c6:	9200      	str	r2, [sp, #0]
 80015c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015ce:	f042 0210 	orr.w	r2, r2, #16
 80015d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80015d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015da:	f002 0210 	and.w	r2, r2, #16
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015e6:	f042 0202 	orr.w	r2, r2, #2
 80015ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80015ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015f2:	f002 0202 	and.w	r2, r2, #2
 80015f6:	9202      	str	r2, [sp, #8]
 80015f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015fe:	f042 0208 	orr.w	r2, r2, #8
 8001602:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800160a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001614:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001618:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161c:	f002 fa3c 	bl	8003a98 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	a904      	add	r1, sp, #16
 8001622:	4817      	ldr	r0, [pc, #92]	@ (8001680 <HAL_QSPI_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001624:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001626:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800162a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f002 fa33 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001632:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001636:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	a904      	add	r1, sp, #16
 800163a:	4812      	ldr	r0, [pc, #72]	@ (8001684 <HAL_QSPI_MspInit+0x124>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163c:	f04f 0840 	mov.w	r8, #64	@ 0x40
 8001640:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001644:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001646:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800164a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164e:	f002 fa23 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001652:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	a904      	add	r1, sp, #16
 8001656:	480a      	ldr	r0, [pc, #40]	@ (8001680 <HAL_QSPI_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001658:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800165e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f002 fa19 	bl	8003a98 <HAL_GPIO_Init>
}
 8001666:	b03a      	add	sp, #232	@ 0xe8
 8001668:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 800166c:	f7ff ff0a 	bl	8001484 <Error_Handler>
 8001670:	e795      	b.n	800159e <HAL_QSPI_MspInit+0x3e>
 8001672:	bf00      	nop
 8001674:	52005000 	.word	0x52005000
 8001678:	58024400 	.word	0x58024400
 800167c:	58021000 	.word	0x58021000
 8001680:	58020400 	.word	0x58020400
 8001684:	58020c00 	.word	0x58020c00

08001688 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001688:	b510      	push	{r4, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800168a:	480a      	ldr	r0, [pc, #40]	@ (80016b4 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800168c:	2300      	movs	r3, #0
  hrtc.Instance = RTC;
 800168e:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <MX_RTC_Init+0x30>)
  hrtc.Init.AsynchPrediv = 127;
 8001690:	217f      	movs	r1, #127	@ 0x7f
  hrtc.Init.SynchPrediv = 255;
 8001692:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001694:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001696:	61c3      	str	r3, [r0, #28]
  hrtc.Instance = RTC;
 8001698:	e9c0 4300 	strd	r4, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800169c:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016a0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016a4:	f005 f910 	bl	80068c8 <HAL_RTC_Init>
 80016a8:	b900      	cbnz	r0, 80016ac <MX_RTC_Init+0x24>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016aa:	bd10      	pop	{r4, pc}
 80016ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80016b0:	f7ff bee8 	b.w	8001484 <Error_Handler>
 80016b4:	240006f8 	.word	0x240006f8
 80016b8:	58004000 	.word	0x58004000
 80016bc:	00000000 	.word	0x00000000

080016c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016c0:	b510      	push	{r4, lr}
 80016c2:	b0b0      	sub	sp, #192	@ 0xc0
 80016c4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c6:	22c0      	movs	r2, #192	@ 0xc0
 80016c8:	2100      	movs	r1, #0
 80016ca:	4668      	mov	r0, sp
 80016cc:	f022 fce8 	bl	80240a0 <memset>
  if(rtcHandle->Instance==RTC)
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <HAL_RTC_MspInit+0x50>)
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016d8:	b030      	add	sp, #192	@ 0xc0
 80016da:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016dc:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001708 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e4:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016e6:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ea:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ec:	f003 fda4 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	b930      	cbnz	r0, 8001700 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 80016f2:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <HAL_RTC_MspInit+0x54>)
 80016f4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80016f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016fa:	6713      	str	r3, [r2, #112]	@ 0x70
}
 80016fc:	b030      	add	sp, #192	@ 0xc0
 80016fe:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001700:	f7ff fec0 	bl	8001484 <Error_Handler>
 8001704:	e7f5      	b.n	80016f2 <HAL_RTC_MspInit+0x32>
 8001706:	bf00      	nop
 8001708:	00400000 	.word	0x00400000
 800170c:	00000000 	.word	0x00000000
 8001710:	58004000 	.word	0x58004000
 8001714:	58024400 	.word	0x58024400

08001718 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001718:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800171c:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 800171e:	4c07      	ldr	r4, [pc, #28]	@ (800173c <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001720:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 6;
 8001724:	2106      	movs	r1, #6
  hsd1.Instance = SDMMC1;
 8001726:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800172a:	e9c3 2002 	strd	r2, r0, [r3, #8]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800172e:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd1.Init.ClockDiv = 6;
 8001732:	e9c3 2104 	strd	r2, r1, [r3, #16]
}
 8001736:	4770      	bx	lr
 8001738:	24000720 	.word	0x24000720
 800173c:	52007000 	.word	0x52007000

08001740 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001740:	b5d0      	push	{r4, r6, r7, lr}
 8001742:	b0ba      	sub	sp, #232	@ 0xe8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	2100      	movs	r1, #0
{
 8001746:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	22c0      	movs	r2, #192	@ 0xc0
 800174a:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	9108      	str	r1, [sp, #32]
 800174e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001752:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001756:	f022 fca3 	bl	80240a0 <memset>
  if(sdHandle->Instance==SDMMC1)
 800175a:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <HAL_SD_MspInit+0xf0>)
 800175c:	6822      	ldr	r2, [r4, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_SD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001762:	b03a      	add	sp, #232	@ 0xe8
 8001764:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001766:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800176a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800176e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001772:	f003 fd61 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	2800      	cmp	r0, #0
 8001778:	d156      	bne.n	8001828 <HAL_SD_MspInit+0xe8>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800177a:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <HAL_SD_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800177c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001780:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001782:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001784:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001788:	2601      	movs	r6, #1
 800178a:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800178c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001790:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001794:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001798:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800179c:	9201      	str	r2, [sp, #4]
 800179e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017a4:	f042 0204 	orr.w	r2, r2, #4
 80017a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017b0:	f002 0204 	and.w	r2, r2, #4
 80017b4:	9202      	str	r2, [sp, #8]
 80017b6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017bc:	f042 0208 	orr.w	r2, r2, #8
 80017c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80017c8:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d4:	a904      	add	r1, sp, #16
 80017d6:	4818      	ldr	r0, [pc, #96]	@ (8001838 <HAL_SD_MspInit+0xf8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80017da:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f002 f95b 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	a904      	add	r1, sp, #16
 80017ea:	4813      	ldr	r0, [pc, #76]	@ (8001838 <HAL_SD_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80017ec:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017f2:	2200      	movs	r2, #0
 80017f4:	2303      	movs	r3, #3
 80017f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f002 f94d 	bl	8003a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017fe:	2302      	movs	r3, #2
 8001800:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	a904      	add	r1, sp, #16
 8001804:	480d      	ldr	r0, [pc, #52]	@ (800183c <HAL_SD_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001806:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001808:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800180c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001810:	f002 f942 	bl	8003a98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2107      	movs	r1, #7
 8001818:	2031      	movs	r0, #49	@ 0x31
 800181a:	f001 f815 	bl	8002848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800181e:	2031      	movs	r0, #49	@ 0x31
 8001820:	f001 f84e 	bl	80028c0 <HAL_NVIC_EnableIRQ>
}
 8001824:	b03a      	add	sp, #232	@ 0xe8
 8001826:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001828:	f7ff fe2c 	bl	8001484 <Error_Handler>
 800182c:	e7a5      	b.n	800177a <HAL_SD_MspInit+0x3a>
 800182e:	bf00      	nop
 8001830:	52007000 	.word	0x52007000
 8001834:	58024400 	.word	0x58024400
 8001838:	58020800 	.word	0x58020800
 800183c:	58020c00 	.word	0x58020c00

08001840 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	210f      	movs	r1, #15
 8001846:	f06f 0001 	mvn.w	r0, #1
{
 800184a:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184c:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8001850:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	f044 0402 	orr.w	r4, r4, #2
 8001856:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 800185a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	b003      	add	sp, #12
 8001868:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800186c:	f000 bfec 	b.w	8002848 <HAL_NVIC_SetPriority>
 8001870:	58024400 	.word	0x58024400

08001874 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler>
 8001876:	bf00      	nop

08001878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// 获取当前堆栈指针
	__asm volatile ("MRS %0, msp" : "=r" (HardFault_Stack[0]));
 800187a:	f3ef 8108 	mrs	r1, MSP

	// 获取并保存CFSR, HFSR, DFSR, AFSR的值
	uint32_t CFSR = *((volatile uint32_t *)0xE000ED28);
 800187e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	__asm volatile ("MRS %0, msp" : "=r" (HardFault_Stack[0]));
 8001882:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <HardFault_Handler+0x50>)

	// 示例：打印寄存器名称和值（注意：在实际嵌入式系统中，通常不使用printf）
	// 这里只是为了演示，实际使用时需要替换为适合嵌入式系统的日志记录方式
	// printf is not typically available in a bare-metal or RTOS environment without additional setup.
	// For demonstration purposes, we'll use printf here, but in practice you should use UART or another method.
	printf("HardFault_Handler called!\n");
 8001884:	4811      	ldr	r0, [pc, #68]	@ (80018cc <HardFault_Handler+0x54>)
	uint32_t CFSR = *((volatile uint32_t *)0xE000ED28);
 8001886:	f8d3 7d28 	ldr.w	r7, [r3, #3368]	@ 0xd28
	uint32_t HFSR = *((volatile uint32_t *)0xE000ED2C);
 800188a:	f8d3 6d2c 	ldr.w	r6, [r3, #3372]	@ 0xd2c
	__asm volatile ("MRS %0, msp" : "=r" (HardFault_Stack[0]));
 800188e:	6011      	str	r1, [r2, #0]
	uint32_t DFSR = *((volatile uint32_t *)0xE000ED30);
 8001890:	f8d3 5d30 	ldr.w	r5, [r3, #3376]	@ 0xd30
	uint32_t AFSR = *((volatile uint32_t *)0xE000ED34);
 8001894:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
	printf("HardFault_Handler called!\n");
 8001898:	f022 fb02 	bl	8023ea0 <puts>
	printf("CFSR = 0x%08lX (%s)\n", CFSR, get_fault_register_name(0xE000ED28));
 800189c:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <HardFault_Handler+0x58>)
 800189e:	4639      	mov	r1, r7
 80018a0:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <HardFault_Handler+0x5c>)
 80018a2:	f022 fa95 	bl	8023dd0 <iprintf>
	printf("HFSR = 0x%08lX (%s)\n", HFSR, get_fault_register_name(0xE000ED2C));
 80018a6:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <HardFault_Handler+0x60>)
 80018a8:	4631      	mov	r1, r6
 80018aa:	480c      	ldr	r0, [pc, #48]	@ (80018dc <HardFault_Handler+0x64>)
 80018ac:	f022 fa90 	bl	8023dd0 <iprintf>
	printf("DFSR = 0x%08lX (%s)\n", DFSR, get_fault_register_name(0xE000ED30));
 80018b0:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <HardFault_Handler+0x68>)
 80018b2:	4629      	mov	r1, r5
 80018b4:	480b      	ldr	r0, [pc, #44]	@ (80018e4 <HardFault_Handler+0x6c>)
 80018b6:	f022 fa8b 	bl	8023dd0 <iprintf>
	printf("AFSR = 0x%08lX (%s)\n", AFSR, get_fault_register_name(0xE000ED34));
 80018ba:	4a0b      	ldr	r2, [pc, #44]	@ (80018e8 <HardFault_Handler+0x70>)
 80018bc:	4621      	mov	r1, r4
 80018be:	480b      	ldr	r0, [pc, #44]	@ (80018ec <HardFault_Handler+0x74>)
 80018c0:	f022 fa86 	bl	8023dd0 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <HardFault_Handler+0x4c>
 80018c6:	bf00      	nop
 80018c8:	2400079c 	.word	0x2400079c
 80018cc:	08028708 	.word	0x08028708
 80018d0:	08028724 	.word	0x08028724
 80018d4:	0802872c 	.word	0x0802872c
 80018d8:	08028744 	.word	0x08028744
 80018dc:	0802874c 	.word	0x0802874c
 80018e0:	08028764 	.word	0x08028764
 80018e4:	0802876c 	.word	0x0802876c
 80018e8:	08028784 	.word	0x08028784
 80018ec:	0802878c 	.word	0x0802878c

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("\033[31m失败的内存: 0x%lx\033[0m\n", *((volatile uint32_t *)0xE000ED34));
 80018f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80018f6:	4803      	ldr	r0, [pc, #12]	@ (8001904 <MemManage_Handler+0x14>)
 80018f8:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	@ 0xd34
 80018fc:	f022 fa68 	bl	8023dd0 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x10>
 8001902:	bf00      	nop
 8001904:	080287a4 	.word	0x080287a4

08001908 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <BusFault_Handler>
 800190a:	bf00      	nop

0800190c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler>
 800190e:	bf00      	nop

08001910 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001916:	f000 ff5b 	bl	80027d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800191a:	f00a f987 	bl	800bc2c <xTaskGetSchedulerState>
 800191e:	2801      	cmp	r0, #1
 8001920:	d100      	bne.n	8001924 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001922:	bd08      	pop	{r3, pc}
 8001924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8001928:	f00a bd34 	b.w	800c394 <xPortSysTickHandler>

0800192c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800192c:	4801      	ldr	r0, [pc, #4]	@ (8001934 <DMA1_Stream0_IRQHandler+0x8>)
 800192e:	f001 bc1d 	b.w	800316c <HAL_DMA_IRQHandler>
 8001932:	bf00      	nop
 8001934:	24000938 	.word	0x24000938

08001938 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001938:	4801      	ldr	r0, [pc, #4]	@ (8001940 <DMA1_Stream1_IRQHandler+0x8>)
 800193a:	f001 bc17 	b.w	800316c <HAL_DMA_IRQHandler>
 800193e:	bf00      	nop
 8001940:	240008c0 	.word	0x240008c0

08001944 <FMC_IRQHandler>:
void FMC_IRQHandler(void)
{
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001944:	4801      	ldr	r0, [pc, #4]	@ (800194c <FMC_IRQHandler+0x8>)
 8001946:	f005 bf01 	b.w	800774c <HAL_SDRAM_IRQHandler>
 800194a:	bf00      	nop
 800194c:	24000540 	.word	0x24000540

08001950 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001950:	4801      	ldr	r0, [pc, #4]	@ (8001958 <SDMMC1_IRQHandler+0x8>)
 8001952:	f005 bd91 	b.w	8007478 <HAL_SD_IRQHandler>
 8001956:	bf00      	nop
 8001958:	24000720 	.word	0x24000720

0800195c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800195c:	4801      	ldr	r0, [pc, #4]	@ (8001964 <LTDC_IRQHandler+0x8>)
 800195e:	f002 ba59 	b.w	8003e14 <HAL_LTDC_IRQHandler>
 8001962:	bf00      	nop
 8001964:	24000590 	.word	0x24000590

08001968 <LTDC_ER_IRQHandler>:
}

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
 8001968:	4801      	ldr	r0, [pc, #4]	@ (8001970 <LTDC_ER_IRQHandler+0x8>)
 800196a:	f002 ba53 	b.w	8003e14 <HAL_LTDC_IRQHandler>
 800196e:	bf00      	nop
 8001970:	24000590 	.word	0x24000590

08001974 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001974:	4801      	ldr	r0, [pc, #4]	@ (800197c <DMA2D_IRQHandler+0x8>)
 8001976:	f001 bf91 	b.w	800389c <HAL_DMA2D_IRQHandler>
 800197a:	bf00      	nop
 800197c:	240004c0 	.word	0x240004c0

08001980 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_end_data_0);
 8001980:	4801      	ldr	r0, [pc, #4]	@ (8001988 <MDMA_IRQHandler+0x8>)
 8001982:	f002 bc45 	b.w	8004210 <HAL_MDMA_IRQHandler>
 8001986:	bf00      	nop
 8001988:	24000638 	.word	0x24000638

0800198c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800198c:	2001      	movs	r0, #1
 800198e:	4770      	bx	lr

08001990 <_kill>:

int _kill(int pid, int sig)
{
 8001990:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001992:	f022 fc2b 	bl	80241ec <__errno>
 8001996:	2216      	movs	r2, #22
 8001998:	4603      	mov	r3, r0
  return -1;
}
 800199a:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bd08      	pop	{r3, pc}
 80019a2:	bf00      	nop

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80019a6:	f022 fc21 	bl	80241ec <__errno>
 80019aa:	2316      	movs	r3, #22
 80019ac:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80019ae:	e7fe      	b.n	80019ae <_exit+0xa>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	1e16      	subs	r6, r2, #0
 80019b4:	dd07      	ble.n	80019c6 <_read+0x16>
 80019b6:	460c      	mov	r4, r1
 80019b8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80019ba:	f000 fe5d 	bl	8002678 <__io_getchar>
 80019be:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	42a5      	cmp	r5, r4
 80019c4:	d1f9      	bne.n	80019ba <_read+0xa>
  }

  return len;
}
 80019c6:	4630      	mov	r0, r6
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
 80019ca:	bf00      	nop

080019cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	1e16      	subs	r6, r2, #0
 80019d0:	dd07      	ble.n	80019e2 <_write+0x16>
 80019d2:	460c      	mov	r4, r1
 80019d4:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80019d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019da:	f000 fe3d 	bl	8002658 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	42ac      	cmp	r4, r5
 80019e0:	d1f9      	bne.n	80019d6 <_write+0xa>
  }
  return len;
}
 80019e2:	4630      	mov	r0, r6
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
 80019e6:	bf00      	nop

080019e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80019f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80019f4:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80019f6:	604b      	str	r3, [r1, #4]
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop

080019fc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80019fc:	2001      	movs	r0, #1
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a00:	2000      	movs	r0, #0
 8001a02:	4770      	bx	lr

08001a04 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <_sbrk+0x38>)
{
 8001a06:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001a0a:	6808      	ldr	r0, [r1, #0]
{
 8001a0c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0e:	4c0d      	ldr	r4, [pc, #52]	@ (8001a44 <_sbrk+0x40>)
 8001a10:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001a12:	b120      	cbz	r0, 8001a1e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a14:	4403      	add	r3, r0
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d807      	bhi.n	8001a2a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a1a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001a1c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a1e:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <_sbrk+0x44>)
 8001a20:	4620      	mov	r0, r4
 8001a22:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001a24:	4403      	add	r3, r0
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d9f7      	bls.n	8001a1a <_sbrk+0x16>
    errno = ENOMEM;
 8001a2a:	f022 fbdf 	bl	80241ec <__errno>
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4603      	mov	r3, r0
    return (void *)-1;
 8001a32:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2400089c 	.word	0x2400089c
 8001a40:	24080000 	.word	0x24080000
 8001a44:	00001000 	.word	0x00001000
 8001a48:	2400b7c0 	.word	0x2400b7c0

08001a4c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a4c:	4927      	ldr	r1, [pc, #156]	@ (8001aec <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a4e:	4a28      	ldr	r2, [pc, #160]	@ (8001af0 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a50:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001a58:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	d805      	bhi.n	8001a74 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f023 030f 	bic.w	r3, r3, #15
 8001a6e:	f043 0307 	orr.w	r3, r3, #7
 8001a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a76:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a78:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8001a7a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a7c:	481c      	ldr	r0, [pc, #112]	@ (8001af0 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8001a7e:	f041 0101 	orr.w	r1, r1, #1
 8001a82:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a84:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a8c:	6803      	ldr	r3, [r0, #0]
 8001a8e:	071b      	lsls	r3, r3, #28
 8001a90:	d505      	bpl.n	8001a9e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a92:	6803      	ldr	r3, [r0, #0]
 8001a94:	f023 030f 	bic.w	r3, r3, #15
 8001a98:	f043 0307 	orr.w	r3, r3, #7
 8001a9c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <SystemInit+0xa8>)
 8001aa0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aa2:	4916      	ldr	r1, [pc, #88]	@ (8001afc <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8001aa4:	4c16      	ldr	r4, [pc, #88]	@ (8001b00 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8001aa6:	4817      	ldr	r0, [pc, #92]	@ (8001b04 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001aa8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001aaa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001aac:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001aae:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001ab0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001ab2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ab6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aba:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001abe:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ac0:	4c11      	ldr	r4, [pc, #68]	@ (8001b08 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001ac2:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ac6:	4911      	ldr	r1, [pc, #68]	@ (8001b0c <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001ac8:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001aca:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	4019      	ands	r1, r3
 8001ad0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8001ad4:	d203      	bcs.n	8001ade <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <SystemInit+0xc4>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <SystemInit+0xc8>)
 8001ae0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	52002000 	.word	0x52002000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001afc:	01010280 	.word	0x01010280
 8001b00:	02020200 	.word	0x02020200
 8001b04:	01ff0000 	.word	0x01ff0000
 8001b08:	5c001000 	.word	0x5c001000
 8001b0c:	ffff0000 	.word	0xffff0000
 8001b10:	51008000 	.word	0x51008000
 8001b14:	52004000 	.word	0x52004000

08001b18 <PanelRecognition>:
*				 因此可以根据这两个引脚的电平状态进行识别，此段代码只对旧版的7寸屏有用，
*				 其它尺寸的屏幕无需理会
************************************************************************************************************************************/

void	PanelRecognition (void)
{
 8001b18:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	
	Touch_INT_CLK_ENABLE;	//初始化IO口时钟
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <PanelRecognition+0x8c>)
{
 8001b1c:	b089      	sub	sp, #36	@ 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	2200      	movs	r2, #0
	Touch_RST_CLK_ENABLE;		

		
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      		//	输入模式
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;		 			//	下拉输入
 8001b20:	2102      	movs	r1, #2
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001b22:	2408      	movs	r4, #8
	
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);			
 8001b24:	4820      	ldr	r0, [pc, #128]	@ (8001ba8 <PanelRecognition+0x90>)

	GPIO_InitStruct.Pin  = Touch_RST_PIN; 					//	RST
 8001b26:	2510      	movs	r5, #16
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001b2c:	e9cd 2206 	strd	r2, r2, [sp, #24]
	Touch_INT_CLK_ENABLE;	//初始化IO口时钟
 8001b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b40:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	9a01      	ldr	r2, [sp, #4]
	Touch_RST_CLK_ENABLE;		
 8001b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;		 			//	下拉输入
 8001b58:	9105      	str	r1, [sp, #20]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);			
 8001b5a:	a903      	add	r1, sp, #12
	Touch_RST_CLK_ENABLE;		
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001b60:	9403      	str	r4, [sp, #12]
	Touch_RST_CLK_ENABLE;		
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);			
 8001b66:	f001 ff97 	bl	8003a98 <HAL_GPIO_Init>
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);					   
 8001b6a:	a903      	add	r1, sp, #12
 8001b6c:	480f      	ldr	r0, [pc, #60]	@ (8001bac <PanelRecognition+0x94>)
	GPIO_InitStruct.Pin  = Touch_RST_PIN; 					//	RST
 8001b6e:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);					   
 8001b70:	f001 ff92 	bl	8003a98 <HAL_GPIO_Init>

	Touch_IIC_Delay(4000);		// 延时
 8001b74:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001b78:	f000 f966 	bl	8001e48 <Touch_IIC_Delay>
	
	//	旧版本的RST和INT引脚并没有连接到核心板，因此可以根据这两个引脚的电平状态进行识别，
	//	新版本的硬件这两个脚做了上拉处理
	if( (HAL_GPIO_ReadPin(Touch_RST_PORT,Touch_RST_PIN) != 1) && (HAL_GPIO_ReadPin(Touch_INT_PORT,Touch_INT_PIN) != 1)  )	
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	480b      	ldr	r0, [pc, #44]	@ (8001bac <PanelRecognition+0x94>)
 8001b80:	f002 f8cc 	bl	8003d1c <HAL_GPIO_ReadPin>
 8001b84:	2801      	cmp	r0, #1
 8001b86:	d101      	bne.n	8001b8c <PanelRecognition+0x74>
		// 在 V1.1 之前的硬件版本，触摸屏的分辨率为1024*600，为了程序上的兼容，这里进行判断处理
		//	该变量标志主要用于判断是否需要软件修改采集到的触摸坐标
		// 此段代码只对旧版的7寸屏有用，其它尺寸的屏幕无需理会
		Modify_Flag	= 1;			
	}
}
 8001b88:	b009      	add	sp, #36	@ 0x24
 8001b8a:	bd30      	pop	{r4, r5, pc}
	if( (HAL_GPIO_ReadPin(Touch_RST_PORT,Touch_RST_PIN) != 1) && (HAL_GPIO_ReadPin(Touch_INT_PORT,Touch_INT_PIN) != 1)  )	
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <PanelRecognition+0x90>)
 8001b90:	f002 f8c4 	bl	8003d1c <HAL_GPIO_ReadPin>
 8001b94:	2801      	cmp	r0, #1
 8001b96:	d0f7      	beq.n	8001b88 <PanelRecognition+0x70>
		Modify_Flag	= 1;			
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <PanelRecognition+0x98>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
}
 8001b9e:	b009      	add	sp, #36	@ 0x24
 8001ba0:	bd30      	pop	{r4, r5, pc}
 8001ba2:	bf00      	nop
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58021800 	.word	0x58021800
 8001bac:	58021c00 	.word	0x58021c00
 8001bb0:	240008a0 	.word	0x240008a0

08001bb4 <Touch_Init>:
*	函数功能: 触摸IC初始化，并读取相应信息发送到串口
*	说    明: 初始化触摸面板
************************************************************************************************************************************/

uint8_t Touch_Init(void)
{
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	b084      	sub	sp, #16
	uint8_t cfgVersion = 0;	// 触摸配置版本

	
	// 识别屏幕的版本，在 RGB070M1-800*480 V1.1以及之后的硬件版本，无需理会此段代码	
	// 此段代码只对旧版的7寸屏有用，其它尺寸的屏幕无需理会
	PanelRecognition();
 8001bb8:	f7ff ffae 	bl	8001b18 <PanelRecognition>

	Touch_IIC_GPIO_Config(); 	// 初始化IIC引脚
 8001bbc:	f000 f8c4 	bl	8001d48 <Touch_IIC_GPIO_Config>
	Touch_INT_Out();	//	将INT引脚配置为输出
 8001bc0:	f000 f95e 	bl	8001e80 <Touch_INT_Out>
	HAL_GPIO_WritePin(Touch_INT_PORT,Touch_INT_PIN,GPIO_PIN_RESET);  // INT输出低电平
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	4855      	ldr	r0, [pc, #340]	@ (8001d20 <Touch_Init+0x16c>)
 8001bca:	f002 f8ad 	bl	8003d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_SET);    // RST输出高	电平
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4854      	ldr	r0, [pc, #336]	@ (8001d24 <Touch_Init+0x170>)
 8001bd4:	f002 f8a8 	bl	8003d28 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(10000);
 8001bd8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001bdc:	f000 f934 	bl	8001e48 <Touch_IIC_Delay>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_RESET); // 拉低复位引脚，此时芯片执行复位
 8001be0:	2200      	movs	r2, #0
 8001be2:	2110      	movs	r1, #16
 8001be4:	484f      	ldr	r0, [pc, #316]	@ (8001d24 <Touch_Init+0x170>)
 8001be6:	f002 f89f 	bl	8003d28 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(150000);			// 延时
 8001bea:	484f      	ldr	r0, [pc, #316]	@ (8001d28 <Touch_Init+0x174>)
 8001bec:	f000 f92c 	bl	8001e48 <Touch_IIC_Delay>
	HAL_GPIO_WritePin(Touch_RST_PORT,Touch_RST_PIN,GPIO_PIN_SET);			// 拉高复位引脚，复位结束
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	484b      	ldr	r0, [pc, #300]	@ (8001d24 <Touch_Init+0x170>)
 8001bf6:	f002 f897 	bl	8003d28 <HAL_GPIO_WritePin>
	Touch_IIC_Delay(350000);			// 延时
 8001bfa:	484c      	ldr	r0, [pc, #304]	@ (8001d2c <Touch_Init+0x178>)
 8001bfc:	f000 f924 	bl	8001e48 <Touch_IIC_Delay>
	Touch_INT_In();						// INT引脚转为浮空输入
 8001c00:	f000 f958 	bl	8001eb4 <Touch_INT_In>
	Touch_IIC_Delay(20000);				// 延时
 8001c04:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001c08:	f000 f91e 	bl	8001e48 <Touch_IIC_Delay>
	Touch_IIC_Start();		// 启动IIC通信
 8001c0c:	f000 f964 	bl	8001ed8 <Touch_IIC_Start>
	Touch_IIC_Start();	// 启动IIC通信
 8001c10:	f000 f962 	bl	8001ed8 <Touch_IIC_Start>
	if( Touch_IIC_WriteByte(GT9XX_IIC_WADDR) == ACK_OK ) //写数据指令
 8001c14:	20ba      	movs	r0, #186	@ 0xba
 8001c16:	f000 fb99 	bl	800234c <Touch_IIC_WriteByte>
 8001c1a:	2801      	cmp	r0, #1
 8001c1c:	d06e      	beq.n	8001cfc <Touch_Init+0x148>
		Touch_IIC_Start(); //重新启动IIC通讯
 8001c1e:	f000 f95b 	bl	8001ed8 <Touch_IIC_Start>
		if (Touch_IIC_WriteByte(GT9XX_IIC_RADDR) == ACK_OK)	// 发送读命令
 8001c22:	20bb      	movs	r0, #187	@ 0xbb
 8001c24:	f000 fb92 	bl	800234c <Touch_IIC_WriteByte>
 8001c28:	2801      	cmp	r0, #1
 8001c2a:	d01e      	beq.n	8001c6a <Touch_Init+0xb6>
	Touch_IIC_Stop();	// 停止IIC通信
 8001c2c:	f000 f9b2 	bl	8001f94 <Touch_IIC_Stop>
	Touch_IIC_Start();		// 启动IIC通信
 8001c30:	f000 f952 	bl	8001ed8 <Touch_IIC_Start>
	Touch_IIC_Start();	// 启动IIC通信
 8001c34:	f000 f950 	bl	8001ed8 <Touch_IIC_Start>
	if( Touch_IIC_WriteByte(GT9XX_IIC_WADDR) == ACK_OK ) //写数据指令
 8001c38:	20ba      	movs	r0, #186	@ 0xba
 8001c3a:	f000 fb87 	bl	800234c <Touch_IIC_WriteByte>
 8001c3e:	2801      	cmp	r0, #1
 8001c40:	d053      	beq.n	8001cea <Touch_Init+0x136>
		Touch_IIC_Start(); //重新启动IIC通讯
 8001c42:	f000 f949 	bl	8001ed8 <Touch_IIC_Start>
		if (Touch_IIC_WriteByte(GT9XX_IIC_RADDR) == ACK_OK)	// 发送读命令
 8001c46:	20bb      	movs	r0, #187	@ 0xbb
 8001c48:	f000 fb80 	bl	800234c <Touch_IIC_WriteByte>
 8001c4c:	2801      	cmp	r0, #1
 8001c4e:	d045      	beq.n	8001cdc <Touch_Init+0x128>
	uint8_t cfgVersion = 0;	// 触摸配置版本
 8001c50:	2400      	movs	r4, #0
	Touch_IIC_Stop();	// 停止IIC通信
 8001c52:	f000 f99f 	bl	8001f94 <Touch_IIC_Stop>

	GT9XX_ReadReg (GT9XX_ID_ADDR,11,GT9XX_Info);		// 读触摸屏IC信息
	GT9XX_ReadReg (GT9XX_CFG_ADDR,1,&cfgVersion);		// 读触摸配置版本

	
	if( GT9XX_Info[0] == '9' )	//判断第一个字符是否为 9
 8001c56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001c5a:	2b39      	cmp	r3, #57	@ 0x39
 8001c5c:	d01f      	beq.n	8001c9e <Touch_Init+0xea>
/*-------------------------------------------------------------------------------------------------*/
		return SUCCESS;
	}
	else
	{
		printf("\033[31mTouch Error\033[0m\r\n");	//错误，未检测到触摸屏
 8001c5e:	4834      	ldr	r0, [pc, #208]	@ (8001d30 <Touch_Init+0x17c>)
 8001c60:	f022 f91e 	bl	8023ea0 <puts>
		return ERROR;
 8001c64:	2001      	movs	r0, #1
	}

}
 8001c66:	b004      	add	sp, #16
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
 8001c6a:	ac01      	add	r4, sp, #4
 8001c6c:	f10d 050e 	add.w	r5, sp, #14
 8001c70:	f10d 060f 	add.w	r6, sp, #15
					value[i] = Touch_IIC_ReadByte(1);	// 发送应答信号
 8001c74:	2001      	movs	r0, #1
				if (i == (cnt - 1))
 8001c76:	42ac      	cmp	r4, r5
 8001c78:	d009      	beq.n	8001c8e <Touch_Init+0xda>
					value[i] = Touch_IIC_ReadByte(1);	// 发送应答信号
 8001c7a:	f000 fbbf 	bl	80023fc <Touch_IIC_ReadByte>
 8001c7e:	f804 0b01 	strb.w	r0, [r4], #1
			for(i = 0 ; i < cnt; i++)	// 计数
 8001c82:	42b4      	cmp	r4, r6
 8001c84:	d008      	beq.n	8001c98 <Touch_Init+0xe4>
				if (i == (cnt - 1))
 8001c86:	42ac      	cmp	r4, r5
					value[i] = Touch_IIC_ReadByte(1);	// 发送应答信号
 8001c88:	f04f 0001 	mov.w	r0, #1
				if (i == (cnt - 1))
 8001c8c:	d1f5      	bne.n	8001c7a <Touch_Init+0xc6>
					value[i] = Touch_IIC_ReadByte(0);	// 读到最后一个数据时发送 非应答信号
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 fbb4 	bl	80023fc <Touch_IIC_ReadByte>
 8001c94:	f88d 000e 	strb.w	r0, [sp, #14]
			Touch_IIC_Stop();	// 停止IIC通信
 8001c98:	f000 f97c 	bl	8001f94 <Touch_IIC_Stop>
			status = SUCCESS;
 8001c9c:	e7c6      	b.n	8001c2c <Touch_Init+0x78>
		printf("\033[32mTouch ID: GT%.4s \r\n",GT9XX_Info);	//打印触摸芯片的ID
 8001c9e:	a901      	add	r1, sp, #4
 8001ca0:	4824      	ldr	r0, [pc, #144]	@ (8001d34 <Touch_Init+0x180>)
 8001ca2:	f022 f895 	bl	8023dd0 <iprintf>
		printf("固件版本： 0X%.4x\r\n",(GT9XX_Info[5]<<8) + GT9XX_Info[4]);	// 芯片固件版本
 8001ca6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8001caa:	4823      	ldr	r0, [pc, #140]	@ (8001d38 <Touch_Init+0x184>)
 8001cac:	f022 f890 	bl	8023dd0 <iprintf>
		printf("触摸分辨率：%d * %d\r\n",(GT9XX_Info[7]<<8) + GT9XX_Info[6],(GT9XX_Info[9]<<8) +GT9XX_Info[8]);	// 当前触摸分辨率
 8001cb0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001cb4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8001cb8:	4820      	ldr	r0, [pc, #128]	@ (8001d3c <Touch_Init+0x188>)
 8001cba:	f022 f889 	bl	8023dd0 <iprintf>
		printf("触摸参数配置版本： 0X%.2x \033[0m\r\n",cfgVersion);	// 触摸配置版本
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	481f      	ldr	r0, [pc, #124]	@ (8001d40 <Touch_Init+0x18c>)
 8001cc2:	f022 f885 	bl	8023dd0 <iprintf>
		if( ( (GT9XX_Info[7]<<8) + GT9XX_Info[6] ) == 1024 )		// 判断触摸屏的X轴分辨率是否为1024
 8001cc6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cce:	d022      	beq.n	8001d16 <Touch_Init+0x162>
		else if( ( (GT9XX_Info[7]<<8) + GT9XX_Info[6] ) == 800 )	// 触摸屏的X轴分辨率为800
 8001cd0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001cd4:	d01b      	beq.n	8001d0e <Touch_Init+0x15a>
		return SUCCESS;
 8001cd6:	2000      	movs	r0, #0
}
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
					value[i] = Touch_IIC_ReadByte(0);	// 读到最后一个数据时发送 非应答信号
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f000 fb8d 	bl	80023fc <Touch_IIC_ReadByte>
 8001ce2:	4604      	mov	r4, r0
			Touch_IIC_Stop();	// 停止IIC通信
 8001ce4:	f000 f956 	bl	8001f94 <Touch_IIC_Stop>
			status = SUCCESS;
 8001ce8:	e7b3      	b.n	8001c52 <Touch_Init+0x9e>
		if( Touch_IIC_WriteByte((uint8_t)(addr >> 8)) == ACK_OK ) //写入16位地址
 8001cea:	2080      	movs	r0, #128	@ 0x80
 8001cec:	f000 fb2e 	bl	800234c <Touch_IIC_WriteByte>
 8001cf0:	2801      	cmp	r0, #1
 8001cf2:	d1a6      	bne.n	8001c42 <Touch_Init+0x8e>
			if( Touch_IIC_WriteByte((uint8_t)(addr)) != ACK_OK )
 8001cf4:	2047      	movs	r0, #71	@ 0x47
 8001cf6:	f000 fb29 	bl	800234c <Touch_IIC_WriteByte>
 8001cfa:	e7a2      	b.n	8001c42 <Touch_Init+0x8e>
		if( Touch_IIC_WriteByte((uint8_t)(addr >> 8)) == ACK_OK ) //写入16位地址
 8001cfc:	2081      	movs	r0, #129	@ 0x81
 8001cfe:	f000 fb25 	bl	800234c <Touch_IIC_WriteByte>
 8001d02:	2801      	cmp	r0, #1
 8001d04:	d18b      	bne.n	8001c1e <Touch_Init+0x6a>
			if( Touch_IIC_WriteByte((uint8_t)(addr)) != ACK_OK )
 8001d06:	2040      	movs	r0, #64	@ 0x40
 8001d08:	f000 fb20 	bl	800234c <Touch_IIC_WriteByte>
 8001d0c:	e787      	b.n	8001c1e <Touch_Init+0x6a>
			Modify_Flag	= 0;	// 置0标志位，无需做处理
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <Touch_Init+0x190>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e7df      	b.n	8001cd6 <Touch_Init+0x122>
			Modify_Flag	= 1;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <Touch_Init+0x190>)
 8001d18:	2201      	movs	r2, #1
		return SUCCESS;
 8001d1a:	2000      	movs	r0, #0
			Modify_Flag	= 1;
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e7db      	b.n	8001cd8 <Touch_Init+0x124>
 8001d20:	58021800 	.word	0x58021800
 8001d24:	58021c00 	.word	0x58021c00
 8001d28:	000249f0 	.word	0x000249f0
 8001d2c:	00055730 	.word	0x00055730
 8001d30:	08028858 	.word	0x08028858
 8001d34:	080287d8 	.word	0x080287d8
 8001d38:	080287f4 	.word	0x080287f4
 8001d3c:	08028810 	.word	0x08028810
 8001d40:	0802882c 	.word	0x0802882c
 8001d44:	240008a0 	.word	0x240008a0

08001d48 <Touch_IIC_GPIO_Config>:
*	函数功能: 初始化IIC的GPIO口,推挽输出
*	说    明: 由于IIC通信速度不高，这里的IO口速度配置为2M即可
******************************************************************************************/

void Touch_IIC_GPIO_Config (void)
{
 8001d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	
	Touch_IIC_SCL_CLK_ENABLE;	//初始化IO口时钟
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <Touch_IIC_GPIO_Config+0xf0>)
{
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	2500      	movs	r5, #0
	
	GPIO_InitStruct.Pin 			= Touch_IIC_SCL_PIN;				// SCL引脚
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_OD;			// 开漏输出
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;						// 不带上下拉
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;			// 速度等级 
	HAL_GPIO_Init(Touch_IIC_SCL_PORT, &GPIO_InitStruct);
 8001d52:	4e3a      	ldr	r6, [pc, #232]	@ (8001e3c <Touch_IIC_GPIO_Config+0xf4>)
 8001d54:	a904      	add	r1, sp, #16

	GPIO_InitStruct.Pin 			= Touch_IIC_SDA_PIN;				// SDA引脚
 8001d56:	f44f 7a80 	mov.w	sl, #256	@ 0x100
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(Touch_IIC_SCL_PORT, &GPIO_InitStruct);
 8001d5c:	4630      	mov	r0, r6
	
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;      			// 推挽输出
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 					// 上拉	
	
	GPIO_InitStruct.Pin = Touch_INT_PIN; 							//	INT
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);				
 8001d5e:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 8001e44 <Touch_IIC_GPIO_Config+0xfc>
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 					// 上拉	
 8001d62:	2401      	movs	r4, #1

	GPIO_InitStruct.Pin = Touch_RST_PIN; 							//	RST
 8001d64:	f04f 0810 	mov.w	r8, #16
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);					   
 8001d68:	4f35      	ldr	r7, [pc, #212]	@ (8001e40 <Touch_IIC_GPIO_Config+0xf8>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6a:	e9cd 5506 	strd	r5, r5, [sp, #24]
	Touch_IIC_SCL_CLK_ENABLE;	//初始化IO口时钟
 8001d6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001d7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001d7e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	9a00      	ldr	r2, [sp, #0]
	Touch_IIC_SDA_CLK_ENABLE;
 8001d86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001d92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001d96:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001d9a:	9201      	str	r2, [sp, #4]
 8001d9c:	9a01      	ldr	r2, [sp, #4]
	Touch_INT_CLK_ENABLE;	
 8001d9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001da6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001daa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001dae:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001db2:	9202      	str	r2, [sp, #8]
 8001db4:	9a02      	ldr	r2, [sp, #8]
	Touch_RST_CLK_ENABLE;	
 8001db6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001dba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dbe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	GPIO_InitStruct.Pin 			= Touch_IIC_SCL_PIN;				// SCL引脚
 8001dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	Touch_RST_CLK_ENABLE;	
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	9303      	str	r3, [sp, #12]
 8001dd0:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Pin 			= Touch_IIC_SCL_PIN;				// SCL引脚
 8001dd2:	2311      	movs	r3, #17
 8001dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_GPIO_Init(Touch_IIC_SCL_PORT, &GPIO_InitStruct);
 8001dd8:	f001 fe5e 	bl	8003a98 <HAL_GPIO_Init>
	HAL_GPIO_Init(Touch_IIC_SDA_PORT, &GPIO_InitStruct);		
 8001ddc:	a904      	add	r1, sp, #16
 8001dde:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin 			= Touch_IIC_SDA_PIN;				// SDA引脚
 8001de0:	f8cd a010 	str.w	sl, [sp, #16]
	HAL_GPIO_Init(Touch_IIC_SDA_PORT, &GPIO_InitStruct);		
 8001de4:	f001 fe58 	bl	8003a98 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Touch_INT_PIN; 							//	INT
 8001de8:	2301      	movs	r3, #1
 8001dea:	2208      	movs	r2, #8
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);				
 8001dec:	a904      	add	r1, sp, #16
 8001dee:	4648      	mov	r0, r9
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 					// 上拉	
 8001df0:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pin = Touch_INT_PIN; 							//	INT
 8001df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);				
 8001df6:	f001 fe4f 	bl	8003a98 <HAL_GPIO_Init>
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);					   
 8001dfa:	eb0d 0108 	add.w	r1, sp, r8
 8001dfe:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = Touch_RST_PIN; 							//	RST
 8001e00:	f8cd 8010 	str.w	r8, [sp, #16]
	HAL_GPIO_Init(Touch_RST_PORT, &GPIO_InitStruct);					   
 8001e04:	f001 fe48 	bl	8003a98 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(Touch_IIC_SCL_PORT, Touch_IIC_SCL_PIN, GPIO_PIN_SET);		// SCL输出高电平
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e10:	f001 ff8a 	bl	8003d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_IIC_SDA_PORT, Touch_IIC_SDA_PIN, GPIO_PIN_SET);    // SDA输出高电平
 8001e14:	4622      	mov	r2, r4
 8001e16:	4651      	mov	r1, sl
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f001 ff85 	bl	8003d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_INT_PORT, 	  Touch_INT_PIN,     GPIO_PIN_RESET);  // INT输出低电平
 8001e1e:	462a      	mov	r2, r5
 8001e20:	4648      	mov	r0, r9
 8001e22:	2108      	movs	r1, #8
 8001e24:	f001 ff80 	bl	8003d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Touch_RST_PORT,     Touch_RST_PIN,     GPIO_PIN_SET);    // RST输出高电平
 8001e28:	4622      	mov	r2, r4
 8001e2a:	4641      	mov	r1, r8
 8001e2c:	4638      	mov	r0, r7
 8001e2e:	f001 ff7b 	bl	8003d28 <HAL_GPIO_WritePin>

}
 8001e32:	b00a      	add	sp, #40	@ 0x28
 8001e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58022000 	.word	0x58022000
 8001e40:	58021c00 	.word	0x58021c00
 8001e44:	58021800 	.word	0x58021800

08001e48 <Touch_IIC_Delay>:
******************************************************************************************/

void Touch_IIC_Delay(uint32_t a)
{
	volatile uint16_t i;
	while (a --)				
 8001e48:	b1c0      	cbz	r0, 8001e7c <Touch_IIC_Delay+0x34>
{
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	1e42      	subs	r2, r0, #1
	{
		for (i = 0; i < 8; i++);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f8ad 1006 	strh.w	r1, [sp, #6]
 8001e54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b07      	cmp	r3, #7
 8001e5c:	d80a      	bhi.n	8001e74 <Touch_IIC_Delay+0x2c>
 8001e5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e62:	3301      	adds	r3, #1
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001e6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b07      	cmp	r3, #7
 8001e72:	d9f4      	bls.n	8001e5e <Touch_IIC_Delay+0x16>
	while (a --)				
 8001e74:	3a01      	subs	r2, #1
 8001e76:	d2eb      	bcs.n	8001e50 <Touch_IIC_Delay+0x8>
	}
}
 8001e78:	b002      	add	sp, #8
 8001e7a:	4770      	bx	lr
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <Touch_INT_Out>:
*	函数功能: 配置IIC的INT脚为输出模式
*	说    明: 无
******************************************************************************************/

void Touch_INT_Out(void)
{
 8001e80:	b500      	push	{lr}
 8001e82:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	2300      	movs	r3, #0
	
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;      	// 输出模式
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 			// 上拉	
 8001e86:	2201      	movs	r2, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
	
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);		
 8001e88:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <Touch_INT_Out+0x30>)
 8001e8a:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull  = GPIO_PULLUP;		 			// 上拉	
 8001e8c:	9202      	str	r2, [sp, #8]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001e8e:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8001ea8 <Touch_INT_Out+0x28>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	e9cd 3303 	strd	r3, r3, [sp, #12]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001e96:	ed8d 7b00 	vstr	d7, [sp]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);		
 8001e9a:	f001 fdfd 	bl	8003a98 <HAL_GPIO_Init>
}
 8001e9e:	b007      	add	sp, #28
 8001ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000008 	.word	0x00000008
 8001eac:	00000001 	.word	0x00000001
 8001eb0:	58021800 	.word	0x58021800

08001eb4 <Touch_INT_In>:
*	函数功能: 配置IIC的INT脚为输入模式
*	说    明: 无
******************************************************************************************/

void Touch_INT_In(void)
{
 8001eb4:	b500      	push	{lr}
 8001eb6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	2300      	movs	r3, #0
	
	GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;      		// 输入模式
	GPIO_InitStruct.Pull  = GPIO_NOPULL;		 			// 浮空	
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    	// 速度等级
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001eba:	2208      	movs	r2, #8
	
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);		
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <Touch_INT_In+0x20>)
 8001ebe:	a901      	add	r1, sp, #4
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin   = Touch_INT_PIN ;  				// 初始化 INT 引脚
 8001ec2:	e9cd 2301 	strd	r2, r3, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	e9cd 3303 	strd	r3, r3, [sp, #12]
	HAL_GPIO_Init(Touch_INT_PORT, &GPIO_InitStruct);		
 8001eca:	f001 fde5 	bl	8003a98 <HAL_GPIO_Init>

}
 8001ece:	b007      	add	sp, #28
 8001ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ed4:	58021800 	.word	0x58021800

08001ed8 <Touch_IIC_Start>:
*	函数功能: IIC起始信号
*	说    明: 在SCL处于高电平期间，SDA由高到低跳变为起始信号
******************************************************************************************/

void Touch_IIC_Start(void)
{
 8001ed8:	b530      	push	{r4, r5, lr}
	Touch_IIC_SDA(1);		
 8001eda:	2201      	movs	r2, #1
{
 8001edc:	b083      	sub	sp, #12
	Touch_IIC_SDA(1);		
 8001ede:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee2:	482b      	ldr	r0, [pc, #172]	@ (8001f90 <Touch_IIC_Start+0xb8>)
 8001ee4:	f001 ff20 	bl	8003d28 <HAL_GPIO_WritePin>
	Touch_IIC_SCL(1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001eee:	4828      	ldr	r0, [pc, #160]	@ (8001f90 <Touch_IIC_Start+0xb8>)
 8001ef0:	f001 ff1a 	bl	8003d28 <HAL_GPIO_WritePin>
 8001ef4:	2514      	movs	r5, #20
		for (i = 0; i < 8; i++);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8001efc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b07      	cmp	r3, #7
 8001f04:	d80a      	bhi.n	8001f1c <Touch_IIC_Start+0x44>
 8001f06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001f12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b07      	cmp	r3, #7
 8001f1a:	d9f4      	bls.n	8001f06 <Touch_IIC_Start+0x2e>
	while (a --)				
 8001f1c:	3d01      	subs	r5, #1
 8001f1e:	d1eb      	bne.n	8001ef8 <Touch_IIC_Start+0x20>
	Touch_IIC_Delay(IIC_DelayVaule);
	
	Touch_IIC_SDA(0);
 8001f20:	462a      	mov	r2, r5
 8001f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f26:	481a      	ldr	r0, [pc, #104]	@ (8001f90 <Touch_IIC_Start+0xb8>)
 8001f28:	2414      	movs	r4, #20
 8001f2a:	f001 fefd 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 8001f2e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8001f32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	d80a      	bhi.n	8001f52 <Touch_IIC_Start+0x7a>
 8001f3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001f48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b07      	cmp	r3, #7
 8001f50:	d9f4      	bls.n	8001f3c <Touch_IIC_Start+0x64>
	while (a --)				
 8001f52:	3c01      	subs	r4, #1
 8001f54:	d1eb      	bne.n	8001f2e <Touch_IIC_Start+0x56>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SCL(0);
 8001f56:	4622      	mov	r2, r4
 8001f58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <Touch_IIC_Start+0xb8>)
 8001f5e:	f001 fee3 	bl	8003d28 <HAL_GPIO_WritePin>
 8001f62:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 8001f64:	f8ad 4002 	strh.w	r4, [sp, #2]
 8001f68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d80a      	bhi.n	8001f88 <Touch_IIC_Start+0xb0>
 8001f72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001f7e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	d9f4      	bls.n	8001f72 <Touch_IIC_Start+0x9a>
	while (a --)				
 8001f88:	3a01      	subs	r2, #1
 8001f8a:	d1eb      	bne.n	8001f64 <Touch_IIC_Start+0x8c>
	Touch_IIC_Delay(IIC_DelayVaule);
}
 8001f8c:	b003      	add	sp, #12
 8001f8e:	bd30      	pop	{r4, r5, pc}
 8001f90:	58022000 	.word	0x58022000

08001f94 <Touch_IIC_Stop>:
*	函数功能: IIC停止信号
*	说    明: 在SCL处于高电平期间，SDA由低到高跳变为起始信号
******************************************************************************************/

void Touch_IIC_Stop(void)
{
 8001f94:	b530      	push	{r4, r5, lr}
	Touch_IIC_SCL(0);
 8001f96:	2200      	movs	r2, #0
{
 8001f98:	b083      	sub	sp, #12
	Touch_IIC_SCL(0);
 8001f9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f9e:	4836      	ldr	r0, [pc, #216]	@ (8002078 <Touch_IIC_Stop+0xe4>)
 8001fa0:	f001 fec2 	bl	8003d28 <HAL_GPIO_WritePin>
 8001fa4:	2414      	movs	r4, #20
		for (i = 0; i < 8; i++);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8001fac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b07      	cmp	r3, #7
 8001fb4:	d80a      	bhi.n	8001fcc <Touch_IIC_Stop+0x38>
 8001fb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001fc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9f4      	bls.n	8001fb6 <Touch_IIC_Stop+0x22>
	while (a --)				
 8001fcc:	3c01      	subs	r4, #1
 8001fce:	d1eb      	bne.n	8001fa8 <Touch_IIC_Stop+0x14>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SDA(0);
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fd6:	4828      	ldr	r0, [pc, #160]	@ (8002078 <Touch_IIC_Stop+0xe4>)
 8001fd8:	2514      	movs	r5, #20
 8001fda:	f001 fea5 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 8001fde:	f8ad 4004 	strh.w	r4, [sp, #4]
 8001fe2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d80a      	bhi.n	8002002 <Touch_IIC_Stop+0x6e>
 8001fec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001ff8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b07      	cmp	r3, #7
 8002000:	d9f4      	bls.n	8001fec <Touch_IIC_Stop+0x58>
	while (a --)				
 8002002:	3d01      	subs	r5, #1
 8002004:	d1eb      	bne.n	8001fde <Touch_IIC_Stop+0x4a>
	Touch_IIC_Delay(IIC_DelayVaule);
	
	Touch_IIC_SCL(1);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800200c:	481a      	ldr	r0, [pc, #104]	@ (8002078 <Touch_IIC_Stop+0xe4>)
 800200e:	2414      	movs	r4, #20
 8002010:	f001 fe8a 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 8002014:	f8ad 5002 	strh.w	r5, [sp, #2]
 8002018:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b07      	cmp	r3, #7
 8002020:	d80a      	bhi.n	8002038 <Touch_IIC_Stop+0xa4>
 8002022:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002026:	3301      	adds	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800202e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b07      	cmp	r3, #7
 8002036:	d9f4      	bls.n	8002022 <Touch_IIC_Stop+0x8e>
	while (a --)				
 8002038:	3c01      	subs	r4, #1
 800203a:	d1eb      	bne.n	8002014 <Touch_IIC_Stop+0x80>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SDA(1);
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002042:	480d      	ldr	r0, [pc, #52]	@ (8002078 <Touch_IIC_Stop+0xe4>)
 8002044:	f001 fe70 	bl	8003d28 <HAL_GPIO_WritePin>
 8002048:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 800204a:	f8ad 4000 	strh.w	r4, [sp]
 800204e:	f8bd 3000 	ldrh.w	r3, [sp]
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b07      	cmp	r3, #7
 8002056:	d80a      	bhi.n	800206e <Touch_IIC_Stop+0xda>
 8002058:	f8bd 3000 	ldrh.w	r3, [sp]
 800205c:	3301      	adds	r3, #1
 800205e:	b29b      	uxth	r3, r3
 8002060:	f8ad 3000 	strh.w	r3, [sp]
 8002064:	f8bd 3000 	ldrh.w	r3, [sp]
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b07      	cmp	r3, #7
 800206c:	d9f4      	bls.n	8002058 <Touch_IIC_Stop+0xc4>
	while (a --)				
 800206e:	3a01      	subs	r2, #1
 8002070:	d1eb      	bne.n	800204a <Touch_IIC_Stop+0xb6>
	Touch_IIC_Delay(IIC_DelayVaule);
}
 8002072:	b003      	add	sp, #12
 8002074:	bd30      	pop	{r4, r5, pc}
 8002076:	bf00      	nop
 8002078:	58022000 	.word	0x58022000

0800207c <Touch_IIC_ACK>:
*	函数功能: IIC应答信号
*	说    明: 在SCL为高电平期间，SDA引脚输出为低电平，产生应答信号
******************************************************************************************/

void Touch_IIC_ACK(void)
{
 800207c:	b530      	push	{r4, r5, lr}
	Touch_IIC_SCL(0);
 800207e:	2200      	movs	r2, #0
{
 8002080:	b083      	sub	sp, #12
	Touch_IIC_SCL(0);
 8002082:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002086:	4839      	ldr	r0, [pc, #228]	@ (800216c <Touch_IIC_ACK+0xf0>)
 8002088:	f001 fe4e 	bl	8003d28 <HAL_GPIO_WritePin>
 800208c:	2414      	movs	r4, #20
		for (i = 0; i < 8; i++);
 800208e:	2200      	movs	r2, #0
 8002090:	f8ad 2006 	strh.w	r2, [sp, #6]
 8002094:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b07      	cmp	r3, #7
 800209c:	d80a      	bhi.n	80020b4 <Touch_IIC_ACK+0x38>
 800209e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80020aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	d9f4      	bls.n	800209e <Touch_IIC_ACK+0x22>
	while (a --)				
 80020b4:	3c01      	subs	r4, #1
 80020b6:	d1eb      	bne.n	8002090 <Touch_IIC_ACK+0x14>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SDA(0);
 80020b8:	4622      	mov	r2, r4
 80020ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020be:	482b      	ldr	r0, [pc, #172]	@ (800216c <Touch_IIC_ACK+0xf0>)
 80020c0:	2514      	movs	r5, #20
 80020c2:	f001 fe31 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 80020c6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80020ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b07      	cmp	r3, #7
 80020d2:	d80a      	bhi.n	80020ea <Touch_IIC_ACK+0x6e>
 80020d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80020d8:	3301      	adds	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80020e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d9f4      	bls.n	80020d4 <Touch_IIC_ACK+0x58>
	while (a --)				
 80020ea:	3d01      	subs	r5, #1
 80020ec:	d1eb      	bne.n	80020c6 <Touch_IIC_ACK+0x4a>
	Touch_IIC_Delay(IIC_DelayVaule);	
	Touch_IIC_SCL(1);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020f4:	481d      	ldr	r0, [pc, #116]	@ (800216c <Touch_IIC_ACK+0xf0>)
 80020f6:	2414      	movs	r4, #20
 80020f8:	f001 fe16 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 80020fc:	f8ad 5002 	strh.w	r5, [sp, #2]
 8002100:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b07      	cmp	r3, #7
 8002108:	d80a      	bhi.n	8002120 <Touch_IIC_ACK+0xa4>
 800210a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800210e:	3301      	adds	r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002116:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b07      	cmp	r3, #7
 800211e:	d9f4      	bls.n	800210a <Touch_IIC_ACK+0x8e>
	while (a --)				
 8002120:	3c01      	subs	r4, #1
 8002122:	d1eb      	bne.n	80020fc <Touch_IIC_ACK+0x80>
	Touch_IIC_Delay(IIC_DelayVaule);
	
	Touch_IIC_SCL(0);		// SCL输出低时，SDA应立即拉高，释放总线
 8002124:	4622      	mov	r2, r4
 8002126:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800212a:	4810      	ldr	r0, [pc, #64]	@ (800216c <Touch_IIC_ACK+0xf0>)
 800212c:	f001 fdfc 	bl	8003d28 <HAL_GPIO_WritePin>
	Touch_IIC_SDA(1);		
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <Touch_IIC_ACK+0xf0>)
 8002138:	f001 fdf6 	bl	8003d28 <HAL_GPIO_WritePin>
 800213c:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 800213e:	f8ad 4000 	strh.w	r4, [sp]
 8002142:	f8bd 3000 	ldrh.w	r3, [sp]
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b07      	cmp	r3, #7
 800214a:	d80a      	bhi.n	8002162 <Touch_IIC_ACK+0xe6>
 800214c:	f8bd 3000 	ldrh.w	r3, [sp]
 8002150:	3301      	adds	r3, #1
 8002152:	b29b      	uxth	r3, r3
 8002154:	f8ad 3000 	strh.w	r3, [sp]
 8002158:	f8bd 3000 	ldrh.w	r3, [sp]
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b07      	cmp	r3, #7
 8002160:	d9f4      	bls.n	800214c <Touch_IIC_ACK+0xd0>
	while (a --)				
 8002162:	3a01      	subs	r2, #1
 8002164:	d1eb      	bne.n	800213e <Touch_IIC_ACK+0xc2>
	
	Touch_IIC_Delay(IIC_DelayVaule);

}
 8002166:	b003      	add	sp, #12
 8002168:	bd30      	pop	{r4, r5, pc}
 800216a:	bf00      	nop
 800216c:	58022000 	.word	0x58022000

08002170 <Touch_IIC_NoACK>:
*	函数功能: IIC非应答信号
*	说    明: 在SCL为高电平期间，若SDA引脚为高电平，产生非应答信号
******************************************************************************************/

void Touch_IIC_NoACK(void)
{
 8002170:	b530      	push	{r4, r5, lr}
	Touch_IIC_SCL(0);	
 8002172:	2200      	movs	r2, #0
{
 8002174:	b083      	sub	sp, #12
	Touch_IIC_SCL(0);	
 8002176:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800217a:	4836      	ldr	r0, [pc, #216]	@ (8002254 <Touch_IIC_NoACK+0xe4>)
 800217c:	f001 fdd4 	bl	8003d28 <HAL_GPIO_WritePin>
 8002180:	2414      	movs	r4, #20
		for (i = 0; i < 8; i++);
 8002182:	2200      	movs	r2, #0
 8002184:	f8ad 2006 	strh.w	r2, [sp, #6]
 8002188:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b07      	cmp	r3, #7
 8002190:	d80a      	bhi.n	80021a8 <Touch_IIC_NoACK+0x38>
 8002192:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002196:	3301      	adds	r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800219e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d9f4      	bls.n	8002192 <Touch_IIC_NoACK+0x22>
	while (a --)				
 80021a8:	3c01      	subs	r4, #1
 80021aa:	d1eb      	bne.n	8002184 <Touch_IIC_NoACK+0x14>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SDA(1);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021b2:	4828      	ldr	r0, [pc, #160]	@ (8002254 <Touch_IIC_NoACK+0xe4>)
 80021b4:	2514      	movs	r5, #20
 80021b6:	f001 fdb7 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 80021ba:	f8ad 4004 	strh.w	r4, [sp, #4]
 80021be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b07      	cmp	r3, #7
 80021c6:	d80a      	bhi.n	80021de <Touch_IIC_NoACK+0x6e>
 80021c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80021cc:	3301      	adds	r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80021d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b07      	cmp	r3, #7
 80021dc:	d9f4      	bls.n	80021c8 <Touch_IIC_NoACK+0x58>
	while (a --)				
 80021de:	3d01      	subs	r5, #1
 80021e0:	d1eb      	bne.n	80021ba <Touch_IIC_NoACK+0x4a>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SCL(1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021e8:	481a      	ldr	r0, [pc, #104]	@ (8002254 <Touch_IIC_NoACK+0xe4>)
 80021ea:	2414      	movs	r4, #20
 80021ec:	f001 fd9c 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 80021f0:	f8ad 5002 	strh.w	r5, [sp, #2]
 80021f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	d80a      	bhi.n	8002214 <Touch_IIC_NoACK+0xa4>
 80021fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002202:	3301      	adds	r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	f8ad 3002 	strh.w	r3, [sp, #2]
 800220a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b07      	cmp	r3, #7
 8002212:	d9f4      	bls.n	80021fe <Touch_IIC_NoACK+0x8e>
	while (a --)				
 8002214:	3c01      	subs	r4, #1
 8002216:	d1eb      	bne.n	80021f0 <Touch_IIC_NoACK+0x80>
	Touch_IIC_Delay(IIC_DelayVaule);
	
	Touch_IIC_SCL(0);
 8002218:	4622      	mov	r2, r4
 800221a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800221e:	480d      	ldr	r0, [pc, #52]	@ (8002254 <Touch_IIC_NoACK+0xe4>)
 8002220:	f001 fd82 	bl	8003d28 <HAL_GPIO_WritePin>
 8002224:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 8002226:	f8ad 4000 	strh.w	r4, [sp]
 800222a:	f8bd 3000 	ldrh.w	r3, [sp]
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b07      	cmp	r3, #7
 8002232:	d80a      	bhi.n	800224a <Touch_IIC_NoACK+0xda>
 8002234:	f8bd 3000 	ldrh.w	r3, [sp]
 8002238:	3301      	adds	r3, #1
 800223a:	b29b      	uxth	r3, r3
 800223c:	f8ad 3000 	strh.w	r3, [sp]
 8002240:	f8bd 3000 	ldrh.w	r3, [sp]
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b07      	cmp	r3, #7
 8002248:	d9f4      	bls.n	8002234 <Touch_IIC_NoACK+0xc4>
	while (a --)				
 800224a:	3a01      	subs	r2, #1
 800224c:	d1eb      	bne.n	8002226 <Touch_IIC_NoACK+0xb6>
	Touch_IIC_Delay(IIC_DelayVaule);
}
 800224e:	b003      	add	sp, #12
 8002250:	bd30      	pop	{r4, r5, pc}
 8002252:	bf00      	nop
 8002254:	58022000 	.word	0x58022000

08002258 <Touch_IIC_WaitACK>:
*	函数功能: 等待接收设备发出应答信号
*	说    明: 在SCL为高电平期间，若检测到SDA引脚为低电平，则接收设备响应正常
******************************************************************************************/

uint8_t Touch_IIC_WaitACK(void)
{
 8002258:	b530      	push	{r4, r5, lr}
	Touch_IIC_SDA(1);
 800225a:	2201      	movs	r2, #1
{
 800225c:	b083      	sub	sp, #12
	Touch_IIC_SDA(1);
 800225e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002262:	4839      	ldr	r0, [pc, #228]	@ (8002348 <Touch_IIC_WaitACK+0xf0>)
 8002264:	f001 fd60 	bl	8003d28 <HAL_GPIO_WritePin>
 8002268:	2514      	movs	r5, #20
		for (i = 0; i < 8; i++);
 800226a:	2200      	movs	r2, #0
 800226c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8002270:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b07      	cmp	r3, #7
 8002278:	d80a      	bhi.n	8002290 <Touch_IIC_WaitACK+0x38>
 800227a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800227e:	3301      	adds	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002286:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b07      	cmp	r3, #7
 800228e:	d9f4      	bls.n	800227a <Touch_IIC_WaitACK+0x22>
	while (a --)				
 8002290:	3d01      	subs	r5, #1
 8002292:	d1eb      	bne.n	800226c <Touch_IIC_WaitACK+0x14>
	Touch_IIC_Delay(IIC_DelayVaule);
	Touch_IIC_SCL(1);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800229a:	482b      	ldr	r0, [pc, #172]	@ (8002348 <Touch_IIC_WaitACK+0xf0>)
 800229c:	2414      	movs	r4, #20
 800229e:	f001 fd43 	bl	8003d28 <HAL_GPIO_WritePin>
		for (i = 0; i < 8; i++);
 80022a2:	f8ad 5000 	strh.w	r5, [sp]
 80022a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d80a      	bhi.n	80022c6 <Touch_IIC_WaitACK+0x6e>
 80022b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f8ad 3000 	strh.w	r3, [sp]
 80022bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d9f4      	bls.n	80022b0 <Touch_IIC_WaitACK+0x58>
	while (a --)				
 80022c6:	3c01      	subs	r4, #1
 80022c8:	d1eb      	bne.n	80022a2 <Touch_IIC_WaitACK+0x4a>
	Touch_IIC_Delay(IIC_DelayVaule);	
	
	if( HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) != 0) //判断设备是否有做出响应		
 80022ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ce:	481e      	ldr	r0, [pc, #120]	@ (8002348 <Touch_IIC_WaitACK+0xf0>)
 80022d0:	f001 fd24 	bl	8003d1c <HAL_GPIO_ReadPin>
	{
		Touch_IIC_SCL(0);	
 80022d4:	4622      	mov	r2, r4
 80022d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
	if( HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) != 0) //判断设备是否有做出响应		
 80022da:	b1c8      	cbz	r0, 8002310 <Touch_IIC_WaitACK+0xb8>
		Touch_IIC_SCL(0);	
 80022dc:	481a      	ldr	r0, [pc, #104]	@ (8002348 <Touch_IIC_WaitACK+0xf0>)
 80022de:	f001 fd23 	bl	8003d28 <HAL_GPIO_WritePin>
 80022e2:	2014      	movs	r0, #20
		for (i = 0; i < 8; i++);
 80022e4:	f8ad 4004 	strh.w	r4, [sp, #4]
 80022e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d80a      	bhi.n	8002308 <Touch_IIC_WaitACK+0xb0>
 80022f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80022fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b07      	cmp	r3, #7
 8002306:	d9f4      	bls.n	80022f2 <Touch_IIC_WaitACK+0x9a>
	while (a --)				
 8002308:	3801      	subs	r0, #1
 800230a:	d1eb      	bne.n	80022e4 <Touch_IIC_WaitACK+0x8c>
	{
		Touch_IIC_SCL(0);	
		Touch_IIC_Delay( IIC_DelayVaule );		
		return ACK_OK;	//应答正常
	}
}
 800230c:	b003      	add	sp, #12
 800230e:	bd30      	pop	{r4, r5, pc}
		Touch_IIC_SCL(0);	
 8002310:	480d      	ldr	r0, [pc, #52]	@ (8002348 <Touch_IIC_WaitACK+0xf0>)
 8002312:	f001 fd09 	bl	8003d28 <HAL_GPIO_WritePin>
 8002316:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 8002318:	f8ad 4006 	strh.w	r4, [sp, #6]
 800231c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b07      	cmp	r3, #7
 8002324:	d80a      	bhi.n	800233c <Touch_IIC_WaitACK+0xe4>
 8002326:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800232a:	3301      	adds	r3, #1
 800232c:	b29b      	uxth	r3, r3
 800232e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002332:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b07      	cmp	r3, #7
 800233a:	d9f4      	bls.n	8002326 <Touch_IIC_WaitACK+0xce>
	while (a --)				
 800233c:	3a01      	subs	r2, #1
 800233e:	d1eb      	bne.n	8002318 <Touch_IIC_WaitACK+0xc0>
		return ACK_OK;	//应答正常
 8002340:	2001      	movs	r0, #1
}
 8002342:	b003      	add	sp, #12
 8002344:	bd30      	pop	{r4, r5, pc}
 8002346:	bf00      	nop
 8002348:	58022000 	.word	0x58022000

0800234c <Touch_IIC_WriteByte>:
*	函数功能:	写一字节数据
*	说    明:高位在前
******************************************************************************************/

uint8_t Touch_IIC_WriteByte(uint8_t IIC_Data)
{
 800234c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234e:	2508      	movs	r5, #8
 8002350:	b083      	sub	sp, #12
	uint8_t i;

	for (i = 0; i < 8; i++)
	{
		Touch_IIC_SDA(IIC_Data & 0x80);
 8002352:	2700      	movs	r7, #0
 8002354:	4e28      	ldr	r6, [pc, #160]	@ (80023f8 <Touch_IIC_WriteByte+0xac>)
{
 8002356:	4604      	mov	r4, r0
		Touch_IIC_SDA(IIC_Data & 0x80);
 8002358:	0623      	lsls	r3, r4, #24
 800235a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800235e:	4630      	mov	r0, r6
 8002360:	bf4c      	ite	mi
 8002362:	2201      	movmi	r2, #1
 8002364:	2200      	movpl	r2, #0
 8002366:	f001 fcdf 	bl	8003d28 <HAL_GPIO_WritePin>
{
 800236a:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 800236c:	f8ad 7006 	strh.w	r7, [sp, #6]
 8002370:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b07      	cmp	r3, #7
 8002378:	d80a      	bhi.n	8002390 <Touch_IIC_WriteByte+0x44>
 800237a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800237e:	3301      	adds	r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002386:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b07      	cmp	r3, #7
 800238e:	d9f4      	bls.n	800237a <Touch_IIC_WriteByte+0x2e>
	while (a --)				
 8002390:	3a01      	subs	r2, #1
 8002392:	d1eb      	bne.n	800236c <Touch_IIC_WriteByte+0x20>
		
		Touch_IIC_Delay( IIC_DelayVaule );
		Touch_IIC_SCL(1);
 8002394:	2201      	movs	r2, #1
 8002396:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800239a:	4630      	mov	r0, r6
 800239c:	f001 fcc4 	bl	8003d28 <HAL_GPIO_WritePin>
 80023a0:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 80023a2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80023a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b07      	cmp	r3, #7
 80023ae:	d80a      	bhi.n	80023c6 <Touch_IIC_WriteByte+0x7a>
 80023b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80023bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b07      	cmp	r3, #7
 80023c4:	d9f4      	bls.n	80023b0 <Touch_IIC_WriteByte+0x64>
	while (a --)				
 80023c6:	3a01      	subs	r2, #1
 80023c8:	d1eb      	bne.n	80023a2 <Touch_IIC_WriteByte+0x56>
		Touch_IIC_Delay( IIC_DelayVaule );
		Touch_IIC_SCL(0);		
 80023ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023ce:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <Touch_IIC_WriteByte+0xac>)
 80023d0:	f001 fcaa 	bl	8003d28 <HAL_GPIO_WritePin>
		if(i == 7)
 80023d4:	2d01      	cmp	r5, #1
 80023d6:	d004      	beq.n	80023e2 <Touch_IIC_WriteByte+0x96>
		{
			Touch_IIC_SDA(1);			
		}
		IIC_Data <<= 1;
 80023d8:	0064      	lsls	r4, r4, #1
	for (i = 0; i < 8; i++)
 80023da:	3d01      	subs	r5, #1
		IIC_Data <<= 1;
 80023dc:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 8; i++)
 80023de:	b2ed      	uxtb	r5, r5
 80023e0:	e7ba      	b.n	8002358 <Touch_IIC_WriteByte+0xc>
			Touch_IIC_SDA(1);			
 80023e2:	462a      	mov	r2, r5
 80023e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023e8:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <Touch_IIC_WriteByte+0xac>)
 80023ea:	f001 fc9d 	bl	8003d28 <HAL_GPIO_WritePin>
	}

	return Touch_IIC_WaitACK(); //等待设备响应
}
 80023ee:	b003      	add	sp, #12
 80023f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return Touch_IIC_WaitACK(); //等待设备响应
 80023f4:	f7ff bf30 	b.w	8002258 <Touch_IIC_WaitACK>
 80023f8:	58022000 	.word	0x58022000

080023fc <Touch_IIC_ReadByte>:
*	说    明:1.高位在前
*				2.应在主机接收最后一字节数据时发送非应答信号
******************************************************************************************/

uint8_t Touch_IIC_ReadByte(uint8_t ACK_Mode)
{
 80023fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002400:	2408      	movs	r4, #8
 8002402:	b082      	sub	sp, #8
	uint8_t IIC_Data = 0;
 8002404:	2700      	movs	r7, #0
	
	for (i = 0; i < 8; i++)
	{
		IIC_Data <<= 1;
		
		Touch_IIC_SCL(1);
 8002406:	4d2b      	ldr	r5, [pc, #172]	@ (80024b4 <Touch_IIC_ReadByte+0xb8>)
{
 8002408:	4606      	mov	r6, r0
		IIC_Data <<= 1;
 800240a:	007f      	lsls	r7, r7, #1
		Touch_IIC_SCL(1);
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002412:	4628      	mov	r0, r5
 8002414:	f001 fc88 	bl	8003d28 <HAL_GPIO_WritePin>
 8002418:	f04f 0814 	mov.w	r8, #20
		IIC_Data <<= 1;
 800241c:	b2ff      	uxtb	r7, r7
		for (i = 0; i < 8; i++);
 800241e:	2200      	movs	r2, #0
 8002420:	f8ad 2006 	strh.w	r2, [sp, #6]
 8002424:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b07      	cmp	r3, #7
 800242c:	d80a      	bhi.n	8002444 <Touch_IIC_ReadByte+0x48>
 800242e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002432:	3301      	adds	r3, #1
 8002434:	b29b      	uxth	r3, r3
 8002436:	f8ad 3006 	strh.w	r3, [sp, #6]
 800243a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b07      	cmp	r3, #7
 8002442:	d9f4      	bls.n	800242e <Touch_IIC_ReadByte+0x32>
	while (a --)				
 8002444:	f1b8 0801 	subs.w	r8, r8, #1
 8002448:	d1ea      	bne.n	8002420 <Touch_IIC_ReadByte+0x24>
		Touch_IIC_Delay( IIC_DelayVaule );
		IIC_Data |= (HAL_GPIO_ReadPin(Touch_IIC_SDA_PORT,Touch_IIC_SDA_PIN) & 0x01);	
 800244a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800244e:	4628      	mov	r0, r5
 8002450:	f001 fc64 	bl	8003d1c <HAL_GPIO_ReadPin>
 8002454:	f000 0301 	and.w	r3, r0, #1
		Touch_IIC_SCL(0);
 8002458:	4642      	mov	r2, r8
 800245a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800245e:	4628      	mov	r0, r5
 8002460:	431f      	orrs	r7, r3
 8002462:	f001 fc61 	bl	8003d28 <HAL_GPIO_WritePin>
 8002466:	2214      	movs	r2, #20
		for (i = 0; i < 8; i++);
 8002468:	f8ad 8004 	strh.w	r8, [sp, #4]
 800246c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b07      	cmp	r3, #7
 8002474:	d80a      	bhi.n	800248c <Touch_IIC_ReadByte+0x90>
 8002476:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	b29b      	uxth	r3, r3
 800247e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002482:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b07      	cmp	r3, #7
 800248a:	d9f4      	bls.n	8002476 <Touch_IIC_ReadByte+0x7a>
	while (a --)				
 800248c:	3a01      	subs	r2, #1
 800248e:	d1eb      	bne.n	8002468 <Touch_IIC_ReadByte+0x6c>
	for (i = 0; i < 8; i++)
 8002490:	3c01      	subs	r4, #1
 8002492:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8002496:	d1b8      	bne.n	800240a <Touch_IIC_ReadByte+0xe>
		Touch_IIC_Delay( IIC_DelayVaule );
	}
	
	if ( ACK_Mode == 1 )				//	应答信号
 8002498:	2e01      	cmp	r6, #1
 800249a:	d005      	beq.n	80024a8 <Touch_IIC_ReadByte+0xac>
		Touch_IIC_ACK();
	else
		Touch_IIC_NoACK();		 	// 非应答信号
 800249c:	f7ff fe68 	bl	8002170 <Touch_IIC_NoACK>
	
	return IIC_Data; 
}
 80024a0:	4638      	mov	r0, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Touch_IIC_ACK();
 80024a8:	f7ff fde8 	bl	800207c <Touch_IIC_ACK>
}
 80024ac:	4638      	mov	r0, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024b4:	58022000 	.word	0x58022000

080024b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024b8:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024ba:	481f      	ldr	r0, [pc, #124]	@ (8002538 <MX_USART1_UART_Init+0x80>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024bc:	2300      	movs	r3, #0
  huart1.Instance = USART1;
 80024be:	4c1f      	ldr	r4, [pc, #124]	@ (800253c <MX_USART1_UART_Init+0x84>)
  huart1.Init.BaudRate = 115200;
 80024c0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024c4:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	6083      	str	r3, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80024c8:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d8:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024dc:	f005 fe28 	bl	8008130 <HAL_UART_Init>
 80024e0:	b970      	cbnz	r0, 8002500 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4814      	ldr	r0, [pc, #80]	@ (8002538 <MX_USART1_UART_Init+0x80>)
 80024e6:	f005 fe75 	bl	80081d4 <HAL_UARTEx_SetTxFifoThreshold>
 80024ea:	b988      	cbnz	r0, 8002510 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	4812      	ldr	r0, [pc, #72]	@ (8002538 <MX_USART1_UART_Init+0x80>)
 80024f0:	f005 feb2 	bl	8008258 <HAL_UARTEx_SetRxFifoThreshold>
 80024f4:	b9a0      	cbnz	r0, 8002520 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024f6:	4810      	ldr	r0, [pc, #64]	@ (8002538 <MX_USART1_UART_Init+0x80>)
 80024f8:	f005 fe4e 	bl	8008198 <HAL_UARTEx_DisableFifoMode>
 80024fc:	b9b8      	cbnz	r0, 800252e <MX_USART1_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024fe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002500:	f7fe ffc0 	bl	8001484 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002504:	2100      	movs	r1, #0
 8002506:	480c      	ldr	r0, [pc, #48]	@ (8002538 <MX_USART1_UART_Init+0x80>)
 8002508:	f005 fe64 	bl	80081d4 <HAL_UARTEx_SetTxFifoThreshold>
 800250c:	2800      	cmp	r0, #0
 800250e:	d0ed      	beq.n	80024ec <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8002510:	f7fe ffb8 	bl	8001484 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002514:	2100      	movs	r1, #0
 8002516:	4808      	ldr	r0, [pc, #32]	@ (8002538 <MX_USART1_UART_Init+0x80>)
 8002518:	f005 fe9e 	bl	8008258 <HAL_UARTEx_SetRxFifoThreshold>
 800251c:	2800      	cmp	r0, #0
 800251e:	d0ea      	beq.n	80024f6 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8002520:	f7fe ffb0 	bl	8001484 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	@ (8002538 <MX_USART1_UART_Init+0x80>)
 8002526:	f005 fe37 	bl	8008198 <HAL_UARTEx_DisableFifoMode>
 800252a:	2800      	cmp	r0, #0
 800252c:	d0e7      	beq.n	80024fe <MX_USART1_UART_Init+0x46>
}
 800252e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002532:	f7fe bfa7 	b.w	8001484 <Error_Handler>
 8002536:	bf00      	nop
 8002538:	240009b0 	.word	0x240009b0
 800253c:	40011000 	.word	0x40011000

08002540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	b0b8      	sub	sp, #224	@ 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	2100      	movs	r1, #0
{
 8002546:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002548:	22c0      	movs	r2, #192	@ 0xc0
 800254a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	9106      	str	r1, [sp, #24]
 800254e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002552:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002556:	f021 fda3 	bl	80240a0 <memset>
  if(uartHandle->Instance==USART1)
 800255a:	4b38      	ldr	r3, [pc, #224]	@ (800263c <HAL_UART_MspInit+0xfc>)
 800255c:	6822      	ldr	r2, [r4, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002562:	b038      	add	sp, #224	@ 0xe0
 8002564:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002566:	2201      	movs	r2, #1
 8002568:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002570:	f002 fe62 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 8002574:	2800      	cmp	r0, #0
 8002576:	d157      	bne.n	8002628 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002578:	4b31      	ldr	r3, [pc, #196]	@ (8002640 <HAL_UART_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800257a:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	a902      	add	r1, sp, #8
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800257e:	4e31      	ldr	r6, [pc, #196]	@ (8002644 <HAL_UART_MspInit+0x104>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002580:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002584:	f042 0210 	orr.w	r2, r2, #16
 8002588:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800258c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002590:	f002 0210 	and.w	r2, r2, #16
 8002594:	9200      	str	r2, [sp, #0]
 8002596:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ac:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	4825      	ldr	r0, [pc, #148]	@ (8002648 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025b6:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	2300      	movs	r3, #0
 80025c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f001 fa67 	bl	8003a98 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80025ca:	2229      	movs	r2, #41	@ 0x29
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80025cc:	491f      	ldr	r1, [pc, #124]	@ (800264c <HAL_UART_MspInit+0x10c>)
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80025ce:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025d0:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d2:	6273      	str	r3, [r6, #36]	@ 0x24
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80025d4:	e9c6 1200 	strd	r1, r2, [r6]
 80025d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025dc:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80025e0:	e9c6 3305 	strd	r3, r3, [r6, #20]
 80025e4:	6132      	str	r2, [r6, #16]
 80025e6:	e9c6 3307 	strd	r3, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025ea:	f000 fb39 	bl	8002c60 <HAL_DMA_Init>
 80025ee:	bb08      	cbnz	r0, 8002634 <HAL_UART_MspInit+0xf4>
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80025f0:	4d17      	ldr	r5, [pc, #92]	@ (8002650 <HAL_UART_MspInit+0x110>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025f2:	222a      	movs	r2, #42	@ 0x2a
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80025f4:	4917      	ldr	r1, [pc, #92]	@ (8002654 <HAL_UART_MspInit+0x114>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025f6:	2300      	movs	r3, #0
 80025f8:	606a      	str	r2, [r5, #4]
 80025fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80025fe:	6029      	str	r1, [r5, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002600:	2140      	movs	r1, #64	@ 0x40
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002602:	4628      	mov	r0, r5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002604:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
 8002608:	63b4      	str	r4, [r6, #56]	@ 0x38
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800260a:	60eb      	str	r3, [r5, #12]
 800260c:	616b      	str	r3, [r5, #20]
 800260e:	60a9      	str	r1, [r5, #8]
 8002610:	61ab      	str	r3, [r5, #24]
 8002612:	612a      	str	r2, [r5, #16]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002614:	626b      	str	r3, [r5, #36]	@ 0x24
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002616:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800261a:	f000 fb21 	bl	8002c60 <HAL_DMA_Init>
 800261e:	b930      	cbnz	r0, 800262e <HAL_UART_MspInit+0xee>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002620:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8002622:	63ac      	str	r4, [r5, #56]	@ 0x38
}
 8002624:	b038      	add	sp, #224	@ 0xe0
 8002626:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002628:	f7fe ff2c 	bl	8001484 <Error_Handler>
 800262c:	e7a4      	b.n	8002578 <HAL_UART_MspInit+0x38>
      Error_Handler();
 800262e:	f7fe ff29 	bl	8001484 <Error_Handler>
 8002632:	e7f5      	b.n	8002620 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002634:	f7fe ff26 	bl	8001484 <Error_Handler>
 8002638:	e7da      	b.n	80025f0 <HAL_UART_MspInit+0xb0>
 800263a:	bf00      	nop
 800263c:	40011000 	.word	0x40011000
 8002640:	58024400 	.word	0x58024400
 8002644:	24000938 	.word	0x24000938
 8002648:	58020000 	.word	0x58020000
 800264c:	40020010 	.word	0x40020010
 8002650:	240008c0 	.word	0x240008c0
 8002654:	40020028 	.word	0x40020028

08002658 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002658:	b500      	push	{lr}
 800265a:	b083      	sub	sp, #12
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800265c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002660:	2201      	movs	r2, #1
{
 8002662:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002664:	a901      	add	r1, sp, #4
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <__io_putchar+0x1c>)
 8002668:	f005 f8b8 	bl	80077dc <HAL_UART_Transmit>
	return ch;
}
 800266c:	9801      	ldr	r0, [sp, #4]
 800266e:	b003      	add	sp, #12
 8002670:	f85d fb04 	ldr.w	pc, [sp], #4
 8002674:	240009b0 	.word	0x240009b0

08002678 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8002678:	b510      	push	{r4, lr}
 800267a:	b084      	sub	sp, #16
	uint8_t ch = 0;
 800267c:	2400      	movs	r4, #0
	HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 800267e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002682:	2201      	movs	r2, #1
 8002684:	f10d 010b 	add.w	r1, sp, #11
 8002688:	4810      	ldr	r0, [pc, #64]	@ (80026cc <__io_getchar+0x54>)
	uint8_t ch = 0;
 800268a:	f88d 400b 	strb.w	r4, [sp, #11]
	HAL_UART_Receive(&huart1,(uint8_t *)&ch, 1, 0xFFFF);
 800268e:	f005 f91f 	bl	80078d0 <HAL_UART_Receive>
	if (ch == '\r')
 8002692:	f89d 400b 	ldrb.w	r4, [sp, #11]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002696:	a903      	add	r1, sp, #12
	if (ch == '\r')
 8002698:	2c0d      	cmp	r4, #13
 800269a:	d009      	beq.n	80026b0 <__io_getchar+0x38>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800269c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a0:	2201      	movs	r2, #1
 80026a2:	480a      	ldr	r0, [pc, #40]	@ (80026cc <__io_getchar+0x54>)
 80026a4:	9403      	str	r4, [sp, #12]
 80026a6:	f005 f899 	bl	80077dc <HAL_UART_Transmit>
	{
		__io_putchar('\r');
		ch = '\n';
	}
	return __io_putchar(ch);
}
 80026aa:	9803      	ldr	r0, [sp, #12]
 80026ac:	b004      	add	sp, #16
 80026ae:	bd10      	pop	{r4, pc}
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80026b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026b4:	2201      	movs	r2, #1
 80026b6:	4805      	ldr	r0, [pc, #20]	@ (80026cc <__io_getchar+0x54>)
 80026b8:	9403      	str	r4, [sp, #12]
 80026ba:	9101      	str	r1, [sp, #4]
 80026bc:	f005 f88e 	bl	80077dc <HAL_UART_Transmit>
		ch = '\n';
 80026c0:	230a      	movs	r3, #10
 80026c2:	9901      	ldr	r1, [sp, #4]
 80026c4:	461c      	mov	r4, r3
 80026c6:	f88d 300b 	strb.w	r3, [sp, #11]
 80026ca:	e7e7      	b.n	800269c <__io_getchar+0x24>
 80026cc:	240009b0 	.word	0x240009b0

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002708 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026d4:	f7ff f9ba 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	@ (800270c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	@ (8002710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	@ (800271c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fe:	f021 fd7b 	bl	80241f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7fe fe51 	bl	80013a8 <main>
  bx  lr
 8002706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002708:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800270c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002710:	2400027c 	.word	0x2400027c
  ldr r2, =_sidata
 8002714:	08111264 	.word	0x08111264
  ldr r2, =_sbss
 8002718:	24000480 	.word	0x24000480
  ldr r4, =_ebss
 800271c:	2400b7bc 	.word	0x2400b7bc

08002720 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC3_IRQHandler>
	...

08002724 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002724:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <HAL_InitTick+0x40>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b90b      	cbnz	r3, 800272e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800272a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800272c:	4770      	bx	lr
{
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002732:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002736:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <HAL_InitTick+0x44>)
 8002738:	fbb0 f3f3 	udiv	r3, r0, r3
 800273c:	6810      	ldr	r0, [r2, #0]
 800273e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002742:	f000 f8cb 	bl	80028dc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002746:	b908      	cbnz	r0, 800274c <HAL_InitTick+0x28>
 8002748:	2c0f      	cmp	r4, #15
 800274a:	d901      	bls.n	8002750 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
}
 800274e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	4621      	mov	r1, r4
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f000 f876 	bl	8002848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_InitTick+0x48>)
 800275e:	2000      	movs	r0, #0
 8002760:	601c      	str	r4, [r3, #0]
}
 8002762:	bd10      	pop	{r4, pc}
 8002764:	24000018 	.word	0x24000018
 8002768:	24000014 	.word	0x24000014
 800276c:	2400001c 	.word	0x2400001c

08002770 <HAL_Init>:
{
 8002770:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002772:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002774:	4c12      	ldr	r4, [pc, #72]	@ (80027c0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	f000 f855 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800277a:	f002 f9f1 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_Init+0x54>)
 8002780:	4911      	ldr	r1, [pc, #68]	@ (80027c8 <HAL_Init+0x58>)
 8002782:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002784:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002786:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800278e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002790:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002792:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002798:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800279c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800279e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80027a2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a8:	f7ff ffbc 	bl	8002724 <HAL_InitTick>
 80027ac:	b110      	cbz	r0, 80027b4 <HAL_Init+0x44>
    return HAL_ERROR;
 80027ae:	2401      	movs	r4, #1
}
 80027b0:	4620      	mov	r0, r4
 80027b2:	bd10      	pop	{r4, pc}
 80027b4:	4604      	mov	r4, r0
  HAL_MspInit();
 80027b6:	f7ff f843 	bl	8001840 <HAL_MspInit>
}
 80027ba:	4620      	mov	r0, r4
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	bf00      	nop
 80027c0:	24000010 	.word	0x24000010
 80027c4:	58024400 	.word	0x58024400
 80027c8:	080287c8 	.word	0x080287c8
 80027cc:	24000014 	.word	0x24000014

080027d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80027d0:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <HAL_IncTick+0x10>)
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <HAL_IncTick+0x14>)
 80027d4:	6811      	ldr	r1, [r2, #0]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	24000a44 	.word	0x24000a44
 80027e4:	24000018 	.word	0x24000018

080027e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027e8:	4b01      	ldr	r3, [pc, #4]	@ (80027f0 <HAL_GetTick+0x8>)
 80027ea:	6818      	ldr	r0, [r3, #0]
}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	24000a44 	.word	0x24000a44

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff fff6 	bl	80027e8 <HAL_GetTick>
 80027fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	1c63      	adds	r3, r4, #1
 8002800:	d002      	beq.n	8002808 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <HAL_Delay+0x20>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002808:	f7ff ffee 	bl	80027e8 <HAL_GetTick>
 800280c:	1b40      	subs	r0, r0, r5
 800280e:	42a0      	cmp	r0, r4
 8002810:	d3fa      	bcc.n	8002808 <HAL_Delay+0x14>
  {
  }
}
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	24000018 	.word	0x24000018

08002818 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002818:	4b01      	ldr	r3, [pc, #4]	@ (8002820 <HAL_GetREVID+0x8>)
 800281a:	6818      	ldr	r0, [r3, #0]
}
 800281c:	0c00      	lsrs	r0, r0, #16
 800281e:	4770      	bx	lr
 8002820:	5c001000 	.word	0x5c001000

08002824 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4906      	ldr	r1, [pc, #24]	@ (8002840 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002834:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800283a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800283c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00
 8002844:	05fa0000 	.word	0x05fa0000

08002848 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <HAL_NVIC_SetPriority+0x6c>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002852:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800285a:	f1be 0f04 	cmp.w	lr, #4
 800285e:	bf28      	it	cs
 8002860:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002864:	f1bc 0f06 	cmp.w	ip, #6
 8002868:	d91a      	bls.n	80028a0 <HAL_NVIC_SetPriority+0x58>
 800286a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	fa03 f30c 	lsl.w	r3, r3, ip
 8002876:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800287e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	fa03 f30e 	lsl.w	r3, r3, lr
 8002884:	ea21 0303 	bic.w	r3, r1, r3
 8002888:	fa03 f30c 	lsl.w	r3, r3, ip
 800288c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002894:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002896:	db06      	blt.n	80028a6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <HAL_NVIC_SetPriority+0x70>)
 800289a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800289c:	f85d fb04 	ldr.w	pc, [sp], #4
 80028a0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	4694      	mov	ip, r2
 80028a4:	e7e9      	b.n	800287a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	f000 000f 	and.w	r0, r0, #15
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <HAL_NVIC_SetPriority+0x74>)
 80028ac:	5413      	strb	r3, [r2, r0]
 80028ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00
 80028b8:	e000e400 	.word	0xe000e400
 80028bc:	e000ed14 	.word	0xe000ed14

080028c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028c0:	2800      	cmp	r0, #0
 80028c2:	db07      	blt.n	80028d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c4:	2301      	movs	r3, #1
 80028c6:	f000 011f 	and.w	r1, r0, #31
 80028ca:	4a03      	ldr	r2, [pc, #12]	@ (80028d8 <HAL_NVIC_EnableIRQ+0x18>)
 80028cc:	0940      	lsrs	r0, r0, #5
 80028ce:	408b      	lsls	r3, r1
 80028d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000e100 	.word	0xe000e100

080028dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	1e43      	subs	r3, r0, #1
 80028de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e2:	d301      	bcc.n	80028e8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028e6:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	4905      	ldr	r1, [pc, #20]	@ (8002904 <HAL_SYSTICK_Config+0x28>)
 80028f0:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002908:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800290c:	4b04      	ldr	r3, [pc, #16]	@ (8002920 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800290e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002912:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002918:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_MPU_Enable+0x1c>)
 8002926:	f040 0001 	orr.w	r0, r0, #1
 800292a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800292e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002930:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002936:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800293a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002944:	4a16      	ldr	r2, [pc, #88]	@ (80029a0 <HAL_MPU_ConfigRegion+0x5c>)
 8002946:	7843      	ldrb	r3, [r0, #1]
 8002948:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800294c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002958:	6843      	ldr	r3, [r0, #4]
 800295a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800295e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002960:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002964:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002966:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002968:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800296c:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002970:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002972:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002974:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002978:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800297c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002980:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002982:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002986:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800298a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800298e:	7a01      	ldrb	r1, [r0, #8]
 8002990:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002994:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002998:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d036      	beq.n	8002a16 <HAL_CRC_Init+0x72>
{
 80029a8:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029aa:	7f43      	ldrb	r3, [r0, #29]
 80029ac:	4604      	mov	r4, r0
 80029ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80029b2:	b363      	cbz	r3, 8002a0e <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029b4:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029b6:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80029b8:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029ba:	b9f3      	cbnz	r3, 80029fa <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	4a17      	ldr	r2, [pc, #92]	@ (8002a1c <HAL_CRC_Init+0x78>)
 80029c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	f022 0218 	bic.w	r2, r2, #24
 80029c8:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029ca:	7962      	ldrb	r2, [r4, #5]
 80029cc:	b18a      	cbz	r2, 80029f2 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80029ce:	6922      	ldr	r2, [r4, #16]
 80029d0:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029d2:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029d4:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029dc:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 80029de:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029e0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029e8:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 80029ea:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029ec:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80029ee:	7761      	strb	r1, [r4, #29]
}
 80029f0:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029f2:	f04f 32ff 	mov.w	r2, #4294967295
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	e7eb      	b.n	80029d2 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80029fa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80029fe:	4620      	mov	r0, r4
 8002a00:	f000 f80e 	bl	8002a20 <HAL_CRCEx_Polynomial_Set>
 8002a04:	b908      	cbnz	r0, 8002a0a <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	e7df      	b.n	80029ca <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
}
 8002a0c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002a0e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002a10:	f7fe f840 	bl	8000a94 <HAL_CRC_MspInit>
 8002a14:	e7ce      	b.n	80029b4 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8002a16:	2001      	movs	r0, #1
}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	04c11db7 	.word	0x04c11db7

08002a20 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002a20:	07cb      	lsls	r3, r1, #31
 8002a22:	d51a      	bpl.n	8002a5a <HAL_CRCEx_Polynomial_Set+0x3a>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a24:	231f      	movs	r3, #31
{
 8002a26:	b410      	push	{r4}
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	1c5c      	adds	r4, r3, #1
 8002a2c:	fa21 fc03 	lsr.w	ip, r1, r3
 8002a30:	d015      	beq.n	8002a5e <HAL_CRCEx_Polynomial_Set+0x3e>
 8002a32:	f01c 0f01 	tst.w	ip, #1
 8002a36:	d0f7      	beq.n	8002a28 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8002a38:	2a18      	cmp	r2, #24
 8002a3a:	d811      	bhi.n	8002a60 <HAL_CRCEx_Polynomial_Set+0x40>
 8002a3c:	e8df f002 	tbb	[pc, r2]
 8002a40:	10101016 	.word	0x10101016
 8002a44:	10101010 	.word	0x10101010
 8002a48:	10101024 	.word	0x10101024
 8002a4c:	10101010 	.word	0x10101010
 8002a50:	10101021 	.word	0x10101021
 8002a54:	10101010 	.word	0x10101010
 8002a58:	14          	.byte	0x14
 8002a59:	00          	.byte	0x00
 8002a5a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8002a5c:	4770      	bx	lr
    switch (PolyLength)
 8002a5e:	b12a      	cbz	r2, 8002a6c <HAL_CRCEx_Polynomial_Set+0x4c>
 8002a60:	2001      	movs	r0, #1
}
 8002a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a66:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d8f9      	bhi.n	8002a60 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a6c:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a6e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a70:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a72:	68a3      	ldr	r3, [r4, #8]
 8002a74:	f023 0318 	bic.w	r3, r3, #24
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60a3      	str	r3, [r4, #8]
}
 8002a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a80:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 8002a82:	2b07      	cmp	r3, #7
 8002a84:	d9f2      	bls.n	8002a6c <HAL_CRCEx_Polynomial_Set+0x4c>
 8002a86:	e7eb      	b.n	8002a60 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d9ef      	bls.n	8002a6c <HAL_CRCEx_Polynomial_Set+0x4c>
 8002a8c:	e7e8      	b.n	8002a60 <HAL_CRCEx_Polynomial_Set+0x40>
 8002a8e:	bf00      	nop

08002a90 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a90:	4936      	ldr	r1, [pc, #216]	@ (8002b6c <DMA_CalcBaseAndBitshift+0xdc>)
{
 8002a92:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a94:	6803      	ldr	r3, [r0, #0]
 8002a96:	428b      	cmp	r3, r1
 8002a98:	d033      	beq.n	8002b02 <DMA_CalcBaseAndBitshift+0x72>
 8002a9a:	3118      	adds	r1, #24
 8002a9c:	1a59      	subs	r1, r3, r1
 8002a9e:	fab1 f181 	clz	r1, r1
 8002aa2:	0949      	lsrs	r1, r1, #5
 8002aa4:	bb69      	cbnz	r1, 8002b02 <DMA_CalcBaseAndBitshift+0x72>
 8002aa6:	4832      	ldr	r0, [pc, #200]	@ (8002b70 <DMA_CalcBaseAndBitshift+0xe0>)
 8002aa8:	4283      	cmp	r3, r0
 8002aaa:	d03e      	beq.n	8002b2a <DMA_CalcBaseAndBitshift+0x9a>
 8002aac:	3018      	adds	r0, #24
 8002aae:	4283      	cmp	r3, r0
 8002ab0:	d03e      	beq.n	8002b30 <DMA_CalcBaseAndBitshift+0xa0>
 8002ab2:	3018      	adds	r0, #24
 8002ab4:	4283      	cmp	r3, r0
 8002ab6:	d034      	beq.n	8002b22 <DMA_CalcBaseAndBitshift+0x92>
 8002ab8:	3018      	adds	r0, #24
 8002aba:	4283      	cmp	r3, r0
 8002abc:	d03b      	beq.n	8002b36 <DMA_CalcBaseAndBitshift+0xa6>
 8002abe:	3018      	adds	r0, #24
 8002ac0:	4283      	cmp	r3, r0
 8002ac2:	d03e      	beq.n	8002b42 <DMA_CalcBaseAndBitshift+0xb2>
 8002ac4:	3018      	adds	r0, #24
 8002ac6:	4283      	cmp	r3, r0
 8002ac8:	d02a      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0x90>
 8002aca:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002ace:	4283      	cmp	r3, r0
 8002ad0:	d035      	beq.n	8002b3e <DMA_CalcBaseAndBitshift+0xae>
 8002ad2:	4928      	ldr	r1, [pc, #160]	@ (8002b74 <DMA_CalcBaseAndBitshift+0xe4>)
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	d031      	beq.n	8002b3c <DMA_CalcBaseAndBitshift+0xac>
 8002ad8:	3118      	adds	r1, #24
 8002ada:	428b      	cmp	r3, r1
 8002adc:	d034      	beq.n	8002b48 <DMA_CalcBaseAndBitshift+0xb8>
 8002ade:	3118      	adds	r1, #24
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d034      	beq.n	8002b4e <DMA_CalcBaseAndBitshift+0xbe>
 8002ae4:	3118      	adds	r1, #24
 8002ae6:	428b      	cmp	r3, r1
 8002ae8:	d034      	beq.n	8002b54 <DMA_CalcBaseAndBitshift+0xc4>
 8002aea:	3118      	adds	r1, #24
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d034      	beq.n	8002b5a <DMA_CalcBaseAndBitshift+0xca>
 8002af0:	3118      	adds	r1, #24
 8002af2:	428b      	cmp	r3, r1
 8002af4:	d034      	beq.n	8002b60 <DMA_CalcBaseAndBitshift+0xd0>
 8002af6:	3118      	adds	r1, #24
 8002af8:	428b      	cmp	r3, r1
 8002afa:	d034      	beq.n	8002b66 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002afc:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8002b00:	e011      	b.n	8002b26 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	491c      	ldr	r1, [pc, #112]	@ (8002b78 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b06:	481d      	ldr	r0, [pc, #116]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b08:	3b10      	subs	r3, #16
 8002b0a:	fba1 1303 	umull	r1, r3, r1, r3
{
 8002b0e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b10:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b12:	4c1b      	ldr	r4, [pc, #108]	@ (8002b80 <DMA_CalcBaseAndBitshift+0xf0>)
 8002b14:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8002b16:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b1a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8002b1e:	4770      	bx	lr
 8002b20:	2116      	movs	r1, #22
 8002b22:	4818      	ldr	r0, [pc, #96]	@ (8002b84 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b24:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b26:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8002b28:	4770      	bx	lr
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	4813      	ldr	r0, [pc, #76]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xec>)
 8002b2e:	e7f9      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b30:	2116      	movs	r1, #22
 8002b32:	4812      	ldr	r0, [pc, #72]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xec>)
 8002b34:	e7f6      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b36:	2106      	movs	r1, #6
 8002b38:	4812      	ldr	r0, [pc, #72]	@ (8002b84 <DMA_CalcBaseAndBitshift+0xf4>)
 8002b3a:	e7f3      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b3c:	2106      	movs	r1, #6
 8002b3e:	4812      	ldr	r0, [pc, #72]	@ (8002b88 <DMA_CalcBaseAndBitshift+0xf8>)
 8002b40:	e7f0      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b42:	2110      	movs	r1, #16
 8002b44:	480f      	ldr	r0, [pc, #60]	@ (8002b84 <DMA_CalcBaseAndBitshift+0xf4>)
 8002b46:	e7ed      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b48:	2110      	movs	r1, #16
 8002b4a:	480f      	ldr	r0, [pc, #60]	@ (8002b88 <DMA_CalcBaseAndBitshift+0xf8>)
 8002b4c:	e7ea      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b4e:	2116      	movs	r1, #22
 8002b50:	480d      	ldr	r0, [pc, #52]	@ (8002b88 <DMA_CalcBaseAndBitshift+0xf8>)
 8002b52:	e7e7      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b54:	2100      	movs	r1, #0
 8002b56:	480d      	ldr	r0, [pc, #52]	@ (8002b8c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b58:	e7e4      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b5a:	2106      	movs	r1, #6
 8002b5c:	480b      	ldr	r0, [pc, #44]	@ (8002b8c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b5e:	e7e1      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b60:	2110      	movs	r1, #16
 8002b62:	480a      	ldr	r0, [pc, #40]	@ (8002b8c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b64:	e7de      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b66:	2116      	movs	r1, #22
 8002b68:	4808      	ldr	r0, [pc, #32]	@ (8002b8c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b6a:	e7db      	b.n	8002b24 <DMA_CalcBaseAndBitshift+0x94>
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	40020040 	.word	0x40020040
 8002b74:	40020428 	.word	0x40020428
 8002b78:	aaaaaaab 	.word	0xaaaaaaab
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	08028870 	.word	0x08028870
 8002b84:	40020004 	.word	0x40020004
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020404 	.word	0x40020404

08002b90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b90:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b92:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8002b94:	4927      	ldr	r1, [pc, #156]	@ (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8002b96:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b98:	4d27      	ldr	r5, [pc, #156]	@ (8002c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002b9a:	4c28      	ldr	r4, [pc, #160]	@ (8002c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002b9c:	42aa      	cmp	r2, r5
 8002b9e:	bf18      	it	ne
 8002ba0:	429a      	cmpne	r2, r3
 8002ba2:	bf0c      	ite	eq
 8002ba4:	2301      	moveq	r3, #1
 8002ba6:	2300      	movne	r3, #0
 8002ba8:	428a      	cmp	r2, r1
 8002baa:	bf08      	it	eq
 8002bac:	f043 0301 	orreq.w	r3, r3, #1
 8002bb0:	3128      	adds	r1, #40	@ 0x28
 8002bb2:	42a2      	cmp	r2, r4
 8002bb4:	bf08      	it	eq
 8002bb6:	f043 0301 	orreq.w	r3, r3, #1
 8002bba:	3428      	adds	r4, #40	@ 0x28
 8002bbc:	428a      	cmp	r2, r1
 8002bbe:	bf08      	it	eq
 8002bc0:	f043 0301 	orreq.w	r3, r3, #1
 8002bc4:	3128      	adds	r1, #40	@ 0x28
 8002bc6:	42a2      	cmp	r2, r4
 8002bc8:	bf08      	it	eq
 8002bca:	f043 0301 	orreq.w	r3, r3, #1
 8002bce:	428a      	cmp	r2, r1
 8002bd0:	bf08      	it	eq
 8002bd2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bd6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002bd8:	b913      	cbnz	r3, 8002be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d112      	bne.n	8002c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002be0:	f1a1 0308 	sub.w	r3, r1, #8
 8002be4:	4917      	ldr	r1, [pc, #92]	@ (8002c44 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002be6:	4a18      	ldr	r2, [pc, #96]	@ (8002c48 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002be8:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bec:	2101      	movs	r1, #1
 8002bee:	4c17      	ldr	r4, [pc, #92]	@ (8002c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bf0:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bf4:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bf8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bfa:	4099      	lsls	r1, r3
 8002bfc:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002bfe:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002c02:	bc30      	pop	{r4, r5}
 8002c04:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c06:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c0a:	4911      	ldr	r1, [pc, #68]	@ (8002c50 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c0c:	4c11      	ldr	r4, [pc, #68]	@ (8002c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c0e:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c10:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c14:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c16:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c1a:	d800      	bhi.n	8002c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8002c1c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c20:	f003 041f 	and.w	r4, r3, #31
 8002c24:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c26:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c28:	40a1      	lsls	r1, r4
 8002c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002c5c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c2c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c2e:	e7e5      	b.n	8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8002c30:	58025408 	.word	0x58025408
 8002c34:	58025430 	.word	0x58025430
 8002c38:	5802541c 	.word	0x5802541c
 8002c3c:	58025444 	.word	0x58025444
 8002c40:	58025494 	.word	0x58025494
 8002c44:	cccccccd 	.word	0xcccccccd
 8002c48:	16009600 	.word	0x16009600
 8002c4c:	58025880 	.word	0x58025880
 8002c50:	bffdfbf0 	.word	0xbffdfbf0
 8002c54:	aaaaaaab 	.word	0xaaaaaaab
 8002c58:	10008200 	.word	0x10008200
 8002c5c:	40020880 	.word	0x40020880

08002c60 <HAL_DMA_Init>:
{
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	4605      	mov	r5, r0
 8002c66:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff fdbe 	bl	80027e8 <HAL_GetTick>
  if(hdma == NULL)
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	f000 8203 	beq.w	8003078 <HAL_DMA_Init+0x418>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c72:	682c      	ldr	r4, [r5, #0]
 8002c74:	4606      	mov	r6, r0
 8002c76:	4b65      	ldr	r3, [pc, #404]	@ (8002e0c <HAL_DMA_Init+0x1ac>)
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	f000 80bc 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002c7e:	3318      	adds	r3, #24
 8002c80:	429c      	cmp	r4, r3
 8002c82:	f000 80b8 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002c86:	3318      	adds	r3, #24
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	f000 80b4 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002c8e:	3318      	adds	r3, #24
 8002c90:	429c      	cmp	r4, r3
 8002c92:	f000 80b0 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002c96:	3318      	adds	r3, #24
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	f000 80ac 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002c9e:	3318      	adds	r3, #24
 8002ca0:	429c      	cmp	r4, r3
 8002ca2:	f000 80a8 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	f000 80a4 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cae:	3318      	adds	r3, #24
 8002cb0:	429c      	cmp	r4, r3
 8002cb2:	f000 80a0 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cb6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002cba:	429c      	cmp	r4, r3
 8002cbc:	f000 809b 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	f000 8097 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cc8:	3318      	adds	r3, #24
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	f000 8093 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cd0:	3318      	adds	r3, #24
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	f000 808f 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cd8:	3318      	adds	r3, #24
 8002cda:	429c      	cmp	r4, r3
 8002cdc:	f000 808b 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002ce0:	3318      	adds	r3, #24
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	f000 8087 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002ce8:	3318      	adds	r3, #24
 8002cea:	429c      	cmp	r4, r3
 8002cec:	f000 8083 	beq.w	8002df6 <HAL_DMA_Init+0x196>
 8002cf0:	3318      	adds	r3, #24
 8002cf2:	429c      	cmp	r4, r3
 8002cf4:	d07f      	beq.n	8002df6 <HAL_DMA_Init+0x196>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002cf6:	4946      	ldr	r1, [pc, #280]	@ (8002e10 <HAL_DMA_Init+0x1b0>)
 8002cf8:	4a46      	ldr	r2, [pc, #280]	@ (8002e14 <HAL_DMA_Init+0x1b4>)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_DMA_Init+0x1b8>)
 8002cfc:	eba4 0901 	sub.w	r9, r4, r1
 8002d00:	1aa2      	subs	r2, r4, r2
 8002d02:	4f46      	ldr	r7, [pc, #280]	@ (8002e1c <HAL_DMA_Init+0x1bc>)
 8002d04:	eba4 0803 	sub.w	r8, r4, r3
 8002d08:	fab9 f989 	clz	r9, r9
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002d16:	fab8 f888 	clz	r8, r8
 8002d1a:	eba4 0a03 	sub.w	sl, r4, r3
 8002d1e:	0952      	lsrs	r2, r2, #5
 8002d20:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002d24:	1be7      	subs	r7, r4, r7
 8002d26:	faba fa8a 	clz	sl, sl
 8002d2a:	ea49 0102 	orr.w	r1, r9, r2
 8002d2e:	4e3c      	ldr	r6, [pc, #240]	@ (8002e20 <HAL_DMA_Init+0x1c0>)
 8002d30:	fab7 f787 	clz	r7, r7
 8002d34:	483b      	ldr	r0, [pc, #236]	@ (8002e24 <HAL_DMA_Init+0x1c4>)
 8002d36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002d3a:	ea48 0101 	orr.w	r1, r8, r1
 8002d3e:	1ba6      	subs	r6, r4, r6
 8002d40:	eba4 0b00 	sub.w	fp, r4, r0
 8002d44:	097f      	lsrs	r7, r7, #5
 8002d46:	ea4a 0101 	orr.w	r1, sl, r1
 8002d4a:	fab6 f686 	clz	r6, r6
 8002d4e:	3014      	adds	r0, #20
 8002d50:	fabb fb8b 	clz	fp, fp
 8002d54:	4339      	orrs	r1, r7
 8002d56:	0976      	lsrs	r6, r6, #5
 8002d58:	1a23      	subs	r3, r4, r0
 8002d5a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002d5e:	4331      	orrs	r1, r6
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	ea5b 0101 	orrs.w	r1, fp, r1
 8002d68:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	d102      	bne.n	8002d76 <HAL_DMA_Init+0x116>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 81d4 	beq.w	800311e <HAL_DMA_Init+0x4be>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d76:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d78:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8002e30 <HAL_DMA_Init+0x1d0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d7c:	f885 1035 	strb.w	r1, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002d80:	2100      	movs	r1, #0
 8002d82:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d86:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d88:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d8c:	68a9      	ldr	r1, [r5, #8]
 8002d8e:	2940      	cmp	r1, #64	@ 0x40
 8002d90:	f000 81c2 	beq.w	8003118 <HAL_DMA_Init+0x4b8>
 8002d94:	f1a1 0180 	sub.w	r1, r1, #128	@ 0x80
 8002d98:	fab1 f181 	clz	r1, r1
 8002d9c:	0949      	lsrs	r1, r1, #5
 8002d9e:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002da2:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002da4:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002da6:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002da8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_DMA_Init+0x1c8>)
 8002daa:	9200      	str	r2, [sp, #0]
 8002dac:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002db0:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002db2:	4423      	add	r3, r4
 8002db4:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002db8:	69a9      	ldr	r1, [r5, #24]
 8002dba:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dbe:	69e9      	ldr	r1, [r5, #28]
 8002dc0:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dc4:	6a29      	ldr	r1, [r5, #32]
 8002dc6:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8002dca:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dce:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dd2:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dd4:	4915      	ldr	r1, [pc, #84]	@ (8002e2c <HAL_DMA_Init+0x1cc>)
 8002dd6:	fba1 0103 	umull	r0, r1, r1, r3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dda:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ddc:	0909      	lsrs	r1, r1, #4
 8002dde:	0089      	lsls	r1, r1, #2
 8002de0:	65e9      	str	r1, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de2:	f7ff fe55 	bl	8002a90 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002de6:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8002de8:	9a00      	ldr	r2, [sp, #0]
 8002dea:	f001 041f 	and.w	r4, r1, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	40a1      	lsls	r1, r4
 8002df2:	6041      	str	r1, [r0, #4]
 8002df4:	e0e2      	b.n	8002fbc <HAL_DMA_Init+0x35c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	e01a      	b.n	8002e42 <HAL_DMA_Init+0x1e2>
 8002e0c:	40020010 	.word	0x40020010
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025458 	.word	0x58025458
 8002e20:	5802546c 	.word	0x5802546c
 8002e24:	58025480 	.word	0x58025480
 8002e28:	a7fdabf8 	.word	0xa7fdabf8
 8002e2c:	cccccccd 	.word	0xcccccccd
 8002e30:	fffe000f 	.word	0xfffe000f
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e34:	f7ff fcd8 	bl	80027e8 <HAL_GetTick>
 8002e38:	1b80      	subs	r0, r0, r6
 8002e3a:	2805      	cmp	r0, #5
 8002e3c:	f200 8117 	bhi.w	800306e <HAL_DMA_Init+0x40e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e40:	682c      	ldr	r4, [r5, #0]
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	07df      	lsls	r7, r3, #31
 8002e46:	d4f5      	bmi.n	8002e34 <HAL_DMA_Init+0x1d4>
    registerValue |=  hdma->Init.Direction           |
 8002e48:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002e4e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e50:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e52:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6969      	ldr	r1, [r5, #20]
 8002e58:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	69e9      	ldr	r1, [r5, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e60:	49b2      	ldr	r1, [pc, #712]	@ (800312c <HAL_DMA_Init+0x4cc>)
 8002e62:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e64:	6a28      	ldr	r0, [r5, #32]
 8002e66:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e68:	48b1      	ldr	r0, [pc, #708]	@ (8003130 <HAL_DMA_Init+0x4d0>)
    registerValue |=  hdma->Init.Direction           |
 8002e6a:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e6c:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002e6e:	2904      	cmp	r1, #4
 8002e70:	f000 8117 	beq.w	80030a2 <HAL_DMA_Init+0x442>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e74:	6806      	ldr	r6, [r0, #0]
 8002e76:	48af      	ldr	r0, [pc, #700]	@ (8003134 <HAL_DMA_Init+0x4d4>)
 8002e78:	4030      	ands	r0, r6
 8002e7a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002e7e:	f080 80d5 	bcs.w	800302c <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e82:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e84:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e86:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e8a:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e8c:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f7ff fdfe 	bl	8002a90 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e94:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002e96:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e98:	49a7      	ldr	r1, [pc, #668]	@ (8003138 <HAL_DMA_Init+0x4d8>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e9a:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e9e:	4fa7      	ldr	r7, [pc, #668]	@ (800313c <HAL_DMA_Init+0x4dc>)
 8002ea0:	4ea7      	ldr	r6, [pc, #668]	@ (8003140 <HAL_DMA_Init+0x4e0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ea2:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ea4:	4aa7      	ldr	r2, [pc, #668]	@ (8003144 <HAL_DMA_Init+0x4e4>)
 8002ea6:	1be7      	subs	r7, r4, r7
 8002ea8:	1ba6      	subs	r6, r4, r6
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eaa:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eac:	eba4 0902 	sub.w	r9, r4, r2
 8002eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8003148 <HAL_DMA_Init+0x4e8>)
 8002eb2:	3214      	adds	r2, #20
 8002eb4:	fab9 f989 	clz	r9, r9
 8002eb8:	48a4      	ldr	r0, [pc, #656]	@ (800314c <HAL_DMA_Init+0x4ec>)
 8002eba:	eba4 0803 	sub.w	r8, r4, r3
 8002ebe:	4ba4      	ldr	r3, [pc, #656]	@ (8003150 <HAL_DMA_Init+0x4f0>)
 8002ec0:	1aa2      	subs	r2, r4, r2
 8002ec2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002ec6:	429c      	cmp	r4, r3
 8002ec8:	bf18      	it	ne
 8002eca:	428c      	cmpne	r4, r1
 8002ecc:	f103 0318 	add.w	r3, r3, #24
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	fab8 f888 	clz	r8, r8
 8002ed8:	bf0c      	ite	eq
 8002eda:	2101      	moveq	r1, #1
 8002edc:	2100      	movne	r1, #0
 8002ede:	0952      	lsrs	r2, r2, #5
 8002ee0:	fab7 f787 	clz	r7, r7
 8002ee4:	429c      	cmp	r4, r3
 8002ee6:	bf08      	it	eq
 8002ee8:	f041 0101 	orreq.w	r1, r1, #1
 8002eec:	3318      	adds	r3, #24
 8002eee:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002ef2:	eba4 0b00 	sub.w	fp, r4, r0
 8002ef6:	429c      	cmp	r4, r3
 8002ef8:	bf08      	it	eq
 8002efa:	f041 0101 	orreq.w	r1, r1, #1
 8002efe:	3318      	adds	r3, #24
 8002f00:	097f      	lsrs	r7, r7, #5
 8002f02:	fab6 f686 	clz	r6, r6
 8002f06:	429c      	cmp	r4, r3
 8002f08:	bf08      	it	eq
 8002f0a:	f041 0101 	orreq.w	r1, r1, #1
 8002f0e:	3318      	adds	r3, #24
 8002f10:	3014      	adds	r0, #20
 8002f12:	0976      	lsrs	r6, r6, #5
 8002f14:	429c      	cmp	r4, r3
 8002f16:	bf08      	it	eq
 8002f18:	f041 0101 	orreq.w	r1, r1, #1
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	fabb fb8b 	clz	fp, fp
 8002f22:	429c      	cmp	r4, r3
 8002f24:	bf08      	it	eq
 8002f26:	f041 0101 	orreq.w	r1, r1, #1
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002f30:	429c      	cmp	r4, r3
 8002f32:	bf08      	it	eq
 8002f34:	f041 0101 	orreq.w	r1, r1, #1
 8002f38:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	bf08      	it	eq
 8002f40:	f041 0101 	orreq.w	r1, r1, #1
 8002f44:	3318      	adds	r3, #24
 8002f46:	429c      	cmp	r4, r3
 8002f48:	bf08      	it	eq
 8002f4a:	f041 0101 	orreq.w	r1, r1, #1
 8002f4e:	3318      	adds	r3, #24
 8002f50:	429c      	cmp	r4, r3
 8002f52:	bf08      	it	eq
 8002f54:	f041 0101 	orreq.w	r1, r1, #1
 8002f58:	3318      	adds	r3, #24
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	bf08      	it	eq
 8002f5e:	f041 0101 	orreq.w	r1, r1, #1
 8002f62:	3318      	adds	r3, #24
 8002f64:	429c      	cmp	r4, r3
 8002f66:	bf08      	it	eq
 8002f68:	f041 0101 	orreq.w	r1, r1, #1
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	bf08      	it	eq
 8002f72:	f041 0101 	orreq.w	r1, r1, #1
 8002f76:	3318      	adds	r3, #24
 8002f78:	429c      	cmp	r4, r3
 8002f7a:	bf08      	it	eq
 8002f7c:	f041 0101 	orreq.w	r1, r1, #1
 8002f80:	3318      	adds	r3, #24
 8002f82:	429c      	cmp	r4, r3
 8002f84:	bf08      	it	eq
 8002f86:	f041 0101 	orreq.w	r1, r1, #1
 8002f8a:	4b72      	ldr	r3, [pc, #456]	@ (8003154 <HAL_DMA_Init+0x4f4>)
 8002f8c:	ea49 0101 	orr.w	r1, r9, r1
 8002f90:	eba4 0a03 	sub.w	sl, r4, r3
 8002f94:	1a23      	subs	r3, r4, r0
 8002f96:	4311      	orrs	r1, r2
 8002f98:	faba fa8a 	clz	sl, sl
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	ea48 0101 	orr.w	r1, r8, r1
 8002fa4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	ea4a 0101 	orr.w	r1, sl, r1
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	4339      	orrs	r1, r7
 8002fb2:	4331      	orrs	r1, r6
 8002fb4:	ea5b 0101 	orrs.w	r1, fp, r1
 8002fb8:	d100      	bne.n	8002fbc <HAL_DMA_Init+0x35c>
 8002fba:	b37b      	cbz	r3, 800301c <HAL_DMA_Init+0x3bc>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	9200      	str	r2, [sp, #0]
 8002fc0:	f7ff fde6 	bl	8002b90 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fc4:	68a9      	ldr	r1, [r5, #8]
 8002fc6:	9a00      	ldr	r2, [sp, #0]
 8002fc8:	2980      	cmp	r1, #128	@ 0x80
 8002fca:	d05e      	beq.n	800308a <HAL_DMA_Init+0x42a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fcc:	6868      	ldr	r0, [r5, #4]
 8002fce:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002fd0:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fd2:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd4:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fd8:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fda:	601c      	str	r4, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fdc:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fe0:	d85a      	bhi.n	8003098 <HAL_DMA_Init+0x438>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fe2:	ea49 090a 	orr.w	r9, r9, sl
 8002fe6:	9b01      	ldr	r3, [sp, #4]
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002fe8:	1e60      	subs	r0, r4, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fea:	ea48 0809 	orr.w	r8, r8, r9
 8002fee:	ea47 0708 	orr.w	r7, r7, r8
 8002ff2:	433e      	orrs	r6, r7
 8002ff4:	ea43 0a06 	orr.w	sl, r3, r6
 8002ff8:	ea5b 0a0a 	orrs.w	sl, fp, sl
 8002ffc:	d102      	bne.n	8003004 <HAL_DMA_Init+0x3a4>
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	f000 8085 	beq.w	800310e <HAL_DMA_Init+0x4ae>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003004:	4a54      	ldr	r2, [pc, #336]	@ (8003158 <HAL_DMA_Init+0x4f8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003006:	4955      	ldr	r1, [pc, #340]	@ (800315c <HAL_DMA_Init+0x4fc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003008:	4422      	add	r2, r4
 800300a:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800300c:	2301      	movs	r3, #1
 800300e:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003010:	2000      	movs	r0, #0
 8003012:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003016:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003018:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800301a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800301e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003020:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003022:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8003026:	b003      	add	sp, #12
 8003028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800302c:	6868      	ldr	r0, [r5, #4]
 800302e:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 8003032:	2e1f      	cmp	r6, #31
 8003034:	d924      	bls.n	8003080 <HAL_DMA_Init+0x420>
 8003036:	384f      	subs	r0, #79	@ 0x4f
 8003038:	2803      	cmp	r0, #3
 800303a:	d801      	bhi.n	8003040 <HAL_DMA_Init+0x3e0>
        registerValue |= DMA_SxCR_TRBUFF;
 800303c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003040:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003042:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003044:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003046:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800304a:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800304e:	f47f af1d 	bne.w	8002e8c <HAL_DMA_Init+0x22c>
 8003052:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003054:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003056:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003058:	2800      	cmp	r0, #0
 800305a:	f43f af17 	beq.w	8002e8c <HAL_DMA_Init+0x22c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800305e:	bb8a      	cbnz	r2, 80030c4 <HAL_DMA_Init+0x464>
    switch (hdma->Init.FIFOThreshold)
 8003060:	2901      	cmp	r1, #1
 8003062:	d04f      	beq.n	8003104 <HAL_DMA_Init+0x4a4>
 8003064:	f031 0202 	bics.w	r2, r1, #2
 8003068:	f47f af10 	bne.w	8002e8c <HAL_DMA_Init+0x22c>
 800306c:	e032      	b.n	80030d4 <HAL_DMA_Init+0x474>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800306e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003070:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003072:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003074:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
}
 800307a:	b003      	add	sp, #12
 800307c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003080:	4837      	ldr	r0, [pc, #220]	@ (8003160 <HAL_DMA_Init+0x500>)
 8003082:	40f0      	lsrs	r0, r6
 8003084:	07c0      	lsls	r0, r0, #31
 8003086:	d5db      	bpl.n	8003040 <HAL_DMA_Init+0x3e0>
 8003088:	e7d8      	b.n	800303c <HAL_DMA_Init+0x3dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800308a:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800308e:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003092:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003094:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003096:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800309e:	676b      	str	r3, [r5, #116]	@ 0x74
 80030a0:	e7bc      	b.n	800301c <HAL_DMA_Init+0x3bc>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80030a2:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a4:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 80030a8:	4306      	orrs	r6, r0
 80030aa:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80030ac:	4e21      	ldr	r6, [pc, #132]	@ (8003134 <HAL_DMA_Init+0x4d4>)
 80030ae:	403e      	ands	r6, r7
 80030b0:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
 80030b4:	d2ba      	bcs.n	800302c <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030b6:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030b8:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030ba:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80030be:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c2:	e7c7      	b.n	8003054 <HAL_DMA_Init+0x3f4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80030c8:	d00d      	beq.n	80030e6 <HAL_DMA_Init+0x486>
    switch (hdma->Init.FIFOThreshold)
 80030ca:	2902      	cmp	r1, #2
 80030cc:	d905      	bls.n	80030da <HAL_DMA_Init+0x47a>
 80030ce:	2903      	cmp	r1, #3
 80030d0:	f47f aedc 	bne.w	8002e8c <HAL_DMA_Init+0x22c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d4:	01c2      	lsls	r2, r0, #7
 80030d6:	f57f aed9 	bpl.w	8002e8c <HAL_DMA_Init+0x22c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030da:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 80030dc:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030de:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80030e0:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 80030e4:	e7c8      	b.n	8003078 <HAL_DMA_Init+0x418>
    switch (hdma->Init.FIFOThreshold)
 80030e6:	2903      	cmp	r1, #3
 80030e8:	f63f aed0 	bhi.w	8002e8c <HAL_DMA_Init+0x22c>
 80030ec:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <HAL_DMA_Init+0x494>)
 80030ee:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	080030db 	.word	0x080030db
 80030f8:	080030d5 	.word	0x080030d5
 80030fc:	080030db 	.word	0x080030db
 8003100:	08003105 	.word	0x08003105
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003104:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8003108:	f47f aec0 	bne.w	8002e8c <HAL_DMA_Init+0x22c>
 800310c:	e7e5      	b.n	80030da <HAL_DMA_Init+0x47a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800310e:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <HAL_DMA_Init+0x504>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003110:	4915      	ldr	r1, [pc, #84]	@ (8003168 <HAL_DMA_Init+0x508>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003112:	4422      	add	r2, r4
 8003114:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003116:	e779      	b.n	800300c <HAL_DMA_Init+0x3ac>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003118:	f04f 0e10 	mov.w	lr, #16
 800311c:	e641      	b.n	8002da2 <HAL_DMA_Init+0x142>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800311e:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003120:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003122:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003124:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003128:	e7a6      	b.n	8003078 <HAL_DMA_Init+0x418>
 800312a:	bf00      	nop
 800312c:	fe10803f 	.word	0xfe10803f
 8003130:	5c001000 	.word	0x5c001000
 8003134:	ffff0000 	.word	0xffff0000
 8003138:	40020010 	.word	0x40020010
 800313c:	58025458 	.word	0x58025458
 8003140:	5802546c 	.word	0x5802546c
 8003144:	58025408 	.word	0x58025408
 8003148:	58025430 	.word	0x58025430
 800314c:	58025480 	.word	0x58025480
 8003150:	40020028 	.word	0x40020028
 8003154:	58025444 	.word	0x58025444
 8003158:	1600963f 	.word	0x1600963f
 800315c:	58025940 	.word	0x58025940
 8003160:	c3c0003f 	.word	0xc3c0003f
 8003164:	1000823f 	.word	0x1000823f
 8003168:	40020940 	.word	0x40020940

0800316c <HAL_DMA_IRQHandler>:
{
 800316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8003170:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003172:	4b46      	ldr	r3, [pc, #280]	@ (800328c <HAL_DMA_IRQHandler+0x120>)
{
 8003174:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003176:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 8003178:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800317a:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 800317c:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800317e:	6803      	ldr	r3, [r0, #0]
 8003180:	4a43      	ldr	r2, [pc, #268]	@ (8003290 <HAL_DMA_IRQHandler+0x124>)
 8003182:	4844      	ldr	r0, [pc, #272]	@ (8003294 <HAL_DMA_IRQHandler+0x128>)
  tmpisr_dma  = regs_dma->ISR;
 8003184:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003186:	4293      	cmp	r3, r2
 8003188:	bf18      	it	ne
 800318a:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 800318c:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800318e:	bf0c      	ite	eq
 8003190:	2001      	moveq	r0, #1
 8003192:	2000      	movne	r0, #0
 8003194:	f000 8086 	beq.w	80032a4 <HAL_DMA_IRQHandler+0x138>
 8003198:	3218      	adds	r2, #24
 800319a:	4293      	cmp	r3, r2
 800319c:	f000 827c 	beq.w	8003698 <HAL_DMA_IRQHandler+0x52c>
 80031a0:	3218      	adds	r2, #24
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f000 8278 	beq.w	8003698 <HAL_DMA_IRQHandler+0x52c>
 80031a8:	3218      	adds	r2, #24
 80031aa:	4293      	cmp	r3, r2
 80031ac:	f000 8285 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031b0:	3218      	adds	r2, #24
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f000 8281 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031b8:	3218      	adds	r2, #24
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f000 827d 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031c0:	3218      	adds	r2, #24
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f000 8279 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031c8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f000 8274 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031d2:	3218      	adds	r2, #24
 80031d4:	4293      	cmp	r3, r2
 80031d6:	f000 8270 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031da:	3218      	adds	r2, #24
 80031dc:	4293      	cmp	r3, r2
 80031de:	f000 826c 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031e2:	3218      	adds	r2, #24
 80031e4:	4293      	cmp	r3, r2
 80031e6:	f000 8268 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031ea:	3218      	adds	r2, #24
 80031ec:	4293      	cmp	r3, r2
 80031ee:	f000 8264 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031f2:	3218      	adds	r2, #24
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f000 8260 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 80031fa:	3218      	adds	r2, #24
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f000 825c 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
 8003202:	3218      	adds	r2, #24
 8003204:	4293      	cmp	r3, r2
 8003206:	f000 8258 	beq.w	80036ba <HAL_DMA_IRQHandler+0x54e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800320a:	4a23      	ldr	r2, [pc, #140]	@ (8003298 <HAL_DMA_IRQHandler+0x12c>)
 800320c:	4823      	ldr	r0, [pc, #140]	@ (800329c <HAL_DMA_IRQHandler+0x130>)
 800320e:	4283      	cmp	r3, r0
 8003210:	bf18      	it	ne
 8003212:	4293      	cmpne	r3, r2
 8003214:	f100 0014 	add.w	r0, r0, #20
 8003218:	bf0c      	ite	eq
 800321a:	2201      	moveq	r2, #1
 800321c:	2200      	movne	r2, #0
 800321e:	4283      	cmp	r3, r0
 8003220:	bf08      	it	eq
 8003222:	f042 0201 	orreq.w	r2, r2, #1
 8003226:	3014      	adds	r0, #20
 8003228:	4283      	cmp	r3, r0
 800322a:	bf08      	it	eq
 800322c:	f042 0201 	orreq.w	r2, r2, #1
 8003230:	3014      	adds	r0, #20
 8003232:	4283      	cmp	r3, r0
 8003234:	bf08      	it	eq
 8003236:	f042 0201 	orreq.w	r2, r2, #1
 800323a:	3014      	adds	r0, #20
 800323c:	4283      	cmp	r3, r0
 800323e:	bf08      	it	eq
 8003240:	f042 0201 	orreq.w	r2, r2, #1
 8003244:	3014      	adds	r0, #20
 8003246:	4283      	cmp	r3, r0
 8003248:	bf08      	it	eq
 800324a:	f042 0201 	orreq.w	r2, r2, #1
 800324e:	b912      	cbnz	r2, 8003256 <HAL_DMA_IRQHandler+0xea>
 8003250:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <HAL_DMA_IRQHandler+0x134>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d116      	bne.n	8003284 <HAL_DMA_IRQHandler+0x118>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003256:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8003258:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800325a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800325c:	f000 001f 	and.w	r0, r0, #31
 8003260:	4085      	lsls	r5, r0
 8003262:	420d      	tst	r5, r1
 8003264:	f000 8283 	beq.w	800376e <HAL_DMA_IRQHandler+0x602>
 8003268:	0757      	lsls	r7, r2, #29
 800326a:	f140 8280 	bpl.w	800376e <HAL_DMA_IRQHandler+0x602>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800326e:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003270:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003272:	f140 82af 	bpl.w	80037d4 <HAL_DMA_IRQHandler+0x668>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003276:	03d1      	lsls	r1, r2, #15
 8003278:	f100 82b2 	bmi.w	80037e0 <HAL_DMA_IRQHandler+0x674>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800327c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 81f4 	bne.w	800366c <HAL_DMA_IRQHandler+0x500>
}
 8003284:	b002      	add	sp, #8
 8003286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800328a:	bf00      	nop
 800328c:	24000014 	.word	0x24000014
 8003290:	40020028 	.word	0x40020028
 8003294:	40020010 	.word	0x40020010
 8003298:	58025408 	.word	0x58025408
 800329c:	5802541c 	.word	0x5802541c
 80032a0:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a4:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 80032a8:	f04f 0c08 	mov.w	ip, #8
 80032ac:	f00e 021f 	and.w	r2, lr, #31
 80032b0:	fa0c f102 	lsl.w	r1, ip, r2
 80032b4:	420f      	tst	r7, r1
 80032b6:	f000 81de 	beq.w	8003676 <HAL_DMA_IRQHandler+0x50a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032ba:	f8d3 c000 	ldr.w	ip, [r3]
 80032be:	f01c 0f04 	tst.w	ip, #4
 80032c2:	d00a      	beq.n	80032da <HAL_DMA_IRQHandler+0x16e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c4:	f8d3 c000 	ldr.w	ip, [r3]
 80032c8:	f02c 0c04 	bic.w	ip, ip, #4
 80032cc:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d0:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d2:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 80032d4:	f041 0101 	orr.w	r1, r1, #1
 80032d8:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032da:	fa27 f102 	lsr.w	r1, r7, r2
 80032de:	07c9      	lsls	r1, r1, #31
 80032e0:	d55b      	bpl.n	800339a <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d14f      	bne.n	8003386 <HAL_DMA_IRQHandler+0x21a>
 80032e6:	49a2      	ldr	r1, [pc, #648]	@ (8003570 <HAL_DMA_IRQHandler+0x404>)
 80032e8:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8003584 <HAL_DMA_IRQHandler+0x418>
 80032ec:	4563      	cmp	r3, ip
 80032ee:	bf18      	it	ne
 80032f0:	428b      	cmpne	r3, r1
 80032f2:	f10c 0c18 	add.w	ip, ip, #24
 80032f6:	bf0c      	ite	eq
 80032f8:	2101      	moveq	r1, #1
 80032fa:	2100      	movne	r1, #0
 80032fc:	4563      	cmp	r3, ip
 80032fe:	bf08      	it	eq
 8003300:	f041 0101 	orreq.w	r1, r1, #1
 8003304:	f10c 0c18 	add.w	ip, ip, #24
 8003308:	4563      	cmp	r3, ip
 800330a:	bf08      	it	eq
 800330c:	f041 0101 	orreq.w	r1, r1, #1
 8003310:	f10c 0c18 	add.w	ip, ip, #24
 8003314:	4563      	cmp	r3, ip
 8003316:	bf08      	it	eq
 8003318:	f041 0101 	orreq.w	r1, r1, #1
 800331c:	f10c 0c18 	add.w	ip, ip, #24
 8003320:	4563      	cmp	r3, ip
 8003322:	bf08      	it	eq
 8003324:	f041 0101 	orreq.w	r1, r1, #1
 8003328:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800332c:	4563      	cmp	r3, ip
 800332e:	bf08      	it	eq
 8003330:	f041 0101 	orreq.w	r1, r1, #1
 8003334:	f10c 0c18 	add.w	ip, ip, #24
 8003338:	4563      	cmp	r3, ip
 800333a:	bf08      	it	eq
 800333c:	f041 0101 	orreq.w	r1, r1, #1
 8003340:	f10c 0c18 	add.w	ip, ip, #24
 8003344:	4563      	cmp	r3, ip
 8003346:	bf08      	it	eq
 8003348:	f041 0101 	orreq.w	r1, r1, #1
 800334c:	f10c 0c18 	add.w	ip, ip, #24
 8003350:	4563      	cmp	r3, ip
 8003352:	bf08      	it	eq
 8003354:	f041 0101 	orreq.w	r1, r1, #1
 8003358:	f10c 0c18 	add.w	ip, ip, #24
 800335c:	4563      	cmp	r3, ip
 800335e:	bf08      	it	eq
 8003360:	f041 0101 	orreq.w	r1, r1, #1
 8003364:	f10c 0c18 	add.w	ip, ip, #24
 8003368:	4563      	cmp	r3, ip
 800336a:	bf08      	it	eq
 800336c:	f041 0101 	orreq.w	r1, r1, #1
 8003370:	f10c 0c18 	add.w	ip, ip, #24
 8003374:	4563      	cmp	r3, ip
 8003376:	bf08      	it	eq
 8003378:	f041 0101 	orreq.w	r1, r1, #1
 800337c:	b919      	cbnz	r1, 8003386 <HAL_DMA_IRQHandler+0x21a>
 800337e:	497d      	ldr	r1, [pc, #500]	@ (8003574 <HAL_DMA_IRQHandler+0x408>)
 8003380:	428b      	cmp	r3, r1
 8003382:	f040 81e3 	bne.w	800374c <HAL_DMA_IRQHandler+0x5e0>
 8003386:	6959      	ldr	r1, [r3, #20]
 8003388:	0609      	lsls	r1, r1, #24
 800338a:	d506      	bpl.n	800339a <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800338c:	2101      	movs	r1, #1
 800338e:	4091      	lsls	r1, r2
 8003390:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003392:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8003394:	f041 0102 	orr.w	r1, r1, #2
 8003398:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800339a:	2104      	movs	r1, #4
 800339c:	4091      	lsls	r1, r2
 800339e:	4239      	tst	r1, r7
 80033a0:	d05f      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2f6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033a2:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8003570 <HAL_DMA_IRQHandler+0x404>
 80033a6:	4563      	cmp	r3, ip
 80033a8:	d051      	beq.n	800344e <HAL_DMA_IRQHandler+0x2e2>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d14f      	bne.n	800344e <HAL_DMA_IRQHandler+0x2e2>
 80033ae:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80033b2:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8003584 <HAL_DMA_IRQHandler+0x418>
 80033b6:	4543      	cmp	r3, r8
 80033b8:	bf18      	it	ne
 80033ba:	4563      	cmpne	r3, ip
 80033bc:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 80033c0:	bf0c      	ite	eq
 80033c2:	f04f 0c01 	moveq.w	ip, #1
 80033c6:	f04f 0c00 	movne.w	ip, #0
 80033ca:	4543      	cmp	r3, r8
 80033cc:	bf08      	it	eq
 80033ce:	f04c 0c01 	orreq.w	ip, ip, #1
 80033d2:	f108 0818 	add.w	r8, r8, #24
 80033d6:	4543      	cmp	r3, r8
 80033d8:	bf08      	it	eq
 80033da:	f04c 0c01 	orreq.w	ip, ip, #1
 80033de:	f108 0818 	add.w	r8, r8, #24
 80033e2:	4543      	cmp	r3, r8
 80033e4:	bf08      	it	eq
 80033e6:	f04c 0c01 	orreq.w	ip, ip, #1
 80033ea:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 80033ee:	4543      	cmp	r3, r8
 80033f0:	bf08      	it	eq
 80033f2:	f04c 0c01 	orreq.w	ip, ip, #1
 80033f6:	f108 0818 	add.w	r8, r8, #24
 80033fa:	4543      	cmp	r3, r8
 80033fc:	bf08      	it	eq
 80033fe:	f04c 0c01 	orreq.w	ip, ip, #1
 8003402:	f108 0818 	add.w	r8, r8, #24
 8003406:	4543      	cmp	r3, r8
 8003408:	bf08      	it	eq
 800340a:	f04c 0c01 	orreq.w	ip, ip, #1
 800340e:	f108 0818 	add.w	r8, r8, #24
 8003412:	4543      	cmp	r3, r8
 8003414:	bf08      	it	eq
 8003416:	f04c 0c01 	orreq.w	ip, ip, #1
 800341a:	f108 0818 	add.w	r8, r8, #24
 800341e:	4543      	cmp	r3, r8
 8003420:	bf08      	it	eq
 8003422:	f04c 0c01 	orreq.w	ip, ip, #1
 8003426:	f108 0818 	add.w	r8, r8, #24
 800342a:	4543      	cmp	r3, r8
 800342c:	bf08      	it	eq
 800342e:	f04c 0c01 	orreq.w	ip, ip, #1
 8003432:	f108 0818 	add.w	r8, r8, #24
 8003436:	4543      	cmp	r3, r8
 8003438:	bf08      	it	eq
 800343a:	f04c 0c01 	orreq.w	ip, ip, #1
 800343e:	f1bc 0f00 	cmp.w	ip, #0
 8003442:	d104      	bne.n	800344e <HAL_DMA_IRQHandler+0x2e2>
 8003444:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8003574 <HAL_DMA_IRQHandler+0x408>
 8003448:	4563      	cmp	r3, ip
 800344a:	f040 8185 	bne.w	8003758 <HAL_DMA_IRQHandler+0x5ec>
 800344e:	f8d3 c000 	ldr.w	ip, [r3]
 8003452:	f01c 0f02 	tst.w	ip, #2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2f6>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003458:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800345a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800345c:	f041 0104 	orr.w	r1, r1, #4
 8003460:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003462:	2110      	movs	r1, #16
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	423a      	tst	r2, r7
 800346a:	d05b      	beq.n	8003524 <HAL_DMA_IRQHandler+0x3b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800346c:	4940      	ldr	r1, [pc, #256]	@ (8003570 <HAL_DMA_IRQHandler+0x404>)
 800346e:	428b      	cmp	r3, r1
 8003470:	d042      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x38c>
 8003472:	2800      	cmp	r0, #0
 8003474:	d140      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x38c>
 8003476:	3118      	adds	r1, #24
 8003478:	483f      	ldr	r0, [pc, #252]	@ (8003578 <HAL_DMA_IRQHandler+0x40c>)
 800347a:	4283      	cmp	r3, r0
 800347c:	bf18      	it	ne
 800347e:	428b      	cmpne	r3, r1
 8003480:	f100 0018 	add.w	r0, r0, #24
 8003484:	bf0c      	ite	eq
 8003486:	2101      	moveq	r1, #1
 8003488:	2100      	movne	r1, #0
 800348a:	4283      	cmp	r3, r0
 800348c:	bf08      	it	eq
 800348e:	f041 0101 	orreq.w	r1, r1, #1
 8003492:	3018      	adds	r0, #24
 8003494:	4283      	cmp	r3, r0
 8003496:	bf08      	it	eq
 8003498:	f041 0101 	orreq.w	r1, r1, #1
 800349c:	3018      	adds	r0, #24
 800349e:	4283      	cmp	r3, r0
 80034a0:	bf08      	it	eq
 80034a2:	f041 0101 	orreq.w	r1, r1, #1
 80034a6:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80034aa:	4283      	cmp	r3, r0
 80034ac:	bf08      	it	eq
 80034ae:	f041 0101 	orreq.w	r1, r1, #1
 80034b2:	3018      	adds	r0, #24
 80034b4:	4283      	cmp	r3, r0
 80034b6:	bf08      	it	eq
 80034b8:	f041 0101 	orreq.w	r1, r1, #1
 80034bc:	3018      	adds	r0, #24
 80034be:	4283      	cmp	r3, r0
 80034c0:	bf08      	it	eq
 80034c2:	f041 0101 	orreq.w	r1, r1, #1
 80034c6:	3018      	adds	r0, #24
 80034c8:	4283      	cmp	r3, r0
 80034ca:	bf08      	it	eq
 80034cc:	f041 0101 	orreq.w	r1, r1, #1
 80034d0:	3018      	adds	r0, #24
 80034d2:	4283      	cmp	r3, r0
 80034d4:	bf08      	it	eq
 80034d6:	f041 0101 	orreq.w	r1, r1, #1
 80034da:	3018      	adds	r0, #24
 80034dc:	4283      	cmp	r3, r0
 80034de:	bf08      	it	eq
 80034e0:	f041 0101 	orreq.w	r1, r1, #1
 80034e4:	3018      	adds	r0, #24
 80034e6:	4283      	cmp	r3, r0
 80034e8:	bf08      	it	eq
 80034ea:	f041 0101 	orreq.w	r1, r1, #1
 80034ee:	b919      	cbnz	r1, 80034f8 <HAL_DMA_IRQHandler+0x38c>
 80034f0:	4920      	ldr	r1, [pc, #128]	@ (8003574 <HAL_DMA_IRQHandler+0x408>)
 80034f2:	428b      	cmp	r3, r1
 80034f4:	f040 8137 	bne.w	8003766 <HAL_DMA_IRQHandler+0x5fa>
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80034fe:	b189      	cbz	r1, 8003524 <HAL_DMA_IRQHandler+0x3b8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003500:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	0350      	lsls	r0, r2, #13
 8003506:	f100 80e7 	bmi.w	80036d8 <HAL_DMA_IRQHandler+0x56c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	05d2      	lsls	r2, r2, #23
 800350e:	d403      	bmi.n	8003518 <HAL_DMA_IRQHandler+0x3ac>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003518:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800351a:	b11b      	cbz	r3, 8003524 <HAL_DMA_IRQHandler+0x3b8>
            hdma->XferHalfCpltCallback(hdma);
 800351c:	4630      	mov	r0, r6
 800351e:	4798      	blx	r3
 8003520:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003524:	f00e 011f 	and.w	r1, lr, #31
 8003528:	2020      	movs	r0, #32
 800352a:	4088      	lsls	r0, r1
 800352c:	4238      	tst	r0, r7
 800352e:	d073      	beq.n	8003618 <HAL_DMA_IRQHandler+0x4ac>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003530:	6832      	ldr	r2, [r6, #0]
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <HAL_DMA_IRQHandler+0x410>)
 8003534:	4f12      	ldr	r7, [pc, #72]	@ (8003580 <HAL_DMA_IRQHandler+0x414>)
 8003536:	42ba      	cmp	r2, r7
 8003538:	bf18      	it	ne
 800353a:	429a      	cmpne	r2, r3
 800353c:	f107 0718 	add.w	r7, r7, #24
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	42ba      	cmp	r2, r7
 8003548:	bf08      	it	eq
 800354a:	f043 0301 	orreq.w	r3, r3, #1
 800354e:	3718      	adds	r7, #24
 8003550:	42ba      	cmp	r2, r7
 8003552:	bf08      	it	eq
 8003554:	f043 0301 	orreq.w	r3, r3, #1
 8003558:	3718      	adds	r7, #24
 800355a:	42ba      	cmp	r2, r7
 800355c:	bf08      	it	eq
 800355e:	f043 0301 	orreq.w	r3, r3, #1
 8003562:	3718      	adds	r7, #24
 8003564:	42ba      	cmp	r2, r7
 8003566:	bf08      	it	eq
 8003568:	f043 0301 	orreq.w	r3, r3, #1
 800356c:	3718      	adds	r7, #24
 800356e:	e00b      	b.n	8003588 <HAL_DMA_IRQHandler+0x41c>
 8003570:	40020040 	.word	0x40020040
 8003574:	400204b8 	.word	0x400204b8
 8003578:	40020070 	.word	0x40020070
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020058 	.word	0x40020058
 8003588:	42ba      	cmp	r2, r7
 800358a:	bf08      	it	eq
 800358c:	f043 0301 	orreq.w	r3, r3, #1
 8003590:	3718      	adds	r7, #24
 8003592:	42ba      	cmp	r2, r7
 8003594:	bf08      	it	eq
 8003596:	f043 0301 	orreq.w	r3, r3, #1
 800359a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800359e:	42ba      	cmp	r2, r7
 80035a0:	bf08      	it	eq
 80035a2:	f043 0301 	orreq.w	r3, r3, #1
 80035a6:	3718      	adds	r7, #24
 80035a8:	42ba      	cmp	r2, r7
 80035aa:	bf08      	it	eq
 80035ac:	f043 0301 	orreq.w	r3, r3, #1
 80035b0:	3718      	adds	r7, #24
 80035b2:	42ba      	cmp	r2, r7
 80035b4:	bf08      	it	eq
 80035b6:	f043 0301 	orreq.w	r3, r3, #1
 80035ba:	3718      	adds	r7, #24
 80035bc:	42ba      	cmp	r2, r7
 80035be:	bf08      	it	eq
 80035c0:	f043 0301 	orreq.w	r3, r3, #1
 80035c4:	3718      	adds	r7, #24
 80035c6:	42ba      	cmp	r2, r7
 80035c8:	bf08      	it	eq
 80035ca:	f043 0301 	orreq.w	r3, r3, #1
 80035ce:	3718      	adds	r7, #24
 80035d0:	42ba      	cmp	r2, r7
 80035d2:	bf08      	it	eq
 80035d4:	f043 0301 	orreq.w	r3, r3, #1
 80035d8:	3718      	adds	r7, #24
 80035da:	42ba      	cmp	r2, r7
 80035dc:	bf08      	it	eq
 80035de:	f043 0301 	orreq.w	r3, r3, #1
 80035e2:	b91b      	cbnz	r3, 80035ec <HAL_DMA_IRQHandler+0x480>
 80035e4:	4b89      	ldr	r3, [pc, #548]	@ (800380c <HAL_DMA_IRQHandler+0x6a0>)
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f040 80d1 	bne.w	800378e <HAL_DMA_IRQHandler+0x622>
 80035ec:	6813      	ldr	r3, [r2, #0]
 80035ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035f2:	b18b      	cbz	r3, 8003618 <HAL_DMA_IRQHandler+0x4ac>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035f4:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035f6:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 80035fa:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035fc:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035fe:	d074      	beq.n	80036ea <HAL_DMA_IRQHandler+0x57e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003600:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003604:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003606:	f000 808a 	beq.w	800371e <HAL_DMA_IRQHandler+0x5b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800360a:	031f      	lsls	r7, r3, #12
 800360c:	f140 8095 	bpl.w	800373a <HAL_DMA_IRQHandler+0x5ce>
          if(hdma->XferCpltCallback != NULL)
 8003610:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8003612:	b10b      	cbz	r3, 8003618 <HAL_DMA_IRQHandler+0x4ac>
            hdma->XferCpltCallback(hdma);
 8003614:	4630      	mov	r0, r6
 8003616:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003618:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	f43f ae32 	beq.w	8003284 <HAL_DMA_IRQHandler+0x118>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003620:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8003622:	07dc      	lsls	r4, r3, #31
 8003624:	d51e      	bpl.n	8003664 <HAL_DMA_IRQHandler+0x4f8>
        __HAL_DMA_DISABLE(hdma);
 8003626:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003628:	2104      	movs	r1, #4
 800362a:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 800362e:	4978      	ldr	r1, [pc, #480]	@ (8003810 <HAL_DMA_IRQHandler+0x6a4>)
        __HAL_DMA_DISABLE(hdma);
 8003630:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003632:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8003636:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800363a:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e002      	b.n	8003646 <HAL_DMA_IRQHandler+0x4da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003640:	6813      	ldr	r3, [r2, #0]
 8003642:	07d8      	lsls	r0, r3, #31
 8003644:	d504      	bpl.n	8003650 <HAL_DMA_IRQHandler+0x4e4>
          if (++count > timeout)
 8003646:	9b01      	ldr	r3, [sp, #4]
 8003648:	3301      	adds	r3, #1
 800364a:	428b      	cmp	r3, r1
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	d9f7      	bls.n	8003640 <HAL_DMA_IRQHandler+0x4d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003654:	bf4c      	ite	mi
 8003656:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003658:	2301      	movpl	r3, #1
 800365a:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800365e:	2300      	movs	r3, #0
 8003660:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8003664:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8003666:	2b00      	cmp	r3, #0
 8003668:	f43f ae0c 	beq.w	8003284 <HAL_DMA_IRQHandler+0x118>
          hdma->XferCpltCallback(hdma);
 800366c:	4630      	mov	r0, r6
}
 800366e:	b002      	add	sp, #8
 8003670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8003674:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003676:	fa27 f102 	lsr.w	r1, r7, r2
 800367a:	07c9      	lsls	r1, r1, #31
 800367c:	f53f ae83 	bmi.w	8003386 <HAL_DMA_IRQHandler+0x21a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003680:	2104      	movs	r1, #4
 8003682:	4091      	lsls	r1, r2
 8003684:	420f      	tst	r7, r1
 8003686:	f47f aee2 	bne.w	800344e <HAL_DMA_IRQHandler+0x2e2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800368a:	2110      	movs	r1, #16
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	4217      	tst	r7, r2
 8003692:	f47f af31 	bne.w	80034f8 <HAL_DMA_IRQHandler+0x38c>
 8003696:	e745      	b.n	8003524 <HAL_DMA_IRQHandler+0x3b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003698:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 800369c:	f04f 0c08 	mov.w	ip, #8
 80036a0:	f00e 021f 	and.w	r2, lr, #31
 80036a4:	fa0c f102 	lsl.w	r1, ip, r2
 80036a8:	420f      	tst	r7, r1
 80036aa:	f47f ae06 	bne.w	80032ba <HAL_DMA_IRQHandler+0x14e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036ae:	fa27 f102 	lsr.w	r1, r7, r2
 80036b2:	07c9      	lsls	r1, r1, #31
 80036b4:	f53f ae67 	bmi.w	8003386 <HAL_DMA_IRQHandler+0x21a>
 80036b8:	e66f      	b.n	800339a <HAL_DMA_IRQHandler+0x22e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036ba:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 80036be:	2108      	movs	r1, #8
 80036c0:	f00e 021f 	and.w	r2, lr, #31
 80036c4:	4091      	lsls	r1, r2
 80036c6:	420f      	tst	r7, r1
 80036c8:	f47f adf7 	bne.w	80032ba <HAL_DMA_IRQHandler+0x14e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036cc:	fa27 f102 	lsr.w	r1, r7, r2
 80036d0:	07c9      	lsls	r1, r1, #31
 80036d2:	f53f ae58 	bmi.w	8003386 <HAL_DMA_IRQHandler+0x21a>
 80036d6:	e660      	b.n	800339a <HAL_DMA_IRQHandler+0x22e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0319      	lsls	r1, r3, #12
 80036dc:	f57f af1c 	bpl.w	8003518 <HAL_DMA_IRQHandler+0x3ac>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036e0:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f47f af1a 	bne.w	800351c <HAL_DMA_IRQHandler+0x3b0>
 80036e8:	e71c      	b.n	8003524 <HAL_DMA_IRQHandler+0x3b8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ea:	f023 0316 	bic.w	r3, r3, #22
 80036ee:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036f0:	6953      	ldr	r3, [r2, #20]
 80036f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f6:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80036fa:	b31b      	cbz	r3, 8003744 <HAL_DMA_IRQHandler+0x5d8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	f023 0308 	bic.w	r3, r3, #8
 8003702:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003704:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003706:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8003708:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800370a:	408b      	lsls	r3, r1
 800370c:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 800370e:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003710:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003714:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1a7      	bne.n	800366c <HAL_DMA_IRQHandler+0x500>
 800371c:	e5b2      	b.n	8003284 <HAL_DMA_IRQHandler+0x118>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800371e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003722:	f47f af75 	bne.w	8003610 <HAL_DMA_IRQHandler+0x4a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003726:	6811      	ldr	r1, [r2, #0]
 8003728:	f021 0110 	bic.w	r1, r1, #16
 800372c:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800372e:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003730:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003734:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003738:	e76a      	b.n	8003610 <HAL_DMA_IRQHandler+0x4a4>
            if(hdma->XferM1CpltCallback != NULL)
 800373a:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af69 	bne.w	8003614 <HAL_DMA_IRQHandler+0x4a8>
 8003742:	e769      	b.n	8003618 <HAL_DMA_IRQHandler+0x4ac>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003744:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1d8      	bne.n	80036fc <HAL_DMA_IRQHandler+0x590>
 800374a:	e7db      	b.n	8003704 <HAL_DMA_IRQHandler+0x598>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800374c:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800374e:	2104      	movs	r1, #4
 8003750:	4091      	lsls	r1, r2
 8003752:	4239      	tst	r1, r7
 8003754:	f43f ae85 	beq.w	8003462 <HAL_DMA_IRQHandler+0x2f6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003758:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800375a:	2110      	movs	r1, #16
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4217      	tst	r7, r2
 8003762:	f43f aedf 	beq.w	8003524 <HAL_DMA_IRQHandler+0x3b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800376c:	e6c7      	b.n	80034fe <HAL_DMA_IRQHandler+0x392>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800376e:	2502      	movs	r5, #2
 8003770:	4085      	lsls	r5, r0
 8003772:	420d      	tst	r5, r1
 8003774:	d00f      	beq.n	8003796 <HAL_DMA_IRQHandler+0x62a>
 8003776:	0797      	lsls	r7, r2, #30
 8003778:	d50d      	bpl.n	8003796 <HAL_DMA_IRQHandler+0x62a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377a:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800377c:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800377e:	d534      	bpl.n	80037ea <HAL_DMA_IRQHandler+0x67e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003780:	03d7      	lsls	r7, r2, #15
 8003782:	d43e      	bmi.n	8003802 <HAL_DMA_IRQHandler+0x696>
          if(hdma->XferM1CpltCallback != NULL)
 8003784:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8003786:	2b00      	cmp	r3, #0
 8003788:	f47f af70 	bne.w	800366c <HAL_DMA_IRQHandler+0x500>
 800378c:	e57a      	b.n	8003284 <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003794:	e72d      	b.n	80035f2 <HAL_DMA_IRQHandler+0x486>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003796:	2508      	movs	r5, #8
 8003798:	4085      	lsls	r5, r0
 800379a:	420d      	tst	r5, r1
 800379c:	f43f ad72 	beq.w	8003284 <HAL_DMA_IRQHandler+0x118>
 80037a0:	0715      	lsls	r5, r2, #28
 80037a2:	f57f ad6f 	bpl.w	8003284 <HAL_DMA_IRQHandler+0x118>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a6:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 80037a8:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037aa:	f022 020e 	bic.w	r2, r2, #14
 80037ae:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037b0:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80037b2:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037b4:	fa03 f000 	lsl.w	r0, r3, r0
 80037b8:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037ba:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 80037bc:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80037c0:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	f43f ad5d 	beq.w	8003284 <HAL_DMA_IRQHandler+0x118>
        hdma->XferErrorCallback(hdma);
 80037ca:	4630      	mov	r0, r6
}
 80037cc:	b002      	add	sp, #8
 80037ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80037d2:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037d4:	0692      	lsls	r2, r2, #26
 80037d6:	d403      	bmi.n	80037e0 <HAL_DMA_IRQHandler+0x674>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80037e0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f47f af42 	bne.w	800366c <HAL_DMA_IRQHandler+0x500>
 80037e8:	e54c      	b.n	8003284 <HAL_DMA_IRQHandler+0x118>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037ea:	f012 0220 	ands.w	r2, r2, #32
 80037ee:	d108      	bne.n	8003802 <HAL_DMA_IRQHandler+0x696>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037f0:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80037f2:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037f4:	f021 010a 	bic.w	r1, r1, #10
 80037f8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80037fa:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80037fe:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003802:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f af31 	bne.w	800366c <HAL_DMA_IRQHandler+0x500>
 800380a:	e53b      	b.n	8003284 <HAL_DMA_IRQHandler+0x118>
 800380c:	400204b8 	.word	0x400204b8
 8003810:	1b4e81b5 	.word	0x1b4e81b5

08003814 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003814:	2800      	cmp	r0, #0
 8003816:	d035      	beq.n	8003884 <HAL_DMA2D_Init+0x70>
{
 8003818:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800381a:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800381e:	4604      	mov	r4, r0
 8003820:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003824:	b34b      	cbz	r3, 800387a <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003826:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003828:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800382a:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800382c:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003830:	69e1      	ldr	r1, [r4, #28]
 8003832:	681d      	ldr	r5, [r3, #0]
 8003834:	4814      	ldr	r0, [pc, #80]	@ (8003888 <HAL_DMA2D_Init+0x74>)
 8003836:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003838:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800383a:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800383c:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800383e:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003840:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003842:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003844:	4302      	orrs	r2, r0
 8003846:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003848:	4810      	ldr	r0, [pc, #64]	@ (800388c <HAL_DMA2D_Init+0x78>)
 800384a:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800384c:	4910      	ldr	r1, [pc, #64]	@ (8003890 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800384e:	4302      	orrs	r2, r0
 8003850:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003854:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003856:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800385a:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800385c:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800385e:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003860:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003862:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003866:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003868:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800386c:	430a      	orrs	r2, r1
 800386e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003870:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003872:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003874:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8003878:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800387a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800387e:	f7fd f96f 	bl	8000b60 <HAL_DMA2D_MspInit>
 8003882:	e7d0      	b.n	8003826 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
}
 8003886:	4770      	bx	lr
 8003888:	fff8ffbf 	.word	0xfff8ffbf
 800388c:	fffffef8 	.word	0xfffffef8
 8003890:	ffff0000 	.word	0xffff0000

08003894 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop

0800389c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800389c:	6803      	ldr	r3, [r0, #0]
{
 800389e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038a0:	685d      	ldr	r5, [r3, #4]
{
 80038a2:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038a4:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038a6:	07ea      	lsls	r2, r5, #31
 80038a8:	d501      	bpl.n	80038ae <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038aa:	05f1      	lsls	r1, r6, #23
 80038ac:	d456      	bmi.n	800395c <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038ae:	06aa      	lsls	r2, r5, #26
 80038b0:	d501      	bpl.n	80038b6 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80038b2:	04b3      	lsls	r3, r6, #18
 80038b4:	d43b      	bmi.n	800392e <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038b6:	0728      	lsls	r0, r5, #28
 80038b8:	d501      	bpl.n	80038be <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80038ba:	0531      	lsls	r1, r6, #20
 80038bc:	d421      	bmi.n	8003902 <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80038be:	076a      	lsls	r2, r5, #29
 80038c0:	d501      	bpl.n	80038c6 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80038c2:	0573      	lsls	r3, r6, #21
 80038c4:	d472      	bmi.n	80039ac <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80038c6:	07a8      	lsls	r0, r5, #30
 80038c8:	d501      	bpl.n	80038ce <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80038ca:	05b1      	lsls	r1, r6, #22
 80038cc:	d404      	bmi.n	80038d8 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80038ce:	06ea      	lsls	r2, r5, #27
 80038d0:	d501      	bpl.n	80038d6 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80038d2:	04f3      	lsls	r3, r6, #19
 80038d4:	d457      	bmi.n	8003986 <HAL_DMA2D_IRQHandler+0xea>
}
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80038e2:	2202      	movs	r2, #2
 80038e4:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038e6:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038ea:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
 80038ec:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038ee:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80038f2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80038f6:	6a23      	ldr	r3, [r4, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0e8      	beq.n	80038ce <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 80038fc:	4620      	mov	r0, r4
 80038fe:	4798      	blx	r3
 8003900:	e7e5      	b.n	80038ce <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800390c:	2208      	movs	r2, #8
 800390e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003910:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003914:	4313      	orrs	r3, r2
 8003916:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003918:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800391c:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 800391e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
 8003920:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ca      	beq.n	80038be <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 8003928:	4620      	mov	r0, r4
 800392a:	4798      	blx	r3
 800392c:	e7c7      	b.n	80038be <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003936:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003938:	2220      	movs	r2, #32
 800393a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800393c:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800393e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003946:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800394a:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 800394c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_UNLOCK(hdma2d);
 800394e:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0af      	beq.n	80038b6 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 8003956:	4620      	mov	r0, r4
 8003958:	4798      	blx	r3
 800395a:	e7ac      	b.n	80038b6 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003962:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003964:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800396c:	2201      	movs	r2, #1
 800396e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003970:	2304      	movs	r3, #4
 8003972:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8003976:	2300      	movs	r3, #0
 8003978:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800397c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d095      	beq.n	80038ae <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 8003982:	4798      	blx	r3
 8003984:	e793      	b.n	80038ae <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003986:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003988:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800398a:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800398c:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003994:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003996:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003998:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800399a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(hdma2d);
 800399c:	f884 5060 	strb.w	r5, [r4, #96]	@ 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039a0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039a2:	f884 1061 	strb.w	r1, [r4, #97]	@ 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039a6:	f7ff ff77 	bl	8003898 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039ac:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039ae:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039b8:	2204      	movs	r2, #4
 80039ba:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039bc:	f7ff ff6a 	bl	8003894 <HAL_DMA2D_LineEventCallback>
 80039c0:	e781      	b.n	80038c6 <HAL_DMA2D_IRQHandler+0x2a>
 80039c2:	bf00      	nop

080039c4 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039c4:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 80039c8:	2a01      	cmp	r2, #1
 80039ca:	d05f      	beq.n	8003a8c <HAL_DMA2D_ConfigLayer+0xc8>
 80039cc:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039ce:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039d2:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039d4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80039d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80039dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80039de:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 80039e4:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039e8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039ea:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80039ec:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039ee:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80039f0:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039f6:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039fa:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80039fc:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039fe:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a02:	ea42 5244 	orr.w	r2, r2, r4, lsl #21

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a06:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a08:	d923      	bls.n	8003a52 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a0a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a0e:	b971      	cbnz	r1, 8003a2e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003a12:	491f      	ldr	r1, [pc, #124]	@ (8003a90 <HAL_DMA2D_ConfigLayer+0xcc>)
 8003a14:	4001      	ands	r1, r0

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a16:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a1c:	61a0      	str	r0, [r4, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a1e:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a20:	2101      	movs	r1, #1

  return HAL_OK;
 8003a22:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a24:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 8003a28:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003a2e:	2d0b      	cmp	r5, #11
 8003a30:	d12a      	bne.n	8003a88 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003a32:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003a34:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8003a38:	4816      	ldr	r0, [pc, #88]	@ (8003a94 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a3a:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a3e:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a40:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a44:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a46:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a4e:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a50:	e7e5      	b.n	8003a1e <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a52:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 8003a56:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a58:	b959      	cbnz	r1, 8003a72 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a5a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003a5c:	490c      	ldr	r1, [pc, #48]	@ (8003a90 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a5e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a60:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a62:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a64:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a66:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a6a:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a6c:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a6e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8003a70:	e7d5      	b.n	8003a1e <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a72:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a74:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a78:	4905      	ldr	r1, [pc, #20]	@ (8003a90 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a7a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a7c:	4029      	ands	r1, r5
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a82:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a84:	6226      	str	r6, [r4, #32]
 8003a86:	e7ca      	b.n	8003a1e <HAL_DMA2D_ConfigLayer+0x5a>
 8003a88:	4801      	ldr	r0, [pc, #4]	@ (8003a90 <HAL_DMA2D_ConfigLayer+0xcc>)
 8003a8a:	e7d6      	b.n	8003a3a <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 8003a8c:	2002      	movs	r0, #2
}
 8003a8e:	4770      	bx	lr
 8003a90:	00ccfff0 	.word	0x00ccfff0
 8003a94:	00c0fff0 	.word	0x00c0fff0

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a9c:	680c      	ldr	r4, [r1, #0]
{
 8003a9e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aa0:	2c00      	cmp	r4, #0
 8003aa2:	f000 80a5 	beq.w	8003bf0 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 8003aa6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003aa8:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aac:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ab0:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ab2:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8003ab6:	ea1c 0a04 	ands.w	sl, ip, r4
 8003aba:	f000 8094 	beq.w	8003be6 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003abe:	9900      	ldr	r1, [sp, #0]
 8003ac0:	005f      	lsls	r7, r3, #1
 8003ac2:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ac4:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac6:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003aca:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ace:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ad2:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad4:	f1b8 0f01 	cmp.w	r8, #1
 8003ad8:	f240 808d 	bls.w	8003bf6 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003adc:	2a03      	cmp	r2, #3
 8003ade:	f040 80cb 	bne.w	8003c78 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003ae4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003aea:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aee:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8003af2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af4:	d077      	beq.n	8003be6 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	4e7f      	ldr	r6, [pc, #508]	@ (8003cf4 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003af8:	f003 0703 	and.w	r7, r3, #3
 8003afc:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afe:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b02:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b04:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b08:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b0c:	497a      	ldr	r1, [pc, #488]	@ (8003cf8 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0e:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 8003b12:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 8003b16:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b1a:	4288      	cmp	r0, r1
 8003b1c:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b20:	f002 0202 	and.w	r2, r2, #2
 8003b24:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b2e:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b32:	d031      	beq.n	8003b98 <HAL_GPIO_Init+0x100>
 8003b34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b38:	4288      	cmp	r0, r1
 8003b3a:	f000 80b0 	beq.w	8003c9e <HAL_GPIO_Init+0x206>
 8003b3e:	496f      	ldr	r1, [pc, #444]	@ (8003cfc <HAL_GPIO_Init+0x264>)
 8003b40:	4288      	cmp	r0, r1
 8003b42:	f000 80b2 	beq.w	8003caa <HAL_GPIO_Init+0x212>
 8003b46:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8003d00 <HAL_GPIO_Init+0x268>
 8003b4a:	4560      	cmp	r0, ip
 8003b4c:	f000 80a1 	beq.w	8003c92 <HAL_GPIO_Init+0x1fa>
 8003b50:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8003d04 <HAL_GPIO_Init+0x26c>
 8003b54:	4560      	cmp	r0, ip
 8003b56:	f000 80b4 	beq.w	8003cc2 <HAL_GPIO_Init+0x22a>
 8003b5a:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8003d08 <HAL_GPIO_Init+0x270>
 8003b5e:	4560      	cmp	r0, ip
 8003b60:	f000 80b5 	beq.w	8003cce <HAL_GPIO_Init+0x236>
 8003b64:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8003d0c <HAL_GPIO_Init+0x274>
 8003b68:	4560      	cmp	r0, ip
 8003b6a:	f000 80a4 	beq.w	8003cb6 <HAL_GPIO_Init+0x21e>
 8003b6e:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003d10 <HAL_GPIO_Init+0x278>
 8003b72:	4560      	cmp	r0, ip
 8003b74:	f000 80b1 	beq.w	8003cda <HAL_GPIO_Init+0x242>
 8003b78:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8003d14 <HAL_GPIO_Init+0x27c>
 8003b7c:	4560      	cmp	r0, ip
 8003b7e:	f000 80b2 	beq.w	8003ce6 <HAL_GPIO_Init+0x24e>
 8003b82:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003d18 <HAL_GPIO_Init+0x280>
 8003b86:	4560      	cmp	r0, ip
 8003b88:	bf0c      	ite	eq
 8003b8a:	f04f 0c09 	moveq.w	ip, #9
 8003b8e:	f04f 0c0a 	movne.w	ip, #10
 8003b92:	fa0c f707 	lsl.w	r7, ip, r7
 8003b96:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b98:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b9a:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003b9c:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8003ba0:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8003ba4:	bf4c      	ite	mi
 8003ba6:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8003baa:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bac:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8003bae:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8003bb2:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8003bb6:	bf54      	ite	pl
 8003bb8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003bba:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bbe:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003bc0:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003bc4:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003bc8:	bf54      	ite	pl
 8003bca:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003bcc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd0:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003bd2:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003bd6:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003bda:	bf54      	ite	pl
 8003bdc:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003bde:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003be2:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8003be6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003be8:	fa34 f203 	lsrs.w	r2, r4, r3
 8003bec:	f47f af61 	bne.w	8003ab2 <HAL_GPIO_Init+0x1a>
  }
}
 8003bf0:	b005      	add	sp, #20
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bf6:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf8:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8003bfa:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bfe:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c00:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c04:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c08:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c0a:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c0e:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8003c10:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c14:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003c18:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c1c:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c20:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c24:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003c28:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c2c:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8003c30:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c34:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c38:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003c3c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c40:	f47f af4f 	bne.w	8003ae2 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c44:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c48:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8003c4a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c4e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c52:	6909      	ldr	r1, [r1, #16]
 8003c54:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003c58:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8003c5c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c60:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c62:	210f      	movs	r1, #15
 8003c64:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c68:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c6a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c6e:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003c72:	f8c8 c020 	str.w	ip, [r8, #32]
 8003c76:	e734      	b.n	8003ae2 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c78:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8003c7a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7e:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c80:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c84:	fa01 fc07 	lsl.w	ip, r1, r7
 8003c88:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003c8c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c90:	e727      	b.n	8003ae2 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c92:	f04f 0c03 	mov.w	ip, #3
 8003c96:	fa0c f707 	lsl.w	r7, ip, r7
 8003c9a:	433a      	orrs	r2, r7
 8003c9c:	e77c      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003c9e:	f04f 0c01 	mov.w	ip, #1
 8003ca2:	fa0c f707 	lsl.w	r7, ip, r7
 8003ca6:	433a      	orrs	r2, r7
 8003ca8:	e776      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003caa:	f04f 0c02 	mov.w	ip, #2
 8003cae:	fa0c f707 	lsl.w	r7, ip, r7
 8003cb2:	433a      	orrs	r2, r7
 8003cb4:	e770      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003cb6:	f04f 0c06 	mov.w	ip, #6
 8003cba:	fa0c f707 	lsl.w	r7, ip, r7
 8003cbe:	433a      	orrs	r2, r7
 8003cc0:	e76a      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003cc2:	f04f 0c04 	mov.w	ip, #4
 8003cc6:	fa0c f707 	lsl.w	r7, ip, r7
 8003cca:	433a      	orrs	r2, r7
 8003ccc:	e764      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003cce:	f04f 0c05 	mov.w	ip, #5
 8003cd2:	fa0c f707 	lsl.w	r7, ip, r7
 8003cd6:	433a      	orrs	r2, r7
 8003cd8:	e75e      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003cda:	f04f 0c07 	mov.w	ip, #7
 8003cde:	fa0c f707 	lsl.w	r7, ip, r7
 8003ce2:	433a      	orrs	r2, r7
 8003ce4:	e758      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003ce6:	f04f 0c08 	mov.w	ip, #8
 8003cea:	fa0c f707 	lsl.w	r7, ip, r7
 8003cee:	433a      	orrs	r2, r7
 8003cf0:	e752      	b.n	8003b98 <HAL_GPIO_Init+0x100>
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58020000 	.word	0x58020000
 8003cfc:	58020800 	.word	0x58020800
 8003d00:	58020c00 	.word	0x58020c00
 8003d04:	58021000 	.word	0x58021000
 8003d08:	58021400 	.word	0x58021400
 8003d0c:	58021800 	.word	0x58021800
 8003d10:	58021c00 	.word	0x58021c00
 8003d14:	58022000 	.word	0x58022000
 8003d18:	58022400 	.word	0x58022400

08003d1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003d1c:	6903      	ldr	r3, [r0, #16]
 8003d1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003d20:	bf14      	ite	ne
 8003d22:	2001      	movne	r0, #1
 8003d24:	2000      	moveq	r0, #0
 8003d26:	4770      	bx	lr

08003d28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d28:	b902      	cbnz	r2, 8003d2c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d2a:	0409      	lsls	r1, r1, #16
 8003d2c:	6181      	str	r1, [r0, #24]
  }
}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d067      	beq.n	8003e04 <HAL_LTDC_Init+0xd4>
{
 8003d34:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d36:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05a      	beq.n	8003dfa <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d44:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d46:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d48:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d4c:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d50:	4302      	orrs	r2, r0
 8003d52:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d54:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d56:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d58:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d5a:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d5e:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d60:	4929      	ldr	r1, [pc, #164]	@ (8003e08 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d62:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d64:	6998      	ldr	r0, [r3, #24]
 8003d66:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d68:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	400a      	ands	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d78:	69a0      	ldr	r0, [r4, #24]
 8003d7a:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d7c:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d7e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	400a      	ands	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d8c:	6a20      	ldr	r0, [r4, #32]
 8003d8e:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d90:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d92:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	400a      	ands	r2, r1
 8003d98:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003da0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003da2:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003da4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003da6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	400a      	ands	r2, r1
 8003dac:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003db2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003db6:	430a      	orrs	r2, r1
 8003db8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003dbc:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dc0:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003dc4:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dca:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8003dcc:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8003dd0:	432a      	orrs	r2, r5
 8003dd2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003dd6:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003de0:	f042 0206 	orr.w	r2, r2, #6
 8003de4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003dee:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003df0:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003df4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1

  return HAL_OK;
}
 8003df8:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003dfa:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003dfe:	f7fd f913 	bl	8001028 <HAL_LTDC_MspInit>
 8003e02:	e79f      	b.n	8003d44 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8003e04:	2001      	movs	r0, #1
}
 8003e06:	4770      	bx	lr
 8003e08:	f000f800 	.word	0xf000f800

08003e0c <HAL_LTDC_ErrorCallback>:
  * @brief  Error LTDC callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <HAL_LTDC_ReloadEventCallback>:
  * @brief  Reload Event callback.
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop

08003e14 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e14:	6803      	ldr	r3, [r0, #0]
{
 8003e16:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e18:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
{
 8003e1a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e1c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e1e:	076a      	lsls	r2, r5, #29
 8003e20:	d501      	bpl.n	8003e26 <HAL_LTDC_IRQHandler+0x12>
 8003e22:	0771      	lsls	r1, r6, #29
 8003e24:	d41d      	bmi.n	8003e62 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e26:	07aa      	lsls	r2, r5, #30
 8003e28:	d501      	bpl.n	8003e2e <HAL_LTDC_IRQHandler+0x1a>
 8003e2a:	07b3      	lsls	r3, r6, #30
 8003e2c:	d42d      	bmi.n	8003e8a <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e2e:	07e8      	lsls	r0, r5, #31
 8003e30:	d501      	bpl.n	8003e36 <HAL_LTDC_IRQHandler+0x22>
 8003e32:	07f1      	lsls	r1, r6, #31
 8003e34:	d440      	bmi.n	8003eb8 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e36:	072a      	lsls	r2, r5, #28
 8003e38:	d501      	bpl.n	8003e3e <HAL_LTDC_IRQHandler+0x2a>
 8003e3a:	0733      	lsls	r3, r6, #28
 8003e3c:	d400      	bmi.n	8003e40 <HAL_LTDC_IRQHandler+0x2c>
}
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e40:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e42:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e44:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8003e46:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4a:	f022 0208 	bic.w	r2, r2, #8
 8003e4e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e50:	63d8      	str	r0, [r3, #60]	@ 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e52:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e54:	f884 50a1 	strb.w	r5, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8003e58:	f884 10a0 	strb.w	r1, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e5c:	f7ff ffd8 	bl	8003e10 <HAL_LTDC_ReloadEventCallback>
}
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e64:	f022 0204 	bic.w	r2, r2, #4
 8003e68:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e6e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8003e7a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e7c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8003e80:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003e84:	f7ff ffc2 	bl	8003e0c <HAL_LTDC_ErrorCallback>
 8003e88:	e7cd      	b.n	8003e26 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e8a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8003e8c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e90:	f022 0202 	bic.w	r2, r2, #2
 8003e94:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e96:	2202      	movs	r2, #2
 8003e98:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e9a:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e9c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8003ea8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003eaa:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8003eae:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003eb2:	f7ff ffab 	bl	8003e0c <HAL_LTDC_ErrorCallback>
 8003eb6:	e7ba      	b.n	8003e2e <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003eb8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8003eba:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8003ec8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8003eca:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8003ece:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003ed2:	f00a f995 	bl	800e200 <HAL_LTDC_LineEventCallback>
 8003ed6:	e7ae      	b.n	8003e36 <HAL_LTDC_IRQHandler+0x22>

08003ed8 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ed8:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f000 80c6 	beq.w	800406e <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ee2:	2302      	movs	r3, #2
{
 8003ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ee8:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003eec:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ef0:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
{
 8003ef4:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ef6:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003efa:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003efc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f00:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f02:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 8003f06:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f08:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 8003f0c:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f0e:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f12:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f16:	f8df a164 	ldr.w	sl, [pc, #356]	@ 800407c <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f1a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003f1e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003f22:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f2c:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003f38:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f3a:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f3c:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f40:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f42:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f44:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f48:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003f4c:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f4e:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f50:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f54:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f58:	440b      	add	r3, r1
 8003f5a:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f5e:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f62:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f66:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f6a:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f72:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f74:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f78:	68ab      	ldr	r3, [r5, #8]
 8003f7a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003f84:	4403      	add	r3, r0
 8003f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f8a:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f8c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f90:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8003f94:	f023 0307 	bic.w	r3, r3, #7
 8003f98:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f9c:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003fa0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8003fa4:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003fa6:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003faa:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003fae:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003fb2:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 8003fb6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8003fba:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003fbe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003fc2:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003fc6:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8003fca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fce:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003fd2:	696b      	ldr	r3, [r5, #20]
 8003fd4:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003fd8:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fdc:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003fde:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fe2:	6a28      	ldr	r0, [r5, #32]
 8003fe4:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003fe6:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fea:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fee:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ff8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003ffa:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ffe:	b3a1      	cbz	r1, 800406a <HAL_LTDC_ConfigLayer+0x192>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004000:	2901      	cmp	r1, #1
 8004002:	d036      	beq.n	8004072 <HAL_LTDC_ConfigLayer+0x19a>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004004:	1e8b      	subs	r3, r1, #2
 8004006:	2907      	cmp	r1, #7
 8004008:	bf18      	it	ne
 800400a:	2b02      	cmpne	r3, #2
 800400c:	bf94      	ite	ls
 800400e:	2301      	movls	r3, #1
 8004010:	2300      	movhi	r3, #0
 8004012:	3301      	adds	r3, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004014:	1abf      	subs	r7, r7, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004016:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004018:	fb03 f707 	mul.w	r7, r3, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800401c:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004020:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004022:	3707      	adds	r7, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004024:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004028:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 800402c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004030:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004034:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004038:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <HAL_LTDC_ConfigLayer+0x1a0>)
 800403a:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
 800403e:	400b      	ands	r3, r1
 8004040:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004044:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004048:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800404a:	f859 3006 	ldr.w	r3, [r9, r6]
 800404e:	4313      	orrs	r3, r2
 8004050:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 8004054:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004056:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
 800405a:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 800405c:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004060:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 8004064:	b003      	add	sp, #12
 8004066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4U;
 800406a:	2304      	movs	r3, #4
 800406c:	e7d2      	b.n	8004014 <HAL_LTDC_ConfigLayer+0x13c>
  __HAL_LOCK(hltdc);
 800406e:	2002      	movs	r0, #2
}
 8004070:	4770      	bx	lr
    tmp = 3U;
 8004072:	2303      	movs	r3, #3
 8004074:	e7ce      	b.n	8004014 <HAL_LTDC_ConfigLayer+0x13c>
 8004076:	bf00      	nop
 8004078:	fffff800 	.word	0xfffff800
 800407c:	fffff8f8 	.word	0xfffff8f8

08004080 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8004080:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8004084:	2a01      	cmp	r2, #1
 8004086:	d019      	beq.n	80040bc <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004088:	6802      	ldr	r2, [r0, #0]
 800408a:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800408c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
 800408e:	f04f 0c00 	mov.w	ip, #0
{
 8004092:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004094:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004098:	6b50      	ldr	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800409a:	4c09      	ldr	r4, [pc, #36]	@ (80040c0 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800409c:	f020 0001 	bic.w	r0, r0, #1
 80040a0:	6350      	str	r0, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80040a2:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
 80040a4:	6421      	str	r1, [r4, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80040a6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80040a8:	4301      	orrs	r1, r0
 80040aa:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80040ac:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  return HAL_OK;
 80040b0:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
 80040b2:	f883 c0a0 	strb.w	ip, [r3, #160]	@ 0xa0
}
 80040b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ba:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80040bc:	2002      	movs	r0, #2
}
 80040be:	4770      	bx	lr
 80040c0:	50001000 	.word	0x50001000

080040c4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7fe fb8e 	bl	80027e8 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80040cc:	2c00      	cmp	r4, #0
 80040ce:	d058      	beq.n	8004182 <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80040d0:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80040d2:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 80040d4:	2100      	movs	r1, #0
 80040d6:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80040d8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80040dc:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80040e8:	e005      	b.n	80040f6 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80040ea:	f7fe fb7d 	bl	80027e8 <HAL_GetTick>
 80040ee:	1b43      	subs	r3, r0, r5
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d841      	bhi.n	8004178 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	07d2      	lsls	r2, r2, #31
 80040fa:	d4f6      	bmi.n	80040ea <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80040fc:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 8004100:	69e0      	ldr	r0, [r4, #28]
 8004102:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004104:	68e1      	ldr	r1, [r4, #12]
 8004106:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004108:	4302      	orrs	r2, r0
 800410a:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800410c:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800410e:	4302      	orrs	r2, r0
 8004110:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004112:	4302      	orrs	r2, r0
 8004114:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004116:	4302      	orrs	r2, r0
 8004118:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800411a:	4302      	orrs	r2, r0
 800411c:	68a0      	ldr	r0, [r4, #8]
 800411e:	4302      	orrs	r2, r0
 8004120:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004122:	3801      	subs	r0, #1
 8004124:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004128:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800412a:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800412c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004130:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004132:	d103      	bne.n	800413c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800413a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800413c:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800413e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004140:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 8004142:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004144:	db1f      	blt.n	8004186 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004146:	b292      	uxth	r2, r2
 8004148:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800414a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800414c:	2a00      	cmp	r2, #0
 800414e:	db24      	blt.n	800419a <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004150:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004152:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004156:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800415a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800415c:	d029      	beq.n	80041b2 <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800415e:	b2c0      	uxtb	r0, r0
 8004160:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004162:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8004164:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8004166:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 8004168:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800416a:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800416c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800416e:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 8004172:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 8004176:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8004178:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800417a:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800417c:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800417e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8004182:	2001      	movs	r0, #1
}
 8004184:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004186:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8004188:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800418a:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800418e:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004190:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8004192:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004194:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004196:	2a00      	cmp	r2, #0
 8004198:	dada      	bge.n	8004150 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800419a:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800419c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800419e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80041a2:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 80041a6:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80041a8:	6a19      	ldr	r1, [r3, #32]
 80041aa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80041ae:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80041b0:	d1d5      	bne.n	800415e <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 80041b2:	2200      	movs	r2, #0
 80041b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80041b6:	e7d4      	b.n	8004162 <HAL_MDMA_Init+0x9e>

080041b8 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 80041b8:	b308      	cbz	r0, 80041fe <HAL_MDMA_ConfigPostRequestMask+0x46>
 80041ba:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
 80041bc:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80041c0:	2801      	cmp	r0, #1
 80041c2:	d01e      	beq.n	8004202 <HAL_MDMA_ConfigPostRequestMask+0x4a>
{
 80041c4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
 80041c6:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80041ca:	f893 c03d 	ldrb.w	ip, [r3, #61]	@ 0x3d
 80041ce:	45f4      	cmp	ip, lr
 80041d0:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
 80041d4:	f883 e03c 	strb.w	lr, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80041d8:	d004      	beq.n	80041e4 <HAL_MDMA_ConfigPostRequestMask+0x2c>
      status =  HAL_ERROR;
 80041da:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80041e2:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80041e4:	681c      	ldr	r4, [r3, #0]
 80041e6:	6925      	ldr	r5, [r4, #16]
 80041e8:	006d      	lsls	r5, r5, #1
 80041ea:	d4f7      	bmi.n	80041dc <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
 80041ec:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80041ee:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80041f0:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 80041f2:	b941      	cbnz	r1, 8004206 <HAL_MDMA_ConfigPostRequestMask+0x4e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80041f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041f8:	6122      	str	r2, [r4, #16]
  HAL_StatusTypeDef  status = HAL_OK;
 80041fa:	2000      	movs	r0, #0
 80041fc:	e7ee      	b.n	80041dc <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
 80041fe:	2001      	movs	r0, #1
 8004200:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 8004202:	2002      	movs	r0, #2
}
 8004204:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8004206:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800420a:	6122      	str	r2, [r4, #16]
 800420c:	e7f5      	b.n	80041fa <HAL_MDMA_ConfigPostRequestMask+0x42>
 800420e:	bf00      	nop

08004210 <HAL_MDMA_IRQHandler>:
{
 8004210:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 8004212:	2300      	movs	r3, #0
{
 8004214:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8004216:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 800421a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800421c:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800421e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8004222:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8004224:	4a57      	ldr	r2, [pc, #348]	@ (8004384 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8004226:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	441a      	add	r2, r3
 800422c:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8004234:	4202      	tst	r2, r0
 8004236:	f000 80a0 	beq.w	800437a <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	07d1      	lsls	r1, r2, #31
 800423e:	d529      	bpl.n	8004294 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	0792      	lsls	r2, r2, #30
 8004244:	d526      	bpl.n	8004294 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	f022 0202 	bic.w	r2, r2, #2
 800424c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800424e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8004250:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8004252:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8004254:	bf54      	ite	pl
 8004256:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800425a:	f041 0102 	orrmi.w	r1, r1, #2
 800425e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8004260:	0591      	lsls	r1, r2, #22
 8004262:	d503      	bpl.n	800426c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8004264:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004266:	f041 0104 	orr.w	r1, r1, #4
 800426a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800426c:	05d0      	lsls	r0, r2, #23
 800426e:	d503      	bpl.n	8004278 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8004270:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004272:	f041 0108 	orr.w	r1, r1, #8
 8004276:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8004278:	0551      	lsls	r1, r2, #21
 800427a:	d503      	bpl.n	8004284 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800427c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800427e:	f041 0110 	orr.w	r1, r1, #16
 8004282:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8004284:	0510      	lsls	r0, r2, #20
 8004286:	d503      	bpl.n	8004290 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8004288:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800428a:	f042 0220 	orr.w	r2, r2, #32
 800428e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8004290:	2201      	movs	r2, #1
 8004292:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	06d1      	lsls	r1, r2, #27
 8004298:	d509      	bpl.n	80042ae <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	0692      	lsls	r2, r2, #26
 800429e:	d506      	bpl.n	80042ae <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80042a0:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 80042a2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80042a4:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 80042a6:	b112      	cbz	r2, 80042ae <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 80042a8:	4620      	mov	r0, r4
 80042aa:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	0710      	lsls	r0, r2, #28
 80042b2:	d509      	bpl.n	80042c8 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	06d1      	lsls	r1, r2, #27
 80042b8:	d506      	bpl.n	80042c8 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80042ba:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 80042bc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80042be:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 80042c0:	b112      	cbz	r2, 80042c8 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 80042c2:	4620      	mov	r0, r4
 80042c4:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	0752      	lsls	r2, r2, #29
 80042cc:	d509      	bpl.n	80042e2 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	0710      	lsls	r0, r2, #28
 80042d2:	d506      	bpl.n	80042e2 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80042d4:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80042d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80042d8:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80042da:	b112      	cbz	r2, 80042e2 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80042dc:	4620      	mov	r0, r4
 80042de:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	0791      	lsls	r1, r2, #30
 80042e6:	d516      	bpl.n	8004316 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	0752      	lsls	r2, r2, #29
 80042ec:	d513      	bpl.n	8004316 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80042f4:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80042f6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80042fa:	2a04      	cmp	r2, #4
 80042fc:	d034      	beq.n	8004368 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80042fe:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 8004300:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8004302:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8004304:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8004306:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8004308:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800430c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8004310:	b10b      	cbz	r3, 8004316 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 8004312:	4620      	mov	r0, r4
 8004314:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8004316:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02e      	beq.n	800437a <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 800431c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800431e:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8004320:	4b19      	ldr	r3, [pc, #100]	@ (8004388 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004322:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8004326:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 800432a:	68cb      	ldr	r3, [r1, #12]
 800432c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004330:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8004332:	60cb      	str	r3, [r1, #12]
 8004334:	e002      	b.n	800433c <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8004336:	68cb      	ldr	r3, [r1, #12]
 8004338:	07d8      	lsls	r0, r3, #31
 800433a:	d504      	bpl.n	8004346 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800433c:	9b01      	ldr	r3, [sp, #4]
 800433e:	3301      	adds	r3, #1
 8004340:	4293      	cmp	r3, r2
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	d9f7      	bls.n	8004336 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8004346:	2300      	movs	r3, #0
 8004348:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800434c:	68cb      	ldr	r3, [r1, #12]
 800434e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004350:	bf4c      	ite	mi
 8004352:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8004354:	2301      	movpl	r3, #1
 8004356:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800435a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800435c:	b16b      	cbz	r3, 800437a <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800435e:	4620      	mov	r0, r4
}
 8004360:	b003      	add	sp, #12
 8004362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8004366:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8004368:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800436a:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800436c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 800436e:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8004372:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f1      	bne.n	800435e <HAL_MDMA_IRQHandler+0x14e>
}
 800437a:	b003      	add	sp, #12
 800437c:	bd30      	pop	{r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	24000014 	.word	0x24000014
 8004384:	adffffc0 	.word	0xadffffc0
 8004388:	1b4e81b5 	.word	0x1b4e81b5

0800438c <HAL_PWR_EnableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800438c:	4a02      	ldr	r2, [pc, #8]	@ (8004398 <HAL_PWR_EnableBkUpAccess+0xc>)
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004394:	6013      	str	r3, [r2, #0]
}
 8004396:	4770      	bx	lr
 8004398:	58024800 	.word	0x58024800

0800439c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800439c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800439e:	4c10      	ldr	r4, [pc, #64]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x44>)
 80043a0:	68e3      	ldr	r3, [r4, #12]
 80043a2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043a6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043a8:	d105      	bne.n	80043b6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	1a18      	subs	r0, r3, r0
 80043b0:	bf18      	it	ne
 80043b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043b6:	f023 0307 	bic.w	r3, r3, #7
 80043ba:	4303      	orrs	r3, r0
 80043bc:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80043be:	f7fe fa13 	bl	80027e8 <HAL_GetTick>
 80043c2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043c4:	e005      	b.n	80043d2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043c6:	f7fe fa0f 	bl	80027e8 <HAL_GetTick>
 80043ca:	1b40      	subs	r0, r0, r5
 80043cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80043d0:	d804      	bhi.n	80043dc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043d2:	6863      	ldr	r3, [r4, #4]
 80043d4:	049b      	lsls	r3, r3, #18
 80043d6:	d5f6      	bpl.n	80043c6 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80043d8:	2000      	movs	r0, #0
}
 80043da:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80043dc:	2001      	movs	r0, #1
}
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	58024800 	.word	0x58024800

080043e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7fe f9fe 	bl	80027e8 <HAL_GetTick>

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	d04d      	beq.n	800448c <HAL_QSPI_Init+0xa8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80043f0:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 80043f4:	4606      	mov	r6, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d039      	beq.n	800446e <HAL_QSPI_Init+0x8a>
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80043fa:	6cac      	ldr	r4, [r5, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80043fc:	682a      	ldr	r2, [r5, #0]
 80043fe:	68a9      	ldr	r1, [r5, #8]
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	3901      	subs	r1, #1
 8004404:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004408:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800440c:	6013      	str	r3, [r2, #0]
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800440e:	e001      	b.n	8004414 <HAL_QSPI_Init+0x30>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004410:	1c63      	adds	r3, r4, #1
 8004412:	d124      	bne.n	800445e <HAL_QSPI_Init+0x7a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004414:	6893      	ldr	r3, [r2, #8]
 8004416:	f013 0320 	ands.w	r3, r3, #32
 800441a:	d1f9      	bne.n	8004410 <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800441c:	69e8      	ldr	r0, [r5, #28]
 800441e:	68e9      	ldr	r1, [r5, #12]
 8004420:	6814      	ldr	r4, [r2, #0]
 8004422:	4301      	orrs	r1, r0
 8004424:	6a28      	ldr	r0, [r5, #32]
 8004426:	4301      	orrs	r1, r0
 8004428:	6868      	ldr	r0, [r5, #4]
 800442a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800442e:	4818      	ldr	r0, [pc, #96]	@ (8004490 <HAL_QSPI_Init+0xac>)
 8004430:	4020      	ands	r0, r4
 8004432:	4301      	orrs	r1, r0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004434:	6968      	ldr	r0, [r5, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004436:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004438:	69a9      	ldr	r1, [r5, #24]
 800443a:	6854      	ldr	r4, [r2, #4]
 800443c:	4301      	orrs	r1, r0
 800443e:	6928      	ldr	r0, [r5, #16]
 8004440:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004444:	4813      	ldr	r0, [pc, #76]	@ (8004494 <HAL_QSPI_Init+0xb0>)
 8004446:	4020      	ands	r0, r4
    hqspi->State = HAL_QSPI_STATE_READY;
 8004448:	2401      	movs	r4, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800444a:	4301      	orrs	r1, r0
    hqspi->State = HAL_QSPI_STATE_READY;
 800444c:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800444e:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	4321      	orrs	r1, r4
 8004454:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004456:	646b      	str	r3, [r5, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8004458:	f885 4041 	strb.w	r4, [r5, #65]	@ 0x41
}
 800445c:	bd70      	pop	{r4, r5, r6, pc}
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fe f9c3 	bl	80027e8 <HAL_GetTick>
 8004462:	1b80      	subs	r0, r0, r6
 8004464:	4284      	cmp	r4, r0
 8004466:	d30a      	bcc.n	800447e <HAL_QSPI_Init+0x9a>
 8004468:	b14c      	cbz	r4, 800447e <HAL_QSPI_Init+0x9a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800446a:	682a      	ldr	r2, [r5, #0]
 800446c:	e7d2      	b.n	8004414 <HAL_QSPI_Init+0x30>
    HAL_QSPI_MspInit(hqspi);
 800446e:	4628      	mov	r0, r5
 8004470:	f7fd f876 	bl	8001560 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8004474:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8004478:	461c      	mov	r4, r3
  hqspi->Timeout = Timeout;
 800447a:	64ab      	str	r3, [r5, #72]	@ 0x48
}
 800447c:	e7be      	b.n	80043fc <HAL_QSPI_Init+0x18>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800447e:	2304      	movs	r3, #4
 8004480:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004484:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	646b      	str	r3, [r5, #68]	@ 0x44
    return HAL_ERROR;
 800448c:	2001      	movs	r0, #1
}
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	00ffff2f 	.word	0x00ffff2f
 8004494:	ffe0f8fe 	.word	0xffe0f8fe

08004498 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004498:	4b33      	ldr	r3, [pc, #204]	@ (8004568 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800449a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800449c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800449e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044a0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80044a2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044a8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80044ac:	d036      	beq.n	800451c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044ae:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044b2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b6:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ba:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044be:	fb05 f202 	mul.w	r2, r5, r2
 80044c2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044c8:	ee06 2a90 	vmov	s13, r2
 80044cc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80044d0:	d002      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 80044d2:	2902      	cmp	r1, #2
 80044d4:	d042      	beq.n	800455c <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 80044d6:	b319      	cbz	r1, 8004520 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044d8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800456c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80044dc:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80044ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80044fa:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004506:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004508:	ee07 3a10 	vmov	s14, r3
 800450c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004514:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004518:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800451c:	bc30      	pop	{r4, r5}
 800451e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	0692      	lsls	r2, r2, #26
 8004524:	d51d      	bpl.n	8004562 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004526:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004528:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800452c:	4a10      	ldr	r2, [pc, #64]	@ (8004570 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004530:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004534:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004538:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	ee06 2a10 	vmov	s12, r2
 8004542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004546:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800454a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800454e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8004552:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800455a:	e7d0      	b.n	80044fe <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800455c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004574 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8004560:	e7bc      	b.n	80044dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004562:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004578 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8004566:	e7b9      	b.n	80044dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004568:	58024400 	.word	0x58024400
 800456c:	4a742400 	.word	0x4a742400
 8004570:	03d09000 	.word	0x03d09000
 8004574:	4bbebc20 	.word	0x4bbebc20
 8004578:	4c742400 	.word	0x4c742400

0800457c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800457c:	2800      	cmp	r0, #0
 800457e:	f000 82e9 	beq.w	8004b54 <HAL_RCC_OscConfig+0x5d8>
{
 8004582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004584:	6803      	ldr	r3, [r0, #0]
 8004586:	4604      	mov	r4, r0
 8004588:	07d9      	lsls	r1, r3, #31
 800458a:	d52e      	bpl.n	80045ea <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458c:	4997      	ldr	r1, [pc, #604]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 800458e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004590:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004596:	2a10      	cmp	r2, #16
 8004598:	f000 80ee 	beq.w	8004778 <HAL_RCC_OscConfig+0x1fc>
 800459c:	2a18      	cmp	r2, #24
 800459e:	f000 80e6 	beq.w	800476e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a8:	f000 8111 	beq.w	80047ce <HAL_RCC_OscConfig+0x252>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8167 	beq.w	8004880 <HAL_RCC_OscConfig+0x304>
 80045b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045b6:	4b8d      	ldr	r3, [pc, #564]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f000 828a 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x556>
 80045be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045cc:	f7fe f90c 	bl	80027e8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d0:	4e86      	ldr	r6, [pc, #536]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80045d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d4:	e005      	b.n	80045e2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d6:	f7fe f907 	bl	80027e8 <HAL_GetTick>
 80045da:	1b40      	subs	r0, r0, r5
 80045dc:	2864      	cmp	r0, #100	@ 0x64
 80045de:	f200 814d 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045e2:	6833      	ldr	r3, [r6, #0]
 80045e4:	039b      	lsls	r3, r3, #14
 80045e6:	d5f6      	bpl.n	80045d6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	079d      	lsls	r5, r3, #30
 80045ec:	d470      	bmi.n	80046d0 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045ee:	06d9      	lsls	r1, r3, #27
 80045f0:	d533      	bpl.n	800465a <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 80045f4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045f6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	f000 80cb 	beq.w	8004798 <HAL_RCC_OscConfig+0x21c>
 8004602:	2b18      	cmp	r3, #24
 8004604:	f000 80c3 	beq.w	800478e <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004608:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800460a:	4d78      	ldr	r5, [pc, #480]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 816f 	beq.w	80048f0 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004618:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800461a:	f7fe f8e5 	bl	80027e8 <HAL_GetTick>
 800461e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004620:	e005      	b.n	800462e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004622:	f7fe f8e1 	bl	80027e8 <HAL_GetTick>
 8004626:	1b80      	subs	r0, r0, r6
 8004628:	2802      	cmp	r0, #2
 800462a:	f200 8127 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800462e:	682b      	ldr	r3, [r5, #0]
 8004630:	05db      	lsls	r3, r3, #23
 8004632:	d5f6      	bpl.n	8004622 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004634:	f7fe f8f0 	bl	8002818 <HAL_GetREVID>
 8004638:	f241 0303 	movw	r3, #4099	@ 0x1003
 800463c:	4298      	cmp	r0, r3
 800463e:	f200 8269 	bhi.w	8004b14 <HAL_RCC_OscConfig+0x598>
 8004642:	6a22      	ldr	r2, [r4, #32]
 8004644:	686b      	ldr	r3, [r5, #4]
 8004646:	2a20      	cmp	r2, #32
 8004648:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800464c:	bf0c      	ite	eq
 800464e:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8004652:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004656:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	071d      	lsls	r5, r3, #28
 800465c:	d516      	bpl.n	800468c <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800465e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004660:	4d62      	ldr	r5, [pc, #392]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8122 	beq.w	80048ac <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8004668:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004670:	f7fe f8ba 	bl	80027e8 <HAL_GetTick>
 8004674:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004676:	e005      	b.n	8004684 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004678:	f7fe f8b6 	bl	80027e8 <HAL_GetTick>
 800467c:	1b80      	subs	r0, r0, r6
 800467e:	2802      	cmp	r0, #2
 8004680:	f200 80fc 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004684:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004686:	0798      	lsls	r0, r3, #30
 8004688:	d5f6      	bpl.n	8004678 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	069a      	lsls	r2, r3, #26
 800468e:	d516      	bpl.n	80046be <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004690:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004692:	4d56      	ldr	r5, [pc, #344]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 811a 	beq.w	80048ce <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80046a2:	f7fe f8a1 	bl	80027e8 <HAL_GetTick>
 80046a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046a8:	e005      	b.n	80046b6 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046aa:	f7fe f89d 	bl	80027e8 <HAL_GetTick>
 80046ae:	1b80      	subs	r0, r0, r6
 80046b0:	2802      	cmp	r0, #2
 80046b2:	f200 80e3 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	049f      	lsls	r7, r3, #18
 80046ba:	d5f6      	bpl.n	80046aa <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	0759      	lsls	r1, r3, #29
 80046c0:	f100 808b 	bmi.w	80047da <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80bf 	bne.w	800484a <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 80046cc:	2000      	movs	r0, #0
}
 80046ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d0:	4a46      	ldr	r2, [pc, #280]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 80046d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046d6:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80046da:	d12d      	bne.n	8004738 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046dc:	4b43      	ldr	r3, [pc, #268]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046de:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	0759      	lsls	r1, r3, #29
 80046e4:	d501      	bpl.n	80046ea <HAL_RCC_OscConfig+0x16e>
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	d04f      	beq.n	800478a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046ea:	4d40      	ldr	r5, [pc, #256]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	f023 0319 	bic.w	r3, r3, #25
 80046f2:	4313      	orrs	r3, r2
 80046f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046f6:	f7fe f877 	bl	80027e8 <HAL_GetTick>
 80046fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046fc:	e005      	b.n	800470a <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fe f873 	bl	80027e8 <HAL_GetTick>
 8004702:	1b80      	subs	r0, r0, r6
 8004704:	2802      	cmp	r0, #2
 8004706:	f200 80b9 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800470a:	682b      	ldr	r3, [r5, #0]
 800470c:	075b      	lsls	r3, r3, #29
 800470e:	d5f6      	bpl.n	80046fe <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	f7fe f882 	bl	8002818 <HAL_GetREVID>
 8004714:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004718:	4298      	cmp	r0, r3
 800471a:	f200 8110 	bhi.w	800493e <HAL_RCC_OscConfig+0x3c2>
 800471e:	6922      	ldr	r2, [r4, #16]
 8004720:	686b      	ldr	r3, [r5, #4]
 8004722:	2a40      	cmp	r2, #64	@ 0x40
 8004724:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004728:	bf0c      	ite	eq
 800472a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800472e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004732:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	e75a      	b.n	80045ee <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004738:	2b18      	cmp	r3, #24
 800473a:	f000 80fc 	beq.w	8004936 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800473e:	4d2b      	ldr	r5, [pc, #172]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004740:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004742:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004744:	2a00      	cmp	r2, #0
 8004746:	f000 80e5 	beq.w	8004914 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800474a:	f023 0319 	bic.w	r3, r3, #25
 800474e:	4313      	orrs	r3, r2
 8004750:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004752:	f7fe f849 	bl	80027e8 <HAL_GetTick>
 8004756:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004758:	e005      	b.n	8004766 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475a:	f7fe f845 	bl	80027e8 <HAL_GetTick>
 800475e:	1b80      	subs	r0, r0, r6
 8004760:	2802      	cmp	r0, #2
 8004762:	f200 808b 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004766:	682b      	ldr	r3, [r5, #0]
 8004768:	075f      	lsls	r7, r3, #29
 800476a:	d5f6      	bpl.n	800475a <HAL_RCC_OscConfig+0x1de>
 800476c:	e7d0      	b.n	8004710 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800476e:	f001 0103 	and.w	r1, r1, #3
 8004772:	2902      	cmp	r1, #2
 8004774:	f47f af15 	bne.w	80045a2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	0392      	lsls	r2, r2, #14
 800477e:	f57f af34 	bpl.w	80045ea <HAL_RCC_OscConfig+0x6e>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	2a00      	cmp	r2, #0
 8004786:	f47f af30 	bne.w	80045ea <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800478a:	2001      	movs	r0, #1
}
 800478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800478e:	f002 0203 	and.w	r2, r2, #3
 8004792:	2a01      	cmp	r2, #1
 8004794:	f47f af38 	bne.w	8004608 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004798:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	05da      	lsls	r2, r3, #23
 800479e:	d502      	bpl.n	80047a6 <HAL_RCC_OscConfig+0x22a>
 80047a0:	69e3      	ldr	r3, [r4, #28]
 80047a2:	2b80      	cmp	r3, #128	@ 0x80
 80047a4:	d1f1      	bne.n	800478a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047a6:	f7fe f837 	bl	8002818 <HAL_GetREVID>
 80047aa:	f241 0303 	movw	r3, #4099	@ 0x1003
 80047ae:	4298      	cmp	r0, r3
 80047b0:	f200 80ce 	bhi.w	8004950 <HAL_RCC_OscConfig+0x3d4>
 80047b4:	6a22      	ldr	r2, [r4, #32]
 80047b6:	2a20      	cmp	r2, #32
 80047b8:	f000 81bb 	beq.w	8004b32 <HAL_RCC_OscConfig+0x5b6>
 80047bc:	490b      	ldr	r1, [pc, #44]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 80047be:	684b      	ldr	r3, [r1, #4]
 80047c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047c4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80047c8:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	e745      	b.n	800465a <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ce:	4a07      	ldr	r2, [pc, #28]	@ (80047ec <HAL_RCC_OscConfig+0x270>)
 80047d0:	6813      	ldr	r3, [r2, #0]
 80047d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	e6f8      	b.n	80045cc <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80047da:	4d05      	ldr	r5, [pc, #20]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80047e4:	f7fe f800 	bl	80027e8 <HAL_GetTick>
 80047e8:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x282>
 80047ec:	58024400 	.word	0x58024400
 80047f0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fd fff8 	bl	80027e8 <HAL_GetTick>
 80047f8:	1b80      	subs	r0, r0, r6
 80047fa:	2864      	cmp	r0, #100	@ 0x64
 80047fc:	d83e      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	05da      	lsls	r2, r3, #23
 8004802:	d5f7      	bpl.n	80047f4 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	2b01      	cmp	r3, #1
 8004808:	f000 818d 	beq.w	8004b26 <HAL_RCC_OscConfig+0x5aa>
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8168 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x566>
 8004812:	2b05      	cmp	r3, #5
 8004814:	4b85      	ldr	r3, [pc, #532]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 8004816:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004818:	f000 8194 	beq.w	8004b44 <HAL_RCC_OscConfig+0x5c8>
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	671a      	str	r2, [r3, #112]	@ 0x70
 8004822:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004824:	f022 0204 	bic.w	r2, r2, #4
 8004828:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800482a:	f7fd ffdd 	bl	80027e8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800482e:	4e7f      	ldr	r6, [pc, #508]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004834:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004836:	e004      	b.n	8004842 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd ffd6 	bl	80027e8 <HAL_GetTick>
 800483c:	1b40      	subs	r0, r0, r5
 800483e:	42b8      	cmp	r0, r7
 8004840:	d81c      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004842:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004844:	079b      	lsls	r3, r3, #30
 8004846:	d5f7      	bpl.n	8004838 <HAL_RCC_OscConfig+0x2bc>
 8004848:	e73c      	b.n	80046c4 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800484a:	4d78      	ldr	r5, [pc, #480]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 800484c:	692a      	ldr	r2, [r5, #16]
 800484e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8004852:	2a18      	cmp	r2, #24
 8004854:	f000 80f0 	beq.w	8004a38 <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004858:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800485a:	682b      	ldr	r3, [r5, #0]
 800485c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004860:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004862:	d07f      	beq.n	8004964 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8004864:	f7fd ffc0 	bl	80027e8 <HAL_GetTick>
 8004868:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	f57f af2d 	bpl.w	80046cc <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fd ffb9 	bl	80027e8 <HAL_GetTick>
 8004876:	1b00      	subs	r0, r0, r4
 8004878:	2802      	cmp	r0, #2
 800487a:	d9f6      	bls.n	800486a <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 800487c:	2003      	movs	r0, #3
}
 800487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004880:	4d6a      	ldr	r5, [pc, #424]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	682b      	ldr	r3, [r5, #0]
 800488c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004890:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004892:	f7fd ffa9 	bl	80027e8 <HAL_GetTick>
 8004896:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004898:	e004      	b.n	80048a4 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489a:	f7fd ffa5 	bl	80027e8 <HAL_GetTick>
 800489e:	1b80      	subs	r0, r0, r6
 80048a0:	2864      	cmp	r0, #100	@ 0x64
 80048a2:	d8eb      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	039f      	lsls	r7, r3, #14
 80048a8:	d4f7      	bmi.n	800489a <HAL_RCC_OscConfig+0x31e>
 80048aa:	e69d      	b.n	80045e8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80048ac:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80048b4:	f7fd ff98 	bl	80027e8 <HAL_GetTick>
 80048b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048ba:	e004      	b.n	80048c6 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048bc:	f7fd ff94 	bl	80027e8 <HAL_GetTick>
 80048c0:	1b80      	subs	r0, r0, r6
 80048c2:	2802      	cmp	r0, #2
 80048c4:	d8da      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048c6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80048c8:	0799      	lsls	r1, r3, #30
 80048ca:	d4f7      	bmi.n	80048bc <HAL_RCC_OscConfig+0x340>
 80048cc:	e6dd      	b.n	800468a <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80048d6:	f7fd ff87 	bl	80027e8 <HAL_GetTick>
 80048da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048dc:	e004      	b.n	80048e8 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048de:	f7fd ff83 	bl	80027e8 <HAL_GetTick>
 80048e2:	1b80      	subs	r0, r0, r6
 80048e4:	2802      	cmp	r0, #2
 80048e6:	d8c9      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	0498      	lsls	r0, r3, #18
 80048ec:	d4f7      	bmi.n	80048de <HAL_RCC_OscConfig+0x362>
 80048ee:	e6e5      	b.n	80046bc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048f8:	f7fd ff76 	bl	80027e8 <HAL_GetTick>
 80048fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048fe:	e004      	b.n	800490a <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004900:	f7fd ff72 	bl	80027e8 <HAL_GetTick>
 8004904:	1b80      	subs	r0, r0, r6
 8004906:	2802      	cmp	r0, #2
 8004908:	d8b8      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	05df      	lsls	r7, r3, #23
 800490e:	d4f7      	bmi.n	8004900 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	e6a2      	b.n	800465a <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800491a:	f7fd ff65 	bl	80027e8 <HAL_GetTick>
 800491e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004920:	e004      	b.n	800492c <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004922:	f7fd ff61 	bl	80027e8 <HAL_GetTick>
 8004926:	1b80      	subs	r0, r0, r6
 8004928:	2802      	cmp	r0, #2
 800492a:	d8a7      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	0758      	lsls	r0, r3, #29
 8004930:	d4f7      	bmi.n	8004922 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	e65b      	b.n	80045ee <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004936:	0790      	lsls	r0, r2, #30
 8004938:	f47f af01 	bne.w	800473e <HAL_RCC_OscConfig+0x1c2>
 800493c:	e6ce      	b.n	80046dc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493e:	686b      	ldr	r3, [r5, #4]
 8004940:	6922      	ldr	r2, [r4, #16]
 8004942:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004946:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800494a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	e64e      	b.n	80045ee <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004950:	4a36      	ldr	r2, [pc, #216]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 8004952:	6a21      	ldr	r1, [r4, #32]
 8004954:	68d3      	ldr	r3, [r2, #12]
 8004956:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800495a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800495e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	e67a      	b.n	800465a <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8004964:	f7fd ff40 	bl	80027e8 <HAL_GetTick>
 8004968:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800496a:	e004      	b.n	8004976 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd ff3c 	bl	80027e8 <HAL_GetTick>
 8004970:	1b80      	subs	r0, r0, r6
 8004972:	2802      	cmp	r0, #2
 8004974:	d882      	bhi.n	800487c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004976:	682b      	ldr	r3, [r5, #0]
 8004978:	0199      	lsls	r1, r3, #6
 800497a:	d4f7      	bmi.n	800496c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800497e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <HAL_RCC_OscConfig+0x4b4>)
 8004980:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004982:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004984:	492b      	ldr	r1, [pc, #172]	@ (8004a34 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004986:	4e29      	ldr	r6, [pc, #164]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004988:	4313      	orrs	r3, r2
 800498a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800498c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004990:	62ab      	str	r3, [r5, #40]	@ 0x28
 8004992:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8004996:	3b01      	subs	r3, #1
 8004998:	3a01      	subs	r2, #1
 800499a:	025b      	lsls	r3, r3, #9
 800499c:	0412      	lsls	r2, r2, #16
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80049a4:	4313      	orrs	r3, r2
 80049a6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80049a8:	3a01      	subs	r2, #1
 80049aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ae:	4313      	orrs	r3, r2
 80049b0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80049b2:	3a01      	subs	r2, #1
 80049b4:	0612      	lsls	r2, r2, #24
 80049b6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80049ba:	4313      	orrs	r3, r2
 80049bc:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80049be:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049c6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80049c8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80049ca:	4011      	ands	r1, r2
 80049cc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80049d0:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80049d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80049d6:	f023 030c 	bic.w	r3, r3, #12
 80049da:	4313      	orrs	r3, r2
 80049dc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049de:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80049e0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80049e2:	f023 0302 	bic.w	r3, r3, #2
 80049e6:	4313      	orrs	r3, r2
 80049e8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049ea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80049fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a00:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a12:	f7fd fee9 	bl	80027e8 <HAL_GetTick>
 8004a16:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	019a      	lsls	r2, r3, #6
 8004a1c:	f53f ae56 	bmi.w	80046cc <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd fee2 	bl	80027e8 <HAL_GetTick>
 8004a24:	1b00      	subs	r0, r0, r4
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d9f6      	bls.n	8004a18 <HAL_RCC_OscConfig+0x49c>
 8004a2a:	e727      	b.n	800487c <HAL_RCC_OscConfig+0x300>
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	fffffc0c 	.word	0xfffffc0c
 8004a34:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a38:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a3a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a3c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3e:	f43f aea4 	beq.w	800478a <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a46:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	f47f ae9e 	bne.w	800478a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a54:	429a      	cmp	r2, r3
 8004a56:	f47f ae98 	bne.w	800478a <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a5c:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8004a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	f47f ae91 	bne.w	800478a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a6a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8004a6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	f47f ae8a 	bne.w	800478a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a76:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004a78:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8004a7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f47f ae83 	bne.w	800478a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a86:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8004a8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a8c:	4298      	cmp	r0, r3
 8004a8e:	f47f ae7c 	bne.w	800478a <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a92:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a94:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a96:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	f43f ae16 	beq.w	80046cc <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b58 <HAL_RCC_OscConfig+0x5dc>)
 8004aa2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8004aaa:	f7fd fe9d 	bl	80027e8 <HAL_GetTick>
 8004aae:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ab0:	f7fd fe9a 	bl	80027e8 <HAL_GetTick>
 8004ab4:	42a8      	cmp	r0, r5
 8004ab6:	d0fb      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ab8:	4a27      	ldr	r2, [pc, #156]	@ (8004b58 <HAL_RCC_OscConfig+0x5dc>)
 8004aba:	4b28      	ldr	r3, [pc, #160]	@ (8004b5c <HAL_RCC_OscConfig+0x5e0>)
 8004abc:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8004abe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ac0:	4003      	ands	r3, r0
 8004ac2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ac6:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ac8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ad0:	e5fc      	b.n	80046cc <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ade:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	e574      	b.n	80045cc <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae2:	4d1d      	ldr	r5, [pc, #116]	@ (8004b58 <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	672b      	str	r3, [r5, #112]	@ 0x70
 8004af0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004af2:	f023 0304 	bic.w	r3, r3, #4
 8004af6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004af8:	f7fd fe76 	bl	80027e8 <HAL_GetTick>
 8004afc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004afe:	e005      	b.n	8004b0c <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fd fe72 	bl	80027e8 <HAL_GetTick>
 8004b04:	1b80      	subs	r0, r0, r6
 8004b06:	42b8      	cmp	r0, r7
 8004b08:	f63f aeb8 	bhi.w	800487c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b0c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004b0e:	0798      	lsls	r0, r3, #30
 8004b10:	d4f6      	bmi.n	8004b00 <HAL_RCC_OscConfig+0x584>
 8004b12:	e5d7      	b.n	80046c4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b14:	68eb      	ldr	r3, [r5, #12]
 8004b16:	6a22      	ldr	r2, [r4, #32]
 8004b18:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004b1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b20:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	e599      	b.n	800465a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b26:	4a0c      	ldr	r2, [pc, #48]	@ (8004b58 <HAL_RCC_OscConfig+0x5dc>)
 8004b28:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b30:	e67b      	b.n	800482a <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b32:	4a09      	ldr	r2, [pc, #36]	@ (8004b58 <HAL_RCC_OscConfig+0x5dc>)
 8004b34:	6853      	ldr	r3, [r2, #4]
 8004b36:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004b3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b3e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	e58a      	b.n	800465a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b44:	f042 0204 	orr.w	r2, r2, #4
 8004b48:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b52:	e66a      	b.n	800482a <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
}
 8004b56:	4770      	bx	lr
 8004b58:	58024400 	.word	0x58024400
 8004b5c:	ffff0007 	.word	0xffff0007

08004b60 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b60:	4a3f      	ldr	r2, [pc, #252]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b62:	6913      	ldr	r3, [r2, #16]
 8004b64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d004      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x16>
 8004b6c:	2b18      	cmp	r3, #24
 8004b6e:	d00d      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x2c>
 8004b70:	b11b      	cbz	r3, 8004b7a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8004b72:	483c      	ldr	r0, [pc, #240]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b74:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b76:	483c      	ldr	r0, [pc, #240]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b78:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	0699      	lsls	r1, r3, #26
 8004b7e:	d548      	bpl.n	8004c12 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b80:	6813      	ldr	r3, [r2, #0]
 8004b82:	483a      	ldr	r0, [pc, #232]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b88:	40d8      	lsrs	r0, r3
 8004b8a:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b8c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8004b8e:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b90:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b92:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8004b94:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b98:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b9a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004b9e:	d036      	beq.n	8004c0e <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ba0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ba4:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ba8:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bac:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bb0:	fb05 f303 	mul.w	r3, r5, r3
 8004bb4:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bba:	ee06 3a90 	vmov	s13, r3
 8004bbe:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8004bc2:	d002      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x6a>
 8004bc4:	2902      	cmp	r1, #2
 8004bc6:	d026      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0xb6>
 8004bc8:	b341      	cbz	r1, 8004c1c <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bca:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8004c70 <HAL_RCC_GetSysClockFreq+0x110>
 8004bce:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004bd2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd8:	ee07 3a10 	vmov	s14, r3
 8004bdc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004be4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004be8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004bec:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004bf8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0a:	ee17 0a90 	vmov	r0, s15
}
 8004c0e:	bc30      	pop	{r4, r5}
 8004c10:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c12:	4816      	ldr	r0, [pc, #88]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8004c14:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c16:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004c74 <HAL_RCC_GetSysClockFreq+0x114>
 8004c1a:	e7d8      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	069b      	lsls	r3, r3, #26
 8004c20:	d51a      	bpl.n	8004c58 <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c22:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c24:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004c28:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c2a:	4910      	ldr	r1, [pc, #64]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c2c:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c34:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c36:	ee07 3a10 	vmov	s14, r3
 8004c3a:	ee06 1a10 	vmov	s12, r1
 8004c3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004c46:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004c4a:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004c4e:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8004c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c56:	e7cb      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c58:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004c78 <HAL_RCC_GetSysClockFreq+0x118>
 8004c5c:	e7b7      	b.n	8004bce <HAL_RCC_GetSysClockFreq+0x6e>
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
 8004c64:	003d0900 	.word	0x003d0900
 8004c68:	017d7840 	.word	0x017d7840
 8004c6c:	03d09000 	.word	0x03d09000
 8004c70:	4a742400 	.word	0x4a742400
 8004c74:	4bbebc20 	.word	0x4bbebc20
 8004c78:	4c742400 	.word	0x4c742400

08004c7c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	f000 810e 	beq.w	8004e9e <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c82:	4a8d      	ldr	r2, [pc, #564]	@ (8004eb8 <HAL_RCC_ClockConfig+0x23c>)
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	428b      	cmp	r3, r1
{
 8004c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	d20c      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	6813      	ldr	r3, [r2, #0]
 8004c98:	f023 030f 	bic.w	r3, r3, #15
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca0:	6813      	ldr	r3, [r2, #0]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	428b      	cmp	r3, r1
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004caa:	2001      	movs	r0, #1
}
 8004cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	0758      	lsls	r0, r3, #29
 8004cb4:	d50b      	bpl.n	8004cce <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cb6:	4981      	ldr	r1, [pc, #516]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004cb8:	6920      	ldr	r0, [r4, #16]
 8004cba:	698a      	ldr	r2, [r1, #24]
 8004cbc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004cc0:	4290      	cmp	r0, r2
 8004cc2:	d904      	bls.n	8004cce <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cc4:	698a      	ldr	r2, [r1, #24]
 8004cc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004cca:	4302      	orrs	r2, r0
 8004ccc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cce:	0719      	lsls	r1, r3, #28
 8004cd0:	d50b      	bpl.n	8004cea <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cd2:	497a      	ldr	r1, [pc, #488]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004cd4:	6960      	ldr	r0, [r4, #20]
 8004cd6:	69ca      	ldr	r2, [r1, #28]
 8004cd8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004cdc:	4290      	cmp	r0, r2
 8004cde:	d904      	bls.n	8004cea <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ce0:	69ca      	ldr	r2, [r1, #28]
 8004ce2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ce6:	4302      	orrs	r2, r0
 8004ce8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cea:	06da      	lsls	r2, r3, #27
 8004cec:	d50b      	bpl.n	8004d06 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cee:	4973      	ldr	r1, [pc, #460]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004cf0:	69a0      	ldr	r0, [r4, #24]
 8004cf2:	69ca      	ldr	r2, [r1, #28]
 8004cf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004cf8:	4290      	cmp	r0, r2
 8004cfa:	d904      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cfc:	69ca      	ldr	r2, [r1, #28]
 8004cfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d02:	4302      	orrs	r2, r0
 8004d04:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d06:	069f      	lsls	r7, r3, #26
 8004d08:	d50b      	bpl.n	8004d22 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d0a:	496c      	ldr	r1, [pc, #432]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004d0c:	69e0      	ldr	r0, [r4, #28]
 8004d0e:	6a0a      	ldr	r2, [r1, #32]
 8004d10:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004d14:	4290      	cmp	r0, r2
 8004d16:	d904      	bls.n	8004d22 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d18:	6a0a      	ldr	r2, [r1, #32]
 8004d1a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d1e:	4302      	orrs	r2, r0
 8004d20:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d22:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d24:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d28:	f140 80ab 	bpl.w	8004e82 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d2c:	4e63      	ldr	r6, [pc, #396]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004d2e:	68e0      	ldr	r0, [r4, #12]
 8004d30:	69b1      	ldr	r1, [r6, #24]
 8004d32:	f001 010f 	and.w	r1, r1, #15
 8004d36:	4288      	cmp	r0, r1
 8004d38:	d904      	bls.n	8004d44 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3a:	69b1      	ldr	r1, [r6, #24]
 8004d3c:	f021 010f 	bic.w	r1, r1, #15
 8004d40:	4301      	orrs	r1, r0
 8004d42:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d44:	2a00      	cmp	r2, #0
 8004d46:	d030      	beq.n	8004daa <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d48:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004d4a:	68a1      	ldr	r1, [r4, #8]
 8004d4c:	6993      	ldr	r3, [r2, #24]
 8004d4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d56:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d58:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5a:	2902      	cmp	r1, #2
 8004d5c:	f000 80a1 	beq.w	8004ea2 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d60:	2903      	cmp	r1, #3
 8004d62:	f000 8098 	beq.w	8004e96 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d66:	2901      	cmp	r1, #1
 8004d68:	f000 80a1 	beq.w	8004eae <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6c:	075f      	lsls	r7, r3, #29
 8004d6e:	d59c      	bpl.n	8004caa <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d70:	4e52      	ldr	r6, [pc, #328]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d72:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	6933      	ldr	r3, [r6, #16]
 8004d78:	f023 0307 	bic.w	r3, r3, #7
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004d80:	f7fd fd32 	bl	80027e8 <HAL_GetTick>
 8004d84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fd fd2e 	bl	80027e8 <HAL_GetTick>
 8004d8c:	1bc0      	subs	r0, r0, r7
 8004d8e:	4540      	cmp	r0, r8
 8004d90:	f200 808b 	bhi.w	8004eaa <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d94:	6933      	ldr	r3, [r6, #16]
 8004d96:	6862      	ldr	r2, [r4, #4]
 8004d98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d9c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004da0:	d1f2      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	079e      	lsls	r6, r3, #30
 8004da6:	d506      	bpl.n	8004db6 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004da8:	68e0      	ldr	r0, [r4, #12]
 8004daa:	4944      	ldr	r1, [pc, #272]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004dac:	698a      	ldr	r2, [r1, #24]
 8004dae:	f002 020f 	and.w	r2, r2, #15
 8004db2:	4282      	cmp	r2, r0
 8004db4:	d869      	bhi.n	8004e8a <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db6:	4940      	ldr	r1, [pc, #256]	@ (8004eb8 <HAL_RCC_ClockConfig+0x23c>)
 8004db8:	680a      	ldr	r2, [r1, #0]
 8004dba:	f002 020f 	and.w	r2, r2, #15
 8004dbe:	42aa      	cmp	r2, r5
 8004dc0:	d90a      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	680a      	ldr	r2, [r1, #0]
 8004dc4:	f022 020f 	bic.w	r2, r2, #15
 8004dc8:	432a      	orrs	r2, r5
 8004dca:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dcc:	680a      	ldr	r2, [r1, #0]
 8004dce:	f002 020f 	and.w	r2, r2, #15
 8004dd2:	42aa      	cmp	r2, r5
 8004dd4:	f47f af69 	bne.w	8004caa <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dd8:	0758      	lsls	r0, r3, #29
 8004dda:	d50b      	bpl.n	8004df4 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ddc:	4937      	ldr	r1, [pc, #220]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004dde:	6920      	ldr	r0, [r4, #16]
 8004de0:	698a      	ldr	r2, [r1, #24]
 8004de2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004de6:	4290      	cmp	r0, r2
 8004de8:	d204      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dea:	698a      	ldr	r2, [r1, #24]
 8004dec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004df0:	4302      	orrs	r2, r0
 8004df2:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	0719      	lsls	r1, r3, #28
 8004df6:	d50b      	bpl.n	8004e10 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004df8:	4930      	ldr	r1, [pc, #192]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004dfa:	6960      	ldr	r0, [r4, #20]
 8004dfc:	69ca      	ldr	r2, [r1, #28]
 8004dfe:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004e02:	4290      	cmp	r0, r2
 8004e04:	d204      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e06:	69ca      	ldr	r2, [r1, #28]
 8004e08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004e0c:	4302      	orrs	r2, r0
 8004e0e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	06da      	lsls	r2, r3, #27
 8004e12:	d50b      	bpl.n	8004e2c <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e14:	4929      	ldr	r1, [pc, #164]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004e16:	69a0      	ldr	r0, [r4, #24]
 8004e18:	69ca      	ldr	r2, [r1, #28]
 8004e1a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004e1e:	4290      	cmp	r0, r2
 8004e20:	d204      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e22:	69ca      	ldr	r2, [r1, #28]
 8004e24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e28:	4302      	orrs	r2, r0
 8004e2a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e2c:	069b      	lsls	r3, r3, #26
 8004e2e:	d50b      	bpl.n	8004e48 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e30:	4a22      	ldr	r2, [pc, #136]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004e32:	69e1      	ldr	r1, [r4, #28]
 8004e34:	6a13      	ldr	r3, [r2, #32]
 8004e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	d204      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e3e:	6a13      	ldr	r3, [r2, #32]
 8004e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e48:	f7ff fe8a 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ebc <HAL_RCC_ClockConfig+0x240>)
 8004e4e:	4603      	mov	r3, r0
 8004e50:	481b      	ldr	r0, [pc, #108]	@ (8004ec0 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e54:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e56:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004e5a:	4d1a      	ldr	r5, [pc, #104]	@ (8004ec4 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e5c:	f002 020f 	and.w	r2, r2, #15
 8004e60:	4c19      	ldr	r4, [pc, #100]	@ (8004ec8 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e62:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e64:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e66:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004e6a:	4818      	ldr	r0, [pc, #96]	@ (8004ecc <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e6c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e70:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004e72:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004e74:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e76:	40d3      	lsrs	r3, r2
 8004e78:	6023      	str	r3, [r4, #0]
}
 8004e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004e7e:	f7fd bc51 	b.w	8002724 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	f47f af60 	bne.w	8004d48 <HAL_RCC_ClockConfig+0xcc>
 8004e88:	e795      	b.n	8004db6 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e8a:	698a      	ldr	r2, [r1, #24]
 8004e8c:	f022 020f 	bic.w	r2, r2, #15
 8004e90:	4302      	orrs	r2, r0
 8004e92:	618a      	str	r2, [r1, #24]
 8004e94:	e78f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e96:	019a      	lsls	r2, r3, #6
 8004e98:	f53f af6a 	bmi.w	8004d70 <HAL_RCC_ClockConfig+0xf4>
 8004e9c:	e705      	b.n	8004caa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004e9e:	2001      	movs	r0, #1
}
 8004ea0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ea2:	0398      	lsls	r0, r3, #14
 8004ea4:	f53f af64 	bmi.w	8004d70 <HAL_RCC_ClockConfig+0xf4>
 8004ea8:	e6ff      	b.n	8004caa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004eaa:	2003      	movs	r0, #3
 8004eac:	e6fe      	b.n	8004cac <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eae:	05db      	lsls	r3, r3, #23
 8004eb0:	f53f af5e 	bmi.w	8004d70 <HAL_RCC_ClockConfig+0xf4>
 8004eb4:	e6f9      	b.n	8004caa <HAL_RCC_ClockConfig+0x2e>
 8004eb6:	bf00      	nop
 8004eb8:	52002000 	.word	0x52002000
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	080287c8 	.word	0x080287c8
 8004ec4:	24000014 	.word	0x24000014
 8004ec8:	24000010 	.word	0x24000010
 8004ecc:	2400001c 	.word	0x2400001c

08004ed0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed0:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed4:	6913      	ldr	r3, [r2, #16]
 8004ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d019      	beq.n	8004f12 <HAL_RCC_GetHCLKFreq+0x42>
 8004ede:	2b18      	cmp	r3, #24
 8004ee0:	d022      	beq.n	8004f28 <HAL_RCC_GetHCLKFreq+0x58>
 8004ee2:	b1c3      	cbz	r3, 8004f16 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8004ee4:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ee6:	4913      	ldr	r1, [pc, #76]	@ (8004f34 <HAL_RCC_GetHCLKFreq+0x64>)
 8004ee8:	4814      	ldr	r0, [pc, #80]	@ (8004f3c <HAL_RCC_GetHCLKFreq+0x6c>)
 8004eea:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eec:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eee:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ef2:	4c13      	ldr	r4, [pc, #76]	@ (8004f40 <HAL_RCC_GetHCLKFreq+0x70>)
 8004ef4:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ef8:	4d12      	ldr	r5, [pc, #72]	@ (8004f44 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004efa:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004efc:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004efe:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f02:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f06:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f08:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8004f0c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f0e:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004f10:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <HAL_RCC_GetHCLKFreq+0x78>)
 8004f14:	e7e7      	b.n	8004ee6 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	069b      	lsls	r3, r3, #26
 8004f1a:	d509      	bpl.n	8004f30 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_RCC_GetHCLKFreq+0x7c>)
 8004f20:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004f24:	40d3      	lsrs	r3, r2
 8004f26:	e7de      	b.n	8004ee6 <HAL_RCC_GetHCLKFreq+0x16>
 8004f28:	f7ff fab6 	bl	8004498 <HAL_RCC_GetSysClockFreq.part.0>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	e7da      	b.n	8004ee6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <HAL_RCC_GetHCLKFreq+0x7c>)
 8004f32:	e7d8      	b.n	8004ee6 <HAL_RCC_GetHCLKFreq+0x16>
 8004f34:	58024400 	.word	0x58024400
 8004f38:	003d0900 	.word	0x003d0900
 8004f3c:	080287c8 	.word	0x080287c8
 8004f40:	24000010 	.word	0x24000010
 8004f44:	24000014 	.word	0x24000014
 8004f48:	017d7840 	.word	0x017d7840
 8004f4c:	03d09000 	.word	0x03d09000

08004f50 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f50:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f52:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f54:	6913      	ldr	r3, [r2, #16]
 8004f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d020      	beq.n	8004fa0 <HAL_RCC_GetPCLK1Freq+0x50>
 8004f5e:	2b18      	cmp	r3, #24
 8004f60:	d029      	beq.n	8004fb6 <HAL_RCC_GetPCLK1Freq+0x66>
 8004f62:	b1fb      	cbz	r3, 8004fa4 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8004f64:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f66:	4a17      	ldr	r2, [pc, #92]	@ (8004fc4 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004f68:	4918      	ldr	r1, [pc, #96]	@ (8004fcc <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004f6a:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004f6c:	4d18      	ldr	r5, [pc, #96]	@ (8004fd0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f6e:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f72:	4c18      	ldr	r4, [pc, #96]	@ (8004fd4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f74:	5c08      	ldrb	r0, [r1, r0]
 8004f76:	f000 001f 	and.w	r0, r0, #31
 8004f7a:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f7c:	6990      	ldr	r0, [r2, #24]
 8004f7e:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8004f82:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f84:	5c08      	ldrb	r0, [r1, r0]
 8004f86:	f000 001f 	and.w	r0, r0, #31
 8004f8a:	40c3      	lsrs	r3, r0
 8004f8c:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f8e:	69d2      	ldr	r2, [r2, #28]
 8004f90:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004f94:	5c88      	ldrb	r0, [r1, r2]
 8004f96:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f9a:	fa23 f000 	lsr.w	r0, r3, r0
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004fa2:	e7e0      	b.n	8004f66 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa4:	6813      	ldr	r3, [r2, #0]
 8004fa6:	069b      	lsls	r3, r3, #26
 8004fa8:	d509      	bpl.n	8004fbe <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004fae:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004fb2:	40d3      	lsrs	r3, r2
 8004fb4:	e7d7      	b.n	8004f66 <HAL_RCC_GetPCLK1Freq+0x16>
 8004fb6:	f7ff fa6f 	bl	8004498 <HAL_RCC_GetSysClockFreq.part.0>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	e7d3      	b.n	8004f66 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004fc0:	e7d1      	b.n	8004f66 <HAL_RCC_GetPCLK1Freq+0x16>
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	003d0900 	.word	0x003d0900
 8004fcc:	080287c8 	.word	0x080287c8
 8004fd0:	24000014 	.word	0x24000014
 8004fd4:	24000010 	.word	0x24000010
 8004fd8:	017d7840 	.word	0x017d7840
 8004fdc:	03d09000 	.word	0x03d09000

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe4:	6913      	ldr	r3, [r2, #16]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d020      	beq.n	8005030 <HAL_RCC_GetPCLK2Freq+0x50>
 8004fee:	2b18      	cmp	r3, #24
 8004ff0:	d029      	beq.n	8005046 <HAL_RCC_GetPCLK2Freq+0x66>
 8004ff2:	b1fb      	cbz	r3, 8005034 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8004ff4:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x74>)
 8004ff8:	4918      	ldr	r1, [pc, #96]	@ (800505c <HAL_RCC_GetPCLK2Freq+0x7c>)
 8004ffa:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004ffc:	4d18      	ldr	r5, [pc, #96]	@ (8005060 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ffe:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005002:	4c18      	ldr	r4, [pc, #96]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005004:	5c08      	ldrb	r0, [r1, r0]
 8005006:	f000 001f 	and.w	r0, r0, #31
 800500a:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800500c:	6990      	ldr	r0, [r2, #24]
 800500e:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005012:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005014:	5c08      	ldrb	r0, [r1, r0]
 8005016:	f000 001f 	and.w	r0, r0, #31
 800501a:	40c3      	lsrs	r3, r0
 800501c:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800501e:	69d2      	ldr	r2, [r2, #28]
 8005020:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8005024:	5c88      	ldrb	r0, [r1, r2]
 8005026:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800502a:	fa23 f000 	lsr.w	r0, r3, r0
 800502e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005030:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x88>)
 8005032:	e7e0      	b.n	8004ff6 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	069b      	lsls	r3, r3, #26
 8005038:	d509      	bpl.n	800504e <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800503e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005042:	40d3      	lsrs	r3, r2
 8005044:	e7d7      	b.n	8004ff6 <HAL_RCC_GetPCLK2Freq+0x16>
 8005046:	f7ff fa27 	bl	8004498 <HAL_RCC_GetSysClockFreq.part.0>
 800504a:	4603      	mov	r3, r0
 800504c:	e7d3      	b.n	8004ff6 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800504e:	4b07      	ldr	r3, [pc, #28]	@ (800506c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005050:	e7d1      	b.n	8004ff6 <HAL_RCC_GetPCLK2Freq+0x16>
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	003d0900 	.word	0x003d0900
 800505c:	080287c8 	.word	0x080287c8
 8005060:	24000014 	.word	0x24000014
 8005064:	24000010 	.word	0x24000010
 8005068:	017d7840 	.word	0x017d7840
 800506c:	03d09000 	.word	0x03d09000

08005070 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005072:	4c36      	ldr	r4, [pc, #216]	@ (800514c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8005074:	4606      	mov	r6, r0
 8005076:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800507e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005080:	f7fd fbb2 	bl	80027e8 <HAL_GetTick>
 8005084:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005086:	e004      	b.n	8005092 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005088:	f7fd fbae 	bl	80027e8 <HAL_GetTick>
 800508c:	1b40      	subs	r0, r0, r5
 800508e:	2802      	cmp	r0, #2
 8005090:	d856      	bhi.n	8005140 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	011a      	lsls	r2, r3, #4
 8005096:	d4f7      	bmi.n	8005088 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005098:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800509a:	6832      	ldr	r2, [r6, #0]
 800509c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80050a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050a6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	3a01      	subs	r2, #1
 80050ae:	025b      	lsls	r3, r3, #9
 80050b0:	0412      	lsls	r2, r2, #16
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80050b8:	4313      	orrs	r3, r2
 80050ba:	6872      	ldr	r2, [r6, #4]
 80050bc:	3a01      	subs	r2, #1
 80050be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c2:	4313      	orrs	r3, r2
 80050c4:	6932      	ldr	r2, [r6, #16]
 80050c6:	3a01      	subs	r2, #1
 80050c8:	0612      	lsls	r2, r2, #24
 80050ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80050ce:	4313      	orrs	r3, r2
 80050d0:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80050d4:	6972      	ldr	r2, [r6, #20]
 80050d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80050da:	4313      	orrs	r3, r2
 80050dc:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80050e0:	69b3      	ldr	r3, [r6, #24]
 80050e2:	f022 0220 	bic.w	r2, r2, #32
 80050e6:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050e8:	4b19      	ldr	r3, [pc, #100]	@ (8005150 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050ea:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80050ee:	f022 0210 	bic.w	r2, r2, #16
 80050f2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050f4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80050f6:	69f2      	ldr	r2, [r6, #28]
 80050f8:	400b      	ands	r3, r1
 80050fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80050fe:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005100:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005102:	f043 0310 	orr.w	r3, r3, #16
 8005106:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005108:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800510a:	b1df      	cbz	r7, 8005144 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800510c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800510e:	bf0c      	ite	eq
 8005110:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005114:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8005118:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800511a:	4c0c      	ldr	r4, [pc, #48]	@ (800514c <RCCEx_PLL2_Config.part.0+0xdc>)
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005122:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005124:	f7fd fb60 	bl	80027e8 <HAL_GetTick>
 8005128:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800512a:	e004      	b.n	8005136 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800512c:	f7fd fb5c 	bl	80027e8 <HAL_GetTick>
 8005130:	1b40      	subs	r0, r0, r5
 8005132:	2802      	cmp	r0, #2
 8005134:	d804      	bhi.n	8005140 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	d5f7      	bpl.n	800512c <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 800513c:	2000      	movs	r0, #0
}
 800513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005140:	2003      	movs	r0, #3
}
 8005142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005144:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800514a:	e7e6      	b.n	800511a <RCCEx_PLL2_Config.part.0+0xaa>
 800514c:	58024400 	.word	0x58024400
 8005150:	ffff0007 	.word	0xffff0007

08005154 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005156:	4c36      	ldr	r4, [pc, #216]	@ (8005230 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005162:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005164:	f7fd fb40 	bl	80027e8 <HAL_GetTick>
 8005168:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800516a:	e004      	b.n	8005176 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800516c:	f7fd fb3c 	bl	80027e8 <HAL_GetTick>
 8005170:	1b40      	subs	r0, r0, r5
 8005172:	2802      	cmp	r0, #2
 8005174:	d856      	bhi.n	8005224 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	009a      	lsls	r2, r3, #2
 800517a:	d4f7      	bmi.n	800516c <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800517c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800517e:	6832      	ldr	r2, [r6, #0]
 8005180:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005184:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005188:	62a3      	str	r3, [r4, #40]	@ 0x28
 800518a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800518e:	3b01      	subs	r3, #1
 8005190:	3a01      	subs	r2, #1
 8005192:	025b      	lsls	r3, r3, #9
 8005194:	0412      	lsls	r2, r2, #16
 8005196:	b29b      	uxth	r3, r3
 8005198:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800519c:	4313      	orrs	r3, r2
 800519e:	6872      	ldr	r2, [r6, #4]
 80051a0:	3a01      	subs	r2, #1
 80051a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a6:	4313      	orrs	r3, r2
 80051a8:	6932      	ldr	r2, [r6, #16]
 80051aa:	3a01      	subs	r2, #1
 80051ac:	0612      	lsls	r2, r2, #24
 80051ae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80051b2:	4313      	orrs	r3, r2
 80051b4:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051b8:	6972      	ldr	r2, [r6, #20]
 80051ba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80051be:	4313      	orrs	r3, r2
 80051c0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80051c4:	69b3      	ldr	r3, [r6, #24]
 80051c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051ca:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051cc:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051ce:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80051d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051d6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051da:	69f2      	ldr	r2, [r6, #28]
 80051dc:	400b      	ands	r3, r1
 80051de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80051e2:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80051ee:	b1df      	cbz	r7, 8005228 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051f0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051f2:	bf0c      	ite	eq
 80051f4:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051f8:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80051fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005230 <RCCEx_PLL3_Config.part.0+0xdc>)
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005208:	f7fd faee 	bl	80027e8 <HAL_GetTick>
 800520c:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800520e:	e004      	b.n	800521a <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005210:	f7fd faea 	bl	80027e8 <HAL_GetTick>
 8005214:	1b40      	subs	r0, r0, r5
 8005216:	2802      	cmp	r0, #2
 8005218:	d804      	bhi.n	8005224 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	d5f7      	bpl.n	8005210 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8005220:	2000      	movs	r0, #0
}
 8005222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005224:	2003      	movs	r0, #3
}
 8005226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800522c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800522e:	e7e6      	b.n	80051fe <RCCEx_PLL3_Config.part.0+0xaa>
 8005230:	58024400 	.word	0x58024400
 8005234:	ffff0007 	.word	0xffff0007

08005238 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800523c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8005240:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005242:	011d      	lsls	r5, r3, #4
 8005244:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8005248:	d525      	bpl.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800524a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800524c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005250:	f000 8660 	beq.w	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005254:	d814      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8005256:	2900      	cmp	r1, #0
 8005258:	f000 86fa 	beq.w	8006050 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800525c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005260:	f040 8466 	bne.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005264:	49ad      	ldr	r1, [pc, #692]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005266:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005268:	f001 0103 	and.w	r1, r1, #3
 800526c:	2903      	cmp	r1, #3
 800526e:	f000 845f 	beq.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005272:	2102      	movs	r1, #2
 8005274:	3008      	adds	r0, #8
 8005276:	f7ff fefb 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 800527a:	4606      	mov	r6, r0
        break;
 800527c:	f000 be56 	b.w	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005280:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8005284:	f040 8454 	bne.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005288:	4da4      	ldr	r5, [pc, #656]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800528a:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800528c:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800528e:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8005292:	4301      	orrs	r1, r0
 8005294:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005296:	05d8      	lsls	r0, r3, #23
 8005298:	d50a      	bpl.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 800529a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800529c:	2904      	cmp	r1, #4
 800529e:	d806      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052a0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80052a4:	064c04a8 	.word	0x064c04a8
 80052a8:	04ad0661 	.word	0x04ad0661
 80052ac:	04ad      	.short	0x04ad
 80052ae:	2601      	movs	r6, #1
 80052b0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052b2:	0599      	lsls	r1, r3, #22
 80052b4:	d524      	bpl.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 80052b6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80052b8:	2980      	cmp	r1, #128	@ 0x80
 80052ba:	f000 8664 	beq.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80052be:	f200 8122 	bhi.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80052c2:	2900      	cmp	r1, #0
 80052c4:	f000 84ac 	beq.w	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80052c8:	2940      	cmp	r1, #64	@ 0x40
 80052ca:	f040 8123 	bne.w	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ce:	4993      	ldr	r1, [pc, #588]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052d2:	f001 0103 	and.w	r1, r1, #3
 80052d6:	2903      	cmp	r1, #3
 80052d8:	f000 811c 	beq.w	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80052dc:	2100      	movs	r1, #0
 80052de:	f104 0008 	add.w	r0, r4, #8
 80052e2:	f7ff fec5 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 80052e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	f040 851b 	bne.w	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80052f2:	4f8a      	ldr	r7, [pc, #552]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052f4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80052f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052f8:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80052fc:	4301      	orrs	r1, r0
 80052fe:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005300:	055f      	lsls	r7, r3, #21
 8005302:	d528      	bpl.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005304:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8005308:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800530c:	f000 864f 	beq.w	8005fae <HAL_RCCEx_PeriphCLKConfig+0xd76>
 8005310:	f200 8106 	bhi.w	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005314:	2900      	cmp	r1, #0
 8005316:	f000 8463 	beq.w	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800531a:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800531e:	f040 8107 	bne.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005322:	497e      	ldr	r1, [pc, #504]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005324:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005326:	f001 0103 	and.w	r1, r1, #3
 800532a:	2903      	cmp	r1, #3
 800532c:	f000 8100 	beq.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8005330:	2100      	movs	r1, #0
 8005332:	f104 0008 	add.w	r0, r4, #8
 8005336:	f7ff fe9b 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 800533a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800533c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005340:	2d00      	cmp	r5, #0
 8005342:	f040 84f4 	bne.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005346:	4f75      	ldr	r7, [pc, #468]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005348:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800534c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800534e:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8005352:	4301      	orrs	r1, r0
 8005354:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005356:	0518      	lsls	r0, r3, #20
 8005358:	d528      	bpl.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 800535a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800535e:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8005362:	f000 85ac 	beq.w	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xc86>
 8005366:	f200 80e6 	bhi.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800536a:	2900      	cmp	r1, #0
 800536c:	f000 8425 	beq.w	8005bba <HAL_RCCEx_PeriphCLKConfig+0x982>
 8005370:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8005374:	f040 80e7 	bne.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005378:	4968      	ldr	r1, [pc, #416]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800537a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800537c:	f001 0103 	and.w	r1, r1, #3
 8005380:	2903      	cmp	r1, #3
 8005382:	f000 80e0 	beq.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005386:	2100      	movs	r1, #0
 8005388:	f104 0008 	add.w	r0, r4, #8
 800538c:	f7ff fe70 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005390:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005392:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005396:	2d00      	cmp	r5, #0
 8005398:	f040 84cc 	bne.w	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800539c:	4f5f      	ldr	r7, [pc, #380]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800539e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80053a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053a4:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80053a8:	4301      	orrs	r1, r0
 80053aa:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053ac:	0199      	lsls	r1, r3, #6
 80053ae:	d518      	bpl.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 80053b0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80053b2:	2920      	cmp	r1, #32
 80053b4:	f000 84ff 	beq.w	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 80053b8:	f200 80c8 	bhi.w	800554c <HAL_RCCEx_PeriphCLKConfig+0x314>
 80053bc:	b139      	cbz	r1, 80053ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053be:	2910      	cmp	r1, #16
 80053c0:	f040 80c7 	bne.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c4:	4855      	ldr	r0, [pc, #340]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80053c6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80053c8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80053cc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	f040 849f 	bne.w	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053d4:	4f51      	ldr	r7, [pc, #324]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80053d6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80053d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80053da:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80053de:	4301      	orrs	r1, r0
 80053e0:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053e2:	04df      	lsls	r7, r3, #19
 80053e4:	d526      	bpl.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 80053e6:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80053e8:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80053ec:	f000 857b 	beq.w	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80053f0:	f200 80b2 	bhi.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x320>
 80053f4:	2900      	cmp	r1, #0
 80053f6:	f000 83ea 	beq.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x996>
 80053fa:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80053fe:	f040 80b3 	bne.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005402:	4946      	ldr	r1, [pc, #280]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005404:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005406:	f001 0103 	and.w	r1, r1, #3
 800540a:	2903      	cmp	r1, #3
 800540c:	f000 80ac 	beq.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005410:	2100      	movs	r1, #0
 8005412:	f104 0008 	add.w	r0, r4, #8
 8005416:	f7ff fe2b 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 800541a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800541c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005420:	2d00      	cmp	r5, #0
 8005422:	f040 848a 	bne.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005426:	4f3d      	ldr	r7, [pc, #244]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005428:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800542a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800542c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005430:	4301      	orrs	r1, r0
 8005432:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005434:	0498      	lsls	r0, r3, #18
 8005436:	d524      	bpl.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005438:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800543a:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800543e:	f000 8516 	beq.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8005442:	f200 8094 	bhi.w	800556e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005446:	b191      	cbz	r1, 800546e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8005448:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800544c:	f040 8099 	bne.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005450:	4932      	ldr	r1, [pc, #200]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005452:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005454:	f001 0103 	and.w	r1, r1, #3
 8005458:	2903      	cmp	r1, #3
 800545a:	f000 8092 	beq.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800545e:	2101      	movs	r1, #1
 8005460:	f104 0008 	add.w	r0, r4, #8
 8005464:	f7ff fe04 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005468:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800546a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800546e:	2d00      	cmp	r5, #0
 8005470:	f040 8476 	bne.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005474:	4f29      	ldr	r7, [pc, #164]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005476:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005478:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800547a:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800547e:	4301      	orrs	r1, r0
 8005480:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005482:	0459      	lsls	r1, r3, #17
 8005484:	d523      	bpl.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005486:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800548a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800548e:	f000 8502 	beq.w	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8005492:	d879      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005494:	b181      	cbz	r1, 80054b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005496:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800549a:	d17d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800549c:	491f      	ldr	r1, [pc, #124]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800549e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80054a0:	f001 0103 	and.w	r1, r1, #3
 80054a4:	2903      	cmp	r1, #3
 80054a6:	d077      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80054a8:	2101      	movs	r1, #1
 80054aa:	f104 0008 	add.w	r0, r4, #8
 80054ae:	f7ff fddf 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 80054b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	f040 8454 	bne.w	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054be:	4f17      	ldr	r7, [pc, #92]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054c0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80054c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80054c6:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80054ca:	4301      	orrs	r1, r0
 80054cc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054ce:	041f      	lsls	r7, r3, #16
 80054d0:	d50d      	bpl.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 80054d2:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80054d4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80054d8:	f000 82e2 	beq.w	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80054dc:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80054e0:	f000 83f0 	beq.w	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 80054e4:	2900      	cmp	r1, #0
 80054e6:	f000 82e0 	beq.w	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x872>
 80054ea:	2601      	movs	r6, #1
 80054ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054ee:	01d8      	lsls	r0, r3, #7
 80054f0:	d55e      	bpl.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x378>
    switch (PeriphClkInit->FmcClockSelection)
 80054f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80054f4:	2903      	cmp	r1, #3
 80054f6:	f200 85cd 	bhi.w	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80054fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80054fe:	0055      	.short	0x0055
 8005500:	04930050 	.word	0x04930050
 8005504:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 8005506:	29c0      	cmp	r1, #192	@ 0xc0
 8005508:	f43f aef0 	beq.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800550c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005510:	f43f aeec 	beq.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005514:	2601      	movs	r6, #1
 8005516:	4635      	mov	r5, r6
 8005518:	e6f2      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800551a:	bf00      	nop
 800551c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 8005520:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8005524:	f43f af0c 	beq.w	8005340 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8005528:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800552c:	f43f af08 	beq.w	8005340 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8005530:	2601      	movs	r6, #1
 8005532:	4635      	mov	r5, r6
 8005534:	e70f      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005536:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 800553a:	f43f af2c 	beq.w	8005396 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800553e:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8005542:	f43f af28 	beq.w	8005396 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005546:	2601      	movs	r6, #1
 8005548:	4635      	mov	r5, r6
 800554a:	e72f      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 800554c:	2930      	cmp	r1, #48	@ 0x30
 800554e:	f43f af3e 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005552:	2601      	movs	r6, #1
 8005554:	4635      	mov	r5, r6
 8005556:	e744      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005558:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 800555c:	f43f af60 	beq.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005560:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8005564:	f43f af5c 	beq.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005568:	2601      	movs	r6, #1
 800556a:	4635      	mov	r5, r6
 800556c:	e762      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800556e:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8005572:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8005576:	f43f af7a 	beq.w	800546e <HAL_RCCEx_PeriphCLKConfig+0x236>
 800557a:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800557e:	f43f af76 	beq.w	800546e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8005582:	2601      	movs	r6, #1
 8005584:	4635      	mov	r5, r6
 8005586:	e77c      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005588:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800558c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005590:	d092      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005592:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005596:	d08f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005598:	2601      	movs	r6, #1
 800559a:	4635      	mov	r5, r6
 800559c:	e797      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559e:	4837      	ldr	r0, [pc, #220]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80055a0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80055a2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80055a6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	f000 83b5 	beq.w	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80055ae:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055b0:	0259      	lsls	r1, r3, #9
 80055b2:	f100 82c0 	bmi.w	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055b6:	07df      	lsls	r7, r3, #31
 80055b8:	d52f      	bpl.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch (PeriphClkInit->Usart16ClockSelection)
 80055ba:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80055bc:	2928      	cmp	r1, #40	@ 0x28
 80055be:	d82a      	bhi.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80055c0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80055c4:	002902ab 	.word	0x002902ab
 80055c8:	00290029 	.word	0x00290029
 80055cc:	00290029 	.word	0x00290029
 80055d0:	00290029 	.word	0x00290029
 80055d4:	0029029c 	.word	0x0029029c
 80055d8:	00290029 	.word	0x00290029
 80055dc:	00290029 	.word	0x00290029
 80055e0:	00290029 	.word	0x00290029
 80055e4:	0029052d 	.word	0x0029052d
 80055e8:	00290029 	.word	0x00290029
 80055ec:	00290029 	.word	0x00290029
 80055f0:	00290029 	.word	0x00290029
 80055f4:	002902ab 	.word	0x002902ab
 80055f8:	00290029 	.word	0x00290029
 80055fc:	00290029 	.word	0x00290029
 8005600:	00290029 	.word	0x00290029
 8005604:	002902ab 	.word	0x002902ab
 8005608:	00290029 	.word	0x00290029
 800560c:	00290029 	.word	0x00290029
 8005610:	00290029 	.word	0x00290029
 8005614:	02ab      	.short	0x02ab
 8005616:	2601      	movs	r6, #1
 8005618:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800561a:	0798      	lsls	r0, r3, #30
 800561c:	d51e      	bpl.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800561e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8005620:	2905      	cmp	r1, #5
 8005622:	f200 851c 	bhi.w	800605e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8005626:	e8df f011 	tbh	[pc, r1, lsl #1]
 800562a:	0015      	.short	0x0015
 800562c:	04e80006 	.word	0x04e80006
 8005630:	00150015 	.word	0x00150015
 8005634:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005636:	4911      	ldr	r1, [pc, #68]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005638:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800563a:	f001 0103 	and.w	r1, r1, #3
 800563e:	2903      	cmp	r1, #3
 8005640:	f000 850d 	beq.w	800605e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8005644:	2101      	movs	r1, #1
 8005646:	f104 0008 	add.w	r0, r4, #8
 800564a:	f7ff fd11 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 800564e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005650:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005654:	2d00      	cmp	r5, #0
 8005656:	f000 837b 	beq.w	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb18>
 800565a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800565c:	0759      	lsls	r1, r3, #29
 800565e:	d522      	bpl.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005660:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8005664:	2905      	cmp	r1, #5
 8005666:	f200 84fe 	bhi.w	8006066 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800566a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800566e:	0018      	.short	0x0018
 8005670:	04b40009 	.word	0x04b40009
 8005674:	00180018 	.word	0x00180018
 8005678:	0018      	.short	0x0018
 800567a:	bf00      	nop
 800567c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005680:	49b0      	ldr	r1, [pc, #704]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005682:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005684:	f001 0103 	and.w	r1, r1, #3
 8005688:	2903      	cmp	r1, #3
 800568a:	f000 84ec 	beq.w	8006066 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800568e:	2101      	movs	r1, #1
 8005690:	f104 0008 	add.w	r0, r4, #8
 8005694:	f7ff fcec 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005698:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800569a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800569e:	2d00      	cmp	r5, #0
 80056a0:	f000 8364 	beq.w	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xb34>
 80056a4:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056a6:	069f      	lsls	r7, r3, #26
 80056a8:	d526      	bpl.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80056aa:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80056ae:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80056b2:	f000 836e 	beq.w	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 80056b6:	f200 8194 	bhi.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80056ba:	b191      	cbz	r1, 80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80056bc:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80056c0:	f040 8199 	bne.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056c4:	499f      	ldr	r1, [pc, #636]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80056c6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056c8:	f001 0103 	and.w	r1, r1, #3
 80056cc:	2903      	cmp	r1, #3
 80056ce:	f000 8192 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
 80056d2:	2100      	movs	r1, #0
 80056d4:	f104 0008 	add.w	r0, r4, #8
 80056d8:	f7ff fcca 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 80056dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056e2:	2d00      	cmp	r5, #0
 80056e4:	f040 834b 	bne.w	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056e8:	4f96      	ldr	r7, [pc, #600]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80056ea:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80056ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056f0:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80056f4:	4301      	orrs	r1, r0
 80056f6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056f8:	0658      	lsls	r0, r3, #25
 80056fa:	d526      	bpl.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056fc:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8005700:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005704:	f000 83a1 	beq.w	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8005708:	f200 8178 	bhi.w	80059fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 800570c:	b191      	cbz	r1, 8005734 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800570e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005712:	f040 817d 	bne.w	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005716:	498b      	ldr	r1, [pc, #556]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005718:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800571a:	f001 0103 	and.w	r1, r1, #3
 800571e:	2903      	cmp	r1, #3
 8005720:	f000 8176 	beq.w	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8005724:	2100      	movs	r1, #0
 8005726:	f104 0008 	add.w	r0, r4, #8
 800572a:	f7ff fca1 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 800572e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005730:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005734:	2d00      	cmp	r5, #0
 8005736:	f040 8328 	bne.w	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xb52>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800573a:	4f82      	ldr	r7, [pc, #520]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800573c:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8005740:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005742:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8005746:	4301      	orrs	r1, r0
 8005748:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800574a:	0619      	lsls	r1, r3, #24
 800574c:	d526      	bpl.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800574e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005752:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8005756:	f000 8353 	beq.w	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 800575a:	f200 815c 	bhi.w	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800575e:	b191      	cbz	r1, 8005786 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005760:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8005764:	f040 8161 	bne.w	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005768:	4976      	ldr	r1, [pc, #472]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800576a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800576c:	f001 0103 	and.w	r1, r1, #3
 8005770:	2903      	cmp	r1, #3
 8005772:	f000 815a 	beq.w	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005776:	2100      	movs	r1, #0
 8005778:	f104 0008 	add.w	r0, r4, #8
 800577c:	f7ff fc78 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005780:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005782:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005786:	2d00      	cmp	r5, #0
 8005788:	f040 82fb 	bne.w	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800578c:	4f6d      	ldr	r7, [pc, #436]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800578e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8005792:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005794:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005798:	4301      	orrs	r1, r0
 800579a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800579c:	071f      	lsls	r7, r3, #28
 800579e:	d50b      	bpl.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80057a0:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80057a4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80057a8:	f000 8250 	beq.w	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057ac:	4f65      	ldr	r7, [pc, #404]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80057ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057b0:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80057b4:	4301      	orrs	r1, r0
 80057b6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057b8:	06d8      	lsls	r0, r3, #27
 80057ba:	d50b      	bpl.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057bc:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80057c0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80057c4:	f000 8257 	beq.w	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057c8:	4f5e      	ldr	r7, [pc, #376]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80057ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80057cc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80057d0:	4301      	orrs	r1, r0
 80057d2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d4:	0319      	lsls	r1, r3, #12
 80057d6:	d50e      	bpl.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->AdcClockSelection)
 80057d8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80057dc:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80057e0:	f000 816e 	beq.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80057e4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80057e8:	f000 8179 	beq.w	8005ade <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80057ec:	2900      	cmp	r1, #0
 80057ee:	f000 827a 	beq.w	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80057f2:	2601      	movs	r6, #1
 80057f4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057f6:	035f      	lsls	r7, r3, #13
 80057f8:	d50f      	bpl.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch (PeriphClkInit->UsbClockSelection)
 80057fa:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80057fe:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005802:	f000 82eb 	beq.w	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005806:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800580a:	f000 813d 	beq.w	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800580e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005812:	f000 8134 	beq.w	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005816:	2601      	movs	r6, #1
 8005818:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800581a:	03d8      	lsls	r0, r3, #15
 800581c:	d520      	bpl.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x628>
    switch (PeriphClkInit->SdmmcClockSelection)
 800581e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005820:	2900      	cmp	r1, #0
 8005822:	f000 8245 	beq.w	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8005826:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800582a:	f040 8125 	bne.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800582e:	4945      	ldr	r1, [pc, #276]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005830:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005832:	f001 0103 	and.w	r1, r1, #3
 8005836:	2903      	cmp	r1, #3
 8005838:	f000 811e 	beq.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800583c:	2102      	movs	r1, #2
 800583e:	f104 0008 	add.w	r0, r4, #8
 8005842:	f7ff fc15 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005846:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005848:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800584c:	2d00      	cmp	r5, #0
 800584e:	f040 8237 	bne.w	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005852:	4f3c      	ldr	r7, [pc, #240]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005854:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005856:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005858:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800585c:	4301      	orrs	r1, r0
 800585e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005860:	0099      	lsls	r1, r3, #2
 8005862:	d50e      	bpl.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005864:	4937      	ldr	r1, [pc, #220]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005866:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005868:	f001 0103 	and.w	r1, r1, #3
 800586c:	2903      	cmp	r1, #3
 800586e:	d007      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8005870:	2102      	movs	r1, #2
 8005872:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005876:	f7ff fc6d 	bl	8005154 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800587a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800587e:	b100      	cbz	r0, 8005882 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = HAL_ERROR;
 8005880:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005882:	039f      	lsls	r7, r3, #14
 8005884:	f140 80e0 	bpl.w	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch (PeriphClkInit->RngClockSelection)
 8005888:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800588c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005890:	f000 8205 	beq.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8005894:	f240 80cc 	bls.w	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8005898:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800589c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80058a0:	f000 80c9 	beq.w	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80058a4:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058a6:	02d8      	lsls	r0, r3, #11
 80058a8:	d506      	bpl.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058aa:	4826      	ldr	r0, [pc, #152]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058ac:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80058ae:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80058b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80058b4:	4331      	orrs	r1, r6
 80058b6:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058b8:	00d9      	lsls	r1, r3, #3
 80058ba:	d507      	bpl.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x694>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058bc:	4821      	ldr	r0, [pc, #132]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058be:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 80058c2:	6901      	ldr	r1, [r0, #16]
 80058c4:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80058c8:	4331      	orrs	r1, r6
 80058ca:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058cc:	029f      	lsls	r7, r3, #10
 80058ce:	d506      	bpl.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058d0:	481c      	ldr	r0, [pc, #112]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058d2:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 80058d4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80058d6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80058da:	4331      	orrs	r1, r6
 80058dc:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058de:	005e      	lsls	r6, r3, #1
 80058e0:	d509      	bpl.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058e2:	4918      	ldr	r1, [pc, #96]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058e4:	6908      	ldr	r0, [r1, #16]
 80058e6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80058ea:	6108      	str	r0, [r1, #16]
 80058ec:	6908      	ldr	r0, [r1, #16]
 80058ee:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 80058f2:	4330      	orrs	r0, r6
 80058f4:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da06      	bge.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058fa:	4812      	ldr	r0, [pc, #72]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80058fc:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80058fe:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005900:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005904:	4331      	orrs	r1, r6
 8005906:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005908:	0218      	lsls	r0, r3, #8
 800590a:	d507      	bpl.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800590c:	490d      	ldr	r1, [pc, #52]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800590e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8005912:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8005914:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005918:	4303      	orrs	r3, r0
 800591a:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800591c:	07d1      	lsls	r1, r2, #31
 800591e:	d513      	bpl.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005920:	4b08      	ldr	r3, [pc, #32]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	2b03      	cmp	r3, #3
 800592a:	f000 818d 	beq.w	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 800592e:	2100      	movs	r1, #0
 8005930:	f104 0008 	add.w	r0, r4, #8
 8005934:	f7ff fb9c 	bl	8005070 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005938:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800593a:	2800      	cmp	r0, #0
 800593c:	f040 8204 	bne.w	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005940:	e002      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005948:	0793      	lsls	r3, r2, #30
 800594a:	d50f      	bpl.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800594c:	4bb2      	ldr	r3, [pc, #712]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b03      	cmp	r3, #3
 8005956:	f000 816c 	beq.w	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800595a:	2101      	movs	r1, #1
 800595c:	f104 0008 	add.w	r0, r4, #8
 8005960:	f7ff fb86 	bl	8005070 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005964:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005966:	2800      	cmp	r0, #0
 8005968:	f040 81f0 	bne.w	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb14>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800596c:	0757      	lsls	r7, r2, #29
 800596e:	d50f      	bpl.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005970:	4ba9      	ldr	r3, [pc, #676]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b03      	cmp	r3, #3
 800597a:	f000 815c 	beq.w	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 800597e:	2102      	movs	r1, #2
 8005980:	f104 0008 	add.w	r0, r4, #8
 8005984:	f7ff fb74 	bl	8005070 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005988:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800598a:	2800      	cmp	r0, #0
 800598c:	f040 81d8 	bne.w	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xb08>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005990:	0716      	lsls	r6, r2, #28
 8005992:	d50f      	bpl.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005994:	4ba0      	ldr	r3, [pc, #640]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	2b03      	cmp	r3, #3
 800599e:	f000 814c 	beq.w	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xa02>
 80059a2:	2100      	movs	r1, #0
 80059a4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80059a8:	f7ff fbd4 	bl	8005154 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f040 81c8 	bne.w	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059b4:	06d0      	lsls	r0, r2, #27
 80059b6:	d54a      	bpl.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x816>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059b8:	4b97      	ldr	r3, [pc, #604]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ba:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	f000 813a 	beq.w	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80059ca:	2101      	movs	r1, #1
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff fbc1 	bl	8005154 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d03a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x814>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	069a      	lsls	r2, r3, #26
 80059da:	f140 808c 	bpl.w	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80059de:	4605      	mov	r5, r0
 80059e0:	e039      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059e2:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80059e6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80059ea:	f43f ae7a 	beq.w	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80059ee:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80059f2:	f43f ae76 	beq.w	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80059f6:	2601      	movs	r6, #1
 80059f8:	4635      	mov	r5, r6
 80059fa:	e67d      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059fc:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8005a00:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005a04:	f43f ae96 	beq.w	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005a08:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8005a0c:	f43f ae92 	beq.w	8005734 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005a10:	2601      	movs	r6, #1
 8005a12:	4635      	mov	r5, r6
 8005a14:	e699      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a16:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8005a1a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005a1e:	f43f aeb2 	beq.w	8005786 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005a22:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8005a26:	f43f aeae 	beq.w	8005786 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005a2a:	2601      	movs	r6, #1
 8005a2c:	4635      	mov	r5, r6
 8005a2e:	e6b5      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->RngClockSelection)
 8005a30:	2900      	cmp	r1, #0
 8005a32:	f47f af37 	bne.w	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if (ret == HAL_OK)
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	f47f af35 	bne.w	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a3c:	4d76      	ldr	r5, [pc, #472]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005a3e:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8005a40:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005a44:	4301      	orrs	r1, r0
 8005a46:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8005a48:	4635      	mov	r5, r6
 8005a4a:	e72c      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a4c:	6862      	ldr	r2, [r4, #4]
 8005a4e:	0693      	lsls	r3, r2, #26
 8005a50:	d50d      	bpl.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x836>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a52:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a56:	4b70      	ldr	r3, [pc, #448]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d049      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8005a62:	2102      	movs	r1, #2
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7ff fb75 	bl	8005154 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d143      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
  if (status == HAL_OK)
 8005a6e:	1e28      	subs	r0, r5, #0
 8005a70:	bf18      	it	ne
 8005a72:	2001      	movne	r0, #1
}
 8005a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a78:	2601      	movs	r6, #1
 8005a7a:	4635      	mov	r5, r6
 8005a7c:	e6f0      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x628>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7e:	4866      	ldr	r0, [pc, #408]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005a80:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005a82:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005a86:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	f040 8140 	bne.w	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a8e:	4f62      	ldr	r7, [pc, #392]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005a90:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8005a94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a96:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005a9a:	4301      	orrs	r1, r0
 8005a9c:	6579      	str	r1, [r7, #84]	@ 0x54
 8005a9e:	e6bc      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa0:	485d      	ldr	r0, [pc, #372]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005aa2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005aa4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005aa8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	f040 812c 	bne.w	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ab0:	4f59      	ldr	r7, [pc, #356]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005ab2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005ab4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ab6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005aba:	4301      	orrs	r1, r0
 8005abc:	6539      	str	r1, [r7, #80]	@ 0x50
 8005abe:	e516      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ac0:	4955      	ldr	r1, [pc, #340]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005ac2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005ac4:	f001 0103 	and.w	r1, r1, #3
 8005ac8:	2903      	cmp	r1, #3
 8005aca:	f43f ae92 	beq.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005ace:	2102      	movs	r1, #2
 8005ad0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005ad4:	f7ff fb3e 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005ad8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ada:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	f040 8151 	bne.w	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ae4:	4f4c      	ldr	r7, [pc, #304]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005ae6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8005aea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005aec:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005af0:	4301      	orrs	r1, r0
 8005af2:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005af4:	e67f      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  return HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
}
 8005af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005afc:	4946      	ldr	r1, [pc, #280]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005afe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005b00:	f001 0103 	and.w	r1, r1, #3
 8005b04:	2903      	cmp	r1, #3
 8005b06:	f43f ad86 	beq.w	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	f104 0008 	add.w	r0, r4, #8
 8005b10:	f7ff faae 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005b14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	f040 8137 	bne.w	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b20:	4f3d      	ldr	r7, [pc, #244]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005b22:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b26:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8005b2a:	4301      	orrs	r1, r0
 8005b2c:	6579      	str	r1, [r7, #84]	@ 0x54
 8005b2e:	e574      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005b30:	2601      	movs	r6, #1
 8005b32:	f7ff bbb0 	b.w	8005296 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b36:	4f39      	ldr	r7, [pc, #228]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b3e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005b40:	f7fc fe52 	bl	80027e8 <HAL_GetTick>
 8005b44:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b46:	e006      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b48:	f7fc fe4e 	bl	80027e8 <HAL_GetTick>
 8005b4c:	eba0 0008 	sub.w	r0, r0, r8
 8005b50:	2864      	cmp	r0, #100	@ 0x64
 8005b52:	f200 8277 	bhi.w	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	05da      	lsls	r2, r3, #23
 8005b5a:	d5f5      	bpl.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x910>
    if (ret == HAL_OK)
 8005b5c:	2d00      	cmp	r5, #0
 8005b5e:	f040 8272 	bne.w	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b62:	4a2d      	ldr	r2, [pc, #180]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005b64:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005b68:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005b6a:	4059      	eors	r1, r3
 8005b6c:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8005b70:	d00b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x952>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b72:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b74:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b76:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b7a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8005b7e:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b80:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8005b82:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8005b86:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005b88:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8e:	f000 8285 	beq.w	800609c <HAL_RCCEx_PeriphCLKConfig+0xe64>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b92:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005b96:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005b9a:	f000 8293 	beq.w	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
 8005b9e:	491e      	ldr	r1, [pc, #120]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005ba0:	690a      	ldr	r2, [r1, #16]
 8005ba2:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005ba6:	610a      	str	r2, [r1, #16]
 8005ba8:	481b      	ldr	r0, [pc, #108]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005baa:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8005bae:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8005bb0:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bb2:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb6:	6701      	str	r1, [r0, #112]	@ 0x70
 8005bb8:	e4fd      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bba:	4817      	ldr	r0, [pc, #92]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005bbc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005bbe:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005bc2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	f040 80b5 	bne.w	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8005bca:	f7ff bbe7 	b.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x164>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bce:	4812      	ldr	r0, [pc, #72]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005bd0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005bd2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005bd6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	f040 80ae 	bne.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005bde:	e422      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	480d      	ldr	r0, [pc, #52]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005be2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005be4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005be8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005bea:	2d00      	cmp	r5, #0
 8005bec:	f040 809f 	bne.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005bf0:	f7ff bba9 	b.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4808      	ldr	r0, [pc, #32]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005bf6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005bf8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005bfc:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005bfe:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	f040 81ad 	bne.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xd28>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c06:	4f04      	ldr	r7, [pc, #16]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c0c:	f021 0107 	bic.w	r1, r1, #7
 8005c10:	4301      	orrs	r1, r0
 8005c12:	6539      	str	r1, [r7, #80]	@ 0x50
 8005c14:	f7ff bb4d 	b.w	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c20:	48bb      	ldr	r0, [pc, #748]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005c22:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005c24:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005c28:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	d17c      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005c2e:	f7ff bb60 	b.w	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    return HAL_ERROR;
 8005c32:	2501      	movs	r5, #1
 8005c34:	e69a      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x734>
 8005c36:	2501      	movs	r5, #1
 8005c38:	e6aa      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x758>
    return HAL_ERROR;
 8005c3a:	2501      	movs	r5, #1
 8005c3c:	e6ba      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c3e:	0691      	lsls	r1, r2, #26
 8005c40:	f57f af59 	bpl.w	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    return HAL_ERROR;
 8005c44:	2501      	movs	r5, #1
 8005c46:	e706      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x81e>
    return HAL_ERROR;
 8005c48:	2501      	movs	r5, #1
 8005c4a:	e67d      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c4c:	49b0      	ldr	r1, [pc, #704]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005c4e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005c50:	f001 0103 	and.w	r1, r1, #3
 8005c54:	2903      	cmp	r1, #3
 8005c56:	f000 820a 	beq.w	800606e <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005c60:	f7ff fa78 	bl	8005154 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f000 820f 	beq.w	8006088 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c6a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8005c6e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c70:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005c74:	e59a      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x574>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c76:	49a6      	ldr	r1, [pc, #664]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005c78:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005c7a:	f001 0103 	and.w	r1, r1, #3
 8005c7e:	2903      	cmp	r1, #3
 8005c80:	f000 81f8 	beq.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8005c84:	2102      	movs	r1, #2
 8005c86:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005c8a:	f7ff fa63 	bl	8005154 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f040 81f3 	bne.w	800607a <HAL_RCCEx_PeriphCLKConfig+0xe42>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c94:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c98:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005c9c:	e594      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9e:	4f9c      	ldr	r7, [pc, #624]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005ca0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ca2:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005ca6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	f47f adfc 	bne.w	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005cae:	e6c5      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x804>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb0:	4897      	ldr	r0, [pc, #604]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005cb2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005cb4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005cb8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	f43f adc9 	beq.w	8005852 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005cc0:	462e      	mov	r6, r5
 8005cc2:	e5cd      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x628>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cc4:	4992      	ldr	r1, [pc, #584]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005cc6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005cc8:	f001 0103 	and.w	r1, r1, #3
 8005ccc:	2903      	cmp	r1, #3
 8005cce:	f43f ac0c 	beq.w	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	f104 0008 	add.w	r0, r4, #8
 8005cd8:	f7ff f9ca 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005cdc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cde:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005ce2:	b98d      	cbnz	r5, 8005d08 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005ce4:	e6e4      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x878>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ce6:	488a      	ldr	r0, [pc, #552]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005ce8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005cea:	f000 0003 	and.w	r0, r0, #3
 8005cee:	2803      	cmp	r0, #3
 8005cf0:	f43f ad7f 	beq.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005cf4:	f104 0008 	add.w	r0, r4, #8
 8005cf8:	f7ff f9ba 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005cfc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	d13f      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8005d06:	e6ed      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8005d08:	462e      	mov	r6, r5
 8005d0a:	f7ff bbf0 	b.w	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005d0e:	462e      	mov	r6, r5
 8005d10:	e583      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8005d12:	462e      	mov	r6, r5
 8005d14:	f7ff bb65 	b.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d18:	4f7d      	ldr	r7, [pc, #500]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005d1a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005d1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d1e:	f021 0103 	bic.w	r1, r1, #3
 8005d22:	4301      	orrs	r1, r0
 8005d24:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8005d26:	e443      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005d28:	462e      	mov	r6, r5
 8005d2a:	f7ff bae9 	b.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8005d2e:	462e      	mov	r6, r5
 8005d30:	f7ff bb11 	b.w	8005356 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005d34:	462e      	mov	r6, r5
 8005d36:	f7ff bb39 	b.w	80053ac <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005d3a:	462e      	mov	r6, r5
 8005d3c:	f7ff bb7a 	b.w	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d40:	4605      	mov	r5, r0
 8005d42:	e625      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d44:	4605      	mov	r5, r0
 8005d46:	e635      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d48:	4605      	mov	r5, r0
 8005d4a:	e5fd      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	e60d      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d50:	4f6f      	ldr	r7, [pc, #444]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005d52:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005d54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d56:	f021 0107 	bic.w	r1, r1, #7
 8005d5a:	4301      	orrs	r1, r0
 8005d5c:	6579      	str	r1, [r7, #84]	@ 0x54
 8005d5e:	e47d      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005d60:	462e      	mov	r6, r5
 8005d62:	f7ff bb8e 	b.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005d66:	462e      	mov	r6, r5
 8005d68:	f7ff bbb1 	b.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d6c:	4f68      	ldr	r7, [pc, #416]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005d6e:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8005d72:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005d74:	f021 0107 	bic.w	r1, r1, #7
 8005d78:	4301      	orrs	r1, r0
 8005d7a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d7c:	e493      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8005d7e:	462e      	mov	r6, r5
 8005d80:	e4ba      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8005d82:	462e      	mov	r6, r5
 8005d84:	e50a      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x564>
 8005d86:	462e      	mov	r6, r5
 8005d88:	e535      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005d8a:	462e      	mov	r6, r5
 8005d8c:	e4dd      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x512>
 8005d8e:	462e      	mov	r6, r5
 8005d90:	e443      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d92:	495f      	ldr	r1, [pc, #380]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005d94:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005d96:	f001 0103 	and.w	r1, r1, #3
 8005d9a:	2903      	cmp	r1, #3
 8005d9c:	f43f ae2b 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8005da0:	2102      	movs	r1, #2
 8005da2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005da6:	f7ff f9d5 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005daa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	d1e4      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8005db4:	e498      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005db6:	4956      	ldr	r1, [pc, #344]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005db8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005dba:	f001 0103 	and.w	r1, r1, #3
 8005dbe:	2903      	cmp	r1, #3
 8005dc0:	f43f abc7 	beq.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	f104 0008 	add.w	r0, r4, #8
 8005dca:	f7ff f951 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005dce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dd0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d19c      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xada>
 8005dd8:	f7ff bafc 	b.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ddc:	494c      	ldr	r1, [pc, #304]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005dde:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005de0:	f001 0103 	and.w	r1, r1, #3
 8005de4:	2903      	cmp	r1, #3
 8005de6:	f43f ad16 	beq.w	8005816 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8005dea:	2101      	movs	r1, #1
 8005dec:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005df0:	f7ff f9b0 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005df4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005df6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	d187      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8005dfe:	e646      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e00:	4943      	ldr	r1, [pc, #268]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005e02:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e04:	f001 0103 	and.w	r1, r1, #3
 8005e08:	2903      	cmp	r1, #3
 8005e0a:	f43f ae0e 	beq.w	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005e0e:	2102      	movs	r1, #2
 8005e10:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005e14:	f7ff f99e 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005e18:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e1a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	d1af      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8005e22:	e4b3      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x554>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e24:	493a      	ldr	r1, [pc, #232]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005e26:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e28:	f001 0103 	and.w	r1, r1, #3
 8005e2c:	2903      	cmp	r1, #3
 8005e2e:	f000 8131 	beq.w	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005e32:	2102      	movs	r1, #2
 8005e34:	f104 0008 	add.w	r0, r4, #8
 8005e38:	f7ff f91a 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005e3c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e3e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	f47f abb3 	bne.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e48:	e766      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e4a:	4931      	ldr	r1, [pc, #196]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005e4c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e4e:	f001 0103 	and.w	r1, r1, #3
 8005e52:	2903      	cmp	r1, #3
 8005e54:	f43f addc 	beq.w	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8005e58:	2102      	movs	r1, #2
 8005e5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005e5e:	f7ff f979 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005e62:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e64:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d18e      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8005e6c:	e465      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x502>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e6e:	4928      	ldr	r1, [pc, #160]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005e70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e72:	f001 0103 	and.w	r1, r1, #3
 8005e76:	2903      	cmp	r1, #3
 8005e78:	f43f ab83 	beq.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005e82:	f7ff f967 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005e86:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e88:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005e8c:	2d00      	cmp	r5, #0
 8005e8e:	f47f af67 	bne.w	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb28>
 8005e92:	f7ff baef 	b.w	8005474 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e96:	491e      	ldr	r1, [pc, #120]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005e98:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e9a:	f001 0103 	and.w	r1, r1, #3
 8005e9e:	2903      	cmp	r1, #3
 8005ea0:	f43f ab7a 	beq.w	8005598 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005eaa:	f7ff f953 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005eae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005eb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	f47f af56 	bne.w	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005eba:	f7ff bb00 	b.w	80054be <HAL_RCCEx_PeriphCLKConfig+0x286>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ebe:	4914      	ldr	r1, [pc, #80]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005ec0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005ec2:	f001 0103 	and.w	r1, r1, #3
 8005ec6:	2903      	cmp	r1, #3
 8005ec8:	f43f ab3d 	beq.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005ecc:	2100      	movs	r1, #0
 8005ece:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005ed2:	f7ff f93f 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005ed6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ed8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	f47f af29 	bne.w	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8005ee2:	f7ff ba5b 	b.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x164>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ee6:	490a      	ldr	r1, [pc, #40]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8005ee8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005eea:	f001 0103 	and.w	r1, r1, #3
 8005eee:	2903      	cmp	r1, #3
 8005ef0:	f43f ab3a 	beq.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005efa:	f7ff f92b 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005efe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f00:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f04:	2d00      	cmp	r5, #0
 8005f06:	f47f af18 	bne.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005f0a:	f7ff ba8c 	b.w	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f14:	4973      	ldr	r1, [pc, #460]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005f16:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005f18:	f001 0103 	and.w	r1, r1, #3
 8005f1c:	2903      	cmp	r1, #3
 8005f1e:	f43f ae07 	beq.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005f22:	2102      	movs	r1, #2
 8005f24:	3028      	adds	r0, #40	@ 0x28
 8005f26:	f7ff f915 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005f2a:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f30:	2e00      	cmp	r6, #0
 8005f32:	f47f a9b0 	bne.w	8005296 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f36:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005f38:	f7ff b9a6 	b.w	8005288 <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f3c:	4969      	ldr	r1, [pc, #420]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005f3e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005f40:	f001 0103 	and.w	r1, r1, #3
 8005f44:	2903      	cmp	r1, #3
 8005f46:	f43f a9b2 	beq.w	80052ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f104 0008 	add.w	r0, r4, #8
 8005f50:	f7ff f88e 	bl	8005070 <RCCEx_PLL2_Config.part.0>
 8005f54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	f43f ae53 	beq.w	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8005f60:	462e      	mov	r6, r5
 8005f62:	f7ff b9a6 	b.w	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f66:	495f      	ldr	r1, [pc, #380]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005f68:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005f6a:	f001 0103 	and.w	r1, r1, #3
 8005f6e:	2903      	cmp	r1, #3
 8005f70:	f43f a99d 	beq.w	80052ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f74:	2100      	movs	r1, #0
 8005f76:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005f7a:	f7ff f8eb 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005f7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f80:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005f84:	e63c      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f86:	4957      	ldr	r1, [pc, #348]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005f88:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005f8a:	f001 0103 	and.w	r1, r1, #3
 8005f8e:	2903      	cmp	r1, #3
 8005f90:	f43f aac0 	beq.w	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005f94:	2100      	movs	r1, #0
 8005f96:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005f9a:	f7ff f8db 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005f9e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fa0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	f47f aebf 	bne.w	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005faa:	f7ff b9a2 	b.w	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fae:	494d      	ldr	r1, [pc, #308]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005fb0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005fb2:	f001 0103 	and.w	r1, r1, #3
 8005fb6:	2903      	cmp	r1, #3
 8005fb8:	f43f aaba 	beq.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005fc2:	f7ff f8c7 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005fc6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fc8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	f47f aeae 	bne.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005fd2:	f7ff b9b8 	b.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fd6:	4943      	ldr	r1, [pc, #268]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005fd8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005fda:	f001 0103 	and.w	r1, r1, #3
 8005fde:	2903      	cmp	r1, #3
 8005fe0:	d041      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005fe8:	f7ff f8b4 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8005fec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	f47f ab56 	bne.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005ff8:	e6b8      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ffa:	493a      	ldr	r1, [pc, #232]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8005ffc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005ffe:	f001 0103 	and.w	r1, r1, #3
 8006002:	2903      	cmp	r1, #3
 8006004:	d02b      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8006006:	2101      	movs	r1, #1
 8006008:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800600c:	f7ff f8a2 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8006010:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006012:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006016:	2d00      	cmp	r5, #0
 8006018:	f47f ab1f 	bne.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x422>
 800601c:	e698      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800601e:	4931      	ldr	r1, [pc, #196]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006020:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006022:	f001 0103 	and.w	r1, r1, #3
 8006026:	2903      	cmp	r1, #3
 8006028:	f43f aaf5 	beq.w	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800602c:	2101      	movs	r1, #1
 800602e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006032:	f7ff f88f 	bl	8005154 <RCCEx_PLL3_Config.part.0>
 8006036:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006038:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800603c:	2d00      	cmp	r5, #0
 800603e:	f47f aea6 	bne.w	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8006042:	e56d      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = HAL_TIMEOUT;
 8006044:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006046:	462e      	mov	r6, r5
 8006048:	e9d4 3200 	ldrd	r3, r2, [r4]
 800604c:	f7ff bab3 	b.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006050:	4d24      	ldr	r5, [pc, #144]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006052:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8006054:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8006058:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800605a:	f7ff b915 	b.w	8005288 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800605e:	2601      	movs	r6, #1
 8006060:	4635      	mov	r5, r6
 8006062:	f7ff bafb 	b.w	800565c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006066:	2601      	movs	r6, #1
 8006068:	4635      	mov	r5, r6
 800606a:	f7ff bb1c 	b.w	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
        status = HAL_ERROR;
 800606e:	2601      	movs	r6, #1
 8006070:	f7ff bb9c 	b.w	80057ac <HAL_RCCEx_PeriphCLKConfig+0x574>
        status = HAL_ERROR;
 8006074:	2601      	movs	r6, #1
 8006076:	f7ff bba7 	b.w	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800607a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 800607e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006080:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006084:	f7ff bba0 	b.w	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006088:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800608c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006090:	f7ff bb8c 	b.w	80057ac <HAL_RCCEx_PeriphCLKConfig+0x574>
 8006094:	2601      	movs	r6, #1
 8006096:	4635      	mov	r5, r6
 8006098:	f7ff ba8a 	b.w	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 800609c:	f7fc fba4 	bl	80027e8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a0:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 80060a4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060aa:	e004      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ac:	f7fc fb9c 	bl	80027e8 <HAL_GetTick>
 80060b0:	1bc0      	subs	r0, r0, r7
 80060b2:	4548      	cmp	r0, r9
 80060b4:	d810      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060b6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	d5f6      	bpl.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060be:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80060c2:	e566      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80060c4:	4807      	ldr	r0, [pc, #28]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 80060c6:	4a08      	ldr	r2, [pc, #32]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 80060c8:	6901      	ldr	r1, [r0, #16]
 80060ca:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80060ce:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 80060d2:	430a      	orrs	r2, r1
 80060d4:	6102      	str	r2, [r0, #16]
 80060d6:	e567      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x970>
        status = ret;
 80060d8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060de:	4635      	mov	r5, r6
 80060e0:	f7ff ba69 	b.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80060e4:	58024400 	.word	0x58024400
 80060e8:	00ffffcf 	.word	0x00ffffcf

080060ec <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80060ec:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060ee:	f7fe feef 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80060f4:	4a05      	ldr	r2, [pc, #20]	@ (800610c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80060fc:	5cd3      	ldrb	r3, [r2, r3]
 80060fe:	f003 031f 	and.w	r3, r3, #31
}
 8006102:	40d8      	lsrs	r0, r3
 8006104:	bd08      	pop	{r3, pc}
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
 800610c:	080287c8 	.word	0x080287c8

08006110 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006110:	4a47      	ldr	r2, [pc, #284]	@ (8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8006112:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006114:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006116:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006118:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800611a:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800611e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006122:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8006124:	d05b      	beq.n	80061de <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006126:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800612a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800612e:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006132:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006136:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800613a:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800613c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006140:	ee06 1a90 	vmov	s13, r1
 8006144:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006148:	d003      	beq.n	8006152 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800614a:	2c02      	cmp	r4, #2
 800614c:	d06a      	beq.n	8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800614e:	2c00      	cmp	r4, #0
 8006150:	d04a      	beq.n	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006152:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006156:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800615a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800615c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006170:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006174:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006178:	4a2d      	ldr	r2, [pc, #180]	@ (8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 800617a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800617e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006180:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006184:	ee07 3a10 	vmov	s14, r3
 8006188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800618c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800618e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006192:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006196:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800619a:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800619e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80061a0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80061a4:	ee07 3a10 	vmov	s14, r3
 80061a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80061b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061b4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80061b8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061bc:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80061be:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80061c2:	ee06 3a90 	vmov	s13, r3
 80061c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80061ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 80061ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061d2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80061d6:	ee17 3a90 	vmov	r3, s15
 80061da:	6083      	str	r3, [r0, #8]
}
 80061dc:	4770      	bx	lr
 80061de:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061e0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061e4:	6083      	str	r3, [r0, #8]
}
 80061e6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061e8:	6813      	ldr	r3, [r2, #0]
 80061ea:	069b      	lsls	r3, r3, #26
 80061ec:	d51d      	bpl.n	800622a <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061ee:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80061f4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061f6:	4910      	ldr	r1, [pc, #64]	@ (8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80061f8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006200:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	ee06 1a10 	vmov	s12, r1
 800620a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800620e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006212:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8006216:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800621a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800621e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006222:	e7a9      	b.n	8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006224:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800623c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8006228:	e795      	b.n	8006156 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800622a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800622e:	e792      	b.n	8006156 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8006230:	58024400 	.word	0x58024400
 8006234:	4a742400 	.word	0x4a742400
 8006238:	03d09000 	.word	0x03d09000
 800623c:	4bbebc20 	.word	0x4bbebc20
 8006240:	4c742400 	.word	0x4c742400

08006244 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006244:	4a47      	ldr	r2, [pc, #284]	@ (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8006246:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006248:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800624a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800624c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800624e:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006252:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006256:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8006258:	d05b      	beq.n	8006312 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800625a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800625e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006262:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006266:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800626a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800626e:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006274:	ee06 1a90 	vmov	s13, r1
 8006278:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800627c:	d003      	beq.n	8006286 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800627e:	2c02      	cmp	r4, #2
 8006280:	d06a      	beq.n	8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8006282:	2c00      	cmp	r4, #0
 8006284:	d04a      	beq.n	800631c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006286:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800628a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800628e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800629c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80062a8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80062ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80062b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80062b8:	ee07 3a10 	vmov	s14, r3
 80062bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80062c0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062ce:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062d2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062d4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80062d8:	ee07 3a10 	vmov	s14, r3
 80062dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062e8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062ec:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062f0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062f2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80062f6:	ee06 3a90 	vmov	s13, r3
 80062fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80062fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006302:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006306:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800630a:	ee17 3a90 	vmov	r3, s15
 800630e:	6083      	str	r3, [r0, #8]
}
 8006310:	4770      	bx	lr
 8006312:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006314:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006318:	6083      	str	r3, [r0, #8]
}
 800631a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800631c:	6813      	ldr	r3, [r2, #0]
 800631e:	069b      	lsls	r3, r3, #26
 8006320:	d51d      	bpl.n	800635e <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006322:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006324:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006328:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800632a:	4910      	ldr	r1, [pc, #64]	@ (800636c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800632c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006330:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006334:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	ee06 1a10 	vmov	s12, r1
 800633e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006342:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006346:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800634a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800634e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8006352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006356:	e7a9      	b.n	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006358:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800635c:	e795      	b.n	800628a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800635e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8006362:	e792      	b.n	800628a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8006364:	58024400 	.word	0x58024400
 8006368:	4a742400 	.word	0x4a742400
 800636c:	03d09000 	.word	0x03d09000
 8006370:	4bbebc20 	.word	0x4bbebc20
 8006374:	4c742400 	.word	0x4c742400

08006378 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006378:	4a47      	ldr	r2, [pc, #284]	@ (8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 800637a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800637c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800637e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006380:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8006382:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006386:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800638a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 800638c:	d05b      	beq.n	8006446 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800638e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006392:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006396:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800639a:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800639e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80063a2:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063a8:	ee06 1a90 	vmov	s13, r1
 80063ac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80063b0:	d06f      	beq.n	8006492 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80063b2:	2c02      	cmp	r4, #2
 80063b4:	d06a      	beq.n	800648c <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 80063b6:	2c00      	cmp	r4, #0
 80063b8:	d04a      	beq.n	8006450 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063ba:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800649c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80063be:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80063c2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80063c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80063d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80063dc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 80063e2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80063e6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80063e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80063ec:	ee07 3a10 	vmov	s14, r3
 80063f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80063f4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80063fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063fe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006402:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006406:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006408:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800640c:	ee07 3a10 	vmov	s14, r3
 8006410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006414:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006418:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800641c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006420:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006424:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006426:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800642a:	ee06 3a90 	vmov	s13, r3
 800642e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006432:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006436:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800643a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800643e:	ee17 3a90 	vmov	r3, s15
 8006442:	6083      	str	r3, [r0, #8]
}
 8006444:	4770      	bx	lr
 8006446:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006448:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800644c:	6083      	str	r3, [r0, #8]
}
 800644e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006450:	6813      	ldr	r3, [r2, #0]
 8006452:	069b      	lsls	r3, r3, #26
 8006454:	d5b1      	bpl.n	80063ba <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006456:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006458:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800645c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800645e:	4910      	ldr	r1, [pc, #64]	@ (80064a0 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8006460:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006468:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	ee06 1a10 	vmov	s12, r1
 8006472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006476:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800647a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800647e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8006482:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8006486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800648a:	e7a9      	b.n	80063e0 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800648c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8006490:	e795      	b.n	80063be <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006492:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80064a8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8006496:	e792      	b.n	80063be <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8006498:	58024400 	.word	0x58024400
 800649c:	4c742400 	.word	0x4c742400
 80064a0:	03d09000 	.word	0x03d09000
 80064a4:	4bbebc20 	.word	0x4bbebc20
 80064a8:	4a742400 	.word	0x4a742400

080064ac <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064ac:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80064b0:	430b      	orrs	r3, r1
{
 80064b2:	b500      	push	{lr}
 80064b4:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064b6:	f000 8083 	beq.w	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80064ba:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80064be:	430b      	orrs	r3, r1
 80064c0:	d038      	beq.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80064c2:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80064c6:	430b      	orrs	r3, r1
 80064c8:	f000 80e6 	beq.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80064cc:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80064d0:	430b      	orrs	r3, r1
 80064d2:	f000 8089 	beq.w	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80064d6:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80064da:	430b      	orrs	r3, r1
 80064dc:	d060      	beq.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80064de:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80064e2:	430b      	orrs	r3, r1
 80064e4:	f000 8112 	beq.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064e8:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80064ec:	430b      	orrs	r3, r1
 80064ee:	f000 80a3 	beq.w	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80064f2:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80064f6:	430b      	orrs	r3, r1
 80064f8:	f000 80fa 	beq.w	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80064fc:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8006500:	430b      	orrs	r3, r1
 8006502:	f000 8143 	beq.w	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006506:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800650a:	4308      	orrs	r0, r1
 800650c:	d137      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800650e:	4a9a      	ldr	r2, [pc, #616]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006510:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006512:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651a:	f000 8084 	beq.w	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800651e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006522:	f000 8157 	beq.w	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006526:	bb53      	cbnz	r3, 800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006528:	6810      	ldr	r0, [r2, #0]
 800652a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800652e:	d044      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8006530:	4892      	ldr	r0, [pc, #584]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006532:	e042      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006534:	4a90      	ldr	r2, [pc, #576]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006536:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006538:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800653c:	2b80      	cmp	r3, #128	@ 0x80
 800653e:	f000 80a6 	beq.w	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8006542:	d920      	bls.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006544:	2bc0      	cmp	r3, #192	@ 0xc0
 8006546:	d037      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654c:	d117      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800654e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006550:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006552:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006556:	0749      	lsls	r1, r1, #29
 8006558:	d502      	bpl.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80c2 	beq.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006560:	4a85      	ldr	r2, [pc, #532]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	05d0      	lsls	r0, r2, #23
 8006566:	d503      	bpl.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8006568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800656c:	f000 8102 	beq.w	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006570:	4a81      	ldr	r2, [pc, #516]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	0391      	lsls	r1, r2, #14
 8006576:	d502      	bpl.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800657c:	d0d8      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          frequency = 0;
 800657e:	2000      	movs	r0, #0
}
 8006580:	b005      	add	sp, #20
 8006582:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8006586:	2b00      	cmp	r3, #0
 8006588:	d04d      	beq.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d1f7      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800658e:	6810      	ldr	r0, [r2, #0]
 8006590:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006594:	d011      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006596:	a801      	add	r0, sp, #4
 8006598:	f7ff fdba 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800659c:	9801      	ldr	r0, [sp, #4]
 800659e:	e00c      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80065a0:	4a75      	ldr	r2, [pc, #468]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065a2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80065a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ac:	d06f      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80065ae:	d938      	bls.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80065b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065b4:	f040 8088 	bne.w	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80065b8:	4871      	ldr	r0, [pc, #452]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 80065ba:	b005      	add	sp, #20
 80065bc:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80065c0:	4b6d      	ldr	r3, [pc, #436]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c4:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d8d8      	bhi.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80065cc:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006677 	.word	0x08006677
 80065d8:	08006653 	.word	0x08006653
 80065dc:	08006663 	.word	0x08006663
 80065e0:	080065b9 	.word	0x080065b9
 80065e4:	0800665f 	.word	0x0800665f
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80065e8:	4a63      	ldr	r2, [pc, #396]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065ea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80065ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 80065f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065f4:	d04b      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80065f6:	d944      	bls.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80065f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065fc:	d0dc      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80065fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006602:	d1bc      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006604:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006606:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800660c:	0752      	lsls	r2, r2, #29
 800660e:	d5a7      	bpl.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1a5      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006614:	4b58      	ldr	r3, [pc, #352]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006616:	485b      	ldr	r0, [pc, #364]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800661e:	40d8      	lsrs	r0, r3
 8006620:	e7cb      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8006622:	2b00      	cmp	r3, #0
 8006624:	d154      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006626:	6810      	ldr	r0, [r2, #0]
 8006628:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800662c:	d0c5      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800662e:	a801      	add	r0, sp, #4
 8006630:	f7ff fea2 	bl	8006378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006634:	9802      	ldr	r0, [sp, #8]
 8006636:	e7c0      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006638:	4a4f      	ldr	r2, [pc, #316]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800663a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800663c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8006640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006644:	f000 80d0 	beq.w	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8006648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800664c:	d0da      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d195      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006652:	4b49      	ldr	r3, [pc, #292]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800665a:	d0ae      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800665c:	e79b      	b.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800665e:	4a46      	ldr	r2, [pc, #280]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006660:	e775      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006662:	4b45      	ldr	r3, [pc, #276]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800666a:	d0a6      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800666c:	a801      	add	r0, sp, #4
 800666e:	f7ff fde9 	bl	8006244 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006672:	9801      	ldr	r0, [sp, #4]
 8006674:	e7a1      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006676:	4b40      	ldr	r3, [pc, #256]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800667e:	d09c      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006680:	e7d5      	b.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0cf      	beq.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8006686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800668a:	d080      	beq.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800668c:	e777      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800668e:	6810      	ldr	r0, [r2, #0]
 8006690:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006694:	d091      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006696:	e7e9      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006698:	4a37      	ldr	r2, [pc, #220]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800669a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800669c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 80066a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066a4:	d0f3      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80066a6:	d806      	bhi.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0bc      	beq.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80066ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066b0:	f43f af6d 	beq.w	800658e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 80066b4:	e763      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80066b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066ba:	f43f af7d 	beq.w	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80066be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066c2:	f43f af44 	beq.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80066c6:	e75a      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 80066c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066cc:	d09a      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80066ce:	e756      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d4:	f43f af5b 	beq.w	800658e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 80066d8:	e751      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066da:	6810      	ldr	r0, [r2, #0]
 80066dc:	f010 0004 	ands.w	r0, r0, #4
 80066e0:	f43f af6b 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e4:	6813      	ldr	r3, [r2, #0]
 80066e6:	4827      	ldr	r0, [pc, #156]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80066e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80066ec:	40d8      	lsrs	r0, r3
 80066ee:	e764      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80066f0:	4b21      	ldr	r3, [pc, #132]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80066f4:	03d2      	lsls	r2, r2, #15
 80066f6:	d5bf      	bpl.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80066fe:	f43f af5c 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006702:	a801      	add	r0, sp, #4
 8006704:	f7ff fd04 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006708:	9803      	ldr	r0, [sp, #12]
 800670a:	e756      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800670c:	4a1a      	ldr	r2, [pc, #104]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800670e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006710:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8006714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006718:	d0df      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800671a:	d810      	bhi.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d058      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006726:	d118      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006728:	4b13      	ldr	r3, [pc, #76]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006730:	f43f af43 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006734:	a801      	add	r0, sp, #4
 8006736:	f7ff fd85 	bl	8006244 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800673a:	9802      	ldr	r0, [sp, #8]
 800673c:	e73d      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800673e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006742:	d012      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8006744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006748:	f47f af19 	bne.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800674c:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006754:	f43f af31 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006758:	e6ea      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800675a:	2b00      	cmp	r3, #0
 800675c:	f47f af0f 	bne.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8006760:	b005      	add	sp, #20
 8006762:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006766:	f7fe bbf3 	b.w	8004f50 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800676a:	6810      	ldr	r0, [r2, #0]
 800676c:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006770:	f43f af23 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8006774:	4804      	ldr	r0, [pc, #16]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006776:	e720      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006778:	58024400 	.word	0x58024400
 800677c:	017d7840 	.word	0x017d7840
 8006780:	00bb8000 	.word	0x00bb8000
 8006784:	03d09000 	.word	0x03d09000
 8006788:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800678c:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800678e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006790:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8006794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006798:	d037      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800679a:	d814      	bhi.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800679c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a0:	d03f      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80067a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a6:	d0bf      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f aee8 	bne.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80067ae:	f7fe fb8f 	bl	8004ed0 <HAL_RCC_GetHCLKFreq>
 80067b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80067b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80067bc:	5cd3      	ldrb	r3, [r2, r3]
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	40d8      	lsrs	r0, r3
        break;
 80067c4:	e6f9      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ca:	d017      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80067cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067d0:	d0bc      	beq.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80067d2:	e6d4      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067d4:	6810      	ldr	r0, [r2, #0]
 80067d6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80067da:	f43f aeee 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067de:	a801      	add	r0, sp, #4
 80067e0:	f7ff fc96 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067e4:	9802      	ldr	r0, [sp, #8]
 80067e6:	e6e8      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067e8:	6810      	ldr	r0, [r2, #0]
 80067ea:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80067ee:	f43f aee4 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067f2:	a801      	add	r0, sp, #4
 80067f4:	f7ff fd26 	bl	8006244 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067f8:	9803      	ldr	r0, [sp, #12]
 80067fa:	e6de      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006804:	f43f aed9 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006808:	e7b4      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800680a:	4b09      	ldr	r3, [pc, #36]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f010 0004 	ands.w	r0, r0, #4
 8006812:	f43f aed2 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4807      	ldr	r0, [pc, #28]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800681a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800681e:	40d8      	lsrs	r0, r3
 8006820:	e6cb      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006822:	4b03      	ldr	r3, [pc, #12]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800682a:	f43f aec6 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800682e:	e7d6      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006830:	58024400 	.word	0x58024400
 8006834:	080287c8 	.word	0x080287c8
 8006838:	03d09000 	.word	0x03d09000

0800683c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800683c:	b538      	push	{r3, r4, r5, lr}

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800683e:	4b20      	ldr	r3, [pc, #128]	@ (80068c0 <RTC_ExitInitMode+0x84>)
{
 8006840:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006842:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800684a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	0690      	lsls	r0, r2, #26
 8006850:	d411      	bmi.n	8006876 <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006852:	4b1c      	ldr	r3, [pc, #112]	@ (80068c4 <RTC_ExitInitMode+0x88>)
 8006854:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8006856:	f7fb ffc7 	bl	80027e8 <HAL_GetTick>
 800685a:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800685c:	e005      	b.n	800686a <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800685e:	f7fb ffc3 	bl	80027e8 <HAL_GetTick>
 8006862:	1b43      	subs	r3, r0, r5
 8006864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006868:	d825      	bhi.n	80068b6 <RTC_ExitInitMode+0x7a>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	069a      	lsls	r2, r3, #26
 8006870:	d5f5      	bpl.n	800685e <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2000      	movs	r0, #0
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8006874:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006876:	689a      	ldr	r2, [r3, #8]
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006878:	4812      	ldr	r0, [pc, #72]	@ (80068c4 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800687a:	f022 0220 	bic.w	r2, r2, #32
 800687e:	609a      	str	r2, [r3, #8]
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006880:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 8006882:	f7fb ffb1 	bl	80027e8 <HAL_GetTick>
 8006886:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006888:	e005      	b.n	8006896 <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800688a:	f7fb ffad 	bl	80027e8 <HAL_GetTick>
 800688e:	1b43      	subs	r3, r0, r5
 8006890:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006894:	d80a      	bhi.n	80068ac <RTC_ExitInitMode+0x70>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	069b      	lsls	r3, r3, #26
 800689c:	d5f5      	bpl.n	800688a <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 800689e:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068a0:	4a07      	ldr	r2, [pc, #28]	@ (80068c0 <RTC_ExitInitMode+0x84>)
 80068a2:	6893      	ldr	r3, [r2, #8]
 80068a4:	f043 0320 	orr.w	r3, r3, #32
 80068a8:	6093      	str	r3, [r2, #8]
}
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 80068ae:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068b0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80068b4:	e7f4      	b.n	80068a0 <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 80068b8:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068ba:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	58004000 	.word	0x58004000
 80068c4:	0003ff5f 	.word	0x0003ff5f

080068c8 <HAL_RTC_Init>:
  if(hrtc != NULL)
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d043      	beq.n	8006954 <HAL_RTC_Init+0x8c>
{
 80068cc:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80068ce:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80068d2:	4604      	mov	r4, r0
 80068d4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d036      	beq.n	800694a <HAL_RTC_Init+0x82>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068dc:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068de:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068e0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068e4:	68d3      	ldr	r3, [r2, #12]
 80068e6:	06db      	lsls	r3, r3, #27
 80068e8:	d504      	bpl.n	80068f4 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 80068ea:	2301      	movs	r3, #1
 80068ec:	2000      	movs	r0, #0
 80068ee:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f4:	21ca      	movs	r1, #202	@ 0xca
 80068f6:	2353      	movs	r3, #83	@ 0x53
 80068f8:	6251      	str	r1, [r2, #36]	@ 0x24
 80068fa:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80068fc:	68d5      	ldr	r5, [r2, #12]
 80068fe:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8006902:	d029      	beq.n	8006958 <HAL_RTC_Init+0x90>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006904:	6890      	ldr	r0, [r2, #8]
 8006906:	4926      	ldr	r1, [pc, #152]	@ (80069a0 <HAL_RTC_Init+0xd8>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800690c:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800690e:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006910:	6091      	str	r1, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006912:	69a1      	ldr	r1, [r4, #24]
 8006914:	6890      	ldr	r0, [r2, #8]
 8006916:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006918:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800691a:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800691c:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800691e:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006920:	68e3      	ldr	r3, [r4, #12]
 8006922:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006926:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8006928:	f7ff ff88 	bl	800683c <RTC_ExitInitMode>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800692c:	6823      	ldr	r3, [r4, #0]
      if(status == HAL_OK)
 800692e:	bb78      	cbnz	r0, 8006990 <HAL_RTC_Init+0xc8>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006930:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006932:	20ff      	movs	r0, #255	@ 0xff
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006934:	69e2      	ldr	r2, [r4, #28]
 8006936:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006938:	f021 0103 	bic.w	r1, r1, #3
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800693c:	432a      	orrs	r2, r5
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800693e:	64d9      	str	r1, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006940:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006942:	430a      	orrs	r2, r1
 8006944:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006946:	6258      	str	r0, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006948:	e7cf      	b.n	80068ea <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 800694a:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800694e:	f7fa feb7 	bl	80016c0 <HAL_RTC_MspInit>
 8006952:	e7c3      	b.n	80068dc <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006954:	2001      	movs	r0, #1
}
 8006956:	4770      	bx	lr
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800695e:	f7fb ff43 	bl	80027e8 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 8006964:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006966:	e008      	b.n	800697a <HAL_RTC_Init+0xb2>
 8006968:	2903      	cmp	r1, #3
 800696a:	d00d      	beq.n	8006988 <HAL_RTC_Init+0xc0>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800696c:	f7fb ff3c 	bl	80027e8 <HAL_GetTick>
 8006970:	1b80      	subs	r0, r0, r6
 8006972:	4629      	mov	r1, r5
 8006974:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006978:	d80d      	bhi.n	8006996 <HAL_RTC_Init+0xce>
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	68d5      	ldr	r5, [r2, #12]
 800697e:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8006982:	d0f1      	beq.n	8006968 <HAL_RTC_Init+0xa0>
      if (status == HAL_OK)
 8006984:	2900      	cmp	r1, #0
 8006986:	d0bd      	beq.n	8006904 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006988:	23ff      	movs	r3, #255	@ 0xff
 800698a:	2003      	movs	r0, #3
 800698c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800698e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006990:	22ff      	movs	r2, #255	@ 0xff
 8006992:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006994:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006996:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 8006998:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800699a:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 800699e:	e7ec      	b.n	800697a <HAL_RTC_Init+0xb2>
 80069a0:	ff8fffbf 	.word	0xff8fffbf

080069a4 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 80069a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	4605      	mov	r5, r0
 80069aa:	b086      	sub	sp, #24
 80069ac:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80069ae:	f7fb ff1b 	bl	80027e8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80069b2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80069b4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80069b6:	6828      	ldr	r0, [r5, #0]
 80069b8:	f001 fd78 	bl	80084ac <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80069bc:	4604      	mov	r4, r0
 80069be:	b118      	cbz	r0, 80069c8 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80069c0:	4620      	mov	r0, r4
 80069c2:	b006      	add	sp, #24
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80069c8:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80069ca:	6828      	ldr	r0, [r5, #0]
 80069cc:	0409      	lsls	r1, r1, #16
 80069ce:	f002 fae5 	bl	8008f9c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80069d2:	4604      	mov	r4, r0
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d1f3      	bne.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069de:	4669      	mov	r1, sp
 80069e0:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 80069e2:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80069e6:	2230      	movs	r2, #48	@ 0x30
 80069e8:	2302      	movs	r3, #2
 80069ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80069ee:	2200      	movs	r2, #0
 80069f0:	2301      	movs	r3, #1
 80069f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069f6:	f001 fd43 	bl	8008480 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80069fa:	6828      	ldr	r0, [r5, #0]
 80069fc:	f002 fc62 	bl	80092c4 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a00:	4604      	mov	r4, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d1dc      	bne.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006a06:	4682      	mov	sl, r0
 8006a08:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006a0a:	f240 582a 	movw	r8, #1322	@ 0x52a
 8006a0e:	e004      	b.n	8006a1a <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a10:	f7fb feea 	bl	80027e8 <HAL_GetTick>
 8006a14:	1b83      	subs	r3, r0, r6
 8006a16:	3301      	adds	r3, #1
 8006a18:	d024      	beq.n	8006a64 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006a1a:	6828      	ldr	r0, [r5, #0]
 8006a1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a1e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006a22:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006a24:	d10c      	bne.n	8006a40 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006a26:	0319      	lsls	r1, r3, #12
 8006a28:	d4f2      	bmi.n	8006a10 <SD_FindSCR.constprop.0+0x6c>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d1f0      	bne.n	8006a10 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006a2e:	f001 fd0d 	bl	800844c <SDMMC_ReadFIFO>
 8006a32:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006a34:	6828      	ldr	r0, [r5, #0]
      index++;
 8006a36:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006a38:	f001 fd08 	bl	800844c <SDMMC_ReadFIFO>
 8006a3c:	4682      	mov	sl, r0
      index++;
 8006a3e:	e7e7      	b.n	8006a10 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a40:	071a      	lsls	r2, r3, #28
 8006a42:	d416      	bmi.n	8006a72 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006a44:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a46:	079b      	lsls	r3, r3, #30
 8006a48:	d40f      	bmi.n	8006a6a <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006a4a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006a4c:	f014 0420 	ands.w	r4, r4, #32
 8006a50:	d113      	bne.n	8006a7a <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a52:	fa9a f28a 	rev.w	r2, sl
 8006a56:	fa99 f389 	rev.w	r3, r9
 8006a5a:	490a      	ldr	r1, [pc, #40]	@ (8006a84 <SD_FindSCR.constprop.0+0xe0>)
 8006a5c:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006a5e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8006a62:	e7ad      	b.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8006a64:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8006a68:	e7aa      	b.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006a6a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a6c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006a6e:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a70:	e7a6      	b.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006a72:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a74:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006a76:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a78:	e7a2      	b.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006a7a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8006a7c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006a7e:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8006a80:	e79e      	b.n	80069c0 <SD_FindSCR.constprop.0+0x1c>
 8006a82:	bf00      	nop
 8006a84:	18000f3a 	.word	0x18000f3a

08006a88 <HAL_SD_ReadBlocks_DMA>:
{
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	b087      	sub	sp, #28
  if (NULL == pData)
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d052      	beq.n	8006b38 <HAL_SD_ReadBlocks_DMA+0xb0>
  if (hsd->State == HAL_SD_STATE_READY)
 8006a92:	461f      	mov	r7, r3
 8006a94:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d13d      	bne.n	8006b18 <HAL_SD_ReadBlocks_DMA+0x90>
 8006a9c:	4616      	mov	r6, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a9e:	460d      	mov	r5, r1
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006aa0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006aa2:	2200      	movs	r2, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006aa4:	19f3      	adds	r3, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006aa6:	6342      	str	r2, [r0, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	d838      	bhi.n	8006b1e <HAL_SD_ReadBlocks_DMA+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 8006aac:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006aae:	2190      	movs	r1, #144	@ 0x90
    hsd->State = HAL_SD_STATE_BUSY;
 8006ab0:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006ab4:	027b      	lsls	r3, r7, #9
    hsd->Instance->DCTRL = 0U;
 8006ab6:	6800      	ldr	r0, [r0, #0]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ab8:	9301      	str	r3, [sp, #4]
    hsd->Instance->DCTRL = 0U;
 8006aba:	62c2      	str	r2, [r0, #44]	@ 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006abc:	62a3      	str	r3, [r4, #40]	@ 0x28
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006abe:	2300      	movs	r3, #0
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ac0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->pRxBuffPtr = pData;
 8006ac2:	6265      	str	r5, [r4, #36]	@ 0x24
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ac4:	2a01      	cmp	r2, #1
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ac6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006aca:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8006ace:	bf18      	it	ne
 8006ad0:	0276      	lslne	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ad2:	9300      	str	r3, [sp, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ada:	4669      	mov	r1, sp
 8006adc:	f001 fcd0 	bl	8008480 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006ae0:	6820      	ldr	r0, [r4, #0]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006ae2:	2201      	movs	r2, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006ae4:	68c3      	ldr	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8006ae6:	4297      	cmp	r7, r2
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aec:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006aee:	6585      	str	r5, [r0, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006af0:	6502      	str	r2, [r0, #80]	@ 0x50
    if (NumberOfBlocks > 1U)
 8006af2:	d926      	bls.n	8006b42 <HAL_SD_ReadBlocks_DMA+0xba>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006af4:	2382      	movs	r3, #130	@ 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006af6:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006af8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006afa:	f001 fe2f 	bl	800875c <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006afe:	6823      	ldr	r3, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b00:	b1a0      	cbz	r0, 8006b2c <HAL_SD_ReadBlocks_DMA+0xa4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b02:	4a13      	ldr	r2, [pc, #76]	@ (8006b50 <HAL_SD_ReadBlocks_DMA+0xc8>)
      hsd->State = HAL_SD_STATE_READY;
 8006b04:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8006b08:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 8006b0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b0c:	4303      	orrs	r3, r0
 8006b0e:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b10:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b14:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8006b16:	e006      	b.n	8006b26 <HAL_SD_ReadBlocks_DMA+0x9e>
    return HAL_BUSY;
 8006b18:	2002      	movs	r0, #2
}
 8006b1a:	b007      	add	sp, #28
 8006b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b1e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006b20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b24:	6343      	str	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8006b26:	2001      	movs	r0, #1
}
 8006b28:	b007      	add	sp, #28
 8006b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006b2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b2e:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006b32:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006b34:	b007      	add	sp, #28
 8006b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b38:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006b3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b3e:	6343      	str	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8006b40:	e7f1      	b.n	8006b26 <HAL_SD_ReadBlocks_DMA+0x9e>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b42:	2381      	movs	r3, #129	@ 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006b44:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b46:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006b48:	f001 fd5c 	bl	8008604 <SDMMC_CmdReadSingleBlock>
 8006b4c:	e7d7      	b.n	8006afe <HAL_SD_ReadBlocks_DMA+0x76>
 8006b4e:	bf00      	nop
 8006b50:	1fe00fff 	.word	0x1fe00fff

08006b54 <HAL_SD_WriteBlocks_DMA>:
{
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	4604      	mov	r4, r0
 8006b5a:	b086      	sub	sp, #24
  if (NULL == pData)
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	d056      	beq.n	8006c0e <HAL_SD_WriteBlocks_DMA+0xba>
  if (hsd->State == HAL_SD_STATE_READY)
 8006b60:	461f      	mov	r7, r3
 8006b62:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d13e      	bne.n	8006be8 <HAL_SD_WriteBlocks_DMA+0x94>
 8006b6a:	4616      	mov	r6, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b6c:	460d      	mov	r5, r1
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b6e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b70:	2200      	movs	r2, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b72:	19f3      	adds	r3, r6, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b74:	6342      	str	r2, [r0, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b76:	428b      	cmp	r3, r1
 8006b78:	d83a      	bhi.n	8006bf0 <HAL_SD_WriteBlocks_DMA+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 8006b7a:	2303      	movs	r3, #3
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b7c:	f04f 0890 	mov.w	r8, #144	@ 0x90
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b80:	4669      	mov	r1, sp
    hsd->State = HAL_SD_STATE_BUSY;
 8006b82:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006b86:	027b      	lsls	r3, r7, #9
    hsd->Instance->DCTRL = 0U;
 8006b88:	6800      	ldr	r0, [r0, #0]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006b8a:	9301      	str	r3, [sp, #4]
    hsd->Instance->DCTRL = 0U;
 8006b8c:	62c2      	str	r2, [r0, #44]	@ 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006b90:	6223      	str	r3, [r4, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006b92:	2300      	movs	r3, #0
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b94:	2a01      	cmp	r2, #1
    hsd->pTxBuffPtr = pData;
 8006b96:	61e5      	str	r5, [r4, #28]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006b98:	9305      	str	r3, [sp, #20]
      add *= 512U;
 8006b9a:	bf18      	it	ne
 8006b9c:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b9e:	f8cd 8008 	str.w	r8, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ba2:	e9cd 3303 	strd	r3, r3, [sp, #12]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8006baa:	9300      	str	r3, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006bac:	f001 fc68 	bl	8008480 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bb0:	6820      	ldr	r0, [r4, #0]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006bb2:	2201      	movs	r2, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bb4:	68c3      	ldr	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8006bb6:	4297      	cmp	r7, r2
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bbc:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006bbe:	6585      	str	r5, [r0, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006bc0:	6502      	str	r2, [r0, #80]	@ 0x50
    if (NumberOfBlocks > 1U)
 8006bc2:	d929      	bls.n	8006c18 <HAL_SD_WriteBlocks_DMA+0xc4>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bc4:	23a0      	movs	r3, #160	@ 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bc6:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bca:	f001 ff1f 	bl	8008a0c <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bce:	6823      	ldr	r3, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bd0:	b1b0      	cbz	r0, 8006c00 <HAL_SD_WriteBlocks_DMA+0xac>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bd2:	4a14      	ldr	r2, [pc, #80]	@ (8006c24 <HAL_SD_WriteBlocks_DMA+0xd0>)
      hsd->State = HAL_SD_STATE_READY;
 8006bd4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8006bd8:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 8006bda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006be0:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006be4:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8006be6:	e007      	b.n	8006bf8 <HAL_SD_WriteBlocks_DMA+0xa4>
    return HAL_BUSY;
 8006be8:	2002      	movs	r0, #2
}
 8006bea:	b006      	add	sp, #24
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006bf0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006bf2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006bf6:	6343      	str	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8006bf8:	2001      	movs	r0, #1
}
 8006bfa:	b006      	add	sp, #24
 8006bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c02:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8006c06:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006c08:	b006      	add	sp, #24
 8006c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c0e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006c10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c14:	6343      	str	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8006c16:	e7ef      	b.n	8006bf8 <HAL_SD_WriteBlocks_DMA+0xa4>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006c18:	4631      	mov	r1, r6
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c1a:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006c1e:	f001 fe49 	bl	80088b4 <SDMMC_CmdWriteSingleBlock>
 8006c22:	e7d4      	b.n	8006bce <HAL_SD_WriteBlocks_DMA+0x7a>
 8006c24:	1fe00fff 	.word	0x1fe00fff

08006c28 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop

08006c2c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c2c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 8006c2e:	4603      	mov	r3, r0
 8006c30:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c32:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c36:	0f94      	lsrs	r4, r2, #30
 8006c38:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c3a:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c3e:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c40:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c44:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c46:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c48:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c4c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c4e:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c50:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c52:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c56:	0d14      	lsrs	r4, r2, #20
 8006c58:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c5a:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8006c5e:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c60:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8006c64:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c66:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8006c6a:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006c6c:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8006c70:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c72:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8006c76:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c78:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8006c7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d16f      	bne.n	8006d60 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c80:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8006c84:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8006c86:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c8a:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c8e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8006c92:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c94:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c98:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c9a:	f3c0 6402 	ubfx	r4, r0, #24, #3
 8006c9e:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ca0:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006ca4:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ca6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006caa:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006cac:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006cae:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006cb0:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006cb2:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006cb4:	f002 0207 	and.w	r2, r2, #7
 8006cb8:	3202      	adds	r2, #2
 8006cba:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cbc:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006cbe:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cc0:	f891 c008 	ldrb.w	ip, [r1, #8]
 8006cc4:	f00c 0c0f 	and.w	ip, ip, #15
 8006cc8:	fa02 f20c 	lsl.w	r2, r2, ip
 8006ccc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006cce:	0a52      	lsrs	r2, r2, #9
 8006cd0:	fb04 f202 	mul.w	r2, r4, r2
 8006cd4:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006cd6:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8006cda:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8006cde:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ce0:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ce4:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ce6:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006cea:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 8006cec:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006cee:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cf2:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006cf4:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006cf8:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006cfa:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006cfe:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006d00:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006d04:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006d06:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006d0a:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006d0c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006d10:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006d14:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8006d18:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006d1c:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006d20:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006d24:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d28:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006d2c:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d30:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d34:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d38:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d3c:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d40:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d44:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d48:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d4c:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 8006d50:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d52:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8006d56:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 8006d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5e:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006d60:	2801      	cmp	r0, #1
 8006d62:	d10f      	bne.n	8006d84 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d64:	0412      	lsls	r2, r2, #16
 8006d66:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 8006d68:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d6c:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006d70:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8006d74:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d76:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8006d78:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	0292      	lsls	r2, r2, #10
 8006d7e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d80:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d82:	e7a8      	b.n	8006cd6 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d84:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8006d86:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d88:	4805      	ldr	r0, [pc, #20]	@ (8006da0 <HAL_SD_GetCardCSD+0x174>)
 8006d8a:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 8006d8c:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d90:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006d94:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d96:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 8006d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	1fe00fff 	.word	0x1fe00fff

08006da4 <HAL_SD_InitCard>:
{
 8006da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006da6:	2200      	movs	r2, #0
{
 8006da8:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006daa:	2300      	movs	r3, #0
{
 8006dac:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006dae:	2100      	movs	r1, #0
 8006db0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006db4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006db8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006dbc:	f7ff fb76 	bl	80064ac <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8006dc0:	b948      	cbnz	r0, 8006dd6 <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8006dc2:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006dc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8006dc8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006dcc:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8006dce:	2501      	movs	r5, #1
}
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	b015      	add	sp, #84	@ 0x54
 8006dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006dd6:	0a06      	lsrs	r6, r0, #8
 8006dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8007004 <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8006dda:	aa07      	add	r2, sp, #28
 8006ddc:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006dde:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8006de2:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006de4:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 8006de6:	9608      	str	r6, [sp, #32]
 8006de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dec:	e88d 0003 	stmia.w	sp, {r0, r1}
 8006df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006df2:	6820      	ldr	r0, [r4, #0]
 8006df4:	f001 fb0e 	bl	8008414 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	f001 fb31 	bl	8008460 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8006dfe:	4b82      	ldr	r3, [pc, #520]	@ (8007008 <HAL_SD_InitCard+0x264>)
 8006e00:	429d      	cmp	r5, r3
 8006e02:	d902      	bls.n	8006e0a <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006e04:	0076      	lsls	r6, r6, #1
 8006e06:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006e0a:	4880      	ldr	r0, [pc, #512]	@ (800700c <HAL_SD_InitCard+0x268>)
 8006e0c:	fbb0 f0f5 	udiv	r0, r0, r5
 8006e10:	3001      	adds	r0, #1
 8006e12:	f7fb fcef 	bl	80027f4 <HAL_Delay>
  __IO uint32_t count = 0U;
 8006e16:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e18:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8006e1a:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e1c:	f002 f852 	bl	8008ec4 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e20:	4605      	mov	r5, r0
 8006e22:	bb70      	cbnz	r0, 8006e82 <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	f002 f879 	bl	8008f1c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006e2a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8006e2e:	f000 80ce 	beq.w	8006fce <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e32:	2301      	movs	r3, #1
 8006e34:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e36:	2100      	movs	r1, #0
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	f002 f8af 	bl	8008f9c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e3e:	bb38      	cbnz	r0, 8006e90 <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 8006e46:	42b3      	cmp	r3, r6
 8006e48:	f200 80d3 	bhi.w	8006ff2 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006e4c:	4f70      	ldr	r7, [pc, #448]	@ (8007010 <HAL_SD_InitCard+0x26c>)
 8006e4e:	e010      	b.n	8006e72 <HAL_SD_InitCard+0xce>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	f002 f94f 	bl	80090f4 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e56:	4601      	mov	r1, r0
 8006e58:	b9d0      	cbnz	r0, 8006e90 <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	f001 fb0c 	bl	8008478 <SDMMC_GetResponse>
    count++;
 8006e60:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e62:	2800      	cmp	r0, #0
    count++;
 8006e64:	f103 0301 	add.w	r3, r3, #1
 8006e68:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	db13      	blt.n	8006e96 <HAL_SD_InitCard+0xf2>
 8006e6e:	42b3      	cmp	r3, r6
 8006e70:	d811      	bhi.n	8006e96 <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e72:	2100      	movs	r1, #0
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	f002 f891 	bl	8008f9c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006e7a:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0e7      	beq.n	8006e50 <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e80:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e8a:	432b      	orrs	r3, r5
 8006e8c:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8006e8e:	e79e      	b.n	8006dce <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e90:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8006e94:	e7f5      	b.n	8006e82 <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006e96:	9a03      	ldr	r2, [sp, #12]
 8006e98:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	f200 80ac 	bhi.w	8006ffa <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ea2:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8006ea6:	bf18      	it	ne
 8006ea8:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63a5      	str	r5, [r4, #56]	@ 0x38
 8006eae:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8006eb2:	f7fb fc99 	bl	80027e8 <HAL_GetTick>
 8006eb6:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	f001 fad9 	bl	8008470 <SDMMC_GetPowerState>
 8006ebe:	b348      	cbz	r0, 8006f14 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ec0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ec2:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d12e      	bne.n	8006f26 <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ec8:	2104      	movs	r1, #4
 8006eca:	f001 fad5 	bl	8008478 <SDMMC_GetResponse>
 8006ece:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ed0:	a909      	add	r1, sp, #36	@ 0x24
 8006ed2:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ed4:	0d1b      	lsrs	r3, r3, #20
 8006ed6:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ed8:	f7ff fea8 	bl	8006c2c <HAL_SD_GetCardCSD>
 8006edc:	4605      	mov	r5, r0
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f040 8081 	bne.w	8006fe6 <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006ee4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ee6:	6820      	ldr	r0, [r4, #0]
 8006ee8:	0409      	lsls	r1, r1, #16
 8006eea:	f001 ff3f 	bl	8008d6c <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006eee:	b998      	cbnz	r0, 8006f18 <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ef0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	f001 fad9 	bl	80084ac <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f43f af68 	beq.w	8006dd0 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f00:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8006f02:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f04:	4943      	ldr	r1, [pc, #268]	@ (8007014 <HAL_SD_InitCard+0x270>)
 8006f06:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006f08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f0a:	4303      	orrs	r3, r0
 8006f0c:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006f0e:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8006f12:	e75c      	b.n	8006dce <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f14:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006f1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f20:	4303      	orrs	r3, r0
 8006f22:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8006f24:	e753      	b.n	8006dce <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f26:	f002 fa73 	bl	8009410 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d1f4      	bne.n	8006f18 <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f2e:	4601      	mov	r1, r0
 8006f30:	6820      	ldr	r0, [r4, #0]
 8006f32:	f001 faa1 	bl	8008478 <SDMMC_GetResponse>
 8006f36:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f38:	2104      	movs	r1, #4
 8006f3a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f3c:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f3e:	f001 fa9b 	bl	8008478 <SDMMC_GetResponse>
 8006f42:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f44:	2108      	movs	r1, #8
 8006f46:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f48:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f4a:	f001 fa95 	bl	8008478 <SDMMC_GetResponse>
 8006f4e:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f50:	210c      	movs	r1, #12
 8006f52:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f54:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f56:	f001 fa8f 	bl	8008478 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f5c:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d04e      	beq.n	8007000 <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006f62:	f241 3687 	movw	r6, #4999	@ 0x1387
 8006f66:	e008      	b.n	8006f7a <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f68:	f002 fad0 	bl	800950c <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d1d3      	bne.n	8006f18 <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006f70:	f7fb fc3a 	bl	80027e8 <HAL_GetTick>
 8006f74:	1b43      	subs	r3, r0, r5
 8006f76:	42b3      	cmp	r3, r6
 8006f78:	d838      	bhi.n	8006fec <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 8006f7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f7e:	f10d 010a 	add.w	r1, sp, #10
 8006f82:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ef      	beq.n	8006f68 <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f88:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006f8a:	2a03      	cmp	r2, #3
 8006f8c:	d09c      	beq.n	8006ec8 <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f8e:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f90:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f92:	f002 fa7b 	bl	800948c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d1be      	bne.n	8006f18 <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	f001 fa6b 	bl	8008478 <SDMMC_GetResponse>
 8006fa2:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fa8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006faa:	f001 fa65 	bl	8008478 <SDMMC_GetResponse>
 8006fae:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fb0:	2108      	movs	r1, #8
 8006fb2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fb4:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fb6:	f001 fa5f 	bl	8008478 <SDMMC_GetResponse>
 8006fba:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fbc:	210c      	movs	r1, #12
 8006fbe:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fc0:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fc2:	f001 fa59 	bl	8008478 <SDMMC_GetResponse>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	66a3      	str	r3, [r4, #104]	@ 0x68
 8006fcc:	e77c      	b.n	8006ec8 <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fce:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006fd0:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fd2:	f001 ff77 	bl	8008ec4 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f47f af52 	bne.w	8006e80 <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006fdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	f47f af2e 	bne.w	8006e40 <HAL_SD_InitCard+0x9c>
 8006fe4:	e727      	b.n	8006e36 <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fe6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8006fea:	e795      	b.n	8006f18 <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 8006fec:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ff0:	e792      	b.n	8006f18 <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	42b3      	cmp	r3, r6
 8006ff6:	f67f af58 	bls.w	8006eaa <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ffa:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8006ffe:	e740      	b.n	8006e82 <HAL_SD_InitCard+0xde>
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	e761      	b.n	8006ec8 <HAL_SD_InitCard+0x124>
 8007004:	014f8b59 	.word	0x014f8b59
 8007008:	000c34ff 	.word	0x000c34ff
 800700c:	00012110 	.word	0x00012110
 8007010:	c1100000 	.word	0xc1100000
 8007014:	1fe00fff 	.word	0x1fe00fff

08007018 <HAL_SD_GetCardStatus>:
{
 8007018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 800701c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 8007020:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 8007022:	2b03      	cmp	r3, #3
 8007024:	d033      	beq.n	800708e <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007026:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007028:	460d      	mov	r5, r1
 800702a:	f7fb fbdd 	bl	80027e8 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800702e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8007030:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	f001 fa20 	bl	8008478 <SDMMC_GetResponse>
 8007038:	0182      	lsls	r2, r0, #6
 800703a:	d410      	bmi.n	800705e <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800703c:	2140      	movs	r1, #64	@ 0x40
 800703e:	6820      	ldr	r0, [r4, #0]
 8007040:	f001 fa34 	bl	80084ac <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007044:	4603      	mov	r3, r0
 8007046:	b930      	cbnz	r0, 8007056 <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007048:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800704a:	6820      	ldr	r0, [r4, #0]
 800704c:	0409      	lsls	r1, r1, #16
 800704e:	f001 ffa5 	bl	8008f9c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007052:	4603      	mov	r3, r0
 8007054:	b300      	cbz	r0, 8007098 <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007056:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007058:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800705a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 800705c:	e002      	b.n	8007064 <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800705e:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007060:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007064:	4a54      	ldr	r2, [pc, #336]	@ (80071b8 <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 8007066:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007068:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800706a:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 800706c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800706e:	4313      	orrs	r3, r2
 8007070:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007072:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800707a:	f001 fa17 	bl	80084ac <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800707e:	b138      	cbz	r0, 8007090 <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007080:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8007082:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007084:	494c      	ldr	r1, [pc, #304]	@ (80071b8 <HAL_SD_GetCardStatus+0x1a0>)
 8007086:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007088:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800708a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800708e:	2601      	movs	r6, #1
}
 8007090:	4630      	mov	r0, r6
 8007092:	b017      	add	sp, #92	@ 0x5c
 8007094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 8007098:	f04f 32ff 	mov.w	r2, #4294967295
 800709c:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800709e:	4669      	mov	r1, sp
 80070a0:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 80070a2:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070a6:	2260      	movs	r2, #96	@ 0x60
 80070a8:	2302      	movs	r3, #2
 80070aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070ae:	2301      	movs	r3, #1
 80070b0:	2200      	movs	r2, #0
 80070b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070b6:	f001 f9e3 	bl	8008480 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80070ba:	6820      	ldr	r0, [r4, #0]
 80070bc:	f002 fb32 	bl	8009724 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 80070c0:	4603      	mov	r3, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1c7      	bne.n	8007056 <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 80070c6:	ae06      	add	r6, sp, #24
 80070c8:	e004      	b.n	80070d4 <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070ca:	f7fb fb8d 	bl	80027e8 <HAL_GetTick>
 80070ce:	1bc0      	subs	r0, r0, r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	d012      	beq.n	80070fa <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80070d8:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80070dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070de:	d110      	bne.n	8007102 <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	d5f2      	bpl.n	80070ca <HAL_SD_GetCardStatus+0xb2>
 80070e4:	f106 0820 	add.w	r8, r6, #32
 80070e8:	e000      	b.n	80070ec <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80070ea:	6820      	ldr	r0, [r4, #0]
 80070ec:	f001 f9ae 	bl	800844c <SDMMC_ReadFIFO>
 80070f0:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80070f4:	4546      	cmp	r6, r8
 80070f6:	d1f8      	bne.n	80070ea <HAL_SD_GetCardStatus+0xd2>
 80070f8:	e7e7      	b.n	80070ca <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007100:	e7b0      	b.n	8007064 <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007102:	0719      	lsls	r1, r3, #28
 8007104:	d451      	bmi.n	80071aa <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007106:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007108:	079a      	lsls	r2, r3, #30
 800710a:	d450      	bmi.n	80071ae <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800710c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800710e:	069b      	lsls	r3, r3, #26
 8007110:	d50a      	bpl.n	8007128 <HAL_SD_GetCardStatus+0x110>
 8007112:	e04e      	b.n	80071b2 <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007114:	f001 f99a 	bl	800844c <SDMMC_ReadFIFO>
 8007118:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800711c:	f7fb fb64 	bl	80027e8 <HAL_GetTick>
 8007120:	1bc0      	subs	r0, r0, r7
 8007122:	3001      	adds	r0, #1
 8007124:	d0e9      	beq.n	80070fa <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007126:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007128:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800712a:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800712e:	d1f1      	bne.n	8007114 <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007130:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007132:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007134:	4a21      	ldr	r2, [pc, #132]	@ (80071bc <HAL_SD_GetCardStatus+0x1a4>)
 8007136:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007138:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800713a:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800713e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007142:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007146:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800714a:	fa5f f883 	uxtb.w	r8, r3
 800714e:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007152:	fa1f f982 	uxth.w	r9, r2
 8007156:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007158:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800715c:	f3c1 1881 	ubfx	r8, r1, #6, #2
 8007160:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007164:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007168:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800716c:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007170:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007172:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007176:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800717a:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800717c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8007180:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007182:	f3cc 5203 	ubfx	r2, ip, #20, #4
 8007186:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007188:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800718c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800718e:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007190:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8007194:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007196:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800719a:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800719e:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80071a0:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80071a2:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 80071a6:	74ab      	strb	r3, [r5, #18]
 80071a8:	e765      	b.n	8007076 <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071aa:	2308      	movs	r3, #8
 80071ac:	e75a      	b.n	8007064 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	e758      	b.n	8007064 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 80071b2:	2320      	movs	r3, #32
 80071b4:	e756      	b.n	8007064 <HAL_SD_GetCardStatus+0x4c>
 80071b6:	bf00      	nop
 80071b8:	1fe00fff 	.word	0x1fe00fff
 80071bc:	18000f3a 	.word	0x18000f3a

080071c0 <HAL_SD_GetCardInfo>:
{
 80071c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80071c2:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 80071c6:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 80071ca:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 80071ce:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 80071d2:	e9c1 e300 	strd	lr, r3, [r1]
 80071d6:	e9c1 2006 	strd	r2, r0, [r1, #24]
 80071da:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 80071de:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80071e0:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 80071e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e6:	bf00      	nop

080071e8 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80071e8:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 80071ea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80071ec:	4293      	cmp	r3, r2
{
 80071ee:	b530      	push	{r4, r5, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	b089      	sub	sp, #36	@ 0x24
 80071f4:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80071f6:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 80071fa:	d041      	beq.n	8007280 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80071fc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8007200:	d03e      	beq.n	8007280 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007202:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8007206:	d07e      	beq.n	8007306 <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007208:	2900      	cmp	r1, #0
 800720a:	d05d      	beq.n	80072c8 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800720c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800720e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007212:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	d139      	bne.n	800728e <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800721a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800721e:	2100      	movs	r1, #0
 8007220:	f7ff f944 	bl	80064ac <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8007224:	2800      	cmp	r0, #0
 8007226:	d048      	beq.n	80072ba <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007228:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800722a:	4b50      	ldr	r3, [pc, #320]	@ (800736c <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800722c:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800722e:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007230:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007232:	fba3 5300 	umull	r5, r3, r3, r0
 8007236:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007238:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800723a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800723e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007240:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007244:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007246:	d20e      	bcs.n	8007266 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007248:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800724a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800724e:	d00a      	beq.n	8007266 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007250:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007254:	d079      	beq.n	800734a <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 8007256:	b112      	cbz	r2, 800725e <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007258:	0053      	lsls	r3, r2, #1
 800725a:	fbb0 f0f3 	udiv	r0, r0, r3
 800725e:	4b44      	ldr	r3, [pc, #272]	@ (8007370 <HAL_SD_ConfigWideBusOperation+0x188>)
 8007260:	4298      	cmp	r0, r3
 8007262:	bf88      	it	hi
 8007264:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 8007266:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007268:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800726a:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800726c:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800726e:	c903      	ldmia	r1, {r0, r1}
 8007270:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007276:	6820      	ldr	r0, [r4, #0]
 8007278:	f001 f8cc 	bl	8008414 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	e00a      	b.n	8007296 <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007286:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0c5      	beq.n	800721a <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800728e:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8007290:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007292:	4b38      	ldr	r3, [pc, #224]	@ (8007374 <HAL_SD_ConfigWideBusOperation+0x18c>)
 8007294:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007296:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800729a:	f001 f907 	bl	80084ac <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800729e:	b130      	cbz	r0, 80072ae <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072a0:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80072a2:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072a4:	4a33      	ldr	r2, [pc, #204]	@ (8007374 <HAL_SD_ConfigWideBusOperation+0x18c>)
 80072a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80072a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072aa:	4303      	orrs	r3, r0
 80072ac:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 80072ae:	2301      	movs	r3, #1
}
 80072b0:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80072b2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 80072b6:	b009      	add	sp, #36	@ 0x24
 80072b8:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80072ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 80072bc:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 80072be:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80072c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072c4:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 80072c6:	e7e6      	b.n	8007296 <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 80072c8:	2200      	movs	r2, #0
 80072ca:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072cc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80072ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072d2:	f001 f8d1 	bl	8008478 <SDMMC_GetResponse>
 80072d6:	0182      	lsls	r2, r0, #6
 80072d8:	d434      	bmi.n	8007344 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 80072da:	a902      	add	r1, sp, #8
 80072dc:	4620      	mov	r0, r4
 80072de:	f7ff fb61 	bl	80069a4 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 80072e2:	b960      	cbnz	r0, 80072fe <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	03db      	lsls	r3, r3, #15
 80072e8:	d535      	bpl.n	8007356 <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072ea:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	0409      	lsls	r1, r1, #16
 80072f0:	f001 fe54 	bl	8008f9c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80072f4:	b918      	cbnz	r0, 80072fe <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80072f6:	4601      	mov	r1, r0
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	f001 ff37 	bl	800916c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80072fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007300:	4303      	orrs	r3, r0
 8007302:	6363      	str	r3, [r4, #52]	@ 0x34
 8007304:	e7c0      	b.n	8007288 <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800730a:	2100      	movs	r1, #0
 800730c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800730e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007312:	f001 f8b1 	bl	8008478 <SDMMC_GetResponse>
 8007316:	0180      	lsls	r0, r0, #6
 8007318:	d414      	bmi.n	8007344 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800731a:	a902      	add	r1, sp, #8
 800731c:	4620      	mov	r0, r4
 800731e:	f7ff fb41 	bl	80069a4 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007322:	2800      	cmp	r0, #0
 8007324:	d1eb      	bne.n	80072fe <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	0359      	lsls	r1, r3, #13
 800732a:	d514      	bpl.n	8007356 <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800732c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	0409      	lsls	r1, r1, #16
 8007332:	f001 fe33 	bl	8008f9c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8007336:	2800      	cmp	r0, #0
 8007338:	d1e1      	bne.n	80072fe <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800733a:	2102      	movs	r1, #2
 800733c:	6820      	ldr	r0, [r4, #0]
 800733e:	f001 ff15 	bl	800916c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8007342:	e7dc      	b.n	80072fe <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007344:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007348:	e7d9      	b.n	80072fe <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 800734a:	b93a      	cbnz	r2, 800735c <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800734c:	490a      	ldr	r1, [pc, #40]	@ (8007378 <HAL_SD_ConfigWideBusOperation+0x190>)
 800734e:	4288      	cmp	r0, r1
 8007350:	d989      	bls.n	8007266 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007352:	0e5a      	lsrs	r2, r3, #25
 8007354:	e787      	b.n	8007266 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007356:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800735a:	e7d0      	b.n	80072fe <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800735c:	0051      	lsls	r1, r2, #1
 800735e:	fbb0 f1f1 	udiv	r1, r0, r1
 8007362:	4805      	ldr	r0, [pc, #20]	@ (8007378 <HAL_SD_ConfigWideBusOperation+0x190>)
 8007364:	4281      	cmp	r1, r0
 8007366:	f67f af7e 	bls.w	8007266 <HAL_SD_ConfigWideBusOperation+0x7e>
 800736a:	e7f2      	b.n	8007352 <HAL_SD_ConfigWideBusOperation+0x16a>
 800736c:	55e63b89 	.word	0x55e63b89
 8007370:	017d7840 	.word	0x017d7840
 8007374:	1fe00fff 	.word	0x1fe00fff
 8007378:	02faf080 	.word	0x02faf080

0800737c <HAL_SD_Init>:
{
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	b087      	sub	sp, #28
  if (hsd == NULL)
 8007380:	b168      	cbz	r0, 800739e <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 8007382:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8007386:	4604      	mov	r4, r0
 8007388:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800738c:	2b00      	cmp	r3, #0
 800738e:	d044      	beq.n	800741a <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007390:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007392:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007394:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007398:	f7ff fd04 	bl	8006da4 <HAL_SD_InitCard>
 800739c:	b118      	cbz	r0, 80073a6 <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800739e:	2601      	movs	r6, #1
}
 80073a0:	4630      	mov	r0, r6
 80073a2:	b007      	add	sp, #28
 80073a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80073a6:	a901      	add	r1, sp, #4
 80073a8:	4620      	mov	r0, r4
 80073aa:	f7ff fe35 	bl	8007018 <HAL_SD_GetCardStatus>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1f5      	bne.n	800739e <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80073b2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 80073b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80073b8:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80073ba:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80073be:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80073c0:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80073c2:	d02e      	beq.n	8007422 <HAL_SD_Init+0xa6>
 80073c4:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80073c6:	68e1      	ldr	r1, [r4, #12]
 80073c8:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80073ca:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80073cc:	f7ff ff0c 	bl	80071e8 <HAL_SD_ConfigWideBusOperation>
 80073d0:	4606      	mov	r6, r0
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d1e3      	bne.n	800739e <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 80073d6:	f7fb fa07 	bl	80027e8 <HAL_GetTick>
 80073da:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80073dc:	e007      	b.n	80073ee <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 80073de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073e0:	4303      	orrs	r3, r0
 80073e2:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073e4:	f7fb fa00 	bl	80027e8 <HAL_GetTick>
 80073e8:	1bc3      	subs	r3, r0, r7
 80073ea:	3301      	adds	r3, #1
 80073ec:	d020      	beq.n	8007430 <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073ee:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	0409      	lsls	r1, r1, #16
 80073f4:	f002 f8ea 	bl	80095cc <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80073f8:	4605      	mov	r5, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d1ef      	bne.n	80073de <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073fe:	6820      	ldr	r0, [r4, #0]
 8007400:	4629      	mov	r1, r5
 8007402:	f001 f839 	bl	8008478 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007406:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800740a:	2804      	cmp	r0, #4
 800740c:	d1ea      	bne.n	80073e4 <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 800740e:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007410:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007412:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8007414:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 8007418:	e7c2      	b.n	80073a0 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800741a:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800741c:	f7fa f990 	bl	8001740 <HAL_SD_MspInit>
 8007420:	e7b6      	b.n	8007390 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007422:	4313      	orrs	r3, r2
 8007424:	bf14      	ite	ne
 8007426:	f44f 7300 	movne.w	r3, #512	@ 0x200
 800742a:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 800742e:	e7ca      	b.n	80073c6 <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007430:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8007434:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8007436:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007438:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800743a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800743e:	e7af      	b.n	80073a0 <HAL_SD_Init+0x24>

08007440 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007440:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 8007442:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007444:	0409      	lsls	r1, r1, #16
{
 8007446:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007448:	6800      	ldr	r0, [r0, #0]
 800744a:	f002 f8bf 	bl	80095cc <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800744e:	4601      	mov	r1, r0
 8007450:	b120      	cbz	r0, 800745c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8007452:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007454:	2000      	movs	r0, #0
 8007456:	430b      	orrs	r3, r1
 8007458:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800745a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	f001 f80b 	bl	8008478 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007462:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8007466:	bd10      	pop	{r4, pc}

08007468 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop

0800746c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
/**
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop

08007470 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
/**
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
/**
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <HAL_SD_IRQHandler>:
{
 8007478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800747a:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800747c:	6800      	ldr	r0, [r0, #0]
{
 800747e:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 8007480:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007482:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	d52b      	bpl.n	80074e0 <HAL_SD_IRQHandler+0x68>
 8007488:	072f      	lsls	r7, r5, #28
 800748a:	f100 80e4 	bmi.w	8007656 <HAL_SD_IRQHandler+0x1de>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800748e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007490:	05db      	lsls	r3, r3, #23
 8007492:	d579      	bpl.n	8007588 <HAL_SD_IRQHandler+0x110>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007494:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007498:	4b94      	ldr	r3, [pc, #592]	@ (80076ec <HAL_SD_IRQHandler+0x274>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800749a:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800749c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800749e:	4013      	ands	r3, r2
 80074a0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80074a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80074a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074a8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80074aa:	68c3      	ldr	r3, [r0, #12]
 80074ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b0:	60c3      	str	r3, [r0, #12]
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80074b2:	062b      	lsls	r3, r5, #24
 80074b4:	d512      	bpl.n	80074dc <HAL_SD_IRQHandler+0x64>
      hsd->Instance->DLEN = 0;
 80074b6:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074b8:	f015 0f22 	tst.w	r5, #34	@ 0x22
      hsd->Instance->DLEN = 0;
 80074bc:	6283      	str	r3, [r0, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80074be:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80074c0:	6503      	str	r3, [r0, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074c2:	f040 80ff 	bne.w	80076c4 <HAL_SD_IRQHandler+0x24c>
      hsd->State = HAL_SD_STATE_READY;
 80074c6:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80074c8:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074ca:	f015 0f30 	tst.w	r5, #48	@ 0x30
      hsd->State = HAL_SD_STATE_READY;
 80074ce:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80074d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074d4:	f040 80f2 	bne.w	80076bc <HAL_SD_IRQHandler+0x244>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074d8:	07af      	lsls	r7, r5, #30
 80074da:	d124      	bne.n	8007526 <HAL_SD_IRQHandler+0xae>
}
 80074dc:	b003      	add	sp, #12
 80074de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80074e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80074e2:	05de      	lsls	r6, r3, #23
 80074e4:	d524      	bpl.n	8007530 <HAL_SD_IRQHandler+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80074e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80074ea:	4b80      	ldr	r3, [pc, #512]	@ (80076ec <HAL_SD_IRQHandler+0x274>)
    if ((context & SD_CONTEXT_IT) != 0U)
 80074ec:	0729      	lsls	r1, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80074ee:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80074f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074f2:	ea03 0302 	and.w	r3, r3, r2
 80074f6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80074f8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80074fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074fe:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007500:	68c3      	ldr	r3, [r0, #12]
 8007502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007506:	60c3      	str	r3, [r0, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8007508:	d5d3      	bpl.n	80074b2 <HAL_SD_IRQHandler+0x3a>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800750a:	f015 0f22 	tst.w	r5, #34	@ 0x22
 800750e:	f040 80bb 	bne.w	8007688 <HAL_SD_IRQHandler+0x210>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007512:	4b77      	ldr	r3, [pc, #476]	@ (80076f0 <HAL_SD_IRQHandler+0x278>)
      hsd->State = HAL_SD_STATE_READY;
 8007514:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007516:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8007518:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800751a:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800751e:	07aa      	lsls	r2, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 8007520:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007522:	f000 80ac 	beq.w	800767e <HAL_SD_IRQHandler+0x206>
        HAL_SD_RxCpltCallback(hsd);
 8007526:	4620      	mov	r0, r4
 8007528:	f002 f9e0 	bl	80098ec <HAL_SD_RxCpltCallback>
}
 800752c:	b003      	add	sp, #12
 800752e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007530:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007532:	045e      	lsls	r6, r3, #17
 8007534:	d529      	bpl.n	800758a <HAL_SD_IRQHandler+0x112>
 8007536:	0729      	lsls	r1, r5, #28
 8007538:	d527      	bpl.n	800758a <HAL_SD_IRQHandler+0x112>
  if (hsd->TxXferSize >= 32U)
 800753a:	6a23      	ldr	r3, [r4, #32]
 800753c:	2b1f      	cmp	r3, #31
 800753e:	d9cd      	bls.n	80074dc <HAL_SD_IRQHandler+0x64>
  tmp = hsd->pTxBuffPtr;
 8007540:	69e6      	ldr	r6, [r4, #28]
 8007542:	1d37      	adds	r7, r6, #4
 8007544:	f106 0524 	add.w	r5, r6, #36	@ 0x24
 8007548:	e000      	b.n	800754c <HAL_SD_IRQHandler+0xd4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800754a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800754c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 8007550:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007552:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8007554:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8007556:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800755a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800755e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8007560:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 8007564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007568:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800756a:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800756e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007572:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007574:	f000 ff6e 	bl	8008454 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007578:	42af      	cmp	r7, r5
 800757a:	d1e6      	bne.n	800754a <HAL_SD_IRQHandler+0xd2>
    hsd->TxXferSize -= 32U;
 800757c:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800757e:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 8007580:	3b20      	subs	r3, #32
 8007582:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 8007586:	e7a9      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007588:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800758a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800758c:	f013 0f3a 	tst.w	r3, #58	@ 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007590:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007592:	d04f      	beq.n	8007634 <HAL_SD_IRQHandler+0x1bc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007594:	079a      	lsls	r2, r3, #30
 8007596:	d503      	bpl.n	80075a0 <HAL_SD_IRQHandler+0x128>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800759a:	f043 0302 	orr.w	r3, r3, #2
 800759e:	6363      	str	r3, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80075a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80075a2:	071b      	lsls	r3, r3, #28
 80075a4:	d503      	bpl.n	80075ae <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075a8:	f043 0308 	orr.w	r3, r3, #8
 80075ac:	6363      	str	r3, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80075ae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80075b0:	069f      	lsls	r7, r3, #26
 80075b2:	d503      	bpl.n	80075bc <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80075b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075b6:	f043 0320 	orr.w	r3, r3, #32
 80075ba:	6363      	str	r3, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80075bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80075be:	06de      	lsls	r6, r3, #27
 80075c0:	d503      	bpl.n	80075ca <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80075c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075c4:	f043 0310 	orr.w	r3, r3, #16
 80075c8:	6363      	str	r3, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075ca:	4b49      	ldr	r3, [pc, #292]	@ (80076f0 <HAL_SD_IRQHandler+0x278>)
 80075cc:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80075ce:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80075d0:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 80075d4:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80075d6:	68c3      	ldr	r3, [r0, #12]
 80075d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075dc:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80075de:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80075e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80075e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80075e6:	68c3      	ldr	r3, [r0, #12]
 80075e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ec:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075ee:	f001 fab9 	bl	8008b64 <SDMMC_CmdStopTransfer>
 80075f2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80075f4:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80075f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075fa:	4302      	orrs	r2, r0
 80075fc:	6362      	str	r2, [r4, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007604:	60da      	str	r2, [r3, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8007606:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800760a:	6399      	str	r1, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800760c:	d142      	bne.n	8007694 <HAL_SD_IRQHandler+0x21c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800760e:	0628      	lsls	r0, r5, #24
 8007610:	f57f af64 	bpl.w	80074dc <HAL_SD_IRQHandler+0x64>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007616:	2900      	cmp	r1, #0
 8007618:	f43f af60 	beq.w	80074dc <HAL_SD_IRQHandler+0x64>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800761c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
        hsd->State = HAL_SD_STATE_READY;
 800761e:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 8007620:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007622:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 8007626:	63d9      	str	r1, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007628:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800762a:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800762e:	f7ff fafb 	bl	8006c28 <HAL_SD_ErrorCallback>
 8007632:	e753      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007634:	00d9      	lsls	r1, r3, #3
 8007636:	f57f af51 	bpl.w	80074dc <HAL_SD_IRQHandler+0x64>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800763a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800763e:	f005 0520 	and.w	r5, r5, #32
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007642:	6383      	str	r3, [r0, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007644:	6d03      	ldr	r3, [r0, #80]	@ 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007646:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007648:	075a      	lsls	r2, r3, #29
 800764a:	d42c      	bmi.n	80076a6 <HAL_SD_IRQHandler+0x22e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800764c:	2d00      	cmp	r5, #0
 800764e:	d049      	beq.n	80076e4 <HAL_SD_IRQHandler+0x26c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007650:	f7ff ff10 	bl	8007474 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8007654:	e742      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
  tmp = hsd->pRxBuffPtr;
 8007656:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	@ 0x24
  if (hsd->RxXferSize >= 32U)
 800765a:	2b1f      	cmp	r3, #31
 800765c:	f67f af3e 	bls.w	80074dc <HAL_SD_IRQHandler+0x64>
 8007660:	f105 0620 	add.w	r6, r5, #32
 8007664:	e000      	b.n	8007668 <HAL_SD_IRQHandler+0x1f0>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007666:	6820      	ldr	r0, [r4, #0]
 8007668:	f000 fef0 	bl	800844c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800766c:	f845 0b04 	str.w	r0, [r5], #4
    for (count = 0U; count < 8U; count++)
 8007670:	42ae      	cmp	r6, r5
 8007672:	d1f8      	bne.n	8007666 <HAL_SD_IRQHandler+0x1ee>
    hsd->RxXferSize -= 32U;
 8007674:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    hsd->pRxBuffPtr = tmp;
 8007676:	6266      	str	r6, [r4, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8007678:	3b20      	subs	r3, #32
 800767a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800767c:	e72e      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
        HAL_SD_TxCpltCallback(hsd);
 800767e:	4620      	mov	r0, r4
 8007680:	f002 f930 	bl	80098e4 <HAL_SD_TxCpltCallback>
}
 8007684:	b003      	add	sp, #12
 8007686:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007688:	f001 fa6c 	bl	8008b64 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800768c:	4603      	mov	r3, r0
 800768e:	b970      	cbnz	r0, 80076ae <HAL_SD_IRQHandler+0x236>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	e73e      	b.n	8007512 <HAL_SD_IRQHandler+0x9a>
      hsd->State = HAL_SD_STATE_READY;
 8007694:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8007696:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 8007698:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800769a:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800769e:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80076a0:	f7ff fac2 	bl	8006c28 <HAL_SD_ErrorCallback>
 80076a4:	e71a      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80076a6:	b1d5      	cbz	r5, 80076de <HAL_SD_IRQHandler+0x266>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80076a8:	f7ff fee2 	bl	8007470 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 80076ac:	e716      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
          hsd->ErrorCode |= errorstate;
 80076ae:	6b62      	ldr	r2, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80076b0:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 80076b2:	4313      	orrs	r3, r2
 80076b4:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80076b6:	f7ff fab7 	bl	8006c28 <HAL_SD_ErrorCallback>
 80076ba:	e7e9      	b.n	8007690 <HAL_SD_IRQHandler+0x218>
        HAL_SD_TxCpltCallback(hsd);
 80076bc:	4620      	mov	r0, r4
 80076be:	f002 f911 	bl	80098e4 <HAL_SD_TxCpltCallback>
 80076c2:	e709      	b.n	80074d8 <HAL_SD_IRQHandler+0x60>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80076c4:	f001 fa4e 	bl	8008b64 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80076c8:	4603      	mov	r3, r0
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f43f aefb 	beq.w	80074c6 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 80076d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80076d2:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 80076d4:	4313      	orrs	r3, r2
 80076d6:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80076d8:	f7ff faa6 	bl	8006c28 <HAL_SD_ErrorCallback>
 80076dc:	e6f3      	b.n	80074c6 <HAL_SD_IRQHandler+0x4e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80076de:	f7ff fec3 	bl	8007468 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80076e2:	e6fb      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80076e4:	f7ff fec2 	bl	800746c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 80076e8:	e6f8      	b.n	80074dc <HAL_SD_IRQHandler+0x64>
 80076ea:	bf00      	nop
 80076ec:	ffff3ec5 	.word	0xffff3ec5
 80076f0:	18000f3a 	.word	0x18000f3a

080076f4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80076f4:	b318      	cbz	r0, 800773e <HAL_SDRAM_Init+0x4a>
{
 80076f6:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80076f8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80076fc:	4604      	mov	r4, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007704:	b1b3      	cbz	r3, 8007734 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007706:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007708:	2302      	movs	r3, #2
 800770a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800770e:	f851 0b04 	ldr.w	r0, [r1], #4
 8007712:	f000 fde3 	bl	80082dc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	4629      	mov	r1, r5
 800771a:	6820      	ldr	r0, [r4, #0]
 800771c:	f000 fe16 	bl	800834c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007720:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007722:	2101      	movs	r1, #1

  return HAL_OK;
 8007724:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8007726:	6813      	ldr	r3, [r2, #0]
 8007728:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800772c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800772e:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
 8007732:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8007734:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007738:	f7f9 faac 	bl	8000c94 <HAL_SDRAM_MspInit>
 800773c:	e7e3      	b.n	8007706 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800773e:	2001      	movs	r0, #1
}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	52004000 	.word	0x52004000

08007748 <HAL_SDRAM_RefreshErrorCallback>:
  * @brief  SDRAM Refresh error callback.
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <HAL_SDRAM_IRQHandler>:
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 800774c:	6803      	ldr	r3, [r0, #0]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	07db      	lsls	r3, r3, #31
 8007752:	d400      	bmi.n	8007756 <HAL_SDRAM_IRQHandler+0xa>
 8007754:	4770      	bx	lr
{
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 800775a:	f7ff fff5 	bl	8007748 <HAL_SDRAM_RefreshErrorCallback>
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	6953      	ldr	r3, [r2, #20]
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	6153      	str	r3, [r2, #20]
}
 8007768:	bd10      	pop	{r4, pc}
 800776a:	bf00      	nop

0800776c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800776c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800776e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8007772:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007774:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007776:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8007778:	d004      	beq.n	8007784 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800777a:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800777e:	2c01      	cmp	r4, #1
 8007780:	d001      	beq.n	8007786 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8007782:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8007784:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007786:	2302      	movs	r3, #2
 8007788:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800778a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800778c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007790:	f000 fe1a 	bl	80083c8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007794:	6833      	ldr	r3, [r6, #0]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d003      	beq.n	80077a2 <HAL_SDRAM_SendCommand+0x36>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800779a:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
  return HAL_OK;
 800779e:	2000      	movs	r0, #0
}
 80077a0:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80077a2:	2305      	movs	r3, #5
 80077a4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 80077a8:	e7f9      	b.n	800779e <HAL_SDRAM_SendCommand+0x32>
 80077aa:	bf00      	nop

080077ac <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80077ac:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80077ae:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80077b2:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	b2d8      	uxtb	r0, r3
 80077b8:	d005      	beq.n	80077c6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80077ba:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	b2dd      	uxtb	r5, r3
 80077c2:	d001      	beq.n	80077c8 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80077c4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077c8:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80077ca:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077cc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80077d0:	f000 fe12 	bl	80083f8 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 80077d4:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80077d6:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 80077da:	bd38      	pop	{r3, r4, r5, pc}

080077dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e0:	461d      	mov	r5, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d156      	bne.n	8007898 <HAL_UART_Transmit+0xbc>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ea:	4688      	mov	r8, r1
 80077ec:	2900      	cmp	r1, #0
 80077ee:	d050      	beq.n	8007892 <HAL_UART_Transmit+0xb6>
 80077f0:	fab2 f982 	clz	r9, r2
 80077f4:	4616      	mov	r6, r2
 80077f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	d049      	beq.n	8007892 <HAL_UART_Transmit+0xb6>
    {
      return  HAL_ERROR;
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fe:	2321      	movs	r3, #33	@ 0x21
 8007800:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007806:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800780a:	f7fa ffed 	bl	80027e8 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007810:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007812:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800781a:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781e:	d051      	beq.n	80078c4 <HAL_UART_Transmit+0xe8>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8007820:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007824:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8007826:	b292      	uxth	r2, r2
 8007828:	b1aa      	cbz	r2, 8007856 <HAL_UART_Transmit+0x7a>
 800782a:	1c68      	adds	r0, r5, #1
 800782c:	d126      	bne.n	800787c <HAL_UART_Transmit+0xa0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	0612      	lsls	r2, r2, #24
 8007832:	d5fc      	bpl.n	800782e <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8007834:	f1b8 0f00 	cmp.w	r8, #0
 8007838:	d026      	beq.n	8007888 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800783a:	f818 2b01 	ldrb.w	r2, [r8], #1
 800783e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8007840:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8007844:	3a01      	subs	r2, #1
 8007846:	b292      	uxth	r2, r2
 8007848:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800784c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8007850:	b292      	uxth	r2, r2
 8007852:	2a00      	cmp	r2, #0
 8007854:	d1e9      	bne.n	800782a <HAL_UART_Transmit+0x4e>
 8007856:	1c69      	adds	r1, r5, #1
 8007858:	d130      	bne.n	80078bc <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	0652      	lsls	r2, r2, #25
 800785e:	d5fc      	bpl.n	800785a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8007860:	2320      	movs	r3, #32
    return HAL_OK;
 8007862:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8007864:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8007868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800786c:	f7fa ffbc 	bl	80027e8 <HAL_GetTick>
 8007870:	1bc0      	subs	r0, r0, r7
 8007872:	4285      	cmp	r5, r0
 8007874:	d313      	bcc.n	800789e <HAL_UART_Transmit+0xc2>
 8007876:	b195      	cbz	r5, 800789e <HAL_UART_Transmit+0xc2>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800787c:	69da      	ldr	r2, [r3, #28]
 800787e:	0616      	lsls	r6, r2, #24
 8007880:	d5f4      	bpl.n	800786c <HAL_UART_Transmit+0x90>
      if (pdata8bits == NULL)
 8007882:	f1b8 0f00 	cmp.w	r8, #0
 8007886:	d1d8      	bne.n	800783a <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007888:	f839 2b02 	ldrh.w	r2, [r9], #2
 800788c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007890:	e7d5      	b.n	800783e <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 8007892:	2001      	movs	r0, #1
}
 8007894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007898:	2002      	movs	r0, #2
}
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->gState = HAL_UART_STATE_READY;
 800789e:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80078a0:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80078a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80078a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078aa:	f7fa ff9d 	bl	80027e8 <HAL_GetTick>
 80078ae:	1bc3      	subs	r3, r0, r7
 80078b0:	429d      	cmp	r5, r3
 80078b2:	d3f4      	bcc.n	800789e <HAL_UART_Transmit+0xc2>
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	d0f2      	beq.n	800789e <HAL_UART_Transmit+0xc2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	065b      	lsls	r3, r3, #25
 80078c0:	d5f3      	bpl.n	80078aa <HAL_UART_Transmit+0xce>
 80078c2:	e7cd      	b.n	8007860 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1aa      	bne.n	8007820 <HAL_UART_Transmit+0x44>
 80078ca:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80078cc:	4698      	mov	r8, r3
 80078ce:	e7a7      	b.n	8007820 <HAL_UART_Transmit+0x44>

080078d0 <HAL_UART_Receive>:
{
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80078d6:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d149      	bne.n	8007972 <HAL_UART_Receive+0xa2>
    if ((pData == NULL) || (Size == 0U))
 80078de:	4689      	mov	r9, r1
 80078e0:	2900      	cmp	r1, #0
 80078e2:	d043      	beq.n	800796c <HAL_UART_Receive+0x9c>
 80078e4:	fab2 f582 	clz	r5, r2
 80078e8:	4617      	mov	r7, r2
 80078ea:	096d      	lsrs	r5, r5, #5
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	d03d      	beq.n	800796c <HAL_UART_Receive+0x9c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f0:	2322      	movs	r3, #34	@ 0x22
 80078f2:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f8:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fc:	66c5      	str	r5, [r0, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 80078fe:	f7fa ff73 	bl	80027e8 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8007902:	f8a4 705c 	strh.w	r7, [r4, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007906:	f8a4 705e 	strh.w	r7, [r4, #94]	@ 0x5e
    tickstart = HAL_GetTick();
 800790a:	4606      	mov	r6, r0
    UART_MASK_COMPUTATION(huart);
 800790c:	68a7      	ldr	r7, [r4, #8]
 800790e:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
 8007912:	f000 808a 	beq.w	8007a2a <HAL_UART_Receive+0x15a>
 8007916:	bb7f      	cbnz	r7, 8007978 <HAL_UART_Receive+0xa8>
 8007918:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf0c      	ite	eq
 800791e:	25ff      	moveq	r5, #255	@ 0xff
 8007920:	257f      	movne	r5, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 8007922:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 8007926:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
    while (huart->RxXferCount > 0U)
 800792a:	b29b      	uxth	r3, r3
 800792c:	b1c3      	cbz	r3, 8007960 <HAL_UART_Receive+0x90>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007934:	d12a      	bne.n	800798c <HAL_UART_Receive+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	0691      	lsls	r1, r2, #26
 800793a:	d5fc      	bpl.n	8007936 <HAL_UART_Receive+0x66>
      if (pdata8bits == NULL)
 800793c:	f1b9 0f00 	cmp.w	r9, #0
 8007940:	d063      	beq.n	8007a0a <HAL_UART_Receive+0x13a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	402b      	ands	r3, r5
 8007946:	f809 3b01 	strb.w	r3, [r9], #1
      huart->RxXferCount--;
 800794a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 800794e:	3a01      	subs	r2, #1
 8007950:	b292      	uxth	r2, r2
 8007952:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007956:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e6      	bne.n	800792e <HAL_UART_Receive+0x5e>
    huart->RxState = HAL_UART_STATE_READY;
 8007960:	2320      	movs	r3, #32
    return HAL_OK;
 8007962:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8007964:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
}
 8007968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800796c:	2001      	movs	r0, #1
}
 800796e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007972:	2002      	movs	r0, #2
}
 8007974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8007978:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 800797c:	462f      	mov	r7, r5
    UART_MASK_COMPUTATION(huart);
 800797e:	d1d0      	bne.n	8007922 <HAL_UART_Receive+0x52>
 8007980:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8007982:	2b00      	cmp	r3, #0
 8007984:	bf14      	ite	ne
 8007986:	253f      	movne	r5, #63	@ 0x3f
 8007988:	257f      	moveq	r5, #127	@ 0x7f
 800798a:	e7ca      	b.n	8007922 <HAL_UART_Receive+0x52>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798c:	69da      	ldr	r2, [r3, #28]
 800798e:	0692      	lsls	r2, r2, #26
 8007990:	d4d4      	bmi.n	800793c <HAL_UART_Receive+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007992:	f7fa ff29 	bl	80027e8 <HAL_GetTick>
 8007996:	1b80      	subs	r0, r0, r6
 8007998:	4580      	cmp	r8, r0
 800799a:	d330      	bcc.n	80079fe <HAL_UART_Receive+0x12e>
 800799c:	f1b8 0f00 	cmp.w	r8, #0
 80079a0:	d02d      	beq.n	80079fe <HAL_UART_Receive+0x12e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	0751      	lsls	r1, r2, #29
 80079a8:	d5f0      	bpl.n	800798c <HAL_UART_Receive+0xbc>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	0712      	lsls	r2, r2, #28
 80079ae:	d44f      	bmi.n	8007a50 <HAL_UART_Receive+0x180>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079b0:	69da      	ldr	r2, [r3, #28]
 80079b2:	0510      	lsls	r0, r2, #20
 80079b4:	d5ea      	bpl.n	800798c <HAL_UART_Receive+0xbc>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079ba:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079c0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	e843 2100 	strex	r1, r2, [r3]
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d1f7      	bne.n	80079bc <HAL_UART_Receive+0xec>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079cc:	4837      	ldr	r0, [pc, #220]	@ (8007aac <HAL_UART_Receive+0x1dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	f103 0208 	add.w	r2, r3, #8
 80079d2:	e852 2f00 	ldrex	r2, [r2]
 80079d6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	f103 0508 	add.w	r5, r3, #8
 80079dc:	e845 2100 	strex	r1, r2, [r5]
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d1f4      	bne.n	80079ce <HAL_UART_Receive+0xfe>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80079e6:	2a01      	cmp	r2, #1
 80079e8:	d029      	beq.n	8007a3e <HAL_UART_Receive+0x16e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ea:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80079ec:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079ee:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 80079f4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f8:	66e3      	str	r3, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079fa:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        huart->RxState = HAL_UART_STATE_READY;
 80079fe:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8007a00:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8007a02:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
}
 8007a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a0c:	402a      	ands	r2, r5
 8007a0e:	f827 2b02 	strh.w	r2, [r7], #2
      huart->RxXferCount--;
 8007a12:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 8007a16:	3a01      	subs	r2, #1
 8007a18:	b292      	uxth	r2, r2
 8007a1a:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007a1e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 8007a22:	b292      	uxth	r2, r2
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d183      	bne.n	8007930 <HAL_UART_Receive+0x60>
 8007a28:	e79a      	b.n	8007960 <HAL_UART_Receive+0x90>
    UART_MASK_COMPUTATION(huart);
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	b113      	cbz	r3, 8007a34 <HAL_UART_Receive+0x164>
      pdata16bits = NULL;
 8007a2e:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 8007a30:	25ff      	movs	r5, #255	@ 0xff
 8007a32:	e776      	b.n	8007922 <HAL_UART_Receive+0x52>
 8007a34:	464f      	mov	r7, r9
 8007a36:	f240 15ff 	movw	r5, #511	@ 0x1ff
      pdata8bits  = NULL;
 8007a3a:	4699      	mov	r9, r3
 8007a3c:	e771      	b.n	8007922 <HAL_UART_Receive+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a42:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	e843 2100 	strex	r1, r2, [r3]
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	d1f7      	bne.n	8007a3e <HAL_UART_Receive+0x16e>
 8007a4e:	e7cc      	b.n	80079ea <HAL_UART_Receive+0x11a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a50:	2208      	movs	r2, #8
 8007a52:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a58:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	e843 2100 	strex	r1, r2, [r3]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d1f7      	bne.n	8007a54 <HAL_UART_Receive+0x184>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a64:	4811      	ldr	r0, [pc, #68]	@ (8007aac <HAL_UART_Receive+0x1dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	f103 0208 	add.w	r2, r3, #8
 8007a6a:	e852 2f00 	ldrex	r2, [r2]
 8007a6e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	f103 0508 	add.w	r5, r3, #8
 8007a74:	e845 2100 	strex	r1, r2, [r5]
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	d1f4      	bne.n	8007a66 <HAL_UART_Receive+0x196>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007a7e:	2a01      	cmp	r2, #1
 8007a80:	d00b      	beq.n	8007a9a <HAL_UART_Receive+0x1ca>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007a84:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a86:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007a88:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007a8c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007a90:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a94:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8007a98:	e7b1      	b.n	80079fe <HAL_UART_Receive+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	e843 2100 	strex	r1, r2, [r3]
 8007aa6:	2900      	cmp	r1, #0
 8007aa8:	d1f7      	bne.n	8007a9a <HAL_UART_Receive+0x1ca>
 8007aaa:	e7ea      	b.n	8007a82 <HAL_UART_Receive+0x1b2>
 8007aac:	effffffe 	.word	0xeffffffe

08007ab0 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ab0:	6901      	ldr	r1, [r0, #16]
 8007ab2:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ab4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ab6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab8:	49a2      	ldr	r1, [pc, #648]	@ (8007d44 <UART_SetConfig+0x294>)
{
 8007aba:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007abc:	6945      	ldr	r5, [r0, #20]
{
 8007abe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac0:	69c0      	ldr	r0, [r0, #28]
{
 8007ac2:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ac6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aca:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007acc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ace:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ad2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007ada:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007adc:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ade:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	4a99      	ldr	r2, [pc, #612]	@ (8007d48 <UART_SetConfig+0x298>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	f000 8118 	beq.w	8007d18 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 8007ae8:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aea:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8007aec:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aee:	4a97      	ldr	r2, [pc, #604]	@ (8007d4c <UART_SetConfig+0x29c>)
 8007af0:	4032      	ands	r2, r6
 8007af2:	4311      	orrs	r1, r2
 8007af4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af8:	f022 020f 	bic.w	r2, r2, #15
 8007afc:	432a      	orrs	r2, r5
 8007afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b00:	4a93      	ldr	r2, [pc, #588]	@ (8007d50 <UART_SetConfig+0x2a0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d028      	beq.n	8007b58 <UART_SetConfig+0xa8>
 8007b06:	4a93      	ldr	r2, [pc, #588]	@ (8007d54 <UART_SetConfig+0x2a4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d01a      	beq.n	8007b42 <UART_SetConfig+0x92>
 8007b0c:	4a92      	ldr	r2, [pc, #584]	@ (8007d58 <UART_SetConfig+0x2a8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d017      	beq.n	8007b42 <UART_SetConfig+0x92>
 8007b12:	4a92      	ldr	r2, [pc, #584]	@ (8007d5c <UART_SetConfig+0x2ac>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d014      	beq.n	8007b42 <UART_SetConfig+0x92>
 8007b18:	4a91      	ldr	r2, [pc, #580]	@ (8007d60 <UART_SetConfig+0x2b0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d011      	beq.n	8007b42 <UART_SetConfig+0x92>
 8007b1e:	4a91      	ldr	r2, [pc, #580]	@ (8007d64 <UART_SetConfig+0x2b4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d019      	beq.n	8007b58 <UART_SetConfig+0xa8>
 8007b24:	4a90      	ldr	r2, [pc, #576]	@ (8007d68 <UART_SetConfig+0x2b8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00b      	beq.n	8007b42 <UART_SetConfig+0x92>
 8007b2a:	4a90      	ldr	r2, [pc, #576]	@ (8007d6c <UART_SetConfig+0x2bc>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d008      	beq.n	8007b42 <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8007b30:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007b32:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007b34:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8007b38:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007b3a:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b3c:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8007b3e:	b006      	add	sp, #24
 8007b40:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b42:	4b8b      	ldr	r3, [pc, #556]	@ (8007d70 <UART_SetConfig+0x2c0>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d8f0      	bhi.n	8007b30 <UART_SetConfig+0x80>
 8007b4e:	e8df f003 	tbb	[pc, r3]
 8007b52:	5f9d      	.short	0x5f9d
 8007b54:	977e7169 	.word	0x977e7169
 8007b58:	4b85      	ldr	r3, [pc, #532]	@ (8007d70 <UART_SetConfig+0x2c0>)
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b60:	2b28      	cmp	r3, #40	@ 0x28
 8007b62:	d8e5      	bhi.n	8007b30 <UART_SetConfig+0x80>
 8007b64:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <UART_SetConfig+0xbc>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007ce7 	.word	0x08007ce7
 8007b70:	08007b31 	.word	0x08007b31
 8007b74:	08007b31 	.word	0x08007b31
 8007b78:	08007b31 	.word	0x08007b31
 8007b7c:	08007b31 	.word	0x08007b31
 8007b80:	08007b31 	.word	0x08007b31
 8007b84:	08007b31 	.word	0x08007b31
 8007b88:	08007b31 	.word	0x08007b31
 8007b8c:	08007c11 	.word	0x08007c11
 8007b90:	08007b31 	.word	0x08007b31
 8007b94:	08007b31 	.word	0x08007b31
 8007b98:	08007b31 	.word	0x08007b31
 8007b9c:	08007b31 	.word	0x08007b31
 8007ba0:	08007b31 	.word	0x08007b31
 8007ba4:	08007b31 	.word	0x08007b31
 8007ba8:	08007b31 	.word	0x08007b31
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007b31 	.word	0x08007b31
 8007bb4:	08007b31 	.word	0x08007b31
 8007bb8:	08007b31 	.word	0x08007b31
 8007bbc:	08007b31 	.word	0x08007b31
 8007bc0:	08007b31 	.word	0x08007b31
 8007bc4:	08007b31 	.word	0x08007b31
 8007bc8:	08007b31 	.word	0x08007b31
 8007bcc:	08007c35 	.word	0x08007c35
 8007bd0:	08007b31 	.word	0x08007b31
 8007bd4:	08007b31 	.word	0x08007b31
 8007bd8:	08007b31 	.word	0x08007b31
 8007bdc:	08007b31 	.word	0x08007b31
 8007be0:	08007b31 	.word	0x08007b31
 8007be4:	08007b31 	.word	0x08007b31
 8007be8:	08007b31 	.word	0x08007b31
 8007bec:	08007c4f 	.word	0x08007c4f
 8007bf0:	08007b31 	.word	0x08007b31
 8007bf4:	08007b31 	.word	0x08007b31
 8007bf8:	08007b31 	.word	0x08007b31
 8007bfc:	08007b31 	.word	0x08007b31
 8007c00:	08007b31 	.word	0x08007b31
 8007c04:	08007b31 	.word	0x08007b31
 8007c08:	08007b31 	.word	0x08007b31
 8007c0c:	08007c81 	.word	0x08007c81
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c14:	d040      	beq.n	8007c98 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c16:	4668      	mov	r0, sp
 8007c18:	f7fe fa7a 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c1c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8007c1e:	b368      	cbz	r0, 8007c7c <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c20:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007c22:	e018      	b.n	8007c56 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c24:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c28:	d06e      	beq.n	8007d08 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2a:	a803      	add	r0, sp, #12
 8007c2c:	f7fe fb0a 	bl	8006244 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c30:	9804      	ldr	r0, [sp, #16]
        break;
 8007c32:	e7f4      	b.n	8007c1e <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c34:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c38:	d05b      	beq.n	8007cf2 <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8007d70 <UART_SetConfig+0x2c0>)
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	0692      	lsls	r2, r2, #26
 8007c40:	d54c      	bpl.n	8007cdc <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	484b      	ldr	r0, [pc, #300]	@ (8007d74 <UART_SetConfig+0x2c4>)
 8007c46:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c4a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8007c4c:	e003      	b.n	8007c56 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 8007c52:	4849      	ldr	r0, [pc, #292]	@ (8007d78 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c54:	d027      	beq.n	8007ca6 <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c56:	4a49      	ldr	r2, [pc, #292]	@ (8007d7c <UART_SetConfig+0x2cc>)
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c5e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c62:	fbb0 f0f1 	udiv	r0, r0, r1
 8007c66:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007c6a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6e:	f1a0 0310 	sub.w	r3, r0, #16
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f63f af5c 	bhi.w	8007b30 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e758      	b.n	8007b32 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c80:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c84:	d00f      	beq.n	8007ca6 <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007c8a:	e7e4      	b.n	8007c56 <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c8c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c90:	d026      	beq.n	8007ce0 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c92:	f7fd f95d 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
        break;
 8007c96:	e7c2      	b.n	8007c1e <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c98:	4668      	mov	r0, sp
 8007c9a:	f7fe fa39 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c9e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d0eb      	beq.n	8007c7c <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ca4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007ca6:	4b35      	ldr	r3, [pc, #212]	@ (8007d7c <UART_SetConfig+0x2cc>)
 8007ca8:	6862      	ldr	r2, [r4, #4]
 8007caa:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8007cae:	0853      	lsrs	r3, r2, #1
 8007cb0:	fbb0 f0f1 	udiv	r0, r0, r1
 8007cb4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb8:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cbc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cc0:	f1a3 0210 	sub.w	r2, r3, #16
 8007cc4:	428a      	cmp	r2, r1
 8007cc6:	f63f af33 	bhi.w	8007b30 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cca:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cce:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007cd2:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd4:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60cb      	str	r3, [r1, #12]
 8007cda:	e7cf      	b.n	8007c7c <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4825      	ldr	r0, [pc, #148]	@ (8007d74 <UART_SetConfig+0x2c4>)
 8007cde:	e7ba      	b.n	8007c56 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fd f936 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
        break;
 8007ce4:	e7dc      	b.n	8007ca0 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ce6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007cea:	d012      	beq.n	8007d12 <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cec:	f7fd f978 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007cf0:	e795      	b.n	8007c1e <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8007d70 <UART_SetConfig+0x2c0>)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	0691      	lsls	r1, r2, #26
 8007cf8:	f140 808a 	bpl.w	8007e10 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	481d      	ldr	r0, [pc, #116]	@ (8007d74 <UART_SetConfig+0x2c4>)
 8007d00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007d04:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8007d06:	e7ce      	b.n	8007ca6 <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d08:	a803      	add	r0, sp, #12
 8007d0a:	f7fe fa9b 	bl	8006244 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d0e:	9804      	ldr	r0, [sp, #16]
        break;
 8007d10:	e7c6      	b.n	8007ca0 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d12:	f7fd f965 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007d16:	e7c3      	b.n	8007ca0 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d18:	6898      	ldr	r0, [r3, #8]
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d4c <UART_SetConfig+0x29c>)
 8007d1c:	4002      	ands	r2, r0
 8007d1e:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d20:	4913      	ldr	r1, [pc, #76]	@ (8007d70 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d22:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d26:	f022 020f 	bic.w	r2, r2, #15
 8007d2a:	432a      	orrs	r2, r5
 8007d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d2e:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	f63f aefb 	bhi.w	8007b30 <UART_SetConfig+0x80>
 8007d3a:	e8df f003 	tbb	[pc, r3]
 8007d3e:	565b      	.short	0x565b
 8007d40:	5e61214d 	.word	0x5e61214d
 8007d44:	cfff69f3 	.word	0xcfff69f3
 8007d48:	58000c00 	.word	0x58000c00
 8007d4c:	11fff4ff 	.word	0x11fff4ff
 8007d50:	40011000 	.word	0x40011000
 8007d54:	40004400 	.word	0x40004400
 8007d58:	40004800 	.word	0x40004800
 8007d5c:	40004c00 	.word	0x40004c00
 8007d60:	40005000 	.word	0x40005000
 8007d64:	40011400 	.word	0x40011400
 8007d68:	40007800 	.word	0x40007800
 8007d6c:	40007c00 	.word	0x40007c00
 8007d70:	58024400 	.word	0x58024400
 8007d74:	03d09000 	.word	0x03d09000
 8007d78:	003d0900 	.word	0x003d0900
 8007d7c:	08028878 	.word	0x08028878
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d80:	4b24      	ldr	r3, [pc, #144]	@ (8007e14 <UART_SetConfig+0x364>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	0690      	lsls	r0, r2, #26
 8007d86:	d43d      	bmi.n	8007e04 <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 8007d88:	4823      	ldr	r0, [pc, #140]	@ (8007e18 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d8a:	4b24      	ldr	r3, [pc, #144]	@ (8007e1c <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d8c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d8e:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d92:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d96:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d9a:	4299      	cmp	r1, r3
 8007d9c:	f63f aec8 	bhi.w	8007b30 <UART_SetConfig+0x80>
 8007da0:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8007da4:	f63f aec4 	bhi.w	8007b30 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da8:	2300      	movs	r3, #0
 8007daa:	4619      	mov	r1, r3
 8007dac:	f7f8 fcac 	bl	8000708 <__aeabi_uldivmod>
 8007db0:	4632      	mov	r2, r6
 8007db2:	0209      	lsls	r1, r1, #8
 8007db4:	0203      	lsls	r3, r0, #8
 8007db6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007dba:	0870      	lsrs	r0, r6, #1
 8007dbc:	1818      	adds	r0, r3, r0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	f141 0100 	adc.w	r1, r1, #0
 8007dc6:	f7f8 fc9f 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dca:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <UART_SetConfig+0x370>)
 8007dcc:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	f63f aead 	bhi.w	8007b30 <UART_SetConfig+0x80>
 8007dd6:	e74f      	b.n	8007c78 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd8:	a803      	add	r0, sp, #12
 8007dda:	f7fe fa33 	bl	8006244 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dde:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f43f af4b 	beq.w	8007c7c <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007de6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007de8:	e7cf      	b.n	8007d8a <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dea:	4668      	mov	r0, sp
 8007dec:	f7fe f990 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007df0:	9801      	ldr	r0, [sp, #4]
        break;
 8007df2:	e7f5      	b.n	8007de0 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007df4:	f7fe f97a 	bl	80060ec <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8007df8:	e7f2      	b.n	8007de0 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 8007dfa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007dfe:	e7c4      	b.n	8007d8a <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 8007e00:	4808      	ldr	r0, [pc, #32]	@ (8007e24 <UART_SetConfig+0x374>)
 8007e02:	e7c2      	b.n	8007d8a <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4804      	ldr	r0, [pc, #16]	@ (8007e18 <UART_SetConfig+0x368>)
 8007e08:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e0c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8007e0e:	e7bc      	b.n	8007d8a <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 8007e10:	4801      	ldr	r0, [pc, #4]	@ (8007e18 <UART_SetConfig+0x368>)
 8007e12:	e748      	b.n	8007ca6 <UART_SetConfig+0x1f6>
 8007e14:	58024400 	.word	0x58024400
 8007e18:	03d09000 	.word	0x03d09000
 8007e1c:	08028878 	.word	0x08028878
 8007e20:	000ffcff 	.word	0x000ffcff
 8007e24:	003d0900 	.word	0x003d0900

08007e28 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007e2a:	071a      	lsls	r2, r3, #28
{
 8007e2c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2e:	d506      	bpl.n	8007e3e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e30:	6801      	ldr	r1, [r0, #0]
 8007e32:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007e34:	684a      	ldr	r2, [r1, #4]
 8007e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e3a:	4322      	orrs	r2, r4
 8007e3c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e3e:	07dc      	lsls	r4, r3, #31
 8007e40:	d506      	bpl.n	8007e50 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e42:	6801      	ldr	r1, [r0, #0]
 8007e44:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007e46:	684a      	ldr	r2, [r1, #4]
 8007e48:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007e4c:	4322      	orrs	r2, r4
 8007e4e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e50:	0799      	lsls	r1, r3, #30
 8007e52:	d506      	bpl.n	8007e62 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e54:	6801      	ldr	r1, [r0, #0]
 8007e56:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007e58:	684a      	ldr	r2, [r1, #4]
 8007e5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e5e:	4322      	orrs	r2, r4
 8007e60:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e62:	075a      	lsls	r2, r3, #29
 8007e64:	d506      	bpl.n	8007e74 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e66:	6801      	ldr	r1, [r0, #0]
 8007e68:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007e6a:	684a      	ldr	r2, [r1, #4]
 8007e6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007e70:	4322      	orrs	r2, r4
 8007e72:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e74:	06dc      	lsls	r4, r3, #27
 8007e76:	d506      	bpl.n	8007e86 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e78:	6801      	ldr	r1, [r0, #0]
 8007e7a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007e7c:	688a      	ldr	r2, [r1, #8]
 8007e7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e82:	4322      	orrs	r2, r4
 8007e84:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e86:	0699      	lsls	r1, r3, #26
 8007e88:	d506      	bpl.n	8007e98 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e8a:	6801      	ldr	r1, [r0, #0]
 8007e8c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007e8e:	688a      	ldr	r2, [r1, #8]
 8007e90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e94:	4322      	orrs	r2, r4
 8007e96:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e98:	065a      	lsls	r2, r3, #25
 8007e9a:	d50a      	bpl.n	8007eb2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e9c:	6801      	ldr	r1, [r0, #0]
 8007e9e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007ea0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ea2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007eaa:	ea42 0204 	orr.w	r2, r2, r4
 8007eae:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb0:	d00b      	beq.n	8007eca <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eb2:	061b      	lsls	r3, r3, #24
 8007eb4:	d506      	bpl.n	8007ec4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eb6:	6802      	ldr	r2, [r0, #0]
 8007eb8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007eba:	6853      	ldr	r3, [r2, #4]
 8007ebc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6053      	str	r3, [r2, #4]
}
 8007ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eca:	684a      	ldr	r2, [r1, #4]
 8007ecc:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8007ece:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007ed2:	4322      	orrs	r2, r4
 8007ed4:	604a      	str	r2, [r1, #4]
 8007ed6:	e7ec      	b.n	8007eb2 <UART_AdvFeatureConfig+0x8a>

08007ed8 <UART_CheckIdleState>:
{
 8007ed8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eda:	2300      	movs	r3, #0
{
 8007edc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ede:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8007ee2:	f7fa fc81 	bl	80027e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ee6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8007ee8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eea:	6813      	ldr	r3, [r2, #0]
 8007eec:	071b      	lsls	r3, r3, #28
 8007eee:	d40f      	bmi.n	8007f10 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ef0:	6813      	ldr	r3, [r2, #0]
 8007ef2:	0759      	lsls	r1, r3, #29
 8007ef4:	d431      	bmi.n	8007f5a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007ef8:	2220      	movs	r2, #32
  return HAL_OK;
 8007efa:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007efc:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f00:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f04:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f06:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f10:	69d3      	ldr	r3, [r2, #28]
 8007f12:	0298      	lsls	r0, r3, #10
 8007f14:	d4ec      	bmi.n	8007ef0 <UART_CheckIdleState+0x18>
 8007f16:	e00c      	b.n	8007f32 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f18:	6819      	ldr	r1, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	0749      	lsls	r1, r1, #29
 8007f1e:	d505      	bpl.n	8007f2c <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f20:	69d9      	ldr	r1, [r3, #28]
 8007f22:	0708      	lsls	r0, r1, #28
 8007f24:	d44a      	bmi.n	8007fbc <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	0509      	lsls	r1, r1, #20
 8007f2a:	d475      	bmi.n	8008018 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	0298      	lsls	r0, r3, #10
 8007f30:	d4de      	bmi.n	8007ef0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f32:	f7fa fc59 	bl	80027e8 <HAL_GetTick>
 8007f36:	1b43      	subs	r3, r0, r5
 8007f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f3c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3e:	d3eb      	bcc.n	8007f18 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	e843 2100 	strex	r1, r2, [r3]
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	d1f7      	bne.n	8007f40 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8007f50:	2320      	movs	r3, #32
 8007f52:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8007f56:	2003      	movs	r0, #3
 8007f58:	e7d6      	b.n	8007f08 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f5a:	69d3      	ldr	r3, [r2, #28]
 8007f5c:	025b      	lsls	r3, r3, #9
 8007f5e:	d4ca      	bmi.n	8007ef6 <UART_CheckIdleState+0x1e>
 8007f60:	e00d      	b.n	8007f7e <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	0750      	lsls	r0, r2, #29
 8007f66:	d507      	bpl.n	8007f78 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f68:	69da      	ldr	r2, [r3, #28]
 8007f6a:	0711      	lsls	r1, r2, #28
 8007f6c:	f100 8082 	bmi.w	8008074 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f70:	69da      	ldr	r2, [r3, #28]
 8007f72:	0512      	lsls	r2, r2, #20
 8007f74:	f100 80ac 	bmi.w	80080d0 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	025b      	lsls	r3, r3, #9
 8007f7c:	d4bb      	bmi.n	8007ef6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7e:	f7fa fc33 	bl	80027e8 <HAL_GetTick>
 8007f82:	1b43      	subs	r3, r0, r5
 8007f84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	d3ea      	bcc.n	8007f62 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f90:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	e843 2100 	strex	r1, r2, [r3]
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d1f7      	bne.n	8007f8c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	f103 0208 	add.w	r2, r3, #8
 8007fa0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	f103 0008 	add.w	r0, r3, #8
 8007fac:	e840 2100 	strex	r1, r2, [r0]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d1f3      	bne.n	8007f9c <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8007fba:	e7cc      	b.n	8007f56 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	e843 2100 	strex	r1, r2, [r3]
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	d1f7      	bne.n	8007fc0 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fd0:	4856      	ldr	r0, [pc, #344]	@ (800812c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	f103 0208 	add.w	r2, r3, #8
 8007fd6:	e852 2f00 	ldrex	r2, [r2]
 8007fda:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	f103 0508 	add.w	r5, r3, #8
 8007fe0:	e845 2100 	strex	r1, r2, [r5]
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d1f4      	bne.n	8007fd2 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007fea:	2a01      	cmp	r2, #1
 8007fec:	d00b      	beq.n	8008006 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ff2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007ff8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007ffc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008000:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008004:	e79c      	b.n	8007f40 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	e843 2100 	strex	r1, r2, [r3]
 8008012:	2900      	cmp	r1, #0
 8008014:	d1f7      	bne.n	8008006 <UART_CheckIdleState+0x12e>
 8008016:	e7ea      	b.n	8007fee <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008018:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800801c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008022:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	e843 2100 	strex	r1, r2, [r3]
 800802a:	2900      	cmp	r1, #0
 800802c:	d1f7      	bne.n	800801e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800802e:	483f      	ldr	r0, [pc, #252]	@ (800812c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	f103 0208 	add.w	r2, r3, #8
 8008034:	e852 2f00 	ldrex	r2, [r2]
 8008038:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	f103 0508 	add.w	r5, r3, #8
 800803e:	e845 2100 	strex	r1, r2, [r5]
 8008042:	2900      	cmp	r1, #0
 8008044:	d1f4      	bne.n	8008030 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008046:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008048:	2a01      	cmp	r2, #1
 800804a:	d00a      	beq.n	8008062 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800804e:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8008050:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008052:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8008056:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008060:	e76e      	b.n	8007f40 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008066:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	e843 2100 	strex	r1, r2, [r3]
 800806e:	2900      	cmp	r1, #0
 8008070:	d1f7      	bne.n	8008062 <UART_CheckIdleState+0x18a>
 8008072:	e7eb      	b.n	800804c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008074:	2208      	movs	r2, #8
 8008076:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800807c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	e843 2100 	strex	r1, r2, [r3]
 8008084:	2900      	cmp	r1, #0
 8008086:	d1f7      	bne.n	8008078 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008088:	4828      	ldr	r0, [pc, #160]	@ (800812c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	f103 0208 	add.w	r2, r3, #8
 800808e:	e852 2f00 	ldrex	r2, [r2]
 8008092:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	f103 0508 	add.w	r5, r3, #8
 8008098:	e845 2100 	strex	r1, r2, [r5]
 800809c:	2900      	cmp	r1, #0
 800809e:	d1f4      	bne.n	800808a <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80080a2:	2a01      	cmp	r2, #1
 80080a4:	d00b      	beq.n	80080be <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80080a8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080aa:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80080ac:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80080b0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80080b4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080b8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80080bc:	e766      	b.n	8007f8c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	e843 2100 	strex	r1, r2, [r3]
 80080ca:	2900      	cmp	r1, #0
 80080cc:	d1f7      	bne.n	80080be <UART_CheckIdleState+0x1e6>
 80080ce:	e7ea      	b.n	80080a6 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080d4:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080da:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	e843 2100 	strex	r1, r2, [r3]
 80080e2:	2900      	cmp	r1, #0
 80080e4:	d1f7      	bne.n	80080d6 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080e6:	4811      	ldr	r0, [pc, #68]	@ (800812c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	f103 0208 	add.w	r2, r3, #8
 80080ec:	e852 2f00 	ldrex	r2, [r2]
 80080f0:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	f103 0508 	add.w	r5, r3, #8
 80080f6:	e845 2100 	strex	r1, r2, [r5]
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d1f4      	bne.n	80080e8 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fe:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008100:	2a01      	cmp	r2, #1
 8008102:	d00a      	beq.n	800811a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008104:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008106:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8008108:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800810a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800810e:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008112:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008114:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008118:	e738      	b.n	8007f8c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	e843 2100 	strex	r1, r2, [r3]
 8008126:	2900      	cmp	r1, #0
 8008128:	d1f7      	bne.n	800811a <UART_CheckIdleState+0x242>
 800812a:	e7eb      	b.n	8008104 <UART_CheckIdleState+0x22c>
 800812c:	effffffe 	.word	0xeffffffe

08008130 <HAL_UART_Init>:
  if (huart == NULL)
 8008130:	b380      	cbz	r0, 8008194 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008132:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8008136:	b510      	push	{r4, lr}
 8008138:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800813a:	b333      	cbz	r3, 800818a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800813c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800813e:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008140:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8008142:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008146:	6813      	ldr	r3, [r2, #0]
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800814e:	b9c1      	cbnz	r1, 8008182 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008150:	4620      	mov	r0, r4
 8008152:	f7ff fcad 	bl	8007ab0 <UART_SetConfig>
 8008156:	2801      	cmp	r0, #1
 8008158:	d011      	beq.n	800817e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800815c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008164:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800816c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	f042 0201 	orr.w	r2, r2, #1
}
 8008174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8008178:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800817a:	f7ff bead 	b.w	8007ed8 <UART_CheckIdleState>
}
 800817e:	2001      	movs	r0, #1
 8008180:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8008182:	4620      	mov	r0, r4
 8008184:	f7ff fe50 	bl	8007e28 <UART_AdvFeatureConfig>
 8008188:	e7e2      	b.n	8008150 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800818a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800818e:	f7fa f9d7 	bl	8002540 <HAL_UART_MspInit>
 8008192:	e7d3      	b.n	800813c <HAL_UART_Init+0xc>
}
 8008194:	2001      	movs	r0, #1
 8008196:	4770      	bx	lr

08008198 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008198:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800819c:	2a01      	cmp	r2, #1
 800819e:	d017      	beq.n	80081d0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a0:	6802      	ldr	r2, [r0, #0]
 80081a2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80081a4:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081a6:	2100      	movs	r1, #0
{
 80081a8:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80081aa:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80081ae:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b0:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80081b2:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081b4:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80081b8:	f024 0401 	bic.w	r4, r4, #1
 80081bc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081be:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80081c2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80081c4:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80081c8:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 80081cc:	bc30      	pop	{r4, r5}
 80081ce:	4770      	bx	lr
  __HAL_LOCK(huart);
 80081d0:	2002      	movs	r0, #2
}
 80081d2:	4770      	bx	lr

080081d4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081d4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80081d8:	2a01      	cmp	r2, #1
 80081da:	d037      	beq.n	800824c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081dc:	6802      	ldr	r2, [r0, #0]
 80081de:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80081e0:	2024      	movs	r0, #36	@ 0x24
{
 80081e2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80081e4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ea:	6810      	ldr	r0, [r2, #0]
 80081ec:	f020 0001 	bic.w	r0, r0, #1
 80081f0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081f2:	6890      	ldr	r0, [r2, #8]
 80081f4:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80081f8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081fa:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081fc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081fe:	b310      	cbz	r0, 8008246 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008200:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008202:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008204:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008208:	4911      	ldr	r1, [pc, #68]	@ (8008250 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800820a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800820e:	4d11      	ldr	r5, [pc, #68]	@ (8008254 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008210:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008214:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008218:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800821c:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800821e:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008222:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008224:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008228:	fbb1 f1f5 	udiv	r1, r1, r5
 800822c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8008230:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8008232:	2100      	movs	r1, #0
 8008234:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008238:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800823a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800823c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008240:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008244:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008246:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008248:	4608      	mov	r0, r1
 800824a:	e7ef      	b.n	800822c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800824c:	2002      	movs	r0, #2
}
 800824e:	4770      	bx	lr
 8008250:	08028898 	.word	0x08028898
 8008254:	08028890 	.word	0x08028890

08008258 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008258:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800825c:	2a01      	cmp	r2, #1
 800825e:	d037      	beq.n	80082d0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008260:	6802      	ldr	r2, [r0, #0]
 8008262:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008264:	2024      	movs	r0, #36	@ 0x24
{
 8008266:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008268:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800826c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800826e:	6810      	ldr	r0, [r2, #0]
 8008270:	f020 0001 	bic.w	r0, r0, #1
 8008274:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008276:	6890      	ldr	r0, [r2, #8]
 8008278:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800827c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800827e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008280:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008282:	b310      	cbz	r0, 80082ca <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008284:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008286:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008288:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800828c:	4911      	ldr	r1, [pc, #68]	@ (80082d4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800828e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8008292:	4d11      	ldr	r5, [pc, #68]	@ (80082d8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008294:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008298:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800829c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082a0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80082a2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082a6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082a8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ac:	fbb1 f1f5 	udiv	r1, r1, r5
 80082b0:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80082b4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 80082b6:	2100      	movs	r1, #0
 80082b8:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082bc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 80082be:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80082c0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80082c4:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 80082c8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80082ca:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80082cc:	4608      	mov	r0, r1
 80082ce:	e7ef      	b.n	80082b0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80082d0:	2002      	movs	r0, #2
}
 80082d2:	4770      	bx	lr
 80082d4:	08028898 	.word	0x08028898
 80082d8:	08028890 	.word	0x08028890

080082dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80082dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082e0:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 80082e4:	e9d1 8200 	ldrd	r8, r2, [r1]
 80082e8:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 80082ea:	ea43 030e 	orr.w	r3, r3, lr
 80082ee:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
 80082f2:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 80082f6:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	d10f      	bne.n	800831e <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082fe:	433b      	orrs	r3, r7
 8008300:	4313      	orrs	r3, r2
 8008302:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <FMC_SDRAM_Init+0x6c>)
 8008304:	ea43 030c 	orr.w	r3, r3, ip
 8008308:	4333      	orrs	r3, r6
 800830a:	432b      	orrs	r3, r5
 800830c:	4323      	orrs	r3, r4
 800830e:	430b      	orrs	r3, r1
 8008310:	6801      	ldr	r1, [r0, #0]
 8008312:	400a      	ands	r2, r1
 8008314:	4313      	orrs	r3, r2
 8008316:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008318:	2000      	movs	r0, #0
 800831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800831e:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008322:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008324:	4332      	orrs	r2, r6
 8008326:	432a      	orrs	r2, r5
 8008328:	4322      	orrs	r2, r4
 800832a:	4c07      	ldr	r4, [pc, #28]	@ (8008348 <FMC_SDRAM_Init+0x6c>)
 800832c:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800832e:	6801      	ldr	r1, [r0, #0]
 8008330:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8008334:	430b      	orrs	r3, r1
 8008336:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008338:	6843      	ldr	r3, [r0, #4]
 800833a:	401c      	ands	r4, r3
 800833c:	4322      	orrs	r2, r4
 800833e:	6042      	str	r2, [r0, #4]
}
 8008340:	2000      	movs	r0, #0
 8008342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008346:	bf00      	nop
 8008348:	ffff8000 	.word	0xffff8000

0800834c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800834e:	68cc      	ldr	r4, [r1, #12]
 8008350:	694b      	ldr	r3, [r1, #20]
 8008352:	3c01      	subs	r4, #1
 8008354:	688d      	ldr	r5, [r1, #8]
 8008356:	698f      	ldr	r7, [r1, #24]
 8008358:	3b01      	subs	r3, #1
 800835a:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 800835e:	684c      	ldr	r4, [r1, #4]
 8008360:	680e      	ldr	r6, [r1, #0]
 8008362:	3d01      	subs	r5, #1
 8008364:	3c01      	subs	r4, #1
 8008366:	051b      	lsls	r3, r3, #20
 8008368:	022d      	lsls	r5, r5, #8
 800836a:	3e01      	subs	r6, #1
 800836c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 8008370:	690c      	ldr	r4, [r1, #16]
 8008372:	1e79      	subs	r1, r7, #1
 8008374:	3c01      	subs	r4, #1
 8008376:	0609      	lsls	r1, r1, #24
 8008378:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
 800837a:	b972      	cbnz	r2, 800839a <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800837c:	ea4e 0303 	orr.w	r3, lr, r3
 8008380:	6882      	ldr	r2, [r0, #8]
 8008382:	4333      	orrs	r3, r6
 8008384:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8008388:	ea43 030c 	orr.w	r3, r3, ip
 800838c:	432b      	orrs	r3, r5
 800838e:	4323      	orrs	r3, r4
 8008390:	430b      	orrs	r3, r1
 8008392:	4313      	orrs	r3, r2
 8008394:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008396:	2000      	movs	r0, #0
 8008398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800839a:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800839e:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80083a2:	4a08      	ldr	r2, [pc, #32]	@ (80083c4 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80083a4:	4333      	orrs	r3, r6
 80083a6:	4323      	orrs	r3, r4
 80083a8:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80083aa:	6881      	ldr	r1, [r0, #8]
 80083ac:	400a      	ands	r2, r1
 80083ae:	ea42 020e 	orr.w	r2, r2, lr
 80083b2:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80083b4:	68c2      	ldr	r2, [r0, #12]
 80083b6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60c3      	str	r3, [r0, #12]
}
 80083be:	2000      	movs	r0, #0
 80083c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	ff0f0fff 	.word	0xff0f0fff

080083c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80083c8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083ca:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 80083ce:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083d0:	6900      	ldr	r0, [r0, #16]
 80083d2:	4323      	orrs	r3, r4
 80083d4:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 80083d8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80083dc:	4c05      	ldr	r4, [pc, #20]	@ (80083f4 <FMC_SDRAM_SendCommand+0x2c>)
 80083de:	3901      	subs	r1, #1
 80083e0:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80083e2:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083e4:	4323      	orrs	r3, r4
}
 80083e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083ea:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80083ee:	6113      	str	r3, [r2, #16]
}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	ffc00000 	.word	0xffc00000

080083f8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80083f8:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80083fa:	4b05      	ldr	r3, [pc, #20]	@ (8008410 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 80083fc:	2000      	movs	r0, #0
{
 80083fe:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008400:	6954      	ldr	r4, [r2, #20]
 8008402:	4023      	ands	r3, r4
}
 8008404:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008408:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800840c:	6153      	str	r3, [r2, #20]
}
 800840e:	4770      	bx	lr
 8008410:	ffffc001 	.word	0xffffc001

08008414 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008414:	b084      	sub	sp, #16
 8008416:	b410      	push	{r4}
 8008418:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800841c:	4614      	mov	r4, r2
{
 800841e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8008422:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 8008424:	9904      	ldr	r1, [sp, #16]
{
 8008426:	4602      	mov	r2, r0
             Init.BusWide             | \
 8008428:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800842a:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800842c:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800842e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8008430:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 8008432:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8008434:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 8008436:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008438:	4903      	ldr	r1, [pc, #12]	@ (8008448 <SDMMC_Init+0x34>)
 800843a:	4021      	ands	r1, r4
}
 800843c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008440:	430b      	orrs	r3, r1
}
 8008442:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008444:	6053      	str	r3, [r2, #4]
}
 8008446:	4770      	bx	lr
 8008448:	ffc02c00 	.word	0xffc02c00

0800844c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800844c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop

08008454 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008454:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008456:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8008458:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800845a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800845e:	4770      	bx	lr

08008460 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008460:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8008462:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	f042 0203 	orr.w	r2, r2, #3
 800846a:	601a      	str	r2, [r3, #0]
}
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008470:	6800      	ldr	r0, [r0, #0]
}
 8008472:	f000 0003 	and.w	r0, r0, #3
 8008476:	4770      	bx	lr

08008478 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008478:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800847a:	5840      	ldr	r0, [r0, r1]
}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008480:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008482:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 8008486:	690d      	ldr	r5, [r1, #16]
{
 8008488:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800848a:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 800848c:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800848e:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008490:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 8008492:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 8008494:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 8008496:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008498:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 800849a:	4303      	orrs	r3, r0

  return HAL_OK;

}
 800849c:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800849e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80084a2:	430b      	orrs	r3, r1
}
 80084a4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80084a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop

080084ac <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084ac:	4a4f      	ldr	r2, [pc, #316]	@ (80085ec <SDMMC_CmdBlockLength+0x140>)
{
 80084ae:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084b0:	4b4f      	ldr	r3, [pc, #316]	@ (80085f0 <SDMMC_CmdBlockLength+0x144>)
 80084b2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80084b4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084b8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80084bc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80084c0:	484c      	ldr	r0, [pc, #304]	@ (80085f4 <SDMMC_CmdBlockLength+0x148>)
 80084c2:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084c6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80084c8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084ca:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80084ce:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80084d0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80084d4:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 80084d8:	1e53      	subs	r3, r2, #1
 80084da:	b14a      	cbz	r2, 80084f0 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80084dc:	4946      	ldr	r1, [pc, #280]	@ (80085f8 <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 80084de:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80084e2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80084e4:	420a      	tst	r2, r1
 80084e6:	d001      	beq.n	80084ec <SDMMC_CmdBlockLength+0x40>
 80084e8:	0492      	lsls	r2, r2, #18
 80084ea:	d504      	bpl.n	80084f6 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 80084ec:	1c58      	adds	r0, r3, #1
 80084ee:	d1f6      	bne.n	80084de <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80084f0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80084f4:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80084f6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80084fa:	075b      	lsls	r3, r3, #29
 80084fc:	d443      	bmi.n	8008586 <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084fe:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008502:	07d8      	lsls	r0, r3, #31
 8008504:	d409      	bmi.n	800851a <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008506:	4b3d      	ldr	r3, [pc, #244]	@ (80085fc <SDMMC_CmdBlockLength+0x150>)
 8008508:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800850c:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b10      	cmp	r3, #16
 8008514:	d005      	beq.n	8008522 <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008516:	2001      	movs	r0, #1
 8008518:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800851a:	2301      	movs	r3, #1
 800851c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008520:	e7f9      	b.n	8008516 <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 8008522:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008526:	4836      	ldr	r0, [pc, #216]	@ (8008600 <SDMMC_CmdBlockLength+0x154>)
 8008528:	4018      	ands	r0, r3
 800852a:	b358      	cbz	r0, 8008584 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800852c:	2b00      	cmp	r3, #0
 800852e:	db2f      	blt.n	8008590 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008530:	0059      	lsls	r1, r3, #1
 8008532:	d430      	bmi.n	8008596 <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008534:	009a      	lsls	r2, r3, #2
 8008536:	d430      	bmi.n	800859a <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008538:	00d9      	lsls	r1, r3, #3
 800853a:	d430      	bmi.n	800859e <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800853c:	011a      	lsls	r2, r3, #4
 800853e:	d431      	bmi.n	80085a4 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008540:	0159      	lsls	r1, r3, #5
 8008542:	d432      	bmi.n	80085aa <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008544:	01da      	lsls	r2, r3, #7
 8008546:	d433      	bmi.n	80085b0 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008548:	0219      	lsls	r1, r3, #8
 800854a:	d434      	bmi.n	80085b6 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800854c:	025a      	lsls	r2, r3, #9
 800854e:	d435      	bmi.n	80085bc <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008550:	0299      	lsls	r1, r3, #10
 8008552:	d43f      	bmi.n	80085d4 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008554:	02da      	lsls	r2, r3, #11
 8008556:	d43a      	bmi.n	80085ce <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008558:	0359      	lsls	r1, r3, #13
 800855a:	d435      	bmi.n	80085c8 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800855c:	039a      	lsls	r2, r3, #14
 800855e:	d430      	bmi.n	80085c2 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008560:	03d9      	lsls	r1, r3, #15
 8008562:	d440      	bmi.n	80085e6 <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008564:	041a      	lsls	r2, r3, #16
 8008566:	d43b      	bmi.n	80085e0 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008568:	0459      	lsls	r1, r3, #17
 800856a:	d436      	bmi.n	80085da <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800856c:	049a      	lsls	r2, r3, #18
 800856e:	d407      	bmi.n	8008580 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008570:	f013 0f08 	tst.w	r3, #8
 8008574:	bf0c      	ite	eq
 8008576:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800857a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800857e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008580:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008584:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008586:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008588:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800858a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800858e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008590:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008594:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008596:	2040      	movs	r0, #64	@ 0x40
 8008598:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800859a:	2080      	movs	r0, #128	@ 0x80
 800859c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800859e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80085a2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80085a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80085a8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80085aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80085ae:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80085b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80085b4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80085b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80085ba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80085bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80085c0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80085c2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80085c6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80085c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80085cc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80085ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80085d2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80085d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80085d8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80085da:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80085de:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80085e0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80085e4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80085e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80085ea:	4770      	bx	lr
 80085ec:	24000014 	.word	0x24000014
 80085f0:	10624dd3 	.word	0x10624dd3
 80085f4:	fffee0c0 	.word	0xfffee0c0
 80085f8:	00200045 	.word	0x00200045
 80085fc:	002000c5 	.word	0x002000c5
 8008600:	fdffe008 	.word	0xfdffe008

08008604 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008604:	4a4f      	ldr	r2, [pc, #316]	@ (8008744 <SDMMC_CmdReadSingleBlock+0x140>)
{
 8008606:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008608:	4b4f      	ldr	r3, [pc, #316]	@ (8008748 <SDMMC_CmdReadSingleBlock+0x144>)
 800860a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800860c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008610:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008614:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008618:	484c      	ldr	r0, [pc, #304]	@ (800874c <SDMMC_CmdReadSingleBlock+0x148>)
 800861a:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800861e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008620:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008622:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008626:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008628:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800862c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8008630:	1e53      	subs	r3, r2, #1
 8008632:	b14a      	cbz	r2, 8008648 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008634:	4946      	ldr	r1, [pc, #280]	@ (8008750 <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8008636:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800863a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800863c:	420a      	tst	r2, r1
 800863e:	d001      	beq.n	8008644 <SDMMC_CmdReadSingleBlock+0x40>
 8008640:	0492      	lsls	r2, r2, #18
 8008642:	d504      	bpl.n	800864e <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8008644:	1c58      	adds	r0, r3, #1
 8008646:	d1f6      	bne.n	8008636 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8008648:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800864c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800864e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008652:	075b      	lsls	r3, r3, #29
 8008654:	d443      	bmi.n	80086de <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008656:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800865a:	07d8      	lsls	r0, r3, #31
 800865c:	d409      	bmi.n	8008672 <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800865e:	4b3d      	ldr	r3, [pc, #244]	@ (8008754 <SDMMC_CmdReadSingleBlock+0x150>)
 8008660:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008664:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b11      	cmp	r3, #17
 800866c:	d005      	beq.n	800867a <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800866e:	2001      	movs	r0, #1
 8008670:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008672:	2301      	movs	r3, #1
 8008674:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008678:	e7f9      	b.n	800866e <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800867a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800867e:	4836      	ldr	r0, [pc, #216]	@ (8008758 <SDMMC_CmdReadSingleBlock+0x154>)
 8008680:	4018      	ands	r0, r3
 8008682:	b358      	cbz	r0, 80086dc <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008684:	2b00      	cmp	r3, #0
 8008686:	db2f      	blt.n	80086e8 <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008688:	0059      	lsls	r1, r3, #1
 800868a:	d430      	bmi.n	80086ee <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800868c:	009a      	lsls	r2, r3, #2
 800868e:	d430      	bmi.n	80086f2 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008690:	00d9      	lsls	r1, r3, #3
 8008692:	d430      	bmi.n	80086f6 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008694:	011a      	lsls	r2, r3, #4
 8008696:	d431      	bmi.n	80086fc <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008698:	0159      	lsls	r1, r3, #5
 800869a:	d432      	bmi.n	8008702 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800869c:	01da      	lsls	r2, r3, #7
 800869e:	d433      	bmi.n	8008708 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80086a0:	0219      	lsls	r1, r3, #8
 80086a2:	d434      	bmi.n	800870e <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086a4:	025a      	lsls	r2, r3, #9
 80086a6:	d435      	bmi.n	8008714 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086a8:	0299      	lsls	r1, r3, #10
 80086aa:	d43f      	bmi.n	800872c <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80086ac:	02da      	lsls	r2, r3, #11
 80086ae:	d43a      	bmi.n	8008726 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80086b0:	0359      	lsls	r1, r3, #13
 80086b2:	d435      	bmi.n	8008720 <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80086b4:	039a      	lsls	r2, r3, #14
 80086b6:	d430      	bmi.n	800871a <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80086b8:	03d9      	lsls	r1, r3, #15
 80086ba:	d440      	bmi.n	800873e <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80086bc:	041a      	lsls	r2, r3, #16
 80086be:	d43b      	bmi.n	8008738 <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80086c0:	0459      	lsls	r1, r3, #17
 80086c2:	d436      	bmi.n	8008732 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80086c4:	049a      	lsls	r2, r3, #18
 80086c6:	d407      	bmi.n	80086d8 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80086c8:	f013 0f08 	tst.w	r3, #8
 80086cc:	bf0c      	ite	eq
 80086ce:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80086d2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80086d6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80086d8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 80086dc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086de:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086e0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086e2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086e6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086e8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80086ec:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086ee:	2040      	movs	r0, #64	@ 0x40
 80086f0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80086f2:	2080      	movs	r0, #128	@ 0x80
 80086f4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80086f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80086fa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008700:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008702:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008706:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008708:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800870c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800870e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008712:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008714:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008718:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800871a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800871e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008720:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008724:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8008726:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800872a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800872c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008730:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008732:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008736:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008738:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800873c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800873e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008742:	4770      	bx	lr
 8008744:	24000014 	.word	0x24000014
 8008748:	10624dd3 	.word	0x10624dd3
 800874c:	fffee0c0 	.word	0xfffee0c0
 8008750:	00200045 	.word	0x00200045
 8008754:	002000c5 	.word	0x002000c5
 8008758:	fdffe008 	.word	0xfdffe008

0800875c <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800875c:	4a4f      	ldr	r2, [pc, #316]	@ (800889c <SDMMC_CmdReadMultiBlock+0x140>)
{
 800875e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008760:	4b4f      	ldr	r3, [pc, #316]	@ (80088a0 <SDMMC_CmdReadMultiBlock+0x144>)
 8008762:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8008764:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008768:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800876c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008770:	484c      	ldr	r0, [pc, #304]	@ (80088a4 <SDMMC_CmdReadMultiBlock+0x148>)
 8008772:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008776:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008778:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800877a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800877e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008780:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008784:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8008788:	1e53      	subs	r3, r2, #1
 800878a:	b14a      	cbz	r2, 80087a0 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800878c:	4946      	ldr	r1, [pc, #280]	@ (80088a8 <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800878e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8008792:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008794:	420a      	tst	r2, r1
 8008796:	d001      	beq.n	800879c <SDMMC_CmdReadMultiBlock+0x40>
 8008798:	0492      	lsls	r2, r2, #18
 800879a:	d504      	bpl.n	80087a6 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800879c:	1c58      	adds	r0, r3, #1
 800879e:	d1f6      	bne.n	800878e <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80087a0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80087a4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087a6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80087aa:	075b      	lsls	r3, r3, #29
 80087ac:	d443      	bmi.n	8008836 <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087ae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80087b2:	07d8      	lsls	r0, r3, #31
 80087b4:	d409      	bmi.n	80087ca <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087b6:	4b3d      	ldr	r3, [pc, #244]	@ (80088ac <SDMMC_CmdReadMultiBlock+0x150>)
 80087b8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80087bc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b12      	cmp	r3, #18
 80087c4:	d005      	beq.n	80087d2 <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087c6:	2001      	movs	r0, #1
 80087c8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80087ca:	2301      	movs	r3, #1
 80087cc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087d0:	e7f9      	b.n	80087c6 <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 80087d2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80087d6:	4836      	ldr	r0, [pc, #216]	@ (80088b0 <SDMMC_CmdReadMultiBlock+0x154>)
 80087d8:	4018      	ands	r0, r3
 80087da:	b358      	cbz	r0, 8008834 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80087dc:	2b00      	cmp	r3, #0
 80087de:	db2f      	blt.n	8008840 <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80087e0:	0059      	lsls	r1, r3, #1
 80087e2:	d430      	bmi.n	8008846 <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80087e4:	009a      	lsls	r2, r3, #2
 80087e6:	d430      	bmi.n	800884a <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80087e8:	00d9      	lsls	r1, r3, #3
 80087ea:	d430      	bmi.n	800884e <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80087ec:	011a      	lsls	r2, r3, #4
 80087ee:	d431      	bmi.n	8008854 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80087f0:	0159      	lsls	r1, r3, #5
 80087f2:	d432      	bmi.n	800885a <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087f4:	01da      	lsls	r2, r3, #7
 80087f6:	d433      	bmi.n	8008860 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80087f8:	0219      	lsls	r1, r3, #8
 80087fa:	d434      	bmi.n	8008866 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80087fc:	025a      	lsls	r2, r3, #9
 80087fe:	d435      	bmi.n	800886c <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008800:	0299      	lsls	r1, r3, #10
 8008802:	d43f      	bmi.n	8008884 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008804:	02da      	lsls	r2, r3, #11
 8008806:	d43a      	bmi.n	800887e <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008808:	0359      	lsls	r1, r3, #13
 800880a:	d435      	bmi.n	8008878 <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800880c:	039a      	lsls	r2, r3, #14
 800880e:	d430      	bmi.n	8008872 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008810:	03d9      	lsls	r1, r3, #15
 8008812:	d440      	bmi.n	8008896 <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008814:	041a      	lsls	r2, r3, #16
 8008816:	d43b      	bmi.n	8008890 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008818:	0459      	lsls	r1, r3, #17
 800881a:	d436      	bmi.n	800888a <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800881c:	049a      	lsls	r2, r3, #18
 800881e:	d407      	bmi.n	8008830 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008820:	f013 0f08 	tst.w	r3, #8
 8008824:	bf0c      	ite	eq
 8008826:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800882a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800882e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008830:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008834:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008836:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008838:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800883a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800883e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008840:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008844:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008846:	2040      	movs	r0, #64	@ 0x40
 8008848:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800884a:	2080      	movs	r0, #128	@ 0x80
 800884c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800884e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008852:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008854:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008858:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800885a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800885e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008860:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008864:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008866:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800886a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800886c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008870:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008872:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008876:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008878:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800887c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800887e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008882:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008884:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008888:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800888a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800888e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008890:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008894:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008896:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800889a:	4770      	bx	lr
 800889c:	24000014 	.word	0x24000014
 80088a0:	10624dd3 	.word	0x10624dd3
 80088a4:	fffee0c0 	.word	0xfffee0c0
 80088a8:	00200045 	.word	0x00200045
 80088ac:	002000c5 	.word	0x002000c5
 80088b0:	fdffe008 	.word	0xfdffe008

080088b4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088b4:	4a4f      	ldr	r2, [pc, #316]	@ (80089f4 <SDMMC_CmdWriteSingleBlock+0x140>)
{
 80088b6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088b8:	4b4f      	ldr	r3, [pc, #316]	@ (80089f8 <SDMMC_CmdWriteSingleBlock+0x144>)
 80088ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80088bc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088c0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80088c4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80088c8:	484c      	ldr	r0, [pc, #304]	@ (80089fc <SDMMC_CmdWriteSingleBlock+0x148>)
 80088ca:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80088d0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088d2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80088d6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088d8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80088dc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80088e0:	1e53      	subs	r3, r2, #1
 80088e2:	b14a      	cbz	r2, 80088f8 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80088e4:	4946      	ldr	r1, [pc, #280]	@ (8008a00 <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 80088e6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80088ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80088ec:	420a      	tst	r2, r1
 80088ee:	d001      	beq.n	80088f4 <SDMMC_CmdWriteSingleBlock+0x40>
 80088f0:	0492      	lsls	r2, r2, #18
 80088f2:	d504      	bpl.n	80088fe <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 80088f4:	1c58      	adds	r0, r3, #1
 80088f6:	d1f6      	bne.n	80088e6 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80088f8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80088fc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088fe:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008902:	075b      	lsls	r3, r3, #29
 8008904:	d443      	bmi.n	800898e <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008906:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800890a:	07d8      	lsls	r0, r3, #31
 800890c:	d409      	bmi.n	8008922 <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800890e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a04 <SDMMC_CmdWriteSingleBlock+0x150>)
 8008910:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008914:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b18      	cmp	r3, #24
 800891c:	d005      	beq.n	800892a <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800891e:	2001      	movs	r0, #1
 8008920:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008922:	2301      	movs	r3, #1
 8008924:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008928:	e7f9      	b.n	800891e <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800892a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800892e:	4836      	ldr	r0, [pc, #216]	@ (8008a08 <SDMMC_CmdWriteSingleBlock+0x154>)
 8008930:	4018      	ands	r0, r3
 8008932:	b358      	cbz	r0, 800898c <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008934:	2b00      	cmp	r3, #0
 8008936:	db2f      	blt.n	8008998 <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008938:	0059      	lsls	r1, r3, #1
 800893a:	d430      	bmi.n	800899e <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800893c:	009a      	lsls	r2, r3, #2
 800893e:	d430      	bmi.n	80089a2 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008940:	00d9      	lsls	r1, r3, #3
 8008942:	d430      	bmi.n	80089a6 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008944:	011a      	lsls	r2, r3, #4
 8008946:	d431      	bmi.n	80089ac <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008948:	0159      	lsls	r1, r3, #5
 800894a:	d432      	bmi.n	80089b2 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800894c:	01da      	lsls	r2, r3, #7
 800894e:	d433      	bmi.n	80089b8 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008950:	0219      	lsls	r1, r3, #8
 8008952:	d434      	bmi.n	80089be <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008954:	025a      	lsls	r2, r3, #9
 8008956:	d435      	bmi.n	80089c4 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008958:	0299      	lsls	r1, r3, #10
 800895a:	d43f      	bmi.n	80089dc <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800895c:	02da      	lsls	r2, r3, #11
 800895e:	d43a      	bmi.n	80089d6 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008960:	0359      	lsls	r1, r3, #13
 8008962:	d435      	bmi.n	80089d0 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008964:	039a      	lsls	r2, r3, #14
 8008966:	d430      	bmi.n	80089ca <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008968:	03d9      	lsls	r1, r3, #15
 800896a:	d440      	bmi.n	80089ee <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800896c:	041a      	lsls	r2, r3, #16
 800896e:	d43b      	bmi.n	80089e8 <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008970:	0459      	lsls	r1, r3, #17
 8008972:	d436      	bmi.n	80089e2 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008974:	049a      	lsls	r2, r3, #18
 8008976:	d407      	bmi.n	8008988 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008978:	f013 0f08 	tst.w	r3, #8
 800897c:	bf0c      	ite	eq
 800897e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008982:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008986:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008988:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800898c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800898e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008990:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008992:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008996:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008998:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800899c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800899e:	2040      	movs	r0, #64	@ 0x40
 80089a0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80089a2:	2080      	movs	r0, #128	@ 0x80
 80089a4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80089a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80089aa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80089ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80089b0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089b2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80089b6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80089bc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089be:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80089c2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80089c8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80089ca:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80089ce:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80089d0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80089d4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80089d6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80089da:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80089dc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80089e0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80089e2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80089e6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80089e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80089ec:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80089ee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80089f2:	4770      	bx	lr
 80089f4:	24000014 	.word	0x24000014
 80089f8:	10624dd3 	.word	0x10624dd3
 80089fc:	fffee0c0 	.word	0xfffee0c0
 8008a00:	00200045 	.word	0x00200045
 8008a04:	002000c5 	.word	0x002000c5
 8008a08:	fdffe008 	.word	0xfdffe008

08008a0c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8008b4c <SDMMC_CmdWriteMultiBlock+0x140>)
{
 8008a0e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a10:	4b4f      	ldr	r3, [pc, #316]	@ (8008b50 <SDMMC_CmdWriteMultiBlock+0x144>)
 8008a12:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8008a14:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a18:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a1c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008a20:	484c      	ldr	r0, [pc, #304]	@ (8008b54 <SDMMC_CmdWriteMultiBlock+0x148>)
 8008a22:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a26:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a28:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a2a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a2e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a30:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a34:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8008a38:	1e53      	subs	r3, r2, #1
 8008a3a:	b14a      	cbz	r2, 8008a50 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008a3c:	4946      	ldr	r1, [pc, #280]	@ (8008b58 <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8008a3e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8008a42:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008a44:	420a      	tst	r2, r1
 8008a46:	d001      	beq.n	8008a4c <SDMMC_CmdWriteMultiBlock+0x40>
 8008a48:	0492      	lsls	r2, r2, #18
 8008a4a:	d504      	bpl.n	8008a56 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8008a4c:	1c58      	adds	r0, r3, #1
 8008a4e:	d1f6      	bne.n	8008a3e <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8008a50:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008a54:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a56:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008a5a:	075b      	lsls	r3, r3, #29
 8008a5c:	d443      	bmi.n	8008ae6 <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a5e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008a62:	07d8      	lsls	r0, r3, #31
 8008a64:	d409      	bmi.n	8008a7a <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a66:	4b3d      	ldr	r3, [pc, #244]	@ (8008b5c <SDMMC_CmdWriteMultiBlock+0x150>)
 8008a68:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008a6c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b19      	cmp	r3, #25
 8008a74:	d005      	beq.n	8008a82 <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a76:	2001      	movs	r0, #1
 8008a78:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a80:	e7f9      	b.n	8008a76 <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8008a82:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a86:	4836      	ldr	r0, [pc, #216]	@ (8008b60 <SDMMC_CmdWriteMultiBlock+0x154>)
 8008a88:	4018      	ands	r0, r3
 8008a8a:	b358      	cbz	r0, 8008ae4 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	db2f      	blt.n	8008af0 <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a90:	0059      	lsls	r1, r3, #1
 8008a92:	d430      	bmi.n	8008af6 <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a94:	009a      	lsls	r2, r3, #2
 8008a96:	d430      	bmi.n	8008afa <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a98:	00d9      	lsls	r1, r3, #3
 8008a9a:	d430      	bmi.n	8008afe <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a9c:	011a      	lsls	r2, r3, #4
 8008a9e:	d431      	bmi.n	8008b04 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008aa0:	0159      	lsls	r1, r3, #5
 8008aa2:	d432      	bmi.n	8008b0a <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008aa4:	01da      	lsls	r2, r3, #7
 8008aa6:	d433      	bmi.n	8008b10 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008aa8:	0219      	lsls	r1, r3, #8
 8008aaa:	d434      	bmi.n	8008b16 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008aac:	025a      	lsls	r2, r3, #9
 8008aae:	d435      	bmi.n	8008b1c <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ab0:	0299      	lsls	r1, r3, #10
 8008ab2:	d43f      	bmi.n	8008b34 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ab4:	02da      	lsls	r2, r3, #11
 8008ab6:	d43a      	bmi.n	8008b2e <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008ab8:	0359      	lsls	r1, r3, #13
 8008aba:	d435      	bmi.n	8008b28 <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008abc:	039a      	lsls	r2, r3, #14
 8008abe:	d430      	bmi.n	8008b22 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008ac0:	03d9      	lsls	r1, r3, #15
 8008ac2:	d440      	bmi.n	8008b46 <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008ac4:	041a      	lsls	r2, r3, #16
 8008ac6:	d43b      	bmi.n	8008b40 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008ac8:	0459      	lsls	r1, r3, #17
 8008aca:	d436      	bmi.n	8008b3a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008acc:	049a      	lsls	r2, r3, #18
 8008ace:	d407      	bmi.n	8008ae0 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008ad0:	f013 0f08 	tst.w	r3, #8
 8008ad4:	bf0c      	ite	eq
 8008ad6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008ada:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008ade:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008ae0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008ae4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ae6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ae8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008aea:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008aee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008af0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008af4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008af6:	2040      	movs	r0, #64	@ 0x40
 8008af8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008afa:	2080      	movs	r0, #128	@ 0x80
 8008afc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008afe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008b02:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008b04:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008b08:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b0a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008b0e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b10:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008b14:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b16:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008b1a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008b20:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b22:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008b26:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b28:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008b2c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8008b2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008b32:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008b38:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b3a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008b3e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b40:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008b44:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b46:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008b4a:	4770      	bx	lr
 8008b4c:	24000014 	.word	0x24000014
 8008b50:	10624dd3 	.word	0x10624dd3
 8008b54:	fffee0c0 	.word	0xfffee0c0
 8008b58:	00200045 	.word	0x00200045
 8008b5c:	002000c5 	.word	0x002000c5
 8008b60:	fdffe008 	.word	0xfdffe008

08008b64 <SDMMC_CmdStopTransfer>:
{
 8008b64:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b66:	4b7a      	ldr	r3, [pc, #488]	@ (8008d50 <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008b68:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b6a:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008b6c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008b70:	4b78      	ldr	r3, [pc, #480]	@ (8008d54 <SDMMC_CmdStopTransfer+0x1f0>)
{
 8008b72:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b74:	4c78      	ldr	r4, [pc, #480]	@ (8008d58 <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 8008b76:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008b78:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b7a:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008b7e:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b80:	4c76      	ldr	r4, [pc, #472]	@ (8008d5c <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008b82:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b86:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008b88:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008b8a:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 8008b8e:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008b90:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008b94:	68cc      	ldr	r4, [r1, #12]
 8008b96:	4023      	ands	r3, r4
 8008b98:	4318      	orrs	r0, r3
 8008b9a:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8008b9c:	b14a      	cbz	r2, 8008bb2 <SDMMC_CmdStopTransfer+0x4e>
 8008b9e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008ba0:	486f      	ldr	r0, [pc, #444]	@ (8008d60 <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 8008ba2:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8008ba4:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008ba6:	4202      	tst	r2, r0
 8008ba8:	d001      	beq.n	8008bae <SDMMC_CmdStopTransfer+0x4a>
 8008baa:	0492      	lsls	r2, r2, #18
 8008bac:	d509      	bpl.n	8008bc2 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8008bae:	1c5c      	adds	r4, r3, #1
 8008bb0:	d1f7      	bne.n	8008ba2 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008bb2:	68cb      	ldr	r3, [r1, #12]
 8008bb4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bbc:	60cb      	str	r3, [r1, #12]
}
 8008bbe:	bc30      	pop	{r4, r5}
 8008bc0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bc2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008bc4:	075b      	lsls	r3, r3, #29
 8008bc6:	d44d      	bmi.n	8008c64 <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008bc8:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8008bca:	f010 0001 	ands.w	r0, r0, #1
 8008bce:	d13a      	bne.n	8008c46 <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bd0:	4b64      	ldr	r3, [pc, #400]	@ (8008d64 <SDMMC_CmdStopTransfer+0x200>)
 8008bd2:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008bd4:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b0c      	cmp	r3, #12
 8008bda:	d136      	bne.n	8008c4a <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 8008bdc:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008bde:	4a62      	ldr	r2, [pc, #392]	@ (8008d68 <SDMMC_CmdStopTransfer+0x204>)
 8008be0:	401a      	ands	r2, r3
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d038      	beq.n	8008c58 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	db36      	blt.n	8008c58 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008bea:	005d      	lsls	r5, r3, #1
 8008bec:	d441      	bmi.n	8008c72 <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008bee:	009c      	lsls	r4, r3, #2
 8008bf0:	d445      	bmi.n	8008c7e <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008bf2:	00d8      	lsls	r0, r3, #3
 8008bf4:	d449      	bmi.n	8008c8a <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008bf6:	011a      	lsls	r2, r3, #4
 8008bf8:	d44e      	bmi.n	8008c98 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008bfa:	015d      	lsls	r5, r3, #5
 8008bfc:	d453      	bmi.n	8008ca6 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008bfe:	01dc      	lsls	r4, r3, #7
 8008c00:	d45f      	bmi.n	8008cc2 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008c02:	0218      	lsls	r0, r3, #8
 8008c04:	d456      	bmi.n	8008cb4 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008c06:	025a      	lsls	r2, r3, #9
 8008c08:	d469      	bmi.n	8008cde <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008c0a:	029d      	lsls	r5, r3, #10
 8008c0c:	d460      	bmi.n	8008cd0 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008c0e:	02dc      	lsls	r4, r3, #11
 8008c10:	d47a      	bmi.n	8008d08 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008c12:	0358      	lsls	r0, r3, #13
 8008c14:	d471      	bmi.n	8008cfa <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008c16:	039a      	lsls	r2, r3, #14
 8008c18:	d468      	bmi.n	8008cec <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008c1a:	03dd      	lsls	r5, r3, #15
 8008c1c:	f100 8090 	bmi.w	8008d40 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008c20:	041c      	lsls	r4, r3, #16
 8008c22:	d47f      	bmi.n	8008d24 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008c24:	0458      	lsls	r0, r3, #17
 8008c26:	d476      	bmi.n	8008d16 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c28:	049a      	lsls	r2, r3, #18
 8008c2a:	f100 8082 	bmi.w	8008d32 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c2e:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c32:	68cb      	ldr	r3, [r1, #12]
 8008c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c38:	bf14      	ite	ne
 8008c3a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c3e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c42:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c44:	e7bb      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c46:	2301      	movs	r3, #1
 8008c48:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c4a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c4c:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 8008c52:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c54:	60cb      	str	r3, [r1, #12]
}
 8008c56:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c58:	68cb      	ldr	r3, [r1, #12]
 8008c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 8008c5e:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c60:	60cb      	str	r3, [r1, #12]
}
 8008c62:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c64:	2004      	movs	r0, #4
 8008c66:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c68:	68cb      	ldr	r3, [r1, #12]
 8008c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c6e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c70:	e7a5      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c72:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c74:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c7c:	e79f      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c7e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c80:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c86:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c88:	e799      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c8a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008c8c:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c94:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c96:	e792      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c98:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008c9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ca2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008ca4:	e78b      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008ca6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ca8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cb0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cb2:	e784      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cb4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008cb6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cbe:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cc0:	e77d      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cc2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008cc4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ccc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cce:	e776      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cd0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008cd2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cda:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cdc:	e76f      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cde:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ce0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ce8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cea:	e768      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cec:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008cee:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cf8:	e761      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cfa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008cfc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d04:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d06:	e75a      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d08:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 8008d0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d12:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d14:	e753      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d16:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d18:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d20:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d22:	e74c      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d24:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d26:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d2e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d30:	e745      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d32:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8008d34:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d3c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d3e:	e73e      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d40:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d42:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d4a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008d4c:	e737      	b.n	8008bbe <SDMMC_CmdStopTransfer+0x5a>
 8008d4e:	bf00      	nop
 8008d50:	24000014 	.word	0x24000014
 8008d54:	fffee0c0 	.word	0xfffee0c0
 8008d58:	10624dd3 	.word	0x10624dd3
 8008d5c:	05f5e100 	.word	0x05f5e100
 8008d60:	00200045 	.word	0x00200045
 8008d64:	002000c5 	.word	0x002000c5
 8008d68:	fdffe008 	.word	0xfdffe008

08008d6c <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008d6c:	4a4f      	ldr	r2, [pc, #316]	@ (8008eac <SDMMC_CmdSelDesel+0x140>)
{
 8008d6e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008d70:	4b4f      	ldr	r3, [pc, #316]	@ (8008eb0 <SDMMC_CmdSelDesel+0x144>)
 8008d72:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8008d74:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008d78:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d7c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008d80:	484c      	ldr	r0, [pc, #304]	@ (8008eb4 <SDMMC_CmdSelDesel+0x148>)
 8008d82:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008d86:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d88:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008d8a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d8e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008d90:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d94:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8008d98:	1e53      	subs	r3, r2, #1
 8008d9a:	b14a      	cbz	r2, 8008db0 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008d9c:	4946      	ldr	r1, [pc, #280]	@ (8008eb8 <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 8008d9e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8008da2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008da4:	420a      	tst	r2, r1
 8008da6:	d001      	beq.n	8008dac <SDMMC_CmdSelDesel+0x40>
 8008da8:	0492      	lsls	r2, r2, #18
 8008daa:	d504      	bpl.n	8008db6 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 8008dac:	1c58      	adds	r0, r3, #1
 8008dae:	d1f6      	bne.n	8008d9e <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8008db0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008db4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008db6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008dba:	075b      	lsls	r3, r3, #29
 8008dbc:	d443      	bmi.n	8008e46 <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008dbe:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008dc2:	07d8      	lsls	r0, r3, #31
 8008dc4:	d409      	bmi.n	8008dda <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8008ebc <SDMMC_CmdSelDesel+0x150>)
 8008dc8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008dcc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b07      	cmp	r3, #7
 8008dd4:	d005      	beq.n	8008de2 <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008de0:	e7f9      	b.n	8008dd6 <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 8008de2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008de6:	4836      	ldr	r0, [pc, #216]	@ (8008ec0 <SDMMC_CmdSelDesel+0x154>)
 8008de8:	4018      	ands	r0, r3
 8008dea:	b358      	cbz	r0, 8008e44 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	db2f      	blt.n	8008e50 <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008df0:	0059      	lsls	r1, r3, #1
 8008df2:	d430      	bmi.n	8008e56 <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008df4:	009a      	lsls	r2, r3, #2
 8008df6:	d430      	bmi.n	8008e5a <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008df8:	00d9      	lsls	r1, r3, #3
 8008dfa:	d430      	bmi.n	8008e5e <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008dfc:	011a      	lsls	r2, r3, #4
 8008dfe:	d431      	bmi.n	8008e64 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008e00:	0159      	lsls	r1, r3, #5
 8008e02:	d432      	bmi.n	8008e6a <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008e04:	01da      	lsls	r2, r3, #7
 8008e06:	d433      	bmi.n	8008e70 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008e08:	0219      	lsls	r1, r3, #8
 8008e0a:	d434      	bmi.n	8008e76 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008e0c:	025a      	lsls	r2, r3, #9
 8008e0e:	d435      	bmi.n	8008e7c <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008e10:	0299      	lsls	r1, r3, #10
 8008e12:	d43f      	bmi.n	8008e94 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008e14:	02da      	lsls	r2, r3, #11
 8008e16:	d43a      	bmi.n	8008e8e <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008e18:	0359      	lsls	r1, r3, #13
 8008e1a:	d435      	bmi.n	8008e88 <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008e1c:	039a      	lsls	r2, r3, #14
 8008e1e:	d430      	bmi.n	8008e82 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008e20:	03d9      	lsls	r1, r3, #15
 8008e22:	d440      	bmi.n	8008ea6 <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008e24:	041a      	lsls	r2, r3, #16
 8008e26:	d43b      	bmi.n	8008ea0 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008e28:	0459      	lsls	r1, r3, #17
 8008e2a:	d436      	bmi.n	8008e9a <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008e2c:	049a      	lsls	r2, r3, #18
 8008e2e:	d407      	bmi.n	8008e40 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008e30:	f013 0f08 	tst.w	r3, #8
 8008e34:	bf0c      	ite	eq
 8008e36:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008e3a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008e3e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008e40:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008e44:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e46:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e48:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e4a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e4e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e50:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008e54:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008e56:	2040      	movs	r0, #64	@ 0x40
 8008e58:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008e5a:	2080      	movs	r0, #128	@ 0x80
 8008e5c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008e5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008e62:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008e64:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008e68:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008e6a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008e6e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008e70:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008e74:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e76:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008e7a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008e80:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008e82:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008e86:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008e88:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008e8c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8008e8e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008e92:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008e94:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008e98:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008e9a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008e9e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008ea0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008ea4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008ea6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008eaa:	4770      	bx	lr
 8008eac:	24000014 	.word	0x24000014
 8008eb0:	10624dd3 	.word	0x10624dd3
 8008eb4:	fffee0c0 	.word	0xfffee0c0
 8008eb8:	00200045 	.word	0x00200045
 8008ebc:	002000c5 	.word	0x002000c5
 8008ec0:	fdffe008 	.word	0xfdffe008

08008ec4 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ec4:	4b11      	ldr	r3, [pc, #68]	@ (8008f0c <SDMMC_CmdGoIdleState+0x48>)
{
 8008ec6:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ec8:	4a11      	ldr	r2, [pc, #68]	@ (8008f10 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008eca:	681b      	ldr	r3, [r3, #0]
{
 8008ecc:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ece:	4c11      	ldr	r4, [pc, #68]	@ (8008f14 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8008ed0:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ed2:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 8008ed6:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ed8:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008eda:	0a5b      	lsrs	r3, r3, #9
 8008edc:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ee0:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008ee2:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ee6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008eea:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008eec:	e002      	b.n	8008ef4 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008eee:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8008ef0:	0612      	lsls	r2, r2, #24
 8008ef2:	d405      	bmi.n	8008f00 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	d2fa      	bcs.n	8008eee <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8008ef8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8008efc:	bc30      	pop	{r4, r5}
 8008efe:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 8008f02:	2000      	movs	r0, #0
}
 8008f04:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f06:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	24000014 	.word	0x24000014
 8008f10:	fffee0c0 	.word	0xfffee0c0
 8008f14:	10624dd3 	.word	0x10624dd3
 8008f18:	002000c5 	.word	0x002000c5

08008f1c <SDMMC_CmdOperCond>:
{
 8008f1c:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8008f90 <SDMMC_CmdOperCond+0x74>)
 8008f20:	4b1c      	ldr	r3, [pc, #112]	@ (8008f94 <SDMMC_CmdOperCond+0x78>)
 8008f22:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008f24:	481c      	ldr	r0, [pc, #112]	@ (8008f98 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008f26:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008f2a:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 8008f2e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8008f30:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008f34:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8008f36:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008f38:	68cc      	ldr	r4, [r1, #12]
 8008f3a:	4020      	ands	r0, r4
 8008f3c:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008f3e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8008f42:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008f46:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8008f48:	b14a      	cbz	r2, 8008f5e <SDMMC_CmdOperCond+0x42>
 8008f4a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8008f4c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8008f4e:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f50:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8008f54:	d001      	beq.n	8008f5a <SDMMC_CmdOperCond+0x3e>
 8008f56:	0490      	lsls	r0, r2, #18
 8008f58:	d506      	bpl.n	8008f68 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8008f5a:	1c5c      	adds	r4, r3, #1
 8008f5c:	d1f6      	bne.n	8008f4c <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8008f5e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8008f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f66:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f68:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008f6a:	075a      	lsls	r2, r3, #29
 8008f6c:	d40c      	bmi.n	8008f88 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f6e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8008f70:	f010 0001 	ands.w	r0, r0, #1
 8008f74:	d105      	bne.n	8008f82 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008f76:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008f78:	065b      	lsls	r3, r3, #25
 8008f7a:	d5f2      	bpl.n	8008f62 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008f7c:	2340      	movs	r3, #64	@ 0x40
 8008f7e:	638b      	str	r3, [r1, #56]	@ 0x38
 8008f80:	e7ef      	b.n	8008f62 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008f82:	2301      	movs	r3, #1
 8008f84:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f86:	e7ec      	b.n	8008f62 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f88:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f8a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f8c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f8e:	e7e8      	b.n	8008f62 <SDMMC_CmdOperCond+0x46>
 8008f90:	24000014 	.word	0x24000014
 8008f94:	10624dd3 	.word	0x10624dd3
 8008f98:	fffee0c0 	.word	0xfffee0c0

08008f9c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80090dc <SDMMC_CmdAppCommand+0x140>)
{
 8008f9e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80090e0 <SDMMC_CmdAppCommand+0x144>)
 8008fa2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8008fa4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008fa8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fac:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008fb0:	484c      	ldr	r0, [pc, #304]	@ (80090e4 <SDMMC_CmdAppCommand+0x148>)
 8008fb2:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008fb6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fb8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008fba:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fbe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008fc0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fc4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8008fc8:	1e53      	subs	r3, r2, #1
 8008fca:	b14a      	cbz	r2, 8008fe0 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008fcc:	4946      	ldr	r1, [pc, #280]	@ (80090e8 <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 8008fce:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8008fd2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008fd4:	420a      	tst	r2, r1
 8008fd6:	d001      	beq.n	8008fdc <SDMMC_CmdAppCommand+0x40>
 8008fd8:	0492      	lsls	r2, r2, #18
 8008fda:	d504      	bpl.n	8008fe6 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 8008fdc:	1c58      	adds	r0, r3, #1
 8008fde:	d1f6      	bne.n	8008fce <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8008fe0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008fe4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fe6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008fea:	075b      	lsls	r3, r3, #29
 8008fec:	d443      	bmi.n	8009076 <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fee:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8008ff2:	07d8      	lsls	r0, r3, #31
 8008ff4:	d409      	bmi.n	800900a <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80090ec <SDMMC_CmdAppCommand+0x150>)
 8008ff8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ffc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b37      	cmp	r3, #55	@ 0x37
 8009004:	d005      	beq.n	8009012 <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009006:	2001      	movs	r0, #1
 8009008:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800900a:	2301      	movs	r3, #1
 800900c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009010:	e7f9      	b.n	8009006 <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009012:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009016:	4836      	ldr	r0, [pc, #216]	@ (80090f0 <SDMMC_CmdAppCommand+0x154>)
 8009018:	4018      	ands	r0, r3
 800901a:	b358      	cbz	r0, 8009074 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800901c:	2b00      	cmp	r3, #0
 800901e:	db2f      	blt.n	8009080 <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009020:	0059      	lsls	r1, r3, #1
 8009022:	d430      	bmi.n	8009086 <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009024:	009a      	lsls	r2, r3, #2
 8009026:	d430      	bmi.n	800908a <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009028:	00d9      	lsls	r1, r3, #3
 800902a:	d430      	bmi.n	800908e <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800902c:	011a      	lsls	r2, r3, #4
 800902e:	d431      	bmi.n	8009094 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009030:	0159      	lsls	r1, r3, #5
 8009032:	d432      	bmi.n	800909a <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009034:	01da      	lsls	r2, r3, #7
 8009036:	d433      	bmi.n	80090a0 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009038:	0219      	lsls	r1, r3, #8
 800903a:	d434      	bmi.n	80090a6 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800903c:	025a      	lsls	r2, r3, #9
 800903e:	d435      	bmi.n	80090ac <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009040:	0299      	lsls	r1, r3, #10
 8009042:	d43f      	bmi.n	80090c4 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009044:	02da      	lsls	r2, r3, #11
 8009046:	d43a      	bmi.n	80090be <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009048:	0359      	lsls	r1, r3, #13
 800904a:	d435      	bmi.n	80090b8 <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800904c:	039a      	lsls	r2, r3, #14
 800904e:	d430      	bmi.n	80090b2 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009050:	03d9      	lsls	r1, r3, #15
 8009052:	d440      	bmi.n	80090d6 <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009054:	041a      	lsls	r2, r3, #16
 8009056:	d43b      	bmi.n	80090d0 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009058:	0459      	lsls	r1, r3, #17
 800905a:	d436      	bmi.n	80090ca <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800905c:	049a      	lsls	r2, r3, #18
 800905e:	d407      	bmi.n	8009070 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009060:	f013 0f08 	tst.w	r3, #8
 8009064:	bf0c      	ite	eq
 8009066:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800906a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800906e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009070:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009074:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009076:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009078:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800907a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800907e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009080:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009084:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009086:	2040      	movs	r0, #64	@ 0x40
 8009088:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800908a:	2080      	movs	r0, #128	@ 0x80
 800908c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800908e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009092:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009094:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009098:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800909a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800909e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80090a0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80090a4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090a6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80090aa:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80090b0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090b2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80090b6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090b8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80090bc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80090be:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80090c2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090c4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80090c8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80090ca:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80090ce:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80090d4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090d6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80090da:	4770      	bx	lr
 80090dc:	24000014 	.word	0x24000014
 80090e0:	10624dd3 	.word	0x10624dd3
 80090e4:	fffee0c0 	.word	0xfffee0c0
 80090e8:	00200045 	.word	0x00200045
 80090ec:	002000c5 	.word	0x002000c5
 80090f0:	fdffe008 	.word	0xfdffe008

080090f4 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80090f4:	4a19      	ldr	r2, [pc, #100]	@ (800915c <SDMMC_CmdAppOperCommand+0x68>)
{
 80090f6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80090f8:	4b19      	ldr	r3, [pc, #100]	@ (8009160 <SDMMC_CmdAppOperCommand+0x6c>)
 80090fa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80090fc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009100:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009104:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009108:	4816      	ldr	r0, [pc, #88]	@ (8009164 <SDMMC_CmdAppOperCommand+0x70>)
 800910a:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800910e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009110:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009112:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009116:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009118:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800911c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009120:	1e53      	subs	r3, r2, #1
 8009122:	b14a      	cbz	r2, 8009138 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 8009124:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009128:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800912a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800912e:	d001      	beq.n	8009134 <SDMMC_CmdAppOperCommand+0x40>
 8009130:	0492      	lsls	r2, r2, #18
 8009132:	d504      	bpl.n	800913e <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 8009134:	1c59      	adds	r1, r3, #1
 8009136:	d1f5      	bne.n	8009124 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009138:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800913c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800913e:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8009142:	f010 0004 	ands.w	r0, r0, #4
 8009146:	d103      	bne.n	8009150 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009148:	4b07      	ldr	r3, [pc, #28]	@ (8009168 <SDMMC_CmdAppOperCommand+0x74>)
 800914a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800914e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009150:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009152:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009154:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	24000014 	.word	0x24000014
 8009160:	10624dd3 	.word	0x10624dd3
 8009164:	fffee0c0 	.word	0xfffee0c0
 8009168:	002000c5 	.word	0x002000c5

0800916c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800916c:	4a4f      	ldr	r2, [pc, #316]	@ (80092ac <SDMMC_CmdBusWidth+0x140>)
{
 800916e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009170:	4b4f      	ldr	r3, [pc, #316]	@ (80092b0 <SDMMC_CmdBusWidth+0x144>)
 8009172:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009174:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009178:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800917c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009180:	484c      	ldr	r0, [pc, #304]	@ (80092b4 <SDMMC_CmdBusWidth+0x148>)
 8009182:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009186:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009188:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800918a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800918e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009190:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009194:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009198:	1e53      	subs	r3, r2, #1
 800919a:	b14a      	cbz	r2, 80091b0 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800919c:	4946      	ldr	r1, [pc, #280]	@ (80092b8 <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800919e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80091a2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80091a4:	420a      	tst	r2, r1
 80091a6:	d001      	beq.n	80091ac <SDMMC_CmdBusWidth+0x40>
 80091a8:	0492      	lsls	r2, r2, #18
 80091aa:	d504      	bpl.n	80091b6 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 80091ac:	1c58      	adds	r0, r3, #1
 80091ae:	d1f6      	bne.n	800919e <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80091b0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80091b4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80091ba:	075b      	lsls	r3, r3, #29
 80091bc:	d443      	bmi.n	8009246 <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091be:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80091c2:	07d8      	lsls	r0, r3, #31
 80091c4:	d409      	bmi.n	80091da <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091c6:	4b3d      	ldr	r3, [pc, #244]	@ (80092bc <SDMMC_CmdBusWidth+0x150>)
 80091c8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80091cc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d005      	beq.n	80091e2 <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091d6:	2001      	movs	r0, #1
 80091d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091da:	2301      	movs	r3, #1
 80091dc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091e0:	e7f9      	b.n	80091d6 <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 80091e2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80091e6:	4836      	ldr	r0, [pc, #216]	@ (80092c0 <SDMMC_CmdBusWidth+0x154>)
 80091e8:	4018      	ands	r0, r3
 80091ea:	b358      	cbz	r0, 8009244 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	db2f      	blt.n	8009250 <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80091f0:	0059      	lsls	r1, r3, #1
 80091f2:	d430      	bmi.n	8009256 <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80091f4:	009a      	lsls	r2, r3, #2
 80091f6:	d430      	bmi.n	800925a <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80091f8:	00d9      	lsls	r1, r3, #3
 80091fa:	d430      	bmi.n	800925e <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80091fc:	011a      	lsls	r2, r3, #4
 80091fe:	d431      	bmi.n	8009264 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009200:	0159      	lsls	r1, r3, #5
 8009202:	d432      	bmi.n	800926a <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009204:	01da      	lsls	r2, r3, #7
 8009206:	d433      	bmi.n	8009270 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009208:	0219      	lsls	r1, r3, #8
 800920a:	d434      	bmi.n	8009276 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800920c:	025a      	lsls	r2, r3, #9
 800920e:	d435      	bmi.n	800927c <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009210:	0299      	lsls	r1, r3, #10
 8009212:	d43f      	bmi.n	8009294 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009214:	02da      	lsls	r2, r3, #11
 8009216:	d43a      	bmi.n	800928e <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009218:	0359      	lsls	r1, r3, #13
 800921a:	d435      	bmi.n	8009288 <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800921c:	039a      	lsls	r2, r3, #14
 800921e:	d430      	bmi.n	8009282 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009220:	03d9      	lsls	r1, r3, #15
 8009222:	d440      	bmi.n	80092a6 <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009224:	041a      	lsls	r2, r3, #16
 8009226:	d43b      	bmi.n	80092a0 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009228:	0459      	lsls	r1, r3, #17
 800922a:	d436      	bmi.n	800929a <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800922c:	049a      	lsls	r2, r3, #18
 800922e:	d407      	bmi.n	8009240 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009230:	f013 0f08 	tst.w	r3, #8
 8009234:	bf0c      	ite	eq
 8009236:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800923a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800923e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009240:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009244:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009246:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009248:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800924a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800924e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009250:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009254:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009256:	2040      	movs	r0, #64	@ 0x40
 8009258:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800925a:	2080      	movs	r0, #128	@ 0x80
 800925c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800925e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009262:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009264:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009268:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800926a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800926e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009270:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009274:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009276:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800927a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800927c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009280:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009282:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009286:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009288:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800928c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800928e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009292:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009294:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009298:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800929a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800929e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80092a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80092a4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80092a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80092aa:	4770      	bx	lr
 80092ac:	24000014 	.word	0x24000014
 80092b0:	10624dd3 	.word	0x10624dd3
 80092b4:	fffee0c0 	.word	0xfffee0c0
 80092b8:	00200045 	.word	0x00200045
 80092bc:	002000c5 	.word	0x002000c5
 80092c0:	fdffe008 	.word	0xfdffe008

080092c4 <SDMMC_CmdSendSCR>:
{
 80092c4:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80092c6:	4a4c      	ldr	r2, [pc, #304]	@ (80093f8 <SDMMC_CmdSendSCR+0x134>)
 80092c8:	4b4c      	ldr	r3, [pc, #304]	@ (80093fc <SDMMC_CmdSendSCR+0x138>)
 80092ca:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80092cc:	484c      	ldr	r0, [pc, #304]	@ (8009400 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80092ce:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80092d2:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 80092d6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 80092d8:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80092da:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 80092dc:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80092de:	68cc      	ldr	r4, [r1, #12]
 80092e0:	4020      	ands	r0, r4
 80092e2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80092e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80092e8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80092ec:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 80092ee:	b14a      	cbz	r2, 8009304 <SDMMC_CmdSendSCR+0x40>
 80092f0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80092f2:	4844      	ldr	r0, [pc, #272]	@ (8009404 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 80092f4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 80092f6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092f8:	4202      	tst	r2, r0
 80092fa:	d001      	beq.n	8009300 <SDMMC_CmdSendSCR+0x3c>
 80092fc:	0492      	lsls	r2, r2, #18
 80092fe:	d506      	bpl.n	800930e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 8009300:	1c5c      	adds	r4, r3, #1
 8009302:	d1f7      	bne.n	80092f4 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009304:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800930c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800930e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009310:	075c      	lsls	r4, r3, #29
 8009312:	d43c      	bmi.n	800938e <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009314:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009316:	07d8      	lsls	r0, r3, #31
 8009318:	d407      	bmi.n	800932a <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800931a:	4b3b      	ldr	r3, [pc, #236]	@ (8009408 <SDMMC_CmdSendSCR+0x144>)
 800931c:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800931e:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b33      	cmp	r3, #51	@ 0x33
 8009324:	d004      	beq.n	8009330 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009326:	2001      	movs	r0, #1
 8009328:	e7ee      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800932a:	2301      	movs	r3, #1
 800932c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800932e:	e7fa      	b.n	8009326 <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 8009330:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009332:	4836      	ldr	r0, [pc, #216]	@ (800940c <SDMMC_CmdSendSCR+0x148>)
 8009334:	4018      	ands	r0, r3
 8009336:	2800      	cmp	r0, #0
 8009338:	d0e6      	beq.n	8009308 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800933a:	2b00      	cmp	r3, #0
 800933c:	db2b      	blt.n	8009396 <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800933e:	005a      	lsls	r2, r3, #1
 8009340:	d42c      	bmi.n	800939c <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009342:	009c      	lsls	r4, r3, #2
 8009344:	d42c      	bmi.n	80093a0 <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009346:	00d9      	lsls	r1, r3, #3
 8009348:	d42c      	bmi.n	80093a4 <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800934a:	011a      	lsls	r2, r3, #4
 800934c:	d42d      	bmi.n	80093aa <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800934e:	015c      	lsls	r4, r3, #5
 8009350:	d42e      	bmi.n	80093b0 <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009352:	01d9      	lsls	r1, r3, #7
 8009354:	d42f      	bmi.n	80093b6 <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009356:	021a      	lsls	r2, r3, #8
 8009358:	d430      	bmi.n	80093bc <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800935a:	025c      	lsls	r4, r3, #9
 800935c:	d431      	bmi.n	80093c2 <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800935e:	0299      	lsls	r1, r3, #10
 8009360:	d43b      	bmi.n	80093da <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009362:	02da      	lsls	r2, r3, #11
 8009364:	d436      	bmi.n	80093d4 <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009366:	035c      	lsls	r4, r3, #13
 8009368:	d431      	bmi.n	80093ce <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800936a:	0399      	lsls	r1, r3, #14
 800936c:	d42c      	bmi.n	80093c8 <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800936e:	03da      	lsls	r2, r3, #15
 8009370:	d43f      	bmi.n	80093f2 <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009372:	041c      	lsls	r4, r3, #16
 8009374:	d43a      	bmi.n	80093ec <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009376:	0459      	lsls	r1, r3, #17
 8009378:	d435      	bmi.n	80093e6 <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800937a:	049a      	lsls	r2, r3, #18
 800937c:	d430      	bmi.n	80093e0 <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800937e:	f013 0f08 	tst.w	r3, #8
 8009382:	bf0c      	ite	eq
 8009384:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009388:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800938c:	e7bc      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800938e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009390:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009392:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009394:	e7b8      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009396:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800939a:	e7b5      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800939c:	2040      	movs	r0, #64	@ 0x40
 800939e:	e7b3      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093a0:	2080      	movs	r0, #128	@ 0x80
 80093a2:	e7b1      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80093a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80093a8:	e7ae      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80093aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80093ae:	e7ab      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80093b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80093b4:	e7a8      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093b6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80093ba:	e7a5      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80093c0:	e7a2      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093c2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80093c6:	e79f      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80093c8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80093cc:	e79c      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093ce:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80093d2:	e799      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 80093d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80093d8:	e796      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80093da:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80093de:	e793      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 80093e0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80093e4:	e790      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093e6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80093ea:	e78d      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80093f0:	e78a      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093f2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80093f6:	e787      	b.n	8009308 <SDMMC_CmdSendSCR+0x44>
 80093f8:	24000014 	.word	0x24000014
 80093fc:	10624dd3 	.word	0x10624dd3
 8009400:	fffee0c0 	.word	0xfffee0c0
 8009404:	00200045 	.word	0x00200045
 8009408:	002000c5 	.word	0x002000c5
 800940c:	fdffe008 	.word	0xfdffe008

08009410 <SDMMC_CmdSendCID>:
{
 8009410:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009412:	4a1a      	ldr	r2, [pc, #104]	@ (800947c <SDMMC_CmdSendCID+0x6c>)
 8009414:	4b1a      	ldr	r3, [pc, #104]	@ (8009480 <SDMMC_CmdSendCID+0x70>)
 8009416:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009418:	481a      	ldr	r0, [pc, #104]	@ (8009484 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800941a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800941e:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 8009422:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8009424:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009426:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8009428:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800942a:	68cc      	ldr	r4, [r1, #12]
 800942c:	4020      	ands	r0, r4
 800942e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009430:	f241 3088 	movw	r0, #5000	@ 0x1388
 8009434:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009438:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800943a:	b14a      	cbz	r2, 8009450 <SDMMC_CmdSendCID+0x40>
 800943c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800943e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8009440:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009442:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8009446:	d001      	beq.n	800944c <SDMMC_CmdSendCID+0x3c>
 8009448:	0492      	lsls	r2, r2, #18
 800944a:	d506      	bpl.n	800945a <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800944c:	1c58      	adds	r0, r3, #1
 800944e:	d1f6      	bne.n	800943e <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8009450:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009458:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800945a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800945c:	075b      	lsls	r3, r3, #29
 800945e:	d409      	bmi.n	8009474 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009460:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 8009462:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009466:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800946a:	bf14      	ite	ne
 800946c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800946e:	4b06      	ldreq	r3, [pc, #24]	@ (8009488 <SDMMC_CmdSendCID+0x78>)
 8009470:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8009472:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009474:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009476:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009478:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800947a:	e7eb      	b.n	8009454 <SDMMC_CmdSendCID+0x44>
 800947c:	24000014 	.word	0x24000014
 8009480:	10624dd3 	.word	0x10624dd3
 8009484:	fffee0c0 	.word	0xfffee0c0
 8009488:	002000c5 	.word	0x002000c5

0800948c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800948c:	4a1b      	ldr	r2, [pc, #108]	@ (80094fc <SDMMC_CmdSendCSD+0x70>)
{
 800948e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009490:	4b1b      	ldr	r3, [pc, #108]	@ (8009500 <SDMMC_CmdSendCSD+0x74>)
 8009492:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009494:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009498:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800949c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80094a0:	4818      	ldr	r0, [pc, #96]	@ (8009504 <SDMMC_CmdSendCSD+0x78>)
 80094a2:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80094a6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094a8:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80094aa:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094ae:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80094b0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094b4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80094b8:	1e53      	subs	r3, r2, #1
 80094ba:	b14a      	cbz	r2, 80094d0 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 80094bc:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80094c0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80094c6:	d001      	beq.n	80094cc <SDMMC_CmdSendCSD+0x40>
 80094c8:	0492      	lsls	r2, r2, #18
 80094ca:	d504      	bpl.n	80094d6 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 80094cc:	1c59      	adds	r1, r3, #1
 80094ce:	d1f5      	bne.n	80094bc <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80094d0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80094d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094d6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80094da:	075b      	lsls	r3, r3, #29
 80094dc:	d409      	bmi.n	80094f2 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094de:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 80094e2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094e6:	bf14      	ite	ne
 80094e8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094ea:	4b07      	ldreq	r3, [pc, #28]	@ (8009508 <SDMMC_CmdSendCSD+0x7c>)
 80094ec:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80094f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094f2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094f4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094f6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094fa:	4770      	bx	lr
 80094fc:	24000014 	.word	0x24000014
 8009500:	10624dd3 	.word	0x10624dd3
 8009504:	fffee0c0 	.word	0xfffee0c0
 8009508:	002000c5 	.word	0x002000c5

0800950c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800950c:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800950e:	4a2b      	ldr	r2, [pc, #172]	@ (80095bc <SDMMC_CmdSetRelAdd+0xb0>)
{
 8009510:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009512:	6812      	ldr	r2, [r2, #0]
{
 8009514:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8009516:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009518:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800951a:	4829      	ldr	r0, [pc, #164]	@ (80095c0 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800951c:	4c29      	ldr	r4, [pc, #164]	@ (80095c4 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800951e:	fba0 0202 	umull	r0, r2, r0, r2
 8009522:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009526:	401c      	ands	r4, r3
 8009528:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800952c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800952e:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009530:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009534:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009538:	b152      	cbz	r2, 8009550 <SDMMC_CmdSetRelAdd+0x44>
 800953a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800953c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009540:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009542:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8009546:	d001      	beq.n	800954c <SDMMC_CmdSetRelAdd+0x40>
 8009548:	0492      	lsls	r2, r2, #18
 800954a:	d506      	bpl.n	800955a <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800954c:	1c58      	adds	r0, r3, #1
 800954e:	d1f5      	bne.n	800953c <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009550:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009558:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800955a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800955e:	075c      	lsls	r4, r3, #29
 8009560:	d420      	bmi.n	80095a4 <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009562:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009566:	07d8      	lsls	r0, r3, #31
 8009568:	d406      	bmi.n	8009578 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800956a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b03      	cmp	r3, #3
 8009572:	d005      	beq.n	8009580 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009574:	2001      	movs	r0, #1
 8009576:	e7ed      	b.n	8009554 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009578:	2301      	movs	r3, #1
 800957a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957e:	e7f9      	b.n	8009574 <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009580:	4b11      	ldr	r3, [pc, #68]	@ (80095c8 <SDMMC_CmdSetRelAdd+0xbc>)
 8009582:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8009586:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800958a:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800958e:	d011      	beq.n	80095b4 <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009590:	045a      	lsls	r2, r3, #17
 8009592:	d40c      	bmi.n	80095ae <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009594:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009598:	bf0c      	ite	eq
 800959a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800959e:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 80095a2:	e7d7      	b.n	8009554 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095a4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095a6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095a8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095ac:	e7d2      	b.n	8009554 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80095b2:	e7cf      	b.n	8009554 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 80095b4:	0c1b      	lsrs	r3, r3, #16
 80095b6:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 80095b8:	e7cc      	b.n	8009554 <SDMMC_CmdSetRelAdd+0x48>
 80095ba:	bf00      	nop
 80095bc:	24000014 	.word	0x24000014
 80095c0:	10624dd3 	.word	0x10624dd3
 80095c4:	fffee0c0 	.word	0xfffee0c0
 80095c8:	002000c5 	.word	0x002000c5

080095cc <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095cc:	4a4f      	ldr	r2, [pc, #316]	@ (800970c <SDMMC_CmdSendStatus+0x140>)
{
 80095ce:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095d0:	4b4f      	ldr	r3, [pc, #316]	@ (8009710 <SDMMC_CmdSendStatus+0x144>)
 80095d2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80095d4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095d8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80095dc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80095e0:	484c      	ldr	r0, [pc, #304]	@ (8009714 <SDMMC_CmdSendStatus+0x148>)
 80095e2:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095e6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80095e8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095ea:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80095ee:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095f0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80095f4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80095f8:	1e53      	subs	r3, r2, #1
 80095fa:	b14a      	cbz	r2, 8009610 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80095fc:	4946      	ldr	r1, [pc, #280]	@ (8009718 <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 80095fe:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009602:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009604:	420a      	tst	r2, r1
 8009606:	d001      	beq.n	800960c <SDMMC_CmdSendStatus+0x40>
 8009608:	0492      	lsls	r2, r2, #18
 800960a:	d504      	bpl.n	8009616 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800960c:	1c58      	adds	r0, r3, #1
 800960e:	d1f6      	bne.n	80095fe <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009610:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009614:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009616:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800961a:	075b      	lsls	r3, r3, #29
 800961c:	d443      	bmi.n	80096a6 <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800961e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009622:	07d8      	lsls	r0, r3, #31
 8009624:	d409      	bmi.n	800963a <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009626:	4b3d      	ldr	r3, [pc, #244]	@ (800971c <SDMMC_CmdSendStatus+0x150>)
 8009628:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800962c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b0d      	cmp	r3, #13
 8009634:	d005      	beq.n	8009642 <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009636:	2001      	movs	r0, #1
 8009638:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800963a:	2301      	movs	r3, #1
 800963c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009640:	e7f9      	b.n	8009636 <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009642:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009646:	4836      	ldr	r0, [pc, #216]	@ (8009720 <SDMMC_CmdSendStatus+0x154>)
 8009648:	4018      	ands	r0, r3
 800964a:	b358      	cbz	r0, 80096a4 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800964c:	2b00      	cmp	r3, #0
 800964e:	db2f      	blt.n	80096b0 <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009650:	0059      	lsls	r1, r3, #1
 8009652:	d430      	bmi.n	80096b6 <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009654:	009a      	lsls	r2, r3, #2
 8009656:	d430      	bmi.n	80096ba <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009658:	00d9      	lsls	r1, r3, #3
 800965a:	d430      	bmi.n	80096be <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800965c:	011a      	lsls	r2, r3, #4
 800965e:	d431      	bmi.n	80096c4 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009660:	0159      	lsls	r1, r3, #5
 8009662:	d432      	bmi.n	80096ca <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009664:	01da      	lsls	r2, r3, #7
 8009666:	d433      	bmi.n	80096d0 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009668:	0219      	lsls	r1, r3, #8
 800966a:	d434      	bmi.n	80096d6 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800966c:	025a      	lsls	r2, r3, #9
 800966e:	d435      	bmi.n	80096dc <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009670:	0299      	lsls	r1, r3, #10
 8009672:	d43f      	bmi.n	80096f4 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009674:	02da      	lsls	r2, r3, #11
 8009676:	d43a      	bmi.n	80096ee <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009678:	0359      	lsls	r1, r3, #13
 800967a:	d435      	bmi.n	80096e8 <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800967c:	039a      	lsls	r2, r3, #14
 800967e:	d430      	bmi.n	80096e2 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009680:	03d9      	lsls	r1, r3, #15
 8009682:	d440      	bmi.n	8009706 <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009684:	041a      	lsls	r2, r3, #16
 8009686:	d43b      	bmi.n	8009700 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009688:	0459      	lsls	r1, r3, #17
 800968a:	d436      	bmi.n	80096fa <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800968c:	049a      	lsls	r2, r3, #18
 800968e:	d407      	bmi.n	80096a0 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009690:	f013 0f08 	tst.w	r3, #8
 8009694:	bf0c      	ite	eq
 8009696:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800969a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800969e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80096a0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 80096a4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096a6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096a8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096aa:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096ae:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80096b0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80096b4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80096b6:	2040      	movs	r0, #64	@ 0x40
 80096b8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80096ba:	2080      	movs	r0, #128	@ 0x80
 80096bc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80096be:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80096c2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80096c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80096c8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80096ca:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80096ce:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80096d4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096d6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80096da:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80096e0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80096e2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80096e6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80096e8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80096ec:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80096ee:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80096f2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80096f8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096fa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80096fe:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009700:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009704:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009706:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800970a:	4770      	bx	lr
 800970c:	24000014 	.word	0x24000014
 8009710:	10624dd3 	.word	0x10624dd3
 8009714:	fffee0c0 	.word	0xfffee0c0
 8009718:	00200045 	.word	0x00200045
 800971c:	002000c5 	.word	0x002000c5
 8009720:	fdffe008 	.word	0xfdffe008

08009724 <SDMMC_CmdStatusRegister>:
{
 8009724:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009726:	4a4c      	ldr	r2, [pc, #304]	@ (8009858 <SDMMC_CmdStatusRegister+0x134>)
 8009728:	4b4c      	ldr	r3, [pc, #304]	@ (800985c <SDMMC_CmdStatusRegister+0x138>)
 800972a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800972c:	484c      	ldr	r0, [pc, #304]	@ (8009860 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800972e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009732:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 8009736:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8009738:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800973a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800973c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800973e:	68cc      	ldr	r4, [r1, #12]
 8009740:	4020      	ands	r0, r4
 8009742:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009744:	f241 3088 	movw	r0, #5000	@ 0x1388
 8009748:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800974c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800974e:	b14a      	cbz	r2, 8009764 <SDMMC_CmdStatusRegister+0x40>
 8009750:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009752:	4844      	ldr	r0, [pc, #272]	@ (8009864 <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 8009754:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8009756:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009758:	4202      	tst	r2, r0
 800975a:	d001      	beq.n	8009760 <SDMMC_CmdStatusRegister+0x3c>
 800975c:	0492      	lsls	r2, r2, #18
 800975e:	d506      	bpl.n	800976e <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 8009760:	1c5c      	adds	r4, r3, #1
 8009762:	d1f7      	bne.n	8009754 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009764:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800976e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009770:	075c      	lsls	r4, r3, #29
 8009772:	d43c      	bmi.n	80097ee <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009774:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009776:	07d8      	lsls	r0, r3, #31
 8009778:	d407      	bmi.n	800978a <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800977a:	4b3b      	ldr	r3, [pc, #236]	@ (8009868 <SDMMC_CmdStatusRegister+0x144>)
 800977c:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800977e:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b0d      	cmp	r3, #13
 8009784:	d004      	beq.n	8009790 <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009786:	2001      	movs	r0, #1
 8009788:	e7ee      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800978a:	2301      	movs	r3, #1
 800978c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800978e:	e7fa      	b.n	8009786 <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 8009790:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009792:	4836      	ldr	r0, [pc, #216]	@ (800986c <SDMMC_CmdStatusRegister+0x148>)
 8009794:	4018      	ands	r0, r3
 8009796:	2800      	cmp	r0, #0
 8009798:	d0e6      	beq.n	8009768 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800979a:	2b00      	cmp	r3, #0
 800979c:	db2b      	blt.n	80097f6 <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800979e:	005a      	lsls	r2, r3, #1
 80097a0:	d42c      	bmi.n	80097fc <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097a2:	009c      	lsls	r4, r3, #2
 80097a4:	d42c      	bmi.n	8009800 <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80097a6:	00d9      	lsls	r1, r3, #3
 80097a8:	d42c      	bmi.n	8009804 <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80097aa:	011a      	lsls	r2, r3, #4
 80097ac:	d42d      	bmi.n	800980a <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80097ae:	015c      	lsls	r4, r3, #5
 80097b0:	d42e      	bmi.n	8009810 <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80097b2:	01d9      	lsls	r1, r3, #7
 80097b4:	d42f      	bmi.n	8009816 <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80097b6:	021a      	lsls	r2, r3, #8
 80097b8:	d430      	bmi.n	800981c <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80097ba:	025c      	lsls	r4, r3, #9
 80097bc:	d431      	bmi.n	8009822 <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80097be:	0299      	lsls	r1, r3, #10
 80097c0:	d43b      	bmi.n	800983a <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80097c2:	02da      	lsls	r2, r3, #11
 80097c4:	d436      	bmi.n	8009834 <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80097c6:	035c      	lsls	r4, r3, #13
 80097c8:	d431      	bmi.n	800982e <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80097ca:	0399      	lsls	r1, r3, #14
 80097cc:	d42c      	bmi.n	8009828 <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80097ce:	03da      	lsls	r2, r3, #15
 80097d0:	d43f      	bmi.n	8009852 <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80097d2:	041c      	lsls	r4, r3, #16
 80097d4:	d43a      	bmi.n	800984c <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80097d6:	0459      	lsls	r1, r3, #17
 80097d8:	d435      	bmi.n	8009846 <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80097da:	049a      	lsls	r2, r3, #18
 80097dc:	d430      	bmi.n	8009840 <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80097de:	f013 0f08 	tst.w	r3, #8
 80097e2:	bf0c      	ite	eq
 80097e4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80097e8:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80097ec:	e7bc      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097ee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097f0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097f2:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097f4:	e7b8      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097f6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80097fa:	e7b5      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097fc:	2040      	movs	r0, #64	@ 0x40
 80097fe:	e7b3      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009800:	2080      	movs	r0, #128	@ 0x80
 8009802:	e7b1      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009804:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009808:	e7ae      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800980a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800980e:	e7ab      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009810:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009814:	e7a8      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009816:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800981a:	e7a5      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800981c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009820:	e7a2      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009822:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009826:	e79f      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009828:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800982c:	e79c      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800982e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009832:	e799      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 8009834:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009838:	e796      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800983a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800983e:	e793      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 8009840:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8009844:	e790      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009846:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800984a:	e78d      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800984c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009850:	e78a      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009852:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009856:	e787      	b.n	8009768 <SDMMC_CmdStatusRegister+0x44>
 8009858:	24000014 	.word	0x24000014
 800985c:	10624dd3 	.word	0x10624dd3
 8009860:	fffee0c0 	.word	0xfffee0c0
 8009864:	00200045 	.word	0x00200045
 8009868:	002000c5 	.word	0x002000c5
 800986c:	fdffe008 	.word	0xfdffe008

08009870 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009870:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009872:	4903      	ldr	r1, [pc, #12]	@ (8009880 <MX_FATFS_Init+0x10>)
 8009874:	4803      	ldr	r0, [pc, #12]	@ (8009884 <MX_FATFS_Init+0x14>)
 8009876:	f000 f975 	bl	8009b64 <FATFS_LinkDriver>
 800987a:	4b03      	ldr	r3, [pc, #12]	@ (8009888 <MX_FATFS_Init+0x18>)
 800987c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800987e:	bd08      	pop	{r3, pc}
 8009880:	24000a48 	.word	0x24000a48
 8009884:	080288a0 	.word	0x080288a0
 8009888:	24000a4c 	.word	0x24000a4c

0800988c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800988c:	4684      	mov	ip, r0
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800988e:	4805      	ldr	r0, [pc, #20]	@ (80098a4 <BSP_SD_ReadBlocks_DMA+0x18>)
{
 8009890:	b508      	push	{r3, lr}
 8009892:	4613      	mov	r3, r2
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009894:	460a      	mov	r2, r1
 8009896:	4661      	mov	r1, ip
 8009898:	f7fd f8f6 	bl	8006a88 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800989c:	3800      	subs	r0, #0
 800989e:	bf18      	it	ne
 80098a0:	2001      	movne	r0, #1
 80098a2:	bd08      	pop	{r3, pc}
 80098a4:	24000720 	.word	0x24000720

080098a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80098a8:	4684      	mov	ip, r0
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80098aa:	4805      	ldr	r0, [pc, #20]	@ (80098c0 <BSP_SD_WriteBlocks_DMA+0x18>)
{
 80098ac:	b508      	push	{r3, lr}
 80098ae:	4613      	mov	r3, r2
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80098b0:	460a      	mov	r2, r1
 80098b2:	4661      	mov	r1, ip
 80098b4:	f7fd f94e 	bl	8006b54 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80098b8:	3800      	subs	r0, #0
 80098ba:	bf18      	it	ne
 80098bc:	2001      	movne	r0, #1
 80098be:	bd08      	pop	{r3, pc}
 80098c0:	24000720 	.word	0x24000720

080098c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80098c4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80098c6:	4803      	ldr	r0, [pc, #12]	@ (80098d4 <BSP_SD_GetCardState+0x10>)
 80098c8:	f7fd fdba 	bl	8007440 <HAL_SD_GetCardState>
}
 80098cc:	3804      	subs	r0, #4
 80098ce:	bf18      	it	ne
 80098d0:	2001      	movne	r0, #1
 80098d2:	bd08      	pop	{r3, pc}
 80098d4:	24000720 	.word	0x24000720

080098d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80098d8:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80098da:	4801      	ldr	r0, [pc, #4]	@ (80098e0 <BSP_SD_GetCardInfo+0x8>)
 80098dc:	f7fd bc70 	b.w	80071c0 <HAL_SD_GetCardInfo>
 80098e0:	24000720 	.word	0x24000720

080098e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098e4:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80098e6:	f000 f915 	bl	8009b14 <BSP_SD_WriteCpltCallback>
}
 80098ea:	bd08      	pop	{r3, pc}

080098ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098ec:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80098ee:	f000 f925 	bl	8009b3c <BSP_SD_ReadCpltCallback>
}
 80098f2:	bd08      	pop	{r3, pc}

080098f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80098f4:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80098fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009900:	b002      	add	sp, #8
 8009902:	4770      	bx	lr

08009904 <BSP_SD_Init>:
{
 8009904:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009906:	f7ff fff5 	bl	80098f4 <BSP_SD_IsDetected>
 800990a:	2801      	cmp	r0, #1
 800990c:	d001      	beq.n	8009912 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800990e:	2002      	movs	r0, #2
}
 8009910:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8009912:	4807      	ldr	r0, [pc, #28]	@ (8009930 <BSP_SD_Init+0x2c>)
 8009914:	f7fd fd32 	bl	800737c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8009918:	2800      	cmp	r0, #0
 800991a:	d1f9      	bne.n	8009910 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800991c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009920:	4803      	ldr	r0, [pc, #12]	@ (8009930 <BSP_SD_Init+0x2c>)
 8009922:	f7fd fc61 	bl	80071e8 <HAL_SD_ConfigWideBusOperation>
 8009926:	3800      	subs	r0, #0
 8009928:	bf18      	it	ne
 800992a:	2001      	movne	r0, #1
}
 800992c:	bd08      	pop	{r3, pc}
 800992e:	bf00      	nop
 8009930:	24000720 	.word	0x24000720

08009934 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009934:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 8009936:	4c15      	ldr	r4, [pc, #84]	@ (800998c <SD_initialize+0x58>)
 8009938:	2501      	movs	r5, #1
 800993a:	7025      	strb	r5, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800993c:	f000 f948 	bl	8009bd0 <osKernelGetState>
 8009940:	2802      	cmp	r0, #2
 8009942:	d001      	beq.n	8009948 <SD_initialize+0x14>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 8009944:	7820      	ldrb	r0, [r4, #0]
}
 8009946:	bd38      	pop	{r3, r4, r5, pc}
    if(BSP_SD_Init() == MSD_OK)
 8009948:	f7ff ffdc 	bl	8009904 <BSP_SD_Init>
 800994c:	b190      	cbz	r0, 8009974 <SD_initialize+0x40>
    if (Stat != STA_NOINIT)
 800994e:	7823      	ldrb	r3, [r4, #0]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d0f7      	beq.n	8009944 <SD_initialize+0x10>
      if (SDQueueID == NULL)
 8009954:	4d0e      	ldr	r5, [pc, #56]	@ (8009990 <SD_initialize+0x5c>)
 8009956:	682a      	ldr	r2, [r5, #0]
 8009958:	2a00      	cmp	r2, #0
 800995a:	d1f3      	bne.n	8009944 <SD_initialize+0x10>
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800995c:	2102      	movs	r1, #2
 800995e:	200a      	movs	r0, #10
 8009960:	f000 fa62 	bl	8009e28 <osMessageQueueNew>
 8009964:	6028      	str	r0, [r5, #0]
      if (SDQueueID == NULL)
 8009966:	2800      	cmp	r0, #0
 8009968:	d1ec      	bne.n	8009944 <SD_initialize+0x10>
        Stat |= STA_NOINIT;
 800996a:	7823      	ldrb	r3, [r4, #0]
 800996c:	f043 0301 	orr.w	r3, r3, #1
 8009970:	7023      	strb	r3, [r4, #0]
 8009972:	e7e7      	b.n	8009944 <SD_initialize+0x10>
  Stat = STA_NOINIT;
 8009974:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009976:	f7ff ffa5 	bl	80098c4 <BSP_SD_GetCardState>
 800997a:	b918      	cbnz	r0, 8009984 <SD_initialize+0x50>
    Stat &= ~STA_NOINIT;
 800997c:	7823      	ldrb	r3, [r4, #0]
 800997e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009982:	7023      	strb	r3, [r4, #0]
  return Stat;
 8009984:	7823      	ldrb	r3, [r4, #0]
 8009986:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 8009988:	7023      	strb	r3, [r4, #0]
 800998a:	e7e0      	b.n	800994e <SD_initialize+0x1a>
 800998c:	24000020 	.word	0x24000020
 8009990:	24000a50 	.word	0x24000a50

08009994 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009994:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009996:	2301      	movs	r3, #1
 8009998:	4c05      	ldr	r4, [pc, #20]	@ (80099b0 <SD_status+0x1c>)
 800999a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800999c:	f7ff ff92 	bl	80098c4 <BSP_SD_GetCardState>
 80099a0:	b918      	cbnz	r0, 80099aa <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 80099a2:	7823      	ldrb	r3, [r4, #0]
 80099a4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80099a8:	7023      	strb	r3, [r4, #0]
  return Stat;
 80099aa:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	bf00      	nop
 80099b0:	24000020 	.word	0x24000020

080099b4 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099b4:	4b16      	ldr	r3, [pc, #88]	@ (8009a10 <SD_ioctl+0x5c>)
{
 80099b6:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099b8:	7818      	ldrb	r0, [r3, #0]
{
 80099ba:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099bc:	f010 0401 	ands.w	r4, r0, #1
 80099c0:	d106      	bne.n	80099d0 <SD_ioctl+0x1c>
 80099c2:	4615      	mov	r5, r2

  switch (cmd)
 80099c4:	2903      	cmp	r1, #3
 80099c6:	d820      	bhi.n	8009a0a <SD_ioctl+0x56>
 80099c8:	e8df f001 	tbb	[pc, r1]
 80099cc:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099d0:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 80099d2:	4620      	mov	r0, r4
 80099d4:	b00b      	add	sp, #44	@ 0x2c
 80099d6:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80099d8:	a801      	add	r0, sp, #4
 80099da:	f7ff ff7d 	bl	80098d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80099de:	9b08      	ldr	r3, [sp, #32]
}
 80099e0:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80099e2:	0a5b      	lsrs	r3, r3, #9
 80099e4:	602b      	str	r3, [r5, #0]
}
 80099e6:	b00b      	add	sp, #44	@ 0x2c
 80099e8:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80099ea:	a801      	add	r0, sp, #4
 80099ec:	f7ff ff74 	bl	80098d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80099f0:	9b07      	ldr	r3, [sp, #28]
}
 80099f2:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80099f4:	602b      	str	r3, [r5, #0]
}
 80099f6:	b00b      	add	sp, #44	@ 0x2c
 80099f8:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80099fa:	a801      	add	r0, sp, #4
 80099fc:	f7ff ff6c 	bl	80098d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009a00:	9b08      	ldr	r3, [sp, #32]
}
 8009a02:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009a04:	802b      	strh	r3, [r5, #0]
}
 8009a06:	b00b      	add	sp, #44	@ 0x2c
 8009a08:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8009a0a:	2404      	movs	r4, #4
 8009a0c:	e7e1      	b.n	80099d2 <SD_ioctl+0x1e>
 8009a0e:	bf00      	nop
 8009a10:	24000020 	.word	0x24000020

08009a14 <SD_read>:
{
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	4617      	mov	r7, r2
 8009a1e:	4698      	mov	r8, r3
  while( osKernelGetTickCount() - timer < timeout)
 8009a20:	f247 552f 	movw	r5, #29999	@ 0x752f
  timer = osKernelGetTickCount();
 8009a24:	f000 f900 	bl	8009c28 <osKernelGetTickCount>
 8009a28:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 8009a2a:	e002      	b.n	8009a32 <SD_read+0x1e>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a2c:	f7ff ff4a 	bl	80098c4 <BSP_SD_GetCardState>
 8009a30:	b140      	cbz	r0, 8009a44 <SD_read+0x30>
  while( osKernelGetTickCount() - timer < timeout)
 8009a32:	f000 f8f9 	bl	8009c28 <osKernelGetTickCount>
 8009a36:	1b00      	subs	r0, r0, r4
 8009a38:	42a8      	cmp	r0, r5
 8009a3a:	d9f7      	bls.n	8009a2c <SD_read+0x18>
    return res;
 8009a3c:	2001      	movs	r0, #1
}
 8009a3e:	b002      	add	sp, #8
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009a44:	4642      	mov	r2, r8
 8009a46:	4639      	mov	r1, r7
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7ff ff1f 	bl	800988c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8009a4e:	4602      	mov	r2, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d1f3      	bne.n	8009a3c <SD_read+0x28>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009a54:	480e      	ldr	r0, [pc, #56]	@ (8009a90 <SD_read+0x7c>)
 8009a56:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009a5a:	f10d 0106 	add.w	r1, sp, #6
 8009a5e:	6800      	ldr	r0, [r0, #0]
 8009a60:	f000 fa5a 	bl	8009f18 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1e9      	bne.n	8009a3c <SD_read+0x28>
 8009a68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d1e5      	bne.n	8009a3c <SD_read+0x28>
            timer = osKernelGetTickCount();
 8009a70:	f000 f8da 	bl	8009c28 <osKernelGetTickCount>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a74:	f247 552f 	movw	r5, #29999	@ 0x752f
            timer = osKernelGetTickCount();
 8009a78:	4604      	mov	r4, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a7a:	e003      	b.n	8009a84 <SD_read+0x70>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a7c:	f7ff ff22 	bl	80098c4 <BSP_SD_GetCardState>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d0dc      	beq.n	8009a3e <SD_read+0x2a>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009a84:	f000 f8d0 	bl	8009c28 <osKernelGetTickCount>
 8009a88:	1b00      	subs	r0, r0, r4
 8009a8a:	42a8      	cmp	r0, r5
 8009a8c:	d9f6      	bls.n	8009a7c <SD_read+0x68>
 8009a8e:	e7d5      	b.n	8009a3c <SD_read+0x28>
 8009a90:	24000a50 	.word	0x24000a50

08009a94 <SD_write>:
{
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	460e      	mov	r6, r1
 8009a9c:	4617      	mov	r7, r2
 8009a9e:	4698      	mov	r8, r3
  while( osKernelGetTickCount() - timer < timeout)
 8009aa0:	f247 552f 	movw	r5, #29999	@ 0x752f
  timer = osKernelGetTickCount();
 8009aa4:	f000 f8c0 	bl	8009c28 <osKernelGetTickCount>
 8009aa8:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 8009aaa:	e002      	b.n	8009ab2 <SD_write+0x1e>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009aac:	f7ff ff0a 	bl	80098c4 <BSP_SD_GetCardState>
 8009ab0:	b140      	cbz	r0, 8009ac4 <SD_write+0x30>
  while( osKernelGetTickCount() - timer < timeout)
 8009ab2:	f000 f8b9 	bl	8009c28 <osKernelGetTickCount>
 8009ab6:	1b00      	subs	r0, r0, r4
 8009ab8:	42a8      	cmp	r0, r5
 8009aba:	d9f7      	bls.n	8009aac <SD_write+0x18>
    return res;
 8009abc:	2001      	movs	r0, #1
}
 8009abe:	b002      	add	sp, #8
 8009ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff feed 	bl	80098a8 <BSP_SD_WriteBlocks_DMA>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1f3      	bne.n	8009abc <SD_write+0x28>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009ad4:	480e      	ldr	r0, [pc, #56]	@ (8009b10 <SD_write+0x7c>)
 8009ad6:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009ada:	f10d 0106 	add.w	r1, sp, #6
 8009ade:	6800      	ldr	r0, [r0, #0]
 8009ae0:	f000 fa1a 	bl	8009f18 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d1e9      	bne.n	8009abc <SD_write+0x28>
 8009ae8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d1e5      	bne.n	8009abc <SD_write+0x28>
        timer = osKernelGetTickCount();
 8009af0:	f000 f89a 	bl	8009c28 <osKernelGetTickCount>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009af4:	f247 552f 	movw	r5, #29999	@ 0x752f
        timer = osKernelGetTickCount();
 8009af8:	4604      	mov	r4, r0
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009afa:	e003      	b.n	8009b04 <SD_write+0x70>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009afc:	f7ff fee2 	bl	80098c4 <BSP_SD_GetCardState>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d0dc      	beq.n	8009abe <SD_write+0x2a>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009b04:	f000 f890 	bl	8009c28 <osKernelGetTickCount>
 8009b08:	1b00      	subs	r0, r0, r4
 8009b0a:	42a8      	cmp	r0, r5
 8009b0c:	d9f6      	bls.n	8009afc <SD_write+0x68>
 8009b0e:	e7d5      	b.n	8009abc <SD_write+0x28>
 8009b10:	24000a50 	.word	0x24000a50

08009b14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009b14:	b500      	push	{lr}
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b16:	2300      	movs	r3, #0
{
 8009b18:	b083      	sub	sp, #12
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b1a:	4807      	ldr	r0, [pc, #28]	@ (8009b38 <BSP_SD_WriteCpltCallback+0x24>)
   const uint16_t msg = WRITE_CPLT_MSG;
 8009b1c:	f04f 0c02 	mov.w	ip, #2
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b20:	f10d 0106 	add.w	r1, sp, #6
 8009b24:	461a      	mov	r2, r3
 8009b26:	6800      	ldr	r0, [r0, #0]
   const uint16_t msg = WRITE_CPLT_MSG;
 8009b28:	f8ad c006 	strh.w	ip, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b2c:	f000 f9b8 	bl	8009ea0 <osMessageQueuePut>
#endif
}
 8009b30:	b003      	add	sp, #12
 8009b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b36:	bf00      	nop
 8009b38:	24000a50 	.word	0x24000a50

08009b3c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009b3c:	b500      	push	{lr}
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b3e:	2300      	movs	r3, #0
{
 8009b40:	b083      	sub	sp, #12
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b42:	4807      	ldr	r0, [pc, #28]	@ (8009b60 <BSP_SD_ReadCpltCallback+0x24>)
   const uint16_t msg = READ_CPLT_MSG;
 8009b44:	f04f 0c01 	mov.w	ip, #1
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b48:	f10d 0106 	add.w	r1, sp, #6
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6800      	ldr	r0, [r0, #0]
   const uint16_t msg = READ_CPLT_MSG;
 8009b50:	f8ad c006 	strh.w	ip, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009b54:	f000 f9a4 	bl	8009ea0 <osMessageQueuePut>
#endif
}
 8009b58:	b003      	add	sp, #12
 8009b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b5e:	bf00      	nop
 8009b60:	24000a50 	.word	0x24000a50

08009b64 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009b64:	4b10      	ldr	r3, [pc, #64]	@ (8009ba8 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b66:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8009b68:	7a5c      	ldrb	r4, [r3, #9]
 8009b6a:	b9cc      	cbnz	r4, 8009ba0 <FATFS_LinkDriver+0x3c>
 8009b6c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8009b6e:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 8009b72:	7a5c      	ldrb	r4, [r3, #9]
 8009b74:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8009b76:	7a5c      	ldrb	r4, [r3, #9]
 8009b78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b7c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8009b7e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8009b80:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8009b82:	441c      	add	r4, r3
 8009b84:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8009b86:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8009b88:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 8009b8a:	b2e4      	uxtb	r4, r4
 8009b8c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8009b8e:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8009b90:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 8009b92:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8009b94:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8009b96:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8009b98:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8009b9c:	708b      	strb	r3, [r1, #2]
}
 8009b9e:	4770      	bx	lr
  uint8_t ret = 1;
 8009ba0:	2001      	movs	r0, #1
}
 8009ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	24000a54 	.word	0x24000a54

08009bac <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bac:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bb0:	b92b      	cbnz	r3, 8009bbe <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009bb2:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <osKernelInitialize+0x20>)
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	b928      	cbnz	r0, 8009bc4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009bb8:	2201      	movs	r2, #1
 8009bba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009bbc:	4770      	bx	lr
    stat = osErrorISR;
 8009bbe:	f06f 0005 	mvn.w	r0, #5
 8009bc2:	4770      	bx	lr
    } else {
      stat = osError;
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	24001118 	.word	0x24001118

08009bd0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009bd0:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009bd2:	f002 f82b 	bl	800bc2c <xTaskGetSchedulerState>
 8009bd6:	b148      	cbz	r0, 8009bec <osKernelGetState+0x1c>
 8009bd8:	2802      	cmp	r0, #2
 8009bda:	d006      	beq.n	8009bea <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009bdc:	4b04      	ldr	r3, [pc, #16]	@ (8009bf0 <osKernelGetState+0x20>)
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	f1a0 0001 	sub.w	r0, r0, #1
 8009be4:	fab0 f080 	clz	r0, r0
 8009be8:	0940      	lsrs	r0, r0, #5
      }
      break;
  }

  return (state);
}
 8009bea:	bd08      	pop	{r3, pc}
  switch (xTaskGetSchedulerState()) {
 8009bec:	2003      	movs	r0, #3
}
 8009bee:	bd08      	pop	{r3, pc}
 8009bf0:	24001118 	.word	0x24001118

08009bf4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bfa:	b974      	cbnz	r4, 8009c1a <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009bfc:	4b08      	ldr	r3, [pc, #32]	@ (8009c20 <osKernelStart+0x2c>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	2a01      	cmp	r2, #1
 8009c02:	d107      	bne.n	8009c14 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c04:	4907      	ldr	r1, [pc, #28]	@ (8009c24 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c06:	2202      	movs	r2, #2
 8009c08:	77cc      	strb	r4, [r1, #31]
 8009c0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c0c:	f001 fdda 	bl	800b7c4 <vTaskStartScheduler>
      stat = osOK;
 8009c10:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009c12:	bd10      	pop	{r4, pc}
      stat = osError;
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009c18:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009c1a:	f06f 0005 	mvn.w	r0, #5
}
 8009c1e:	bd10      	pop	{r4, pc}
 8009c20:	24001118 	.word	0x24001118
 8009c24:	e000ed00 	.word	0xe000ed00

08009c28 <osKernelGetTickCount>:
 8009c28:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8009c2c:	b10b      	cbz	r3, 8009c32 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8009c2e:	f001 be77 	b.w	800b920 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8009c32:	f001 be6f 	b.w	800b914 <xTaskGetTickCount>
 8009c36:	bf00      	nop

08009c38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c3a:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c3c:	b087      	sub	sp, #28
  hTask = NULL;
 8009c3e:	9505      	str	r5, [sp, #20]
 8009c40:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009c44:	b300      	cbz	r0, 8009c88 <osThreadNew+0x50>
 8009c46:	b9fb      	cbnz	r3, 8009c88 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009c48:	4614      	mov	r4, r2
 8009c4a:	b302      	cbz	r2, 8009c8e <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009c4c:	6996      	ldr	r6, [r2, #24]
 8009c4e:	b9c6      	cbnz	r6, 8009c82 <osThreadNew+0x4a>
 8009c50:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c52:	6863      	ldr	r3, [r4, #4]
 8009c54:	07db      	lsls	r3, r3, #31
 8009c56:	d417      	bmi.n	8009c88 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8009c58:	6963      	ldr	r3, [r4, #20]
 8009c5a:	b32b      	cbz	r3, 8009ca8 <osThreadNew+0x70>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c5c:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c5e:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8009c60:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c64:	68e7      	ldr	r7, [r4, #12]
 8009c66:	b30d      	cbz	r5, 8009cac <osThreadNew+0x74>
 8009c68:	2f5b      	cmp	r7, #91	@ 0x5b
 8009c6a:	d90d      	bls.n	8009c88 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c6c:	6924      	ldr	r4, [r4, #16]
 8009c6e:	b15b      	cbz	r3, 8009c88 <osThreadNew+0x50>
 8009c70:	b154      	cbz	r4, 8009c88 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c72:	460b      	mov	r3, r1
 8009c74:	9600      	str	r6, [sp, #0]
 8009c76:	4661      	mov	r1, ip
 8009c78:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8009c7c:	f001 fc12 	bl	800b4a4 <xTaskCreateStatic>
 8009c80:	e003      	b.n	8009c8a <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c82:	1e72      	subs	r2, r6, #1
 8009c84:	2a37      	cmp	r2, #55	@ 0x37
 8009c86:	d9e4      	bls.n	8009c52 <osThreadNew+0x1a>
        return (NULL);
 8009c88:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8009c8a:	b007      	add	sp, #28
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8e:	2280      	movs	r2, #128	@ 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8009c90:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c92:	460b      	mov	r3, r1
 8009c94:	4621      	mov	r1, r4
 8009c96:	ac05      	add	r4, sp, #20
 8009c98:	9600      	str	r6, [sp, #0]
 8009c9a:	9401      	str	r4, [sp, #4]
 8009c9c:	f001 fcaa 	bl	800b5f4 <xTaskCreate>
 8009ca0:	2801      	cmp	r0, #1
 8009ca2:	d1f1      	bne.n	8009c88 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 8009ca4:	9805      	ldr	r0, [sp, #20]
 8009ca6:	e7f0      	b.n	8009c8a <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
 8009ca8:	2280      	movs	r2, #128	@ 0x80
 8009caa:	e7d8      	b.n	8009c5e <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009cac:	2f00      	cmp	r7, #0
 8009cae:	d1eb      	bne.n	8009c88 <osThreadNew+0x50>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e8      	bne.n	8009c88 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cb6:	b292      	uxth	r2, r2
 8009cb8:	4664      	mov	r4, ip
 8009cba:	e7ea      	b.n	8009c92 <osThreadNew+0x5a>

08009cbc <osDelay>:
 8009cbc:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cc0:	b93a      	cbnz	r2, 8009cd2 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8009cc2:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009cc4:	b908      	cbnz	r0, 8009cca <osDelay+0xe>
    stat = osOK;
 8009cc6:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009cc8:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8009cca:	f001 fd25 	bl	800b718 <vTaskDelay>
    stat = osOK;
 8009cce:	2000      	movs	r0, #0
}
 8009cd0:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8009cd2:	f06f 0005 	mvn.w	r0, #5
}
 8009cd6:	4770      	bx	lr

08009cd8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009ce0:	b98e      	cbnz	r6, 8009d06 <osSemaphoreNew+0x2e>
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	b178      	cbz	r0, 8009d06 <osSemaphoreNew+0x2e>
 8009ce6:	4288      	cmp	r0, r1
 8009ce8:	460f      	mov	r7, r1
 8009cea:	d30c      	bcc.n	8009d06 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8009cec:	4614      	mov	r4, r2
 8009cee:	b172      	cbz	r2, 8009d0e <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cf0:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8009cf4:	b14a      	cbz	r2, 8009d0a <osSemaphoreNew+0x32>
 8009cf6:	2b4f      	cmp	r3, #79	@ 0x4f
 8009cf8:	d905      	bls.n	8009d06 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8009cfa:	2801      	cmp	r0, #1
 8009cfc:	d02f      	beq.n	8009d5e <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009cfe:	f000 fa93 	bl	800a228 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d02:	4605      	mov	r5, r0
 8009d04:	b968      	cbnz	r0, 8009d22 <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 8009d06:	2500      	movs	r5, #0
 8009d08:	e010      	b.n	8009d2c <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1fb      	bne.n	8009d06 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 8009d0e:	2d01      	cmp	r5, #1
 8009d10:	d00f      	beq.n	8009d32 <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d12:	4628      	mov	r0, r5
 8009d14:	4639      	mov	r1, r7
 8009d16:	f000 fae7 	bl	800a2e8 <xQueueCreateCountingSemaphore>
 8009d1a:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	d0f2      	beq.n	8009d06 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8009d20:	b104      	cbz	r4, 8009d24 <osSemaphoreNew+0x4c>
          name = attr->name;
 8009d22:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009d24:	4621      	mov	r1, r4
 8009d26:	4628      	mov	r0, r5
 8009d28:	f001 f918 	bl	800af5c <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	b003      	add	sp, #12
 8009d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8009d32:	4628      	mov	r0, r5
 8009d34:	2203      	movs	r2, #3
 8009d36:	2100      	movs	r1, #0
 8009d38:	f000 fa34 	bl	800a1a4 <xQueueGenericCreate>
 8009d3c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	d0e1      	beq.n	8009d06 <osSemaphoreNew+0x2e>
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d0ea      	beq.n	8009d1c <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d46:	2300      	movs	r3, #0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f000 fb11 	bl	800a374 <xQueueGenericSend>
 8009d52:	2801      	cmp	r0, #1
 8009d54:	d0e4      	beq.n	8009d20 <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 8009d56:	4628      	mov	r0, r5
 8009d58:	f001 f8ba 	bl	800aed0 <vQueueDelete>
      if (hSemaphore != NULL) {
 8009d5c:	e7d3      	b.n	8009d06 <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009d5e:	4613      	mov	r3, r2
 8009d60:	2203      	movs	r2, #3
 8009d62:	4631      	mov	r1, r6
 8009d64:	9200      	str	r2, [sp, #0]
 8009d66:	4632      	mov	r2, r6
 8009d68:	f000 f9b0 	bl	800a0cc <xQueueGenericCreateStatic>
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	e7e6      	b.n	8009d3e <osSemaphoreNew+0x66>

08009d70 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009d70:	b360      	cbz	r0, 8009dcc <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009d72:	b510      	push	{r4, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	b082      	sub	sp, #8
 8009d78:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009d7c:	b1b3      	cbz	r3, 8009dac <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8009d7e:	bb11      	cbnz	r1, 8009dc6 <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009d80:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009d82:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009d84:	f001 f846 	bl	800ae14 <xQueueReceiveFromISR>
 8009d88:	2801      	cmp	r0, #1
 8009d8a:	d118      	bne.n	8009dbe <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	b913      	cbnz	r3, 8009d96 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8009d90:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009d92:	b002      	add	sp, #8
 8009d94:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8009d96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	e7f1      	b.n	8009d90 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009dac:	f000 fea6 	bl	800aafc <xQueueSemaphoreTake>
 8009db0:	2801      	cmp	r0, #1
 8009db2:	d0ed      	beq.n	8009d90 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8009db4:	b11c      	cbz	r4, 8009dbe <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 8009db6:	f06f 0001 	mvn.w	r0, #1
}
 8009dba:	b002      	add	sp, #8
 8009dbc:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8009dbe:	f06f 0002 	mvn.w	r0, #2
}
 8009dc2:	b002      	add	sp, #8
 8009dc4:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8009dc6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8009dca:	e7e2      	b.n	8009d92 <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 8009dcc:	f06f 0003 	mvn.w	r0, #3
}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop

08009dd4 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009dd4:	b328      	cbz	r0, 8009e22 <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009dd6:	b500      	push	{lr}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009dde:	b19b      	cbz	r3, 8009e08 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 8009de0:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009de2:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8009de4:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009de6:	f000 fcad 	bl	800a744 <xQueueGiveFromISR>
 8009dea:	2801      	cmp	r0, #1
 8009dec:	d116      	bne.n	8009e1c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8009dee:	9b01      	ldr	r3, [sp, #4]
 8009df0:	b183      	cbz	r3, 8009e14 <osSemaphoreRelease+0x40>
 8009df2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	e005      	b.n	8009e14 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f000 fab2 	bl	800a374 <xQueueGenericSend>
 8009e10:	2801      	cmp	r0, #1
 8009e12:	d103      	bne.n	8009e1c <osSemaphoreRelease+0x48>
  stat = osOK;
 8009e14:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8009e16:	b003      	add	sp, #12
 8009e18:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 8009e1c:	f06f 0002 	mvn.w	r0, #2
 8009e20:	e7f9      	b.n	8009e16 <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 8009e22:	f06f 0003 	mvn.w	r0, #3
}
 8009e26:	4770      	bx	lr

08009e28 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009e30:	b987      	cbnz	r7, 8009e54 <osMessageQueueNew+0x2c>
 8009e32:	4605      	mov	r5, r0
 8009e34:	b170      	cbz	r0, 8009e54 <osMessageQueueNew+0x2c>
 8009e36:	b169      	cbz	r1, 8009e54 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8009e38:	4614      	mov	r4, r2
 8009e3a:	b17a      	cbz	r2, 8009e5c <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009e3c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8009e40:	b1c3      	cbz	r3, 8009e74 <osMessageQueueNew+0x4c>
 8009e42:	2a4f      	cmp	r2, #79	@ 0x4f
 8009e44:	d906      	bls.n	8009e54 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e46:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009e48:	b122      	cbz	r2, 8009e54 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e4a:	fb01 f505 	mul.w	r5, r1, r5
 8009e4e:	6966      	ldr	r6, [r4, #20]
 8009e50:	42ae      	cmp	r6, r5
 8009e52:	d21e      	bcs.n	8009e92 <osMessageQueueNew+0x6a>
  hQueue = NULL;
 8009e54:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009e56:	4628      	mov	r0, r5
 8009e58:	b003      	add	sp, #12
 8009e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8009e5c:	f000 f9a2 	bl	800a1a4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0f6      	beq.n	8009e54 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8009e66:	4628      	mov	r0, r5
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f001 f877 	bl	800af5c <vQueueAddToRegistry>
}
 8009e6e:	4628      	mov	r0, r5
 8009e70:	b003      	add	sp, #12
 8009e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d1ed      	bne.n	8009e54 <osMessageQueueNew+0x2c>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1ea      	bne.n	8009e54 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009e7e:	6962      	ldr	r2, [r4, #20]
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	d1e7      	bne.n	8009e54 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8009e84:	f000 f98e 	bl	800a1a4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8009e88:	4605      	mov	r5, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d0e2      	beq.n	8009e54 <osMessageQueueNew+0x2c>
        name = attr->name;
 8009e8e:	6824      	ldr	r4, [r4, #0]
 8009e90:	e7e9      	b.n	8009e66 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009e92:	9700      	str	r7, [sp, #0]
 8009e94:	f000 f91a 	bl	800a0cc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8009e98:	4605      	mov	r5, r0
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d1f7      	bne.n	8009e8e <osMessageQueueNew+0x66>
 8009e9e:	e7d9      	b.n	8009e54 <osMessageQueueNew+0x2c>

08009ea0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009ea0:	b560      	push	{r5, r6, lr}
 8009ea2:	461e      	mov	r6, r3
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009eaa:	fab0 f580 	clz	r5, r0
 8009eae:	fab1 f381 	clz	r3, r1
 8009eb2:	096d      	lsrs	r5, r5, #5
 8009eb4:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 8009eb6:	b1da      	cbz	r2, 8009ef0 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	bf18      	it	ne
 8009ebc:	f043 0301 	orrne.w	r3, r3, #1
 8009ec0:	bb33      	cbnz	r3, 8009f10 <osMessageQueuePut+0x70>
 8009ec2:	bb2d      	cbnz	r5, 8009f10 <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009ec4:	462b      	mov	r3, r5
 8009ec6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009ec8:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009eca:	f000 fbd5 	bl	800a678 <xQueueGenericSendFromISR>
 8009ece:	2801      	cmp	r0, #1
 8009ed0:	d11a      	bne.n	8009f08 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	b14b      	cbz	r3, 8009eea <osMessageQueuePut+0x4a>
 8009ed6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ede:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009eea:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009eec:	b003      	add	sp, #12
 8009eee:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ef0:	b975      	cbnz	r5, 8009f10 <osMessageQueuePut+0x70>
 8009ef2:	b96b      	cbnz	r3, 8009f10 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	f000 fa3d 	bl	800a374 <xQueueGenericSend>
 8009efa:	2801      	cmp	r0, #1
 8009efc:	d0f5      	beq.n	8009eea <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 8009efe:	b11e      	cbz	r6, 8009f08 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 8009f00:	f06f 0001 	mvn.w	r0, #1
}
 8009f04:	b003      	add	sp, #12
 8009f06:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 8009f08:	f06f 0002 	mvn.w	r0, #2
}
 8009f0c:	b003      	add	sp, #12
 8009f0e:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 8009f10:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8009f14:	e7ea      	b.n	8009eec <osMessageQueuePut+0x4c>
 8009f16:	bf00      	nop

08009f18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	461e      	mov	r6, r3
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f22:	fab0 f580 	clz	r5, r0
 8009f26:	fab1 f481 	clz	r4, r1
 8009f2a:	096d      	lsrs	r5, r5, #5
 8009f2c:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 8009f2e:	b1d3      	cbz	r3, 8009f66 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	bf18      	it	ne
 8009f34:	f044 0401 	orrne.w	r4, r4, #1
 8009f38:	bb2c      	cbnz	r4, 8009f86 <osMessageQueueGet+0x6e>
 8009f3a:	bb25      	cbnz	r5, 8009f86 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009f3c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009f3e:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009f40:	f000 ff68 	bl	800ae14 <xQueueReceiveFromISR>
 8009f44:	2801      	cmp	r0, #1
 8009f46:	d11a      	bne.n	8009f7e <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	b14b      	cbz	r3, 8009f60 <osMessageQueueGet+0x48>
 8009f4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009f60:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009f62:	b002      	add	sp, #8
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009f66:	b975      	cbnz	r5, 8009f86 <osMessageQueueGet+0x6e>
 8009f68:	b96c      	cbnz	r4, 8009f86 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	f000 fc40 	bl	800a7f0 <xQueueReceive>
 8009f70:	2801      	cmp	r0, #1
 8009f72:	d0f5      	beq.n	8009f60 <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 8009f74:	b11e      	cbz	r6, 8009f7e <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 8009f76:	f06f 0001 	mvn.w	r0, #1
}
 8009f7a:	b002      	add	sp, #8
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 8009f7e:	f06f 0002 	mvn.w	r0, #2
}
 8009f82:	b002      	add	sp, #8
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 8009f86:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8009f8a:	e7ea      	b.n	8009f62 <osMessageQueueGet+0x4a>

08009f8c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f8c:	4b04      	ldr	r3, [pc, #16]	@ (8009fa0 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f8e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f90:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f92:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f94:	4c03      	ldr	r4, [pc, #12]	@ (8009fa4 <vApplicationGetIdleTaskMemory+0x18>)
 8009f96:	600c      	str	r4, [r1, #0]
}
 8009f98:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f9c:	6013      	str	r3, [r2, #0]
}
 8009f9e:	4770      	bx	lr
 8009fa0:	240010bc 	.word	0x240010bc
 8009fa4:	24000ebc 	.word	0x24000ebc

08009fa8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009fa8:	4b05      	ldr	r3, [pc, #20]	@ (8009fc0 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009faa:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009fac:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009fb2:	4c04      	ldr	r4, [pc, #16]	@ (8009fc4 <vApplicationGetTimerTaskMemory+0x1c>)
 8009fb4:	600c      	str	r4, [r1, #0]
}
 8009fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009fba:	6013      	str	r3, [r2, #0]
}
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	24000e60 	.word	0x24000e60
 8009fc4:	24000a60 	.word	0x24000a60

08009fc8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fc8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fcc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fd0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fd2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fd4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop

08009fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop

08009fe8 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009fe8:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fea:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 8009fec:	3301      	adds	r3, #1
{
 8009fee:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ff0:	6894      	ldr	r4, [r2, #8]
 8009ff2:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ff6:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ff8:	6091      	str	r1, [r2, #8]
}
 8009ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8009ffe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a000:	6003      	str	r3, [r0, #0]
}
 800a002:	4770      	bx	lr

0800a004 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a004:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a006:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a008:	1c6b      	adds	r3, r5, #1
 800a00a:	d010      	beq.n	800a02e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a00c:	f100 0308 	add.w	r3, r0, #8
 800a010:	461c      	mov	r4, r3
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	42aa      	cmp	r2, r5
 800a018:	d9fa      	bls.n	800a010 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a01a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800a01c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800a01e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a020:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a022:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a024:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800a026:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a028:	6002      	str	r2, [r0, #0]
}
 800a02a:	bc30      	pop	{r4, r5}
 800a02c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800a02e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800a030:	6863      	ldr	r3, [r4, #4]
 800a032:	e7f2      	b.n	800a01a <vListInsert+0x16>

0800a034 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a034:	6903      	ldr	r3, [r0, #16]
{
 800a036:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a038:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a03a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 800a03e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800a040:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a044:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a046:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 800a048:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a04c:	bf08      	it	eq
 800a04e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800a050:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800a052:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a054:	3a01      	subs	r2, #1
 800a056:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800a058:	6818      	ldr	r0, [r3, #0]
}
 800a05a:	4770      	bx	lr

0800a05c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a060:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800a062:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a064:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a066:	b92a      	cbnz	r2, 800a074 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a068:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a06a:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a06c:	b34e      	cbz	r6, 800a0c2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800a06e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a070:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 800a072:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800a074:	b97e      	cbnz	r6, 800a096 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a076:	6840      	ldr	r0, [r0, #4]
 800a078:	f01a f8e5 	bl	8024246 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a080:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a082:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a084:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a086:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a088:	bf24      	itt	cs
 800a08a:	6823      	ldrcs	r3, [r4, #0]
 800a08c:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a08e:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800a090:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a092:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800a094:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a096:	68c0      	ldr	r0, [r0, #12]
 800a098:	f01a f8d5 	bl	8024246 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a09c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a09e:	68e3      	ldr	r3, [r4, #12]
 800a0a0:	4251      	negs	r1, r2
 800a0a2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0a4:	6822      	ldr	r2, [r4, #0]
 800a0a6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0a8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0aa:	d202      	bcs.n	800a0b2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0ac:	68a3      	ldr	r3, [r4, #8]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a0b2:	2e02      	cmp	r6, #2
 800a0b4:	d1eb      	bne.n	800a08e <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0b6:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 800a0b8:	f04f 0000 	mov.w	r0, #0
 800a0bc:	bf38      	it	cc
 800a0be:	2501      	movcc	r5, #1
 800a0c0:	e7d6      	b.n	800a070 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a0c2:	6880      	ldr	r0, [r0, #8]
 800a0c4:	f001 fe02 	bl	800bccc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a0c8:	60a6      	str	r6, [r4, #8]
 800a0ca:	e7d1      	b.n	800a070 <prvCopyDataToQueue+0x14>

0800a0cc <xQueueGenericCreateStatic>:
	{
 800a0cc:	b530      	push	{r4, r5, lr}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0d4:	b940      	cbnz	r0, 800a0e8 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	e7fe      	b.n	800a0e6 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800a0e8:	461c      	mov	r4, r3
 800a0ea:	b153      	cbz	r3, 800a102 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0ec:	b30a      	cbz	r2, 800a132 <xQueueGenericCreateStatic+0x66>
 800a0ee:	b989      	cbnz	r1, 800a114 <xQueueGenericCreateStatic+0x48>
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	e7fe      	b.n	800a100 <xQueueGenericCreateStatic+0x34>
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800a112:	e7fe      	b.n	800a112 <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a114:	b16a      	cbz	r2, 800a132 <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a116:	2350      	movs	r3, #80	@ 0x50
 800a118:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	2b50      	cmp	r3, #80	@ 0x50
 800a11e:	d013      	beq.n	800a148 <xQueueGenericCreateStatic+0x7c>
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	e7fe      	b.n	800a130 <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a132:	2900      	cmp	r1, #0
 800a134:	d0ef      	beq.n	800a116 <xQueueGenericCreateStatic+0x4a>
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	e7fe      	b.n	800a146 <xQueueGenericCreateStatic+0x7a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a148:	2900      	cmp	r1, #0
 800a14a:	bf08      	it	eq
 800a14c:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a14e:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a150:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
 800a152:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800a154:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800a156:	6421      	str	r1, [r4, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a158:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
	taskENTER_CRITICAL();
 800a15c:	f002 f8b2 	bl	800c2c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a160:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a162:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a166:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a168:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800a16c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a170:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a172:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a174:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a176:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a178:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800a17a:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a17c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a17e:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800a180:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a184:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a188:	f7ff ff1e 	bl	8009fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a18c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a190:	f7ff ff1a 	bl	8009fc8 <vListInitialise>
	taskEXIT_CRITICAL();
 800a194:	f002 f8b8 	bl	800c308 <vPortExitCritical>
	}
 800a198:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800a19a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
	}
 800a19e:	b003      	add	sp, #12
 800a1a0:	bd30      	pop	{r4, r5, pc}
 800a1a2:	bf00      	nop

0800a1a4 <xQueueGenericCreate>:
	{
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1a6:	b940      	cbnz	r0, 800a1ba <xQueueGenericCreate+0x16>
 800a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	e7fe      	b.n	800a1b8 <xQueueGenericCreate+0x14>
 800a1ba:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1bc:	fb01 f000 	mul.w	r0, r1, r0
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1c4:	3050      	adds	r0, #80	@ 0x50
 800a1c6:	f002 f9dd 	bl	800c584 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	b340      	cbz	r0, 800a220 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1d4:	b336      	cbz	r6, 800a224 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1d6:	f100 0350 	add.w	r3, r0, #80	@ 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1da:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800a1dc:	e9c4 560f 	strd	r5, r6, [r4, #60]	@ 0x3c
	taskENTER_CRITICAL();
 800a1e0:	f002 f870 	bl	800c2c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1e4:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1e6:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ea:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1ec:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800a1f0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1f4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1f6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1f8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1fa:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1fc:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800a1fe:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a200:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a202:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800a204:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a208:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a20c:	f7ff fedc 	bl	8009fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a210:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a214:	f7ff fed8 	bl	8009fc8 <vListInitialise>
	taskEXIT_CRITICAL();
 800a218:	f002 f876 	bl	800c308 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800a21c:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800a220:	4620      	mov	r0, r4
 800a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a224:	4603      	mov	r3, r0
 800a226:	e7d8      	b.n	800a1da <xQueueGenericCreate+0x36>

0800a228 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800a228:	b940      	cbnz	r0, 800a23c <xQueueCreateCountingSemaphoreStatic+0x14>
 800a22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	e7fe      	b.n	800a23a <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a23c:	4288      	cmp	r0, r1
 800a23e:	d208      	bcs.n	800a252 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800a240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	e7fe      	b.n	800a250 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 800a252:	b530      	push	{r4, r5, lr}
 800a254:	4614      	mov	r4, r2
 800a256:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
 800a258:	2a00      	cmp	r2, #0
 800a25a:	d03b      	beq.n	800a2d4 <xQueueCreateCountingSemaphoreStatic+0xac>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a25c:	2350      	movs	r3, #80	@ 0x50
 800a25e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	2b50      	cmp	r3, #80	@ 0x50
 800a264:	d008      	beq.n	800a278 <xQueueCreateCountingSemaphoreStatic+0x50>
 800a266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	e7fe      	b.n	800a276 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
 800a278:	2500      	movs	r5, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a27a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a27c:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a27e:	63d0      	str	r0, [r2, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a280:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800a284:	6415      	str	r5, [r2, #64]	@ 0x40
 800a286:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a288:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
 800a28a:	f002 f81b 	bl	800c2c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a28e:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a290:	63a5      	str	r5, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a292:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a294:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	@ 0x3c
 800a298:	fb00 f303 	mul.w	r3, r0, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29c:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29e:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2a0:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2a2:	60a3      	str	r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2a4:	23ff      	movs	r3, #255	@ 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2a6:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2aa:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2ac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2b0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2b4:	f7ff fe88 	bl	8009fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2b8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a2bc:	f7ff fe84 	bl	8009fc8 <vListInitialise>
	taskEXIT_CRITICAL();
 800a2c0:	f002 f822 	bl	800c308 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800a2c4:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2c6:	9901      	ldr	r1, [sp, #4]
	}
 800a2c8:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800a2ca:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2ce:	63a1      	str	r1, [r4, #56]	@ 0x38
	}
 800a2d0:	b005      	add	sp, #20
 800a2d2:	bd30      	pop	{r4, r5, pc}
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueCreateCountingSemaphoreStatic+0xbc>
 800a2e6:	bf00      	nop

0800a2e8 <xQueueCreateCountingSemaphore>:
	{
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
 800a2ea:	b940      	cbnz	r0, 800a2fe <xQueueCreateCountingSemaphore+0x16>
 800a2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	e7fe      	b.n	800a2fc <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2fe:	4288      	cmp	r0, r1
 800a300:	4604      	mov	r4, r0
 800a302:	460e      	mov	r6, r1
 800a304:	d208      	bcs.n	800a318 <xQueueCreateCountingSemaphore+0x30>
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	e7fe      	b.n	800a316 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a318:	2050      	movs	r0, #80	@ 0x50
 800a31a:	f002 f933 	bl	800c584 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a31e:	4605      	mov	r5, r0
 800a320:	b330      	cbz	r0, 800a370 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a322:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a324:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a326:	63c4      	str	r4, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a328:	f880 7046 	strb.w	r7, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800a32c:	6407      	str	r7, [r0, #64]	@ 0x40
	taskENTER_CRITICAL();
 800a32e:	f001 ffc9 	bl	800c2c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a332:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a334:	63af      	str	r7, [r5, #56]	@ 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a336:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a33a:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a33c:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	@ 0x3c
 800a340:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a344:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a346:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a348:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a34a:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800a34c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a34e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a350:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a354:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a358:	f7ff fe36 	bl	8009fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a35c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800a360:	f7ff fe32 	bl	8009fc8 <vListInitialise>
	taskEXIT_CRITICAL();
 800a364:	f001 ffd0 	bl	800c308 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800a368:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a36a:	63ae      	str	r6, [r5, #56]	@ 0x38
		pxNewQueue->ucQueueType = ucQueueType;
 800a36c:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
	}
 800a370:	4628      	mov	r0, r5
 800a372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a374 <xQueueGenericSend>:
{
 800a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a37c:	2800      	cmp	r0, #0
 800a37e:	f000 8103 	beq.w	800a588 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a382:	4688      	mov	r8, r1
 800a384:	4604      	mov	r4, r0
 800a386:	461f      	mov	r7, r3
 800a388:	2900      	cmp	r1, #0
 800a38a:	f000 8097 	beq.w	800a4bc <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a38e:	2f02      	cmp	r7, #2
 800a390:	d10b      	bne.n	800a3aa <xQueueGenericSend+0x36>
 800a392:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a394:	2b01      	cmp	r3, #1
 800a396:	d008      	beq.n	800a3aa <xQueueGenericSend+0x36>
 800a398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	e7fe      	b.n	800a3a8 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3aa:	f001 fc3f 	bl	800bc2c <xTaskGetSchedulerState>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f000 80f3 	beq.w	800a59a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3b4:	f1a7 0902 	sub.w	r9, r7, #2
 800a3b8:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ba:	f104 0624 	add.w	r6, r4, #36	@ 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3be:	fab9 f989 	clz	r9, r9
 800a3c2:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
 800a3c6:	f001 ff7d 	bl	800c2c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a3cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	f0c0 80f0 	bcc.w	800a5b4 <xQueueGenericSend+0x240>
 800a3d4:	f1b9 0f00 	cmp.w	r9, #0
 800a3d8:	f040 80ec 	bne.w	800a5b4 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 8101 	beq.w	800a5e6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	f000 80cb 	beq.w	800a580 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
 800a3ea:	f001 ff8d 	bl	800c308 <vPortExitCritical>
		vTaskSuspendAll();
 800a3ee:	f001 fa79 	bl	800b8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3f2:	f001 ff67 	bl	800c2c4 <vPortEnterCritical>
 800a3f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a3fa:	2bff      	cmp	r3, #255	@ 0xff
 800a3fc:	d102      	bne.n	800a404 <xQueueGenericSend+0x90>
 800a3fe:	2300      	movs	r3, #0
 800a400:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a404:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a408:	2bff      	cmp	r3, #255	@ 0xff
 800a40a:	d102      	bne.n	800a412 <xQueueGenericSend+0x9e>
 800a40c:	2300      	movs	r3, #0
 800a40e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a412:	f001 ff79 	bl	800c308 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a416:	a901      	add	r1, sp, #4
 800a418:	a802      	add	r0, sp, #8
 800a41a:	f001 fbbf 	bl	800bb9c <xTaskCheckForTimeOut>
 800a41e:	2800      	cmp	r0, #0
 800a420:	f040 80e5 	bne.w	800a5ee <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a424:	f001 ff4e 	bl	800c2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a428:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a42a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d052      	beq.n	800a4d6 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a430:	f001 ff6a 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a434:	f001 ff46 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a438:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800a43c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a43e:	2d00      	cmp	r5, #0
 800a440:	dc04      	bgt.n	800a44c <xQueueGenericSend+0xd8>
 800a442:	e011      	b.n	800a468 <xQueueGenericSend+0xf4>
			--cTxLock;
 800a444:	1e6a      	subs	r2, r5, #1
 800a446:	b2d3      	uxtb	r3, r2
 800a448:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a44a:	b16b      	cbz	r3, 800a468 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a44c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a44e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a450:	b153      	cbz	r3, 800a468 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a452:	f001 fb51 	bl	800baf8 <xTaskRemoveFromEventList>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0f4      	beq.n	800a444 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
 800a45a:	f001 fbe1 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800a45e:	1e6a      	subs	r2, r5, #1
 800a460:	b2d3      	uxtb	r3, r2
 800a462:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f1      	bne.n	800a44c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 800a468:	23ff      	movs	r3, #255	@ 0xff
 800a46a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800a46e:	f001 ff4b 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a472:	f001 ff27 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a476:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800a47a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	dd14      	ble.n	800a4aa <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a480:	f104 0a10 	add.w	sl, r4, #16
 800a484:	e003      	b.n	800a48e <xQueueGenericSend+0x11a>
				--cRxLock;
 800a486:	1e6a      	subs	r2, r5, #1
 800a488:	b2d3      	uxtb	r3, r2
 800a48a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a48c:	b16b      	cbz	r3, 800a4aa <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a48e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a490:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a492:	b153      	cbz	r3, 800a4aa <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a494:	f001 fb30 	bl	800baf8 <xTaskRemoveFromEventList>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0f4      	beq.n	800a486 <xQueueGenericSend+0x112>
					vTaskMissedYield();
 800a49c:	f001 fbc0 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800a4a0:	1e6a      	subs	r2, r5, #1
 800a4a2:	b2d3      	uxtb	r3, r2
 800a4a4:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f1      	bne.n	800a48e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
 800a4aa:	23ff      	movs	r3, #255	@ 0xff
 800a4ac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800a4b0:	f001 ff2a 	bl	800c308 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800a4b4:	f001 fa1e 	bl	800b8f4 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4b8:	2501      	movs	r5, #1
 800a4ba:	e784      	b.n	800a3c6 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4bc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f43f af65 	beq.w	800a38e <xQueueGenericSend+0x1a>
 800a4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4d6:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800a4da:	f001 ff15 	bl	800c308 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4de:	9901      	ldr	r1, [sp, #4]
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	f001 fa7b 	bl	800b9dc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800a4e6:	f001 feed 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a4ea:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a4ee:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	dc04      	bgt.n	800a4fe <xQueueGenericSend+0x18a>
 800a4f4:	e011      	b.n	800a51a <xQueueGenericSend+0x1a6>
			--cTxLock;
 800a4f6:	1e6b      	subs	r3, r5, #1
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4fc:	b16a      	cbz	r2, 800a51a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a500:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a502:	b153      	cbz	r3, 800a51a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a504:	f001 faf8 	bl	800baf8 <xTaskRemoveFromEventList>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d0f4      	beq.n	800a4f6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
 800a50c:	f001 fb88 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800a510:	1e6b      	subs	r3, r5, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a516:	2a00      	cmp	r2, #0
 800a518:	d1f1      	bne.n	800a4fe <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
 800a51a:	23ff      	movs	r3, #255	@ 0xff
 800a51c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800a520:	f001 fef2 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a524:	f001 fece 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a528:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a52c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a52e:	2d00      	cmp	r5, #0
 800a530:	dc04      	bgt.n	800a53c <xQueueGenericSend+0x1c8>
 800a532:	e011      	b.n	800a558 <xQueueGenericSend+0x1e4>
				--cRxLock;
 800a534:	1e6b      	subs	r3, r5, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a53a:	b16a      	cbz	r2, 800a558 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a53c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a53e:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a540:	b153      	cbz	r3, 800a558 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a542:	f001 fad9 	bl	800baf8 <xTaskRemoveFromEventList>
 800a546:	2800      	cmp	r0, #0
 800a548:	d0f4      	beq.n	800a534 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
 800a54a:	f001 fb69 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800a54e:	1e6b      	subs	r3, r5, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a554:	2a00      	cmp	r2, #0
 800a556:	d1f1      	bne.n	800a53c <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
 800a558:	23ff      	movs	r3, #255	@ 0xff
 800a55a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800a55e:	f001 fed3 	bl	800c308 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800a562:	f001 f9c7 	bl	800b8f4 <xTaskResumeAll>
 800a566:	2800      	cmp	r0, #0
 800a568:	d1a6      	bne.n	800a4b8 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
 800a56a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a572:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	e79b      	b.n	800a4b8 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a580:	a802      	add	r0, sp, #8
 800a582:	f001 faff 	bl	800bb84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a586:	e730      	b.n	800a3ea <xQueueGenericSend+0x76>
 800a588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a598:	e7fe      	b.n	800a598 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f43f af09 	beq.w	800a3b4 <xQueueGenericSend+0x40>
 800a5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	e7fe      	b.n	800a5b2 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5b4:	463a      	mov	r2, r7
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff fd4f 	bl	800a05c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d151      	bne.n	800a668 <xQueueGenericSend+0x2f4>
					else if( xYieldRequired != pdFALSE )
 800a5c4:	b148      	cbz	r0, 800a5da <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
 800a5c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a5ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a5da:	f001 fe95 	bl	800c308 <vPortExitCritical>
				return pdPASS;
 800a5de:	2001      	movs	r0, #1
}
 800a5e0:	b004      	add	sp, #16
 800a5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
 800a5e6:	f001 fe8f 	bl	800c308 <vPortExitCritical>
					return errQUEUE_FULL;
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	e7f8      	b.n	800a5e0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
 800a5ee:	f001 fe69 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a5f2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a5f6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	dd10      	ble.n	800a61e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5fc:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 800a600:	e003      	b.n	800a60a <xQueueGenericSend+0x296>
			--cTxLock;
 800a602:	1e6b      	subs	r3, r5, #1
 800a604:	b2da      	uxtb	r2, r3
 800a606:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a608:	b14a      	cbz	r2, 800a61e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a60a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a60c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a60e:	b133      	cbz	r3, 800a61e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a610:	f001 fa72 	bl	800baf8 <xTaskRemoveFromEventList>
 800a614:	2800      	cmp	r0, #0
 800a616:	d0f4      	beq.n	800a602 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
 800a618:	f001 fb02 	bl	800bc20 <vTaskMissedYield>
 800a61c:	e7f1      	b.n	800a602 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
 800a61e:	23ff      	movs	r3, #255	@ 0xff
 800a620:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800a624:	f001 fe70 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a628:	f001 fe4c 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a62c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a630:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a632:	2d00      	cmp	r5, #0
 800a634:	dd10      	ble.n	800a658 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a636:	f104 0610 	add.w	r6, r4, #16
 800a63a:	e003      	b.n	800a644 <xQueueGenericSend+0x2d0>
				--cRxLock;
 800a63c:	1e6b      	subs	r3, r5, #1
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a642:	b14a      	cbz	r2, 800a658 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a644:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a646:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a648:	b133      	cbz	r3, 800a658 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a64a:	f001 fa55 	bl	800baf8 <xTaskRemoveFromEventList>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d0f4      	beq.n	800a63c <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
 800a652:	f001 fae5 	bl	800bc20 <vTaskMissedYield>
 800a656:	e7f1      	b.n	800a63c <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
 800a658:	23ff      	movs	r3, #255	@ 0xff
 800a65a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800a65e:	f001 fe53 	bl	800c308 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800a662:	f001 f947 	bl	800b8f4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800a666:	e7c0      	b.n	800a5ea <xQueueGenericSend+0x276>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a668:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a66c:	f001 fa44 	bl	800baf8 <xTaskRemoveFromEventList>
 800a670:	2800      	cmp	r0, #0
 800a672:	d0b2      	beq.n	800a5da <xQueueGenericSend+0x266>
 800a674:	e7a7      	b.n	800a5c6 <xQueueGenericSend+0x252>
 800a676:	bf00      	nop

0800a678 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 800a678:	2800      	cmp	r0, #0
 800a67a:	d04b      	beq.n	800a714 <xQueueGenericSendFromISR+0x9c>
{
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	460e      	mov	r6, r1
 800a682:	4604      	mov	r4, r0
 800a684:	4617      	mov	r7, r2
 800a686:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a688:	b339      	cbz	r1, 800a6da <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a68a:	2d02      	cmp	r5, #2
 800a68c:	d10b      	bne.n	800a6a6 <xQueueGenericSendFromISR+0x2e>
 800a68e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d008      	beq.n	800a6a6 <xQueueGenericSendFromISR+0x2e>
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	e7fe      	b.n	800a6a4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6a6:	f001 ff3f 	bl	800c528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6aa:	f3ef 8811 	mrs	r8, BASEPRI
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6be:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a6c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d315      	bcc.n	800a6f2 <xQueueGenericSendFromISR+0x7a>
 800a6c6:	f1a5 0002 	sub.w	r0, r5, #2
 800a6ca:	fab0 f080 	clz	r0, r0
 800a6ce:	0940      	lsrs	r0, r0, #5
 800a6d0:	b978      	cbnz	r0, 800a6f2 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6d2:	f388 8811 	msr	BASEPRI, r8
}
 800a6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d0d4      	beq.n	800a68a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	e7fe      	b.n	800a6f0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6f2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6f4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6fc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a700:	f7ff fcac 	bl	800a05c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a704:	1c6b      	adds	r3, r5, #1
 800a706:	d00e      	beq.n	800a726 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a708:	1c6b      	adds	r3, r5, #1
 800a70a:	b25b      	sxtb	r3, r3
 800a70c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 800a710:	2001      	movs	r0, #1
 800a712:	e7de      	b.n	800a6d2 <xQueueGenericSendFromISR+0x5a>
 800a714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a724:	e7fe      	b.n	800a724 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a726:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0f1      	beq.n	800a710 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a72c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a730:	f001 f9e2 	bl	800baf8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800a734:	2800      	cmp	r0, #0
 800a736:	d0eb      	beq.n	800a710 <xQueueGenericSendFromISR+0x98>
 800a738:	2f00      	cmp	r7, #0
 800a73a:	d0e9      	beq.n	800a710 <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a73c:	2301      	movs	r3, #1
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	e7e6      	b.n	800a710 <xQueueGenericSendFromISR+0x98>
 800a742:	bf00      	nop

0800a744 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800a744:	b360      	cbz	r0, 800a7a0 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a746:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a74c:	b143      	cbz	r3, 800a760 <xQueueGiveFromISR+0x1c>
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	e7fe      	b.n	800a75e <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a760:	6803      	ldr	r3, [r0, #0]
 800a762:	460d      	mov	r5, r1
 800a764:	b32b      	cbz	r3, 800a7b2 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a766:	f001 fedf 	bl	800c528 <vPortValidateInterruptPriority>
	__asm volatile
 800a76a:	f3ef 8611 	mrs	r6, BASEPRI
 800a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a77e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a780:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a782:	429a      	cmp	r2, r3
 800a784:	d921      	bls.n	800a7ca <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a786:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a78a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 800a78c:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a78e:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800a790:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 800a792:	d01e      	beq.n	800a7d2 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a794:	3301      	adds	r3, #1
 800a796:	b25b      	sxtb	r3, r3
 800a798:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 800a79c:	2001      	movs	r0, #1
 800a79e:	e015      	b.n	800a7cc <xQueueGiveFromISR+0x88>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a7b0:	e7fe      	b.n	800a7b0 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7b2:	6883      	ldr	r3, [r0, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d0d6      	beq.n	800a766 <xQueueGiveFromISR+0x22>
 800a7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	e7fe      	b.n	800a7c8 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800a7ca:	2000      	movs	r0, #0
	__asm volatile
 800a7cc:	f386 8811 	msr	BASEPRI, r6
}
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0e1      	beq.n	800a79c <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a7dc:	f001 f98c 	bl	800baf8 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	d0db      	beq.n	800a79c <xQueueGiveFromISR+0x58>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0d9      	beq.n	800a79c <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	e7d6      	b.n	800a79c <xQueueGiveFromISR+0x58>
 800a7ee:	bf00      	nop

0800a7f0 <xQueueReceive>:
{
 800a7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f000 8164 	beq.w	800aac6 <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7fe:	460f      	mov	r7, r1
 800a800:	4604      	mov	r4, r0
 800a802:	2900      	cmp	r1, #0
 800a804:	f000 8097 	beq.w	800a936 <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a808:	f001 fa10 	bl	800bc2c <xTaskGetSchedulerState>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f000 809f 	beq.w	800a950 <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 800a812:	f001 fd57 	bl	800c2c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a816:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a818:	2d00      	cmp	r5, #0
 800a81a:	d175      	bne.n	800a908 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80f4 	beq.w	800aa0c <xQueueReceive+0x21c>
		prvLockQueue( pxQueue );
 800a824:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a826:	f104 0624 	add.w	r6, r4, #36	@ 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a82a:	a802      	add	r0, sp, #8
 800a82c:	f001 f9aa 	bl	800bb84 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a830:	f001 fd6a 	bl	800c308 <vPortExitCritical>
		vTaskSuspendAll();
 800a834:	f001 f856 	bl	800b8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a838:	f001 fd44 	bl	800c2c4 <vPortEnterCritical>
 800a83c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a840:	2bff      	cmp	r3, #255	@ 0xff
 800a842:	d101      	bne.n	800a848 <xQueueReceive+0x58>
 800a844:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800a848:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a84c:	2bff      	cmp	r3, #255	@ 0xff
 800a84e:	d101      	bne.n	800a854 <xQueueReceive+0x64>
 800a850:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800a854:	f001 fd58 	bl	800c308 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a858:	a901      	add	r1, sp, #4
 800a85a:	a802      	add	r0, sp, #8
 800a85c:	f001 f99e 	bl	800bb9c <xTaskCheckForTimeOut>
 800a860:	2800      	cmp	r0, #0
 800a862:	f040 8082 	bne.w	800a96a <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 800a866:	f001 fd2d 	bl	800c2c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a86a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80d3 	beq.w	800aa18 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 800a872:	f001 fd49 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a876:	f001 fd25 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a87a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a87e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a880:	2d00      	cmp	r5, #0
 800a882:	dd14      	ble.n	800a8ae <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a884:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 800a888:	e003      	b.n	800a892 <xQueueReceive+0xa2>
			--cTxLock;
 800a88a:	1e6b      	subs	r3, r5, #1
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a890:	b16a      	cbz	r2, 800a8ae <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a892:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a894:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a896:	b153      	cbz	r3, 800a8ae <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a898:	f001 f92e 	bl	800baf8 <xTaskRemoveFromEventList>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d0f4      	beq.n	800a88a <xQueueReceive+0x9a>
						vTaskMissedYield();
 800a8a0:	f001 f9be 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800a8a4:	1e6b      	subs	r3, r5, #1
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d1f1      	bne.n	800a892 <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 800a8ae:	23ff      	movs	r3, #255	@ 0xff
 800a8b0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800a8b4:	f001 fd28 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a8b8:	f001 fd04 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a8bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a8c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8c2:	2d00      	cmp	r5, #0
 800a8c4:	dd14      	ble.n	800a8f0 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c6:	f104 0910 	add.w	r9, r4, #16
 800a8ca:	e003      	b.n	800a8d4 <xQueueReceive+0xe4>
				--cRxLock;
 800a8cc:	1e6b      	subs	r3, r5, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8d2:	b16a      	cbz	r2, 800a8f0 <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8d4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8d6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8d8:	b153      	cbz	r3, 800a8f0 <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8da:	f001 f90d 	bl	800baf8 <xTaskRemoveFromEventList>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d0f4      	beq.n	800a8cc <xQueueReceive+0xdc>
					vTaskMissedYield();
 800a8e2:	f001 f99d 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800a8e6:	1e6b      	subs	r3, r5, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d1f1      	bne.n	800a8d4 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 800a8f0:	23ff      	movs	r3, #255	@ 0xff
 800a8f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800a8f6:	f001 fd07 	bl	800c308 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800a8fa:	f000 fffb 	bl	800b8f4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800a8fe:	f001 fce1 	bl	800c2c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a902:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a904:	2d00      	cmp	r5, #0
 800a906:	d07d      	beq.n	800aa04 <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a908:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a90a:	b152      	cbz	r2, 800a922 <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a90c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a90e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a910:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a912:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a914:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a916:	d301      	bcc.n	800a91c <xQueueReceive+0x12c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a918:	6821      	ldr	r1, [r4, #0]
 800a91a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a91c:	4638      	mov	r0, r7
 800a91e:	f019 fc92 	bl	8024246 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a922:	3d01      	subs	r5, #1
 800a924:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f040 80d5 	bne.w	800aad8 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 800a92e:	f001 fceb 	bl	800c308 <vPortExitCritical>
				return pdPASS;
 800a932:	2001      	movs	r0, #1
 800a934:	e06d      	b.n	800aa12 <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a936:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f43f af65 	beq.w	800a808 <xQueueReceive+0x18>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	e7fe      	b.n	800a94e <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f43f af5d 	beq.w	800a812 <xQueueReceive+0x22>
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	e7fe      	b.n	800a968 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 800a96a:	f001 fcab 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a96e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a972:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a974:	2d00      	cmp	r5, #0
 800a976:	dc04      	bgt.n	800a982 <xQueueReceive+0x192>
 800a978:	e011      	b.n	800a99e <xQueueReceive+0x1ae>
			--cTxLock;
 800a97a:	1e6b      	subs	r3, r5, #1
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a980:	b16a      	cbz	r2, 800a99e <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a982:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a984:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a986:	b153      	cbz	r3, 800a99e <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a988:	f001 f8b6 	bl	800baf8 <xTaskRemoveFromEventList>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d0f4      	beq.n	800a97a <xQueueReceive+0x18a>
						vTaskMissedYield();
 800a990:	f001 f946 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800a994:	1e6b      	subs	r3, r5, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d1f1      	bne.n	800a982 <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 800a99e:	23ff      	movs	r3, #255	@ 0xff
 800a9a0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800a9a4:	f001 fcb0 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a9a8:	f001 fc8c 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a9ac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a9b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9b2:	2d00      	cmp	r5, #0
 800a9b4:	dd14      	ble.n	800a9e0 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9b6:	f104 0910 	add.w	r9, r4, #16
 800a9ba:	e003      	b.n	800a9c4 <xQueueReceive+0x1d4>
				--cRxLock;
 800a9bc:	1e6b      	subs	r3, r5, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9c2:	b16a      	cbz	r2, 800a9e0 <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9c6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c8:	b153      	cbz	r3, 800a9e0 <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ca:	f001 f895 	bl	800baf8 <xTaskRemoveFromEventList>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d0f4      	beq.n	800a9bc <xQueueReceive+0x1cc>
					vTaskMissedYield();
 800a9d2:	f001 f925 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800a9d6:	1e6b      	subs	r3, r5, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	d1f1      	bne.n	800a9c4 <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 800a9e0:	23ff      	movs	r3, #255	@ 0xff
 800a9e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800a9e6:	f001 fc8f 	bl	800c308 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800a9ea:	f000 ff83 	bl	800b8f4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800a9ee:	f001 fc69 	bl	800c2c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a9f4:	b153      	cbz	r3, 800aa0c <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 800a9f6:	f001 fc87 	bl	800c308 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a9fa:	f001 fc63 	bl	800c2c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9fe:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d181      	bne.n	800a908 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f47f af12 	bne.w	800a830 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 800aa0c:	f001 fc7c 	bl	800c308 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800aa10:	2000      	movs	r0, #0
}
 800aa12:	b005      	add	sp, #20
 800aa14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa18:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 800aa1c:	f001 fc74 	bl	800c308 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa20:	9901      	ldr	r1, [sp, #4]
 800aa22:	4648      	mov	r0, r9
 800aa24:	f000 ffda 	bl	800b9dc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800aa28:	f001 fc4c 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800aa2c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800aa30:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa32:	2d00      	cmp	r5, #0
 800aa34:	dc04      	bgt.n	800aa40 <xQueueReceive+0x250>
 800aa36:	e011      	b.n	800aa5c <xQueueReceive+0x26c>
			--cTxLock;
 800aa38:	1e6b      	subs	r3, r5, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa3e:	b16a      	cbz	r2, 800aa5c <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa42:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa44:	b153      	cbz	r3, 800aa5c <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa46:	f001 f857 	bl	800baf8 <xTaskRemoveFromEventList>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d0f4      	beq.n	800aa38 <xQueueReceive+0x248>
						vTaskMissedYield();
 800aa4e:	f001 f8e7 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800aa52:	1e6b      	subs	r3, r5, #1
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	d1f1      	bne.n	800aa40 <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 800aa5c:	23ff      	movs	r3, #255	@ 0xff
 800aa5e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800aa62:	f001 fc51 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800aa66:	f001 fc2d 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800aa6a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800aa6e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa70:	2d00      	cmp	r5, #0
 800aa72:	dd14      	ble.n	800aa9e <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa74:	f104 0910 	add.w	r9, r4, #16
 800aa78:	e003      	b.n	800aa82 <xQueueReceive+0x292>
				--cRxLock;
 800aa7a:	1e6b      	subs	r3, r5, #1
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa80:	b16a      	cbz	r2, 800aa9e <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa82:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa84:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa86:	b153      	cbz	r3, 800aa9e <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa88:	f001 f836 	bl	800baf8 <xTaskRemoveFromEventList>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d0f4      	beq.n	800aa7a <xQueueReceive+0x28a>
					vTaskMissedYield();
 800aa90:	f001 f8c6 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800aa94:	1e6b      	subs	r3, r5, #1
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa9a:	2a00      	cmp	r2, #0
 800aa9c:	d1f1      	bne.n	800aa82 <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 800aa9e:	23ff      	movs	r3, #255	@ 0xff
 800aaa0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800aaa4:	f001 fc30 	bl	800c308 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800aaa8:	f000 ff24 	bl	800b8f4 <xTaskResumeAll>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d1a4      	bne.n	800a9fa <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 800aab0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800aac4:	e799      	b.n	800a9fa <xQueueReceive+0x20a>
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800aad6:	e7fe      	b.n	800aad6 <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad8:	f104 0010 	add.w	r0, r4, #16
 800aadc:	f001 f80c 	bl	800baf8 <xTaskRemoveFromEventList>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	f43f af24 	beq.w	800a92e <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 800aae6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aaea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	e718      	b.n	800a92e <xQueueReceive+0x13e>

0800aafc <xQueueSemaphoreTake>:
{
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d05e      	beq.n	800abc6 <xQueueSemaphoreTake+0xca>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab08:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	b147      	cbz	r7, 800ab20 <xQueueSemaphoreTake+0x24>
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	e7fe      	b.n	800ab1e <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab20:	f001 f884 	bl	800bc2c <xTaskGetSchedulerState>
 800ab24:	4605      	mov	r5, r0
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d056      	beq.n	800abd8 <xQueueSemaphoreTake+0xdc>
 800ab2a:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab2c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskENTER_CRITICAL();
 800ab30:	f001 fbc8 	bl	800c2c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f040 814d 	bne.w	800add6 <xQueueSemaphoreTake+0x2da>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 813e 	beq.w	800adc0 <xQueueSemaphoreTake+0x2c4>
				else if( xEntryTimeSet == pdFALSE )
 800ab44:	2d00      	cmp	r5, #0
 800ab46:	f000 80a3 	beq.w	800ac90 <xQueueSemaphoreTake+0x194>
		taskEXIT_CRITICAL();
 800ab4a:	f001 fbdd 	bl	800c308 <vPortExitCritical>
		vTaskSuspendAll();
 800ab4e:	f000 fec9 	bl	800b8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab52:	f001 fbb7 	bl	800c2c4 <vPortEnterCritical>
 800ab56:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ab5a:	2bff      	cmp	r3, #255	@ 0xff
 800ab5c:	d102      	bne.n	800ab64 <xQueueSemaphoreTake+0x68>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ab64:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ab68:	2bff      	cmp	r3, #255	@ 0xff
 800ab6a:	d102      	bne.n	800ab72 <xQueueSemaphoreTake+0x76>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ab72:	f001 fbc9 	bl	800c308 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab76:	a901      	add	r1, sp, #4
 800ab78:	a802      	add	r0, sp, #8
 800ab7a:	f001 f80f 	bl	800bb9c <xTaskCheckForTimeOut>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d137      	bne.n	800abf2 <xQueueSemaphoreTake+0xf6>
	taskENTER_CRITICAL();
 800ab82:	f001 fb9f 	bl	800c2c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80ae 	beq.w	800acea <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
 800ab8e:	f001 fbbb 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ab92:	f001 fb97 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ab96:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ab9a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab9c:	2d00      	cmp	r5, #0
 800ab9e:	dd7f      	ble.n	800aca0 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba0:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 800aba4:	e004      	b.n	800abb0 <xQueueSemaphoreTake+0xb4>
			--cTxLock;
 800aba6:	1e6b      	subs	r3, r5, #1
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abac:	2a00      	cmp	r2, #0
 800abae:	d077      	beq.n	800aca0 <xQueueSemaphoreTake+0x1a4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abb2:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d073      	beq.n	800aca0 <xQueueSemaphoreTake+0x1a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abb8:	f000 ff9e 	bl	800baf8 <xTaskRemoveFromEventList>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d0f2      	beq.n	800aba6 <xQueueSemaphoreTake+0xaa>
						vTaskMissedYield();
 800abc0:	f001 f82e 	bl	800bc20 <vTaskMissedYield>
 800abc4:	e7ef      	b.n	800aba6 <xQueueSemaphoreTake+0xaa>
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800abd6:	e7fe      	b.n	800abd6 <xQueueSemaphoreTake+0xda>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 80d7 	beq.w	800ad8e <xQueueSemaphoreTake+0x292>
 800abe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	e7fe      	b.n	800abf0 <xQueueSemaphoreTake+0xf4>
	taskENTER_CRITICAL();
 800abf2:	f001 fb67 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800abf6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800abfa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abfc:	2d00      	cmp	r5, #0
 800abfe:	dc04      	bgt.n	800ac0a <xQueueSemaphoreTake+0x10e>
 800ac00:	e011      	b.n	800ac26 <xQueueSemaphoreTake+0x12a>
			--cTxLock;
 800ac02:	1e6b      	subs	r3, r5, #1
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac08:	b16a      	cbz	r2, 800ac26 <xQueueSemaphoreTake+0x12a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac0c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac0e:	b153      	cbz	r3, 800ac26 <xQueueSemaphoreTake+0x12a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac10:	f000 ff72 	bl	800baf8 <xTaskRemoveFromEventList>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d0f4      	beq.n	800ac02 <xQueueSemaphoreTake+0x106>
						vTaskMissedYield();
 800ac18:	f001 f802 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800ac1c:	1e6b      	subs	r3, r5, #1
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	d1f1      	bne.n	800ac0a <xQueueSemaphoreTake+0x10e>
		pxQueue->cTxLock = queueUNLOCKED;
 800ac26:	23ff      	movs	r3, #255	@ 0xff
 800ac28:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ac2c:	f001 fb6c 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ac30:	f001 fb48 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ac34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ac38:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	dd14      	ble.n	800ac68 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac3e:	f104 0810 	add.w	r8, r4, #16
 800ac42:	e003      	b.n	800ac4c <xQueueSemaphoreTake+0x150>
				--cRxLock;
 800ac44:	1e6b      	subs	r3, r5, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac4a:	b16a      	cbz	r2, 800ac68 <xQueueSemaphoreTake+0x16c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac4c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac4e:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac50:	b153      	cbz	r3, 800ac68 <xQueueSemaphoreTake+0x16c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac52:	f000 ff51 	bl	800baf8 <xTaskRemoveFromEventList>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d0f4      	beq.n	800ac44 <xQueueSemaphoreTake+0x148>
					vTaskMissedYield();
 800ac5a:	f000 ffe1 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800ac5e:	1e6b      	subs	r3, r5, #1
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	d1f1      	bne.n	800ac4c <xQueueSemaphoreTake+0x150>
		pxQueue->cRxLock = queueUNLOCKED;
 800ac68:	23ff      	movs	r3, #255	@ 0xff
 800ac6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800ac6e:	f001 fb4b 	bl	800c308 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800ac72:	f000 fe3f 	bl	800b8f4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800ac76:	f001 fb25 	bl	800c2c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ac7c:	b963      	cbnz	r3, 800ac98 <xQueueSemaphoreTake+0x19c>
	taskEXIT_CRITICAL();
 800ac7e:	f001 fb43 	bl	800c308 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800ac82:	2f00      	cmp	r7, #0
 800ac84:	f040 8085 	bne.w	800ad92 <xQueueSemaphoreTake+0x296>
					return errQUEUE_EMPTY;
 800ac88:	2000      	movs	r0, #0
}
 800ac8a:	b004      	add	sp, #16
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac90:	a802      	add	r0, sp, #8
 800ac92:	f000 ff77 	bl	800bb84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac96:	e758      	b.n	800ab4a <xQueueSemaphoreTake+0x4e>
	taskEXIT_CRITICAL();
 800ac98:	f001 fb36 	bl	800c308 <vPortExitCritical>
	return xReturn;
 800ac9c:	2501      	movs	r5, #1
 800ac9e:	e747      	b.n	800ab30 <xQueueSemaphoreTake+0x34>
		pxQueue->cTxLock = queueUNLOCKED;
 800aca0:	23ff      	movs	r3, #255	@ 0xff
 800aca2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800aca6:	f001 fb2f 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800acaa:	f001 fb0b 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800acae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800acb2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acb4:	2d00      	cmp	r5, #0
 800acb6:	dd10      	ble.n	800acda <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb8:	f104 0810 	add.w	r8, r4, #16
 800acbc:	e003      	b.n	800acc6 <xQueueSemaphoreTake+0x1ca>
				--cRxLock;
 800acbe:	1e6b      	subs	r3, r5, #1
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acc4:	b14a      	cbz	r2, 800acda <xQueueSemaphoreTake+0x1de>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acc6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acca:	b133      	cbz	r3, 800acda <xQueueSemaphoreTake+0x1de>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800accc:	f000 ff14 	bl	800baf8 <xTaskRemoveFromEventList>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d0f4      	beq.n	800acbe <xQueueSemaphoreTake+0x1c2>
					vTaskMissedYield();
 800acd4:	f000 ffa4 	bl	800bc20 <vTaskMissedYield>
 800acd8:	e7f1      	b.n	800acbe <xQueueSemaphoreTake+0x1c2>
		pxQueue->cRxLock = queueUNLOCKED;
 800acda:	23ff      	movs	r3, #255	@ 0xff
 800acdc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800ace0:	f001 fb12 	bl	800c308 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800ace4:	f000 fe06 	bl	800b8f4 <xTaskResumeAll>
 800ace8:	e7d8      	b.n	800ac9c <xQueueSemaphoreTake+0x1a0>
	taskEXIT_CRITICAL();
 800acea:	f001 fb0d 	bl	800c308 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d05c      	beq.n	800adae <xQueueSemaphoreTake+0x2b2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acf4:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 800acf8:	9901      	ldr	r1, [sp, #4]
 800acfa:	4640      	mov	r0, r8
 800acfc:	f000 fe6e 	bl	800b9dc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800ad00:	f001 fae0 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ad04:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ad08:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad0a:	2d00      	cmp	r5, #0
 800ad0c:	dc04      	bgt.n	800ad18 <xQueueSemaphoreTake+0x21c>
 800ad0e:	e00d      	b.n	800ad2c <xQueueSemaphoreTake+0x230>
			--cTxLock;
 800ad10:	1e6b      	subs	r3, r5, #1
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad16:	b14a      	cbz	r2, 800ad2c <xQueueSemaphoreTake+0x230>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad1a:	4640      	mov	r0, r8
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad1c:	b133      	cbz	r3, 800ad2c <xQueueSemaphoreTake+0x230>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad1e:	f000 feeb 	bl	800baf8 <xTaskRemoveFromEventList>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0f4      	beq.n	800ad10 <xQueueSemaphoreTake+0x214>
						vTaskMissedYield();
 800ad26:	f000 ff7b 	bl	800bc20 <vTaskMissedYield>
 800ad2a:	e7f1      	b.n	800ad10 <xQueueSemaphoreTake+0x214>
		pxQueue->cTxLock = queueUNLOCKED;
 800ad2c:	23ff      	movs	r3, #255	@ 0xff
 800ad2e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ad32:	f001 fae9 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ad36:	f001 fac5 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ad3a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ad3e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	dd10      	ble.n	800ad66 <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad44:	f104 0810 	add.w	r8, r4, #16
 800ad48:	e003      	b.n	800ad52 <xQueueSemaphoreTake+0x256>
				--cRxLock;
 800ad4a:	1e6b      	subs	r3, r5, #1
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad50:	b14a      	cbz	r2, 800ad66 <xQueueSemaphoreTake+0x26a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad52:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad54:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad56:	b133      	cbz	r3, 800ad66 <xQueueSemaphoreTake+0x26a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad58:	f000 fece 	bl	800baf8 <xTaskRemoveFromEventList>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d0f4      	beq.n	800ad4a <xQueueSemaphoreTake+0x24e>
					vTaskMissedYield();
 800ad60:	f000 ff5e 	bl	800bc20 <vTaskMissedYield>
 800ad64:	e7f1      	b.n	800ad4a <xQueueSemaphoreTake+0x24e>
		pxQueue->cRxLock = queueUNLOCKED;
 800ad66:	23ff      	movs	r3, #255	@ 0xff
 800ad68:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800ad6c:	f001 facc 	bl	800c308 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800ad70:	f000 fdc0 	bl	800b8f4 <xTaskResumeAll>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d191      	bne.n	800ac9c <xQueueSemaphoreTake+0x1a0>
					portYIELD_WITHIN_API();
 800ad78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ad7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	e786      	b.n	800ac9c <xQueueSemaphoreTake+0x1a0>
 800ad8e:	462f      	mov	r7, r5
 800ad90:	e6cc      	b.n	800ab2c <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 800ad92:	f001 fa97 	bl	800c2c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ad98:	b119      	cbz	r1, 800ada2 <xQueueSemaphoreTake+0x2a6>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ad9c:	6819      	ldr	r1, [r3, #0]
 800ad9e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ada2:	68a0      	ldr	r0, [r4, #8]
 800ada4:	f000 ffd6 	bl	800bd54 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800ada8:	f001 faae 	bl	800c308 <vPortExitCritical>
 800adac:	e76c      	b.n	800ac88 <xQueueSemaphoreTake+0x18c>
						taskENTER_CRITICAL();
 800adae:	f001 fa89 	bl	800c2c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adb2:	68a0      	ldr	r0, [r4, #8]
 800adb4:	f000 ff4a 	bl	800bc4c <xTaskPriorityInherit>
 800adb8:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800adba:	f001 faa5 	bl	800c308 <vPortExitCritical>
 800adbe:	e799      	b.n	800acf4 <xQueueSemaphoreTake+0x1f8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800adc0:	2f00      	cmp	r7, #0
 800adc2:	d0f1      	beq.n	800ada8 <xQueueSemaphoreTake+0x2ac>
 800adc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	e7fe      	b.n	800add4 <xQueueSemaphoreTake+0x2d8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800add6:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800add8:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800adda:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800addc:	b12a      	cbz	r2, 800adea <xQueueSemaphoreTake+0x2ee>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	b93b      	cbnz	r3, 800adf2 <xQueueSemaphoreTake+0x2f6>
				taskEXIT_CRITICAL();
 800ade2:	f001 fa91 	bl	800c308 <vPortExitCritical>
				return pdPASS;
 800ade6:	2001      	movs	r0, #1
 800ade8:	e74f      	b.n	800ac8a <xQueueSemaphoreTake+0x18e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800adea:	f001 f803 	bl	800bdf4 <pvTaskIncrementMutexHeldCount>
 800adee:	60a0      	str	r0, [r4, #8]
 800adf0:	e7f5      	b.n	800adde <xQueueSemaphoreTake+0x2e2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf2:	f104 0010 	add.w	r0, r4, #16
 800adf6:	f000 fe7f 	bl	800baf8 <xTaskRemoveFromEventList>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d0f1      	beq.n	800ade2 <xQueueSemaphoreTake+0x2e6>
						queueYIELD_IF_USING_PREEMPTION();
 800adfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ae02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	e7e6      	b.n	800ade2 <xQueueSemaphoreTake+0x2e6>

0800ae14 <xQueueReceiveFromISR>:
{
 800ae14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ae18:	b310      	cbz	r0, 800ae60 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae1a:	460f      	mov	r7, r1
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	4616      	mov	r6, r2
 800ae20:	b191      	cbz	r1, 800ae48 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae22:	f001 fb81 	bl	800c528 <vPortValidateInterruptPriority>
	__asm volatile
 800ae26:	f3ef 8911 	mrs	r9, BASEPRI
 800ae2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae3a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae3c:	b9cd      	cbnz	r5, 800ae72 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800ae3e:	4628      	mov	r0, r5
	__asm volatile
 800ae40:	f389 8811 	msr	BASEPRI, r9
}
 800ae44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae48:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0e9      	beq.n	800ae22 <xQueueReceiveFromISR+0xe>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	e7fe      	b.n	800ae5e <xQueueReceiveFromISR+0x4a>
 800ae60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ae70:	e7fe      	b.n	800ae70 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae72:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae76:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae78:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae7c:	b142      	cbz	r2, 800ae90 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae7e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae80:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae82:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae84:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae86:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae88:	d21c      	bcs.n	800aec4 <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	f019 f9db 	bl	8024246 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae90:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800ae92:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae96:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800ae98:	d006      	beq.n	800aea8 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae9a:	f108 0301 	add.w	r3, r8, #1
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800aea4:	2001      	movs	r0, #1
 800aea6:	e7cb      	b.n	800ae40 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0fa      	beq.n	800aea4 <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeae:	f104 0010 	add.w	r0, r4, #16
 800aeb2:	f000 fe21 	bl	800baf8 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	d0f4      	beq.n	800aea4 <xQueueReceiveFromISR+0x90>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d0f2      	beq.n	800aea4 <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	6033      	str	r3, [r6, #0]
 800aec2:	e7ef      	b.n	800aea4 <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aec4:	6821      	ldr	r1, [r4, #0]
 800aec6:	60e1      	str	r1, [r4, #12]
 800aec8:	e7df      	b.n	800ae8a <xQueueReceiveFromISR+0x76>
 800aeca:	bf00      	nop
 800aecc:	0000      	movs	r0, r0
	...

0800aed0 <vQueueDelete>:
	configASSERT( pxQueue );
 800aed0:	b1e0      	cbz	r0, 800af0c <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aed2:	4b21      	ldr	r3, [pc, #132]	@ (800af58 <vQueueDelete+0x88>)
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	4290      	cmp	r0, r2
 800aed8:	d02b      	beq.n	800af32 <vQueueDelete+0x62>
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	4290      	cmp	r0, r2
 800aede:	d02a      	beq.n	800af36 <vQueueDelete+0x66>
 800aee0:	695a      	ldr	r2, [r3, #20]
 800aee2:	4290      	cmp	r0, r2
 800aee4:	d029      	beq.n	800af3a <vQueueDelete+0x6a>
 800aee6:	69da      	ldr	r2, [r3, #28]
 800aee8:	4290      	cmp	r0, r2
 800aeea:	d028      	beq.n	800af3e <vQueueDelete+0x6e>
 800aeec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aeee:	4290      	cmp	r0, r2
 800aef0:	d027      	beq.n	800af42 <vQueueDelete+0x72>
 800aef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef4:	4290      	cmp	r0, r2
 800aef6:	d014      	beq.n	800af22 <vQueueDelete+0x52>
 800aef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aefa:	4290      	cmp	r0, r2
 800aefc:	d023      	beq.n	800af46 <vQueueDelete+0x76>
 800aefe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af00:	4290      	cmp	r0, r2
 800af02:	d022      	beq.n	800af4a <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af04:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800af08:	b14b      	cbz	r3, 800af1e <vQueueDelete+0x4e>
}
 800af0a:	4770      	bx	lr
 800af0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800af1c:	e7fe      	b.n	800af1c <vQueueDelete+0x4c>
			vPortFree( pxQueue );
 800af1e:	f001 bbed 	b.w	800c6fc <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af22:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af28:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800af50 <vQueueDelete+0x80>
 800af2c:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
 800af30:	e7e8      	b.n	800af04 <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af32:	2200      	movs	r2, #0
 800af34:	e7f6      	b.n	800af24 <vQueueDelete+0x54>
 800af36:	2201      	movs	r2, #1
 800af38:	e7f4      	b.n	800af24 <vQueueDelete+0x54>
 800af3a:	2202      	movs	r2, #2
 800af3c:	e7f2      	b.n	800af24 <vQueueDelete+0x54>
 800af3e:	2203      	movs	r2, #3
 800af40:	e7f0      	b.n	800af24 <vQueueDelete+0x54>
 800af42:	2204      	movs	r2, #4
 800af44:	e7ee      	b.n	800af24 <vQueueDelete+0x54>
 800af46:	2206      	movs	r2, #6
 800af48:	e7ec      	b.n	800af24 <vQueueDelete+0x54>
 800af4a:	2207      	movs	r2, #7
 800af4c:	e7ea      	b.n	800af24 <vQueueDelete+0x54>
 800af4e:	bf00      	nop
	...
 800af58:	24001120 	.word	0x24001120

0800af5c <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af5c:	4b12      	ldr	r3, [pc, #72]	@ (800afa8 <vQueueAddToRegistry+0x4c>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	b17a      	cbz	r2, 800af82 <vQueueAddToRegistry+0x26>
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	b162      	cbz	r2, 800af80 <vQueueAddToRegistry+0x24>
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	b192      	cbz	r2, 800af90 <vQueueAddToRegistry+0x34>
 800af6a:	699a      	ldr	r2, [r3, #24]
 800af6c:	b192      	cbz	r2, 800af94 <vQueueAddToRegistry+0x38>
 800af6e:	6a1a      	ldr	r2, [r3, #32]
 800af70:	b192      	cbz	r2, 800af98 <vQueueAddToRegistry+0x3c>
 800af72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af74:	b192      	cbz	r2, 800af9c <vQueueAddToRegistry+0x40>
 800af76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af78:	b192      	cbz	r2, 800afa0 <vQueueAddToRegistry+0x44>
 800af7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af7c:	b192      	cbz	r2, 800afa4 <vQueueAddToRegistry+0x48>
	}
 800af7e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af80:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af82:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af8a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 800af8e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af90:	2202      	movs	r2, #2
 800af92:	e7f6      	b.n	800af82 <vQueueAddToRegistry+0x26>
 800af94:	2203      	movs	r2, #3
 800af96:	e7f4      	b.n	800af82 <vQueueAddToRegistry+0x26>
 800af98:	2204      	movs	r2, #4
 800af9a:	e7f2      	b.n	800af82 <vQueueAddToRegistry+0x26>
 800af9c:	2205      	movs	r2, #5
 800af9e:	e7f0      	b.n	800af82 <vQueueAddToRegistry+0x26>
 800afa0:	2206      	movs	r2, #6
 800afa2:	e7ee      	b.n	800af82 <vQueueAddToRegistry+0x26>
 800afa4:	2207      	movs	r2, #7
 800afa6:	e7ec      	b.n	800af82 <vQueueAddToRegistry+0x26>
 800afa8:	24001120 	.word	0x24001120

0800afac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4605      	mov	r5, r0
 800afb0:	460e      	mov	r6, r1
 800afb2:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afb4:	f001 f986 	bl	800c2c4 <vPortEnterCritical>
 800afb8:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 800afbc:	2bff      	cmp	r3, #255	@ 0xff
 800afbe:	d102      	bne.n	800afc6 <vQueueWaitForMessageRestricted+0x1a>
 800afc0:	2300      	movs	r3, #0
 800afc2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
 800afc6:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800afca:	2bff      	cmp	r3, #255	@ 0xff
 800afcc:	d102      	bne.n	800afd4 <vQueueWaitForMessageRestricted+0x28>
 800afce:	2300      	movs	r3, #0
 800afd0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
 800afd4:	f001 f998 	bl	800c308 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afd8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d043      	beq.n	800b066 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 800afde:	f001 f971 	bl	800c2c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800afe2:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800afe6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afe8:	2c00      	cmp	r4, #0
 800afea:	dd14      	ble.n	800b016 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afec:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 800aff0:	e003      	b.n	800affa <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 800aff2:	1e63      	subs	r3, r4, #1
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aff8:	b16a      	cbz	r2, 800b016 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800affc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affe:	b153      	cbz	r3, 800b016 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b000:	f000 fd7a 	bl	800baf8 <xTaskRemoveFromEventList>
 800b004:	2800      	cmp	r0, #0
 800b006:	d0f4      	beq.n	800aff2 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 800b008:	f000 fe0a 	bl	800bc20 <vTaskMissedYield>
			--cTxLock;
 800b00c:	1e63      	subs	r3, r4, #1
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b012:	2a00      	cmp	r2, #0
 800b014:	d1f1      	bne.n	800affa <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800b016:	23ff      	movs	r3, #255	@ 0xff
 800b018:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800b01c:	f001 f974 	bl	800c308 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b020:	f001 f950 	bl	800c2c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b024:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 800b028:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	dd14      	ble.n	800b058 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b02e:	f105 0610 	add.w	r6, r5, #16
 800b032:	e003      	b.n	800b03c <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 800b034:	1e63      	subs	r3, r4, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b03a:	b16a      	cbz	r2, 800b058 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b03c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b03e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b040:	b153      	cbz	r3, 800b058 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b042:	f000 fd59 	bl	800baf8 <xTaskRemoveFromEventList>
 800b046:	2800      	cmp	r0, #0
 800b048:	d0f4      	beq.n	800b034 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 800b04a:	f000 fde9 	bl	800bc20 <vTaskMissedYield>
				--cRxLock;
 800b04e:	1e63      	subs	r3, r4, #1
 800b050:	b2da      	uxtb	r2, r3
 800b052:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b054:	2a00      	cmp	r2, #0
 800b056:	d1f1      	bne.n	800b03c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 800b058:	23ff      	movs	r3, #255	@ 0xff
 800b05a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800b05e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b062:	f001 b951 	b.w	800c308 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b066:	4622      	mov	r2, r4
 800b068:	4631      	mov	r1, r6
 800b06a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800b06e:	f000 fcf9 	bl	800ba64 <vTaskPlaceOnEventListRestricted>
 800b072:	e7b4      	b.n	800afde <vQueueWaitForMessageRestricted+0x32>

0800b074 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b078:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b07a:	f001 f923 	bl	800c2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b07e:	4a34      	ldr	r2, [pc, #208]	@ (800b150 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 800b080:	4e34      	ldr	r6, [pc, #208]	@ (800b154 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b088:	6833      	ldr	r3, [r6, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d031      	beq.n	800b0f2 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b08e:	4c32      	ldr	r4, [pc, #200]	@ (800b158 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b090:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	b333      	cbz	r3, 800b0e4 <prvAddNewTaskToReadyList+0x70>
 800b096:	4f31      	ldr	r7, [pc, #196]	@ (800b15c <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b098:	4a31      	ldr	r2, [pc, #196]	@ (800b160 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b09a:	4932      	ldr	r1, [pc, #200]	@ (800b164 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 800b09c:	6813      	ldr	r3, [r2, #0]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0a2:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b0a4:	680b      	ldr	r3, [r1, #0]
 800b0a6:	4283      	cmp	r3, r0
 800b0a8:	d200      	bcs.n	800b0ac <prvAddNewTaskToReadyList+0x38>
 800b0aa:	6008      	str	r0, [r1, #0]
 800b0ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b0b0:	1d29      	adds	r1, r5, #4
 800b0b2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800b0b6:	f7fe ff97 	bl	8009fe8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0ba:	f001 f925 	bl	800c308 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	b173      	cbz	r3, 800b0e0 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0c2:	6832      	ldr	r2, [r6, #0]
 800b0c4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b0c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d209      	bcs.n	800b0e0 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b0d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0e4:	6833      	ldr	r3, [r6, #0]
 800b0e6:	4f1d      	ldr	r7, [pc, #116]	@ (800b15c <prvAddNewTaskToReadyList+0xe8>)
 800b0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ea:	4283      	cmp	r3, r0
 800b0ec:	d8d4      	bhi.n	800b098 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 800b0ee:	6035      	str	r5, [r6, #0]
 800b0f0:	e7d2      	b.n	800b098 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800b0f2:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0f4:	6813      	ldr	r3, [r2, #0]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d003      	beq.n	800b102 <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0fa:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800b0fc:	4f17      	ldr	r7, [pc, #92]	@ (800b15c <prvAddNewTaskToReadyList+0xe8>)
 800b0fe:	4c16      	ldr	r4, [pc, #88]	@ (800b158 <prvAddNewTaskToReadyList+0xe4>)
 800b100:	e7ca      	b.n	800b098 <prvAddNewTaskToReadyList+0x24>
 800b102:	4f16      	ldr	r7, [pc, #88]	@ (800b15c <prvAddNewTaskToReadyList+0xe8>)
 800b104:	463c      	mov	r4, r7
 800b106:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b10a:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b10c:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b10e:	f7fe ff5b 	bl	8009fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b112:	45a0      	cmp	r8, r4
 800b114:	d1f9      	bne.n	800b10a <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b116:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800b17c <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 800b11a:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800b180 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 800b11e:	4648      	mov	r0, r9
 800b120:	4c0d      	ldr	r4, [pc, #52]	@ (800b158 <prvAddNewTaskToReadyList+0xe4>)
 800b122:	f7fe ff51 	bl	8009fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b126:	4640      	mov	r0, r8
 800b128:	f7fe ff4e 	bl	8009fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b12c:	480e      	ldr	r0, [pc, #56]	@ (800b168 <prvAddNewTaskToReadyList+0xf4>)
 800b12e:	f7fe ff4b 	bl	8009fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b132:	480e      	ldr	r0, [pc, #56]	@ (800b16c <prvAddNewTaskToReadyList+0xf8>)
 800b134:	f7fe ff48 	bl	8009fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b138:	480d      	ldr	r0, [pc, #52]	@ (800b170 <prvAddNewTaskToReadyList+0xfc>)
 800b13a:	f7fe ff45 	bl	8009fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b13e:	4b0d      	ldr	r3, [pc, #52]	@ (800b174 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800b140:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800b142:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b146:	4b0c      	ldr	r3, [pc, #48]	@ (800b178 <prvAddNewTaskToReadyList+0x104>)
 800b148:	f8c3 8000 	str.w	r8, [r3]
}
 800b14c:	e7a4      	b.n	800b098 <prvAddNewTaskToReadyList+0x24>
 800b14e:	bf00      	nop
 800b150:	24001184 	.word	0x24001184
 800b154:	24001658 	.word	0x24001658
 800b158:	24001178 	.word	0x24001178
 800b15c:	240011f8 	.word	0x240011f8
 800b160:	24001168 	.word	0x24001168
 800b164:	2400117c 	.word	0x2400117c
 800b168:	240011b4 	.word	0x240011b4
 800b16c:	240011a0 	.word	0x240011a0
 800b170:	24001188 	.word	0x24001188
 800b174:	240011cc 	.word	0x240011cc
 800b178:	240011c8 	.word	0x240011c8
 800b17c:	240011e4 	.word	0x240011e4
 800b180:	240011d0 	.word	0x240011d0

0800b184 <prvIdleTask>:
{
 800b184:	b580      	push	{r7, lr}
 800b186:	4c21      	ldr	r4, [pc, #132]	@ (800b20c <prvIdleTask+0x88>)
 800b188:	4e21      	ldr	r6, [pc, #132]	@ (800b210 <prvIdleTask+0x8c>)
 800b18a:	4d22      	ldr	r5, [pc, #136]	@ (800b214 <prvIdleTask+0x90>)
 800b18c:	4f22      	ldr	r7, [pc, #136]	@ (800b218 <prvIdleTask+0x94>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	b353      	cbz	r3, 800b1e8 <prvIdleTask+0x64>
		{
			taskENTER_CRITICAL();
 800b192:	f001 f897 	bl	800c2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b196:	68f3      	ldr	r3, [r6, #12]
 800b198:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b19c:	f108 0004 	add.w	r0, r8, #4
 800b1a0:	f7fe ff48 	bl	800a034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 800b1b0:	f001 f8aa 	bl	800c308 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1b4:	f898 3059 	ldrb.w	r3, [r8, #89]	@ 0x59
 800b1b8:	b163      	cbz	r3, 800b1d4 <prvIdleTask+0x50>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d022      	beq.n	800b204 <prvIdleTask+0x80>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d0e5      	beq.n	800b18e <prvIdleTask+0xa>
 800b1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	e7fe      	b.n	800b1d2 <prvIdleTask+0x4e>
				vPortFree( pxTCB->pxStack );
 800b1d4:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 800b1d8:	f001 fa90 	bl	800c6fc <vPortFree>
				vPortFree( pxTCB );
 800b1dc:	4640      	mov	r0, r8
 800b1de:	f001 fa8d 	bl	800c6fc <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1d4      	bne.n	800b192 <prvIdleTask+0xe>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d9cf      	bls.n	800b18e <prvIdleTask+0xa>
				taskYIELD();
 800b1ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b1f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	e7c4      	b.n	800b18e <prvIdleTask+0xa>
				vPortFree( pxTCB );
 800b204:	4640      	mov	r0, r8
 800b206:	f001 fa79 	bl	800c6fc <vPortFree>
 800b20a:	e7c0      	b.n	800b18e <prvIdleTask+0xa>
 800b20c:	2400119c 	.word	0x2400119c
 800b210:	240011a0 	.word	0x240011a0
 800b214:	24001184 	.word	0x24001184
 800b218:	240011f8 	.word	0x240011f8

0800b21c <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b21c:	4b49      	ldr	r3, [pc, #292]	@ (800b344 <xTaskIncrementTick.part.0+0x128>)
BaseType_t xTaskIncrementTick( void )
 800b21e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b222:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 800b224:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b226:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800b228:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b22a:	2e00      	cmp	r6, #0
 800b22c:	d03e      	beq.n	800b2ac <xTaskIncrementTick.part.0+0x90>
 800b22e:	4b46      	ldr	r3, [pc, #280]	@ (800b348 <xTaskIncrementTick.part.0+0x12c>)
 800b230:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	429e      	cmp	r6, r3
 800b236:	d346      	bcc.n	800b2c6 <xTaskIncrementTick.part.0+0xaa>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b238:	4f44      	ldr	r7, [pc, #272]	@ (800b34c <xTaskIncrementTick.part.0+0x130>)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	681d      	ldr	r5, [r3, #0]
 800b23e:	2d00      	cmp	r5, #0
 800b240:	d077      	beq.n	800b332 <xTaskIncrementTick.part.0+0x116>
BaseType_t xSwitchRequired = pdFALSE;
 800b242:	2500      	movs	r5, #0
 800b244:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800b35c <xTaskIncrementTick.part.0+0x140>
 800b248:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800b360 <xTaskIncrementTick.part.0+0x144>
					prvAddTaskToReadyList( pxTCB );
 800b24c:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 800b364 <xTaskIncrementTick.part.0+0x148>
 800b250:	e020      	b.n	800b294 <xTaskIncrementTick.part.0+0x78>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b252:	f7fe feef 	bl	800a034 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b256:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b258:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b25c:	b10b      	cbz	r3, 800b262 <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b25e:	f7fe fee9 	bl	800a034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b262:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b264:	4659      	mov	r1, fp
 800b266:	f8d8 2000 	ldr.w	r2, [r8]
 800b26a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800b26e:	4293      	cmp	r3, r2
 800b270:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800b274:	d901      	bls.n	800b27a <xTaskIncrementTick.part.0+0x5e>
 800b276:	f8c8 3000 	str.w	r3, [r8]
 800b27a:	f7fe feb5 	bl	8009fe8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b27e:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b282:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b284:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b286:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b288:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 800b28a:	4291      	cmp	r1, r2
 800b28c:	bf28      	it	cs
 800b28e:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b290:	2b00      	cmp	r3, #0
 800b292:	d052      	beq.n	800b33a <xTaskIncrementTick.part.0+0x11e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b29a:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b29c:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 800b2a0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a2:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 800b2a4:	d2d5      	bcs.n	800b252 <xTaskIncrementTick.part.0+0x36>
						xNextTaskUnblockTime = xItemValue;
 800b2a6:	9a01      	ldr	r2, [sp, #4]
 800b2a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2aa:	e011      	b.n	800b2d0 <xTaskIncrementTick.part.0+0xb4>
			taskSWITCH_DELAYED_LISTS();
 800b2ac:	4b27      	ldr	r3, [pc, #156]	@ (800b34c <xTaskIncrementTick.part.0+0x130>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	6812      	ldr	r2, [r2, #0]
 800b2b2:	b30a      	cbz	r2, 800b2f8 <xTaskIncrementTick.part.0+0xdc>
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	e7fe      	b.n	800b2c4 <xTaskIncrementTick.part.0+0xa8>
BaseType_t xSwitchRequired = pdFALSE;
 800b2c6:	2500      	movs	r5, #0
 800b2c8:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b35c <xTaskIncrementTick.part.0+0x140>
 800b2cc:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800b360 <xTaskIncrementTick.part.0+0x144>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2d0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 800b2d4:	491e      	ldr	r1, [pc, #120]	@ (800b350 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 800b2e2:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800b2e4:	2a02      	cmp	r2, #2
 800b2e6:	bf28      	it	cs
 800b2e8:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800b2ea:	2b00      	cmp	r3, #0
}
 800b2ec:	bf0c      	ite	eq
 800b2ee:	4628      	moveq	r0, r5
 800b2f0:	2001      	movne	r0, #1
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800b2f8:	4a16      	ldr	r2, [pc, #88]	@ (800b354 <xTaskIncrementTick.part.0+0x138>)
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	6811      	ldr	r1, [r2, #0]
 800b2fe:	6019      	str	r1, [r3, #0]
 800b300:	4915      	ldr	r1, [pc, #84]	@ (800b358 <xTaskIncrementTick.part.0+0x13c>)
 800b302:	6010      	str	r0, [r2, #0]
 800b304:	680a      	ldr	r2, [r1, #0]
 800b306:	3201      	adds	r2, #1
 800b308:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	6812      	ldr	r2, [r2, #0]
 800b30e:	b93a      	cbnz	r2, 800b320 <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b310:	4b0d      	ldr	r3, [pc, #52]	@ (800b348 <xTaskIncrementTick.part.0+0x12c>)
 800b312:	461a      	mov	r2, r3
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
 800b31a:	6013      	str	r3, [r2, #0]
 800b31c:	4613      	mov	r3, r2
 800b31e:	e788      	b.n	800b232 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b320:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b322:	4a09      	ldr	r2, [pc, #36]	@ (800b348 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b324:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b326:	9201      	str	r2, [sp, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	6013      	str	r3, [r2, #0]
 800b32e:	4613      	mov	r3, r2
	}
}
 800b330:	e77f      	b.n	800b232 <xTaskIncrementTick.part.0+0x16>
 800b332:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 800b35c <xTaskIncrementTick.part.0+0x140>
 800b336:	f8df a028 	ldr.w	sl, [pc, #40]	@ 800b360 <xTaskIncrementTick.part.0+0x144>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	9a01      	ldr	r2, [sp, #4]
 800b340:	6013      	str	r3, [r2, #0]
					break;
 800b342:	e7c5      	b.n	800b2d0 <xTaskIncrementTick.part.0+0xb4>
 800b344:	24001180 	.word	0x24001180
 800b348:	24001164 	.word	0x24001164
 800b34c:	240011cc 	.word	0x240011cc
 800b350:	24001170 	.word	0x24001170
 800b354:	240011c8 	.word	0x240011c8
 800b358:	2400116c 	.word	0x2400116c
 800b35c:	240011f8 	.word	0x240011f8
 800b360:	24001658 	.word	0x24001658
 800b364:	2400117c 	.word	0x2400117c

0800b368 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800b368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800b36c:	4d43      	ldr	r5, [pc, #268]	@ (800b47c <xTaskResumeAll.part.0+0x114>)
	taskENTER_CRITICAL();
 800b36e:	f000 ffa9 	bl	800c2c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	3b01      	subs	r3, #1
 800b376:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d168      	bne.n	800b450 <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b37e:	4b40      	ldr	r3, [pc, #256]	@ (800b480 <xTaskResumeAll.part.0+0x118>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d064      	beq.n	800b450 <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b386:	4e3f      	ldr	r6, [pc, #252]	@ (800b484 <xTaskResumeAll.part.0+0x11c>)
 800b388:	6833      	ldr	r3, [r6, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d073      	beq.n	800b476 <xTaskResumeAll.part.0+0x10e>
 800b38e:	4f3e      	ldr	r7, [pc, #248]	@ (800b488 <xTaskResumeAll.part.0+0x120>)
 800b390:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800b498 <xTaskResumeAll.part.0+0x130>
 800b394:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800b49c <xTaskResumeAll.part.0+0x134>
 800b398:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800b4a0 <xTaskResumeAll.part.0+0x138>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b39c:	68f3      	ldr	r3, [r6, #12]
 800b39e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3a2:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3a6:	f10b 0018 	add.w	r0, fp, #24
 800b3aa:	f7fe fe43 	bl	800a034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7fe fe40 	bl	800a034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3b4:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	683c      	ldr	r4, [r7, #0]
 800b3bc:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800b3c0:	42a2      	cmp	r2, r4
 800b3c2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800b3c6:	d900      	bls.n	800b3ca <xTaskResumeAll.part.0+0x62>
 800b3c8:	603a      	str	r2, [r7, #0]
 800b3ca:	f7fe fe0d 	bl	8009fe8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3ce:	f8d8 1000 	ldr.w	r1, [r8]
 800b3d2:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 800b3d6:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d33f      	bcc.n	800b45c <xTaskResumeAll.part.0+0xf4>
						xYieldPending = pdTRUE;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3e2:	6833      	ldr	r3, [r6, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1d9      	bne.n	800b39c <xTaskResumeAll.part.0+0x34>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3e8:	4b28      	ldr	r3, [pc, #160]	@ (800b48c <xTaskResumeAll.part.0+0x124>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	6812      	ldr	r2, [r2, #0]
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	d03c      	beq.n	800b46c <xTaskResumeAll.part.0+0x104>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3f4:	4b26      	ldr	r3, [pc, #152]	@ (800b490 <xTaskResumeAll.part.0+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3f8:	68d2      	ldr	r2, [r2, #12]
 800b3fa:	6852      	ldr	r2, [r2, #4]
 800b3fc:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3fe:	4e25      	ldr	r6, [pc, #148]	@ (800b494 <xTaskResumeAll.part.0+0x12c>)
 800b400:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800b402:	b194      	cbz	r4, 800b42a <xTaskResumeAll.part.0+0xc2>
								xYieldPending = pdTRUE;
 800b404:	2701      	movs	r7, #1
 800b406:	e006      	b.n	800b416 <xTaskResumeAll.part.0+0xae>
 800b408:	f7ff ff08 	bl	800b21c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 800b40c:	b108      	cbz	r0, 800b412 <xTaskResumeAll.part.0+0xaa>
								xYieldPending = pdTRUE;
 800b40e:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b412:	3c01      	subs	r4, #1
 800b414:	d008      	beq.n	800b428 <xTaskResumeAll.part.0+0xc0>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b416:	682b      	ldr	r3, [r5, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0f5      	beq.n	800b408 <xTaskResumeAll.part.0+0xa0>
		++xPendedTicks;
 800b41c:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b41e:	3c01      	subs	r4, #1
		++xPendedTicks;
 800b420:	f103 0301 	add.w	r3, r3, #1
 800b424:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b426:	d1f6      	bne.n	800b416 <xTaskResumeAll.part.0+0xae>
						xPendedTicks = 0;
 800b428:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800b42a:	f8da 3000 	ldr.w	r3, [sl]
 800b42e:	b17b      	cbz	r3, 800b450 <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 800b430:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b438:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b444:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800b446:	f000 ff5f 	bl	800c308 <vPortExitCritical>
}
 800b44a:	4620      	mov	r0, r4
 800b44c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800b450:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b452:	f000 ff59 	bl	800c308 <vPortExitCritical>
}
 800b456:	4620      	mov	r0, r4
 800b458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b45c:	6833      	ldr	r3, [r6, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d19c      	bne.n	800b39c <xTaskResumeAll.part.0+0x34>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b462:	4b0a      	ldr	r3, [pc, #40]	@ (800b48c <xTaskResumeAll.part.0+0x124>)
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	6812      	ldr	r2, [r2, #0]
 800b468:	2a00      	cmp	r2, #0
 800b46a:	d1c2      	bne.n	800b3f2 <xTaskResumeAll.part.0+0x8a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800b46c:	4b08      	ldr	r3, [pc, #32]	@ (800b490 <xTaskResumeAll.part.0+0x128>)
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e7c3      	b.n	800b3fe <xTaskResumeAll.part.0+0x96>
 800b476:	f8df a028 	ldr.w	sl, [pc, #40]	@ 800b4a0 <xTaskResumeAll.part.0+0x138>
 800b47a:	e7c0      	b.n	800b3fe <xTaskResumeAll.part.0+0x96>
 800b47c:	24001160 	.word	0x24001160
 800b480:	24001184 	.word	0x24001184
 800b484:	240011b4 	.word	0x240011b4
 800b488:	2400117c 	.word	0x2400117c
 800b48c:	240011cc 	.word	0x240011cc
 800b490:	24001164 	.word	0x24001164
 800b494:	24001174 	.word	0x24001174
 800b498:	240011f8 	.word	0x240011f8
 800b49c:	24001658 	.word	0x24001658
 800b4a0:	24001170 	.word	0x24001170

0800b4a4 <xTaskCreateStatic>:
	{
 800b4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4a8:	b083      	sub	sp, #12
 800b4aa:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
 800b4ac:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	@ 0x2c
 800b4b0:	b1bb      	cbz	r3, 800b4e2 <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 800b4b2:	b16c      	cbz	r4, 800b4d0 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4b4:	235c      	movs	r3, #92	@ 0x5c
 800b4b6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4bc:	d01a      	beq.n	800b4f4 <xTaskCreateStatic+0x50>
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	e7fe      	b.n	800b4ce <xTaskCreateStatic+0x2a>
 800b4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800b4e0:	e7fe      	b.n	800b4e0 <xTaskCreateStatic+0x3c>
 800b4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800b4f2:	e7fe      	b.n	800b4f2 <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b4f6:	0096      	lsls	r6, r2, #2
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4fe:	6323      	str	r3, [r4, #48]	@ 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b500:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b502:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b504:	4632      	mov	r2, r6
 800b506:	21a5      	movs	r1, #165	@ 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b508:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b50c:	f018 fdc8 	bl	80240a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b510:	1f32      	subs	r2, r6, #4
 800b512:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b514:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b516:	f023 0607 	bic.w	r6, r3, #7
	if( pcName != NULL )
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	d066      	beq.n	800b5ec <xTaskCreateStatic+0x148>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b51e:	782b      	ldrb	r3, [r5, #0]
 800b520:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800b524:	2b00      	cmp	r3, #0
 800b526:	d036      	beq.n	800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b528:	786b      	ldrb	r3, [r5, #1]
 800b52a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800b52e:	b393      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b530:	78ab      	ldrb	r3, [r5, #2]
 800b532:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800b536:	b373      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b538:	78eb      	ldrb	r3, [r5, #3]
 800b53a:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800b53e:	b353      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b540:	792b      	ldrb	r3, [r5, #4]
 800b542:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800b546:	b333      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b548:	796b      	ldrb	r3, [r5, #5]
 800b54a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 800b54e:	b313      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b550:	79ab      	ldrb	r3, [r5, #6]
 800b552:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800b556:	b1f3      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b558:	79eb      	ldrb	r3, [r5, #7]
 800b55a:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 800b55e:	b1d3      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b560:	7a2b      	ldrb	r3, [r5, #8]
 800b562:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800b566:	b1b3      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b568:	7a6b      	ldrb	r3, [r5, #9]
 800b56a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 800b56e:	b193      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b570:	7aab      	ldrb	r3, [r5, #10]
 800b572:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800b576:	b173      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b578:	7aeb      	ldrb	r3, [r5, #11]
 800b57a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 800b57e:	b153      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b580:	7b2b      	ldrb	r3, [r5, #12]
 800b582:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800b586:	b133      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b588:	7b6b      	ldrb	r3, [r5, #13]
 800b58a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800b58e:	b113      	cbz	r3, 800b596 <xTaskCreateStatic+0xf2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b590:	7bab      	ldrb	r3, [r5, #14]
 800b592:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b596:	2300      	movs	r3, #0
 800b598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b59c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		pxNewTCB->uxMutexesHeld = 0;
 800b59e:	f04f 0900 	mov.w	r9, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5a2:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5a4:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b5a6:	f8c4 9050 	str.w	r9, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5aa:	bf28      	it	cs
 800b5ac:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b5ae:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b5b0:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5b2:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5b6:	f7fe fd13 	bl	8009fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5ba:	f104 0018 	add.w	r0, r4, #24
 800b5be:	f7fe fd0f 	bl	8009fe0 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
 800b5c6:	f8c4 9054 	str.w	r9, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5ca:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5cc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5ce:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5d0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5d2:	f884 9058 	strb.w	r9, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5d6:	f000 fe4b 	bl	800c270 <pxPortInitialiseStack>
 800b5da:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5dc:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5de:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5e0:	f7ff fd48 	bl	800b074 <prvAddNewTaskToReadyList>
	}
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5ec:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800b5f0:	e7d4      	b.n	800b59c <xTaskCreateStatic+0xf8>
 800b5f2:	bf00      	nop

0800b5f4 <xTaskCreate>:
	{
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5f8:	0096      	lsls	r6, r2, #2
	{
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b600:	4630      	mov	r0, r6
 800b602:	f000 ffbf 	bl	800c584 <pvPortMalloc>
			if( pxStack != NULL )
 800b606:	2800      	cmp	r0, #0
 800b608:	d07e      	beq.n	800b708 <xTaskCreate+0x114>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b60a:	4607      	mov	r7, r0
 800b60c:	205c      	movs	r0, #92	@ 0x5c
 800b60e:	f000 ffb9 	bl	800c584 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b612:	4604      	mov	r4, r0
 800b614:	2800      	cmp	r0, #0
 800b616:	d074      	beq.n	800b702 <xTaskCreate+0x10e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b618:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800b61a:	6307      	str	r7, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b61c:	4632      	mov	r2, r6
 800b61e:	4638      	mov	r0, r7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b620:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b624:	21a5      	movs	r1, #165	@ 0xa5
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b626:	3e04      	subs	r6, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b628:	f018 fd3a 	bl	80240a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b62c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b62e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b630:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800b634:	2d00      	cmp	r5, #0
 800b636:	d06b      	beq.n	800b710 <xTaskCreate+0x11c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b638:	782b      	ldrb	r3, [r5, #0]
 800b63a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d036      	beq.n	800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b642:	786b      	ldrb	r3, [r5, #1]
 800b644:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800b648:	b393      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b64a:	78ab      	ldrb	r3, [r5, #2]
 800b64c:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800b650:	b373      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b652:	78eb      	ldrb	r3, [r5, #3]
 800b654:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800b658:	b353      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b65a:	792b      	ldrb	r3, [r5, #4]
 800b65c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800b660:	b333      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b662:	796b      	ldrb	r3, [r5, #5]
 800b664:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 800b668:	b313      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b66a:	79ab      	ldrb	r3, [r5, #6]
 800b66c:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800b670:	b1f3      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b672:	79eb      	ldrb	r3, [r5, #7]
 800b674:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 800b678:	b1d3      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b67a:	7a2b      	ldrb	r3, [r5, #8]
 800b67c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800b680:	b1b3      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b682:	7a6b      	ldrb	r3, [r5, #9]
 800b684:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 800b688:	b193      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b68a:	7aab      	ldrb	r3, [r5, #10]
 800b68c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800b690:	b173      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b692:	7aeb      	ldrb	r3, [r5, #11]
 800b694:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 800b698:	b153      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b69a:	7b2b      	ldrb	r3, [r5, #12]
 800b69c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800b6a0:	b133      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6a2:	7b6b      	ldrb	r3, [r5, #13]
 800b6a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800b6a8:	b113      	cbz	r3, 800b6b0 <xTaskCreate+0xbc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6aa:	7bab      	ldrb	r3, [r5, #14]
 800b6ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6b6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800b6b8:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6ba:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6bc:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b6be:	6527      	str	r7, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6c0:	bf28      	it	cs
 800b6c2:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b6c4:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b6c6:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c8:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6cc:	f7fe fc88 	bl	8009fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6d0:	f104 0018 	add.w	r0, r4, #24
 800b6d4:	f7fe fc84 	bl	8009fe0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800b6d8:	6567      	str	r7, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6da:	464a      	mov	r2, r9
 800b6dc:	4641      	mov	r1, r8
 800b6de:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6e2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6e4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6e6:	f884 7058 	strb.w	r7, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6ea:	f000 fdc1 	bl	800c270 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800b6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6f0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b6f2:	b103      	cbz	r3, 800b6f6 <xTaskCreate+0x102>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6f4:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff fcbc 	bl	800b074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6fc:	2001      	movs	r0, #1
	}
 800b6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b702:	4638      	mov	r0, r7
 800b704:	f000 fffa 	bl	800c6fc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b708:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800b70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b710:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800b714:	e7cf      	b.n	800b6b6 <xTaskCreate+0xc2>
 800b716:	bf00      	nop

0800b718 <vTaskDelay>:
	{
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b71a:	b950      	cbnz	r0, 800b732 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800b71c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b724:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
	}
 800b730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800b732:	4d1e      	ldr	r5, [pc, #120]	@ (800b7ac <vTaskDelay+0x94>)
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b143      	cbz	r3, 800b74a <vTaskDelay+0x32>
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	e7fe      	b.n	800b748 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	4604      	mov	r4, r0
 800b74e:	3301      	adds	r3, #1
 800b750:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b752:	4b17      	ldr	r3, [pc, #92]	@ (800b7b0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b754:	4e17      	ldr	r6, [pc, #92]	@ (800b7b4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 800b756:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b758:	6830      	ldr	r0, [r6, #0]
 800b75a:	3004      	adds	r0, #4
 800b75c:	f7fe fc6a 	bl	800a034 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b760:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b762:	6833      	ldr	r3, [r6, #0]
 800b764:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b766:	d315      	bcc.n	800b794 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b768:	4b13      	ldr	r3, [pc, #76]	@ (800b7b8 <vTaskDelay+0xa0>)
 800b76a:	6818      	ldr	r0, [r3, #0]
 800b76c:	6831      	ldr	r1, [r6, #0]
 800b76e:	3104      	adds	r1, #4
 800b770:	f7fe fc48 	bl	800a004 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b943      	cbnz	r3, 800b78a <vTaskDelay+0x72>
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	e7fe      	b.n	800b788 <vTaskDelay+0x70>
 800b78a:	f7ff fded 	bl	800b368 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800b78e:	2800      	cmp	r0, #0
 800b790:	d0c4      	beq.n	800b71c <vTaskDelay+0x4>
	}
 800b792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b794:	4b09      	ldr	r3, [pc, #36]	@ (800b7bc <vTaskDelay+0xa4>)
 800b796:	6818      	ldr	r0, [r3, #0]
 800b798:	6831      	ldr	r1, [r6, #0]
 800b79a:	3104      	adds	r1, #4
 800b79c:	f7fe fc32 	bl	800a004 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7a0:	4b07      	ldr	r3, [pc, #28]	@ (800b7c0 <vTaskDelay+0xa8>)
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	4294      	cmp	r4, r2
 800b7a6:	d2e5      	bcs.n	800b774 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800b7a8:	601c      	str	r4, [r3, #0]
 800b7aa:	e7e3      	b.n	800b774 <vTaskDelay+0x5c>
 800b7ac:	24001160 	.word	0x24001160
 800b7b0:	24001180 	.word	0x24001180
 800b7b4:	24001658 	.word	0x24001658
 800b7b8:	240011c8 	.word	0x240011c8
 800b7bc:	240011cc 	.word	0x240011cc
 800b7c0:	24001164 	.word	0x24001164

0800b7c4 <vTaskStartScheduler>:
{
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7c8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ca:	4668      	mov	r0, sp
 800b7cc:	aa02      	add	r2, sp, #8
 800b7ce:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7d0:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7d4:	f7fe fbda 	bl	8009f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7d8:	9d00      	ldr	r5, [sp, #0]
 800b7da:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 800b7de:	b1b8      	cbz	r0, 800b810 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800b7e0:	b16d      	cbz	r5, 800b7fe <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7e2:	225c      	movs	r2, #92	@ 0x5c
 800b7e4:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7e6:	9a03      	ldr	r2, [sp, #12]
 800b7e8:	2a5c      	cmp	r2, #92	@ 0x5c
 800b7ea:	d01a      	beq.n	800b822 <vTaskStartScheduler+0x5e>
 800b7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	e7fe      	b.n	800b7fc <vTaskStartScheduler+0x38>
 800b7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800b80e:	e7fe      	b.n	800b80e <vTaskStartScheduler+0x4a>
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800b820:	e7fe      	b.n	800b820 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b822:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b824:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b826:	21a5      	movs	r1, #165	@ 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b828:	6328      	str	r0, [r5, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b82a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b82c:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b830:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b832:	f018 fc35 	bl	80240a0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b836:	1f33      	subs	r3, r6, #4
 800b838:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b83a:	4925      	ldr	r1, [pc, #148]	@ (800b8d0 <vTaskStartScheduler+0x10c>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b83c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b83e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b840:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
 800b844:	6369      	str	r1, [r5, #52]	@ 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b846:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b84a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
 800b84e:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800b850:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b854:	f7fe fbc4 	bl	8009fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b858:	f105 0018 	add.w	r0, r5, #24
 800b85c:	f7fe fbc0 	bl	8009fe0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b860:	2338      	movs	r3, #56	@ 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b862:	4622      	mov	r2, r4
 800b864:	491b      	ldr	r1, [pc, #108]	@ (800b8d4 <vTaskStartScheduler+0x110>)
		pxNewTCB->ulNotifiedValue = 0;
 800b866:	656c      	str	r4, [r5, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b868:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b86a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b86c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b86e:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b870:	f885 4058 	strb.w	r4, [r5, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b874:	f000 fcfc 	bl	800c270 <pxPortInitialiseStack>
 800b878:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800b87a:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b87c:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800b87e:	f7ff fbf9 	bl	800b074 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 800b882:	f000 fc59 	bl	800c138 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b886:	2801      	cmp	r0, #1
 800b888:	d00c      	beq.n	800b8a4 <vTaskStartScheduler+0xe0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b88a:	3001      	adds	r0, #1
 800b88c:	d001      	beq.n	800b892 <vTaskStartScheduler+0xce>
}
 800b88e:	b004      	add	sp, #16
 800b890:	bd70      	pop	{r4, r5, r6, pc}
 800b892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8a2:	e7fe      	b.n	800b8a2 <vTaskStartScheduler+0xde>
 800b8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8b4:	4b08      	ldr	r3, [pc, #32]	@ (800b8d8 <vTaskStartScheduler+0x114>)
 800b8b6:	f04f 31ff 	mov.w	r1, #4294967295
		xSchedulerRunning = pdTRUE;
 800b8ba:	4a08      	ldr	r2, [pc, #32]	@ (800b8dc <vTaskStartScheduler+0x118>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8bc:	6019      	str	r1, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8be:	4b08      	ldr	r3, [pc, #32]	@ (800b8e0 <vTaskStartScheduler+0x11c>)
		xSchedulerRunning = pdTRUE;
 800b8c0:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8c2:	601c      	str	r4, [r3, #0]
}
 800b8c4:	b004      	add	sp, #16
 800b8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 800b8ca:	f000 bd8d 	b.w	800c3e8 <xPortStartScheduler>
 800b8ce:	bf00      	nop
 800b8d0:	454c4449 	.word	0x454c4449
 800b8d4:	0800b185 	.word	0x0800b185
 800b8d8:	24001164 	.word	0x24001164
 800b8dc:	24001178 	.word	0x24001178
 800b8e0:	24001180 	.word	0x24001180

0800b8e4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b8e4:	4a02      	ldr	r2, [pc, #8]	@ (800b8f0 <vTaskSuspendAll+0xc>)
 800b8e6:	6813      	ldr	r3, [r2, #0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	6013      	str	r3, [r2, #0]
}
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	24001160 	.word	0x24001160

0800b8f4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800b8f4:	4b06      	ldr	r3, [pc, #24]	@ (800b910 <xTaskResumeAll+0x1c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	b943      	cbnz	r3, 800b90c <xTaskResumeAll+0x18>
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	e7fe      	b.n	800b90a <xTaskResumeAll+0x16>
 800b90c:	f7ff bd2c 	b.w	800b368 <xTaskResumeAll.part.0>
 800b910:	24001160 	.word	0x24001160

0800b914 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b914:	4b01      	ldr	r3, [pc, #4]	@ (800b91c <xTaskGetTickCount+0x8>)
 800b916:	6818      	ldr	r0, [r3, #0]
}
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	24001180 	.word	0x24001180

0800b920 <xTaskGetTickCountFromISR>:
{
 800b920:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b922:	f000 fe01 	bl	800c528 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800b926:	4b01      	ldr	r3, [pc, #4]	@ (800b92c <xTaskGetTickCountFromISR+0xc>)
 800b928:	6818      	ldr	r0, [r3, #0]
}
 800b92a:	bd08      	pop	{r3, pc}
 800b92c:	24001180 	.word	0x24001180

0800b930 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b930:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <xTaskIncrementTick+0x18>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	b90b      	cbnz	r3, 800b93a <xTaskIncrementTick+0xa>
 800b936:	f7ff bc71 	b.w	800b21c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800b93a:	4a04      	ldr	r2, [pc, #16]	@ (800b94c <xTaskIncrementTick+0x1c>)
}
 800b93c:	2000      	movs	r0, #0
		++xPendedTicks;
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	3301      	adds	r3, #1
 800b942:	6013      	str	r3, [r2, #0]
}
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	24001160 	.word	0x24001160
 800b94c:	24001174 	.word	0x24001174

0800b950 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b950:	4b1d      	ldr	r3, [pc, #116]	@ (800b9c8 <vTaskSwitchContext+0x78>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	b11b      	cbz	r3, 800b95e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b956:	4b1d      	ldr	r3, [pc, #116]	@ (800b9cc <vTaskSwitchContext+0x7c>)
 800b958:	2201      	movs	r2, #1
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b95e:	4a1b      	ldr	r2, [pc, #108]	@ (800b9cc <vTaskSwitchContext+0x7c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b960:	491b      	ldr	r1, [pc, #108]	@ (800b9d0 <vTaskSwitchContext+0x80>)
{
 800b962:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b964:	4c1b      	ldr	r4, [pc, #108]	@ (800b9d4 <vTaskSwitchContext+0x84>)
		xYieldPending = pdFALSE;
 800b966:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b96e:	0098      	lsls	r0, r3, #2
 800b970:	0092      	lsls	r2, r2, #2
 800b972:	588a      	ldr	r2, [r1, r2]
 800b974:	b942      	cbnz	r2, 800b988 <vTaskSwitchContext+0x38>
 800b976:	b1d3      	cbz	r3, 800b9ae <vTaskSwitchContext+0x5e>
 800b978:	3b01      	subs	r3, #1
 800b97a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b97e:	0098      	lsls	r0, r3, #2
 800b980:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b984:	2a00      	cmp	r2, #0
 800b986:	d0f6      	beq.n	800b976 <vTaskSwitchContext+0x26>
 800b988:	4418      	add	r0, r3
 800b98a:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 800b98e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b992:	4662      	mov	r2, ip
 800b994:	6849      	ldr	r1, [r1, #4]
 800b996:	3208      	adds	r2, #8
 800b998:	4291      	cmp	r1, r2
 800b99a:	f8cc 1004 	str.w	r1, [ip, #4]
 800b99e:	d00f      	beq.n	800b9c0 <vTaskSwitchContext+0x70>
 800b9a0:	68c9      	ldr	r1, [r1, #12]
 800b9a2:	4a0d      	ldr	r2, [pc, #52]	@ (800b9d8 <vTaskSwitchContext+0x88>)
 800b9a4:	6011      	str	r1, [r2, #0]
 800b9a6:	6023      	str	r3, [r4, #0]
}
 800b9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800b9be:	e7fe      	b.n	800b9be <vTaskSwitchContext+0x6e>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c0:	6849      	ldr	r1, [r1, #4]
 800b9c2:	f8cc 1004 	str.w	r1, [ip, #4]
 800b9c6:	e7eb      	b.n	800b9a0 <vTaskSwitchContext+0x50>
 800b9c8:	24001160 	.word	0x24001160
 800b9cc:	24001170 	.word	0x24001170
 800b9d0:	240011f8 	.word	0x240011f8
 800b9d4:	2400117c 	.word	0x2400117c
 800b9d8:	24001658 	.word	0x24001658

0800b9dc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b9dc:	b1f0      	cbz	r0, 800ba1c <vTaskPlaceOnEventList+0x40>
{
 800b9de:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9e0:	4d1a      	ldr	r5, [pc, #104]	@ (800ba4c <vTaskPlaceOnEventList+0x70>)
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	6829      	ldr	r1, [r5, #0]
 800b9e6:	3118      	adds	r1, #24
 800b9e8:	f7fe fb0c 	bl	800a004 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800b9ec:	4b18      	ldr	r3, [pc, #96]	@ (800ba50 <vTaskPlaceOnEventList+0x74>)
 800b9ee:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9f0:	6828      	ldr	r0, [r5, #0]
 800b9f2:	3004      	adds	r0, #4
 800b9f4:	f7fe fb1e 	bl	800a034 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9f8:	1c63      	adds	r3, r4, #1
 800b9fa:	d020      	beq.n	800ba3e <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9fc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9fe:	682b      	ldr	r3, [r5, #0]
 800ba00:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba02:	d214      	bcs.n	800ba2e <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba04:	4b13      	ldr	r3, [pc, #76]	@ (800ba54 <vTaskPlaceOnEventList+0x78>)
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	6829      	ldr	r1, [r5, #0]
 800ba0a:	3104      	adds	r1, #4
 800ba0c:	f7fe fafa 	bl	800a004 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba10:	4b11      	ldr	r3, [pc, #68]	@ (800ba58 <vTaskPlaceOnEventList+0x7c>)
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	4294      	cmp	r4, r2
 800ba16:	d200      	bcs.n	800ba1a <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
 800ba18:	601c      	str	r4, [r3, #0]
}
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800ba2c:	e7fe      	b.n	800ba2c <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba5c <vTaskPlaceOnEventList+0x80>)
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	6829      	ldr	r1, [r5, #0]
}
 800ba34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba38:	3104      	adds	r1, #4
 800ba3a:	f7fe bae3 	b.w	800a004 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba3e:	6829      	ldr	r1, [r5, #0]
 800ba40:	4807      	ldr	r0, [pc, #28]	@ (800ba60 <vTaskPlaceOnEventList+0x84>)
 800ba42:	3104      	adds	r1, #4
}
 800ba44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba48:	f7fe bace 	b.w	8009fe8 <vListInsertEnd>
 800ba4c:	24001658 	.word	0x24001658
 800ba50:	24001180 	.word	0x24001180
 800ba54:	240011cc 	.word	0x240011cc
 800ba58:	24001164 	.word	0x24001164
 800ba5c:	240011c8 	.word	0x240011c8
 800ba60:	24001188 	.word	0x24001188

0800ba64 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 800ba64:	b358      	cbz	r0, 800babe <vTaskPlaceOnEventListRestricted+0x5a>
	{
 800ba66:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba68:	4e1d      	ldr	r6, [pc, #116]	@ (800bae0 <vTaskPlaceOnEventListRestricted+0x7c>)
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	4615      	mov	r5, r2
 800ba6e:	6831      	ldr	r1, [r6, #0]
 800ba70:	3118      	adds	r1, #24
 800ba72:	f7fe fab9 	bl	8009fe8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800ba76:	b165      	cbz	r5, 800ba92 <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
 800ba78:	4b1a      	ldr	r3, [pc, #104]	@ (800bae4 <vTaskPlaceOnEventListRestricted+0x80>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba7c:	6830      	ldr	r0, [r6, #0]
 800ba7e:	3004      	adds	r0, #4
 800ba80:	f7fe fad8 	bl	800a034 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba84:	6831      	ldr	r1, [r6, #0]
 800ba86:	4818      	ldr	r0, [pc, #96]	@ (800bae8 <vTaskPlaceOnEventListRestricted+0x84>)
 800ba88:	3104      	adds	r1, #4
	}
 800ba8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba8e:	f7fe baab 	b.w	8009fe8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800ba92:	4b14      	ldr	r3, [pc, #80]	@ (800bae4 <vTaskPlaceOnEventListRestricted+0x80>)
 800ba94:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba96:	6830      	ldr	r0, [r6, #0]
 800ba98:	3004      	adds	r0, #4
 800ba9a:	f7fe facb 	bl	800a034 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba9e:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800baa0:	6833      	ldr	r3, [r6, #0]
 800baa2:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800baa4:	d214      	bcs.n	800bad0 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa6:	4b11      	ldr	r3, [pc, #68]	@ (800baec <vTaskPlaceOnEventListRestricted+0x88>)
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	6831      	ldr	r1, [r6, #0]
 800baac:	3104      	adds	r1, #4
 800baae:	f7fe faa9 	bl	800a004 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bab2:	4b0f      	ldr	r3, [pc, #60]	@ (800baf0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4294      	cmp	r4, r2
 800bab8:	d200      	bcs.n	800babc <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800baba:	601c      	str	r4, [r3, #0]
	}
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800bace:	e7fe      	b.n	800bace <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bad0:	4b08      	ldr	r3, [pc, #32]	@ (800baf4 <vTaskPlaceOnEventListRestricted+0x90>)
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	6831      	ldr	r1, [r6, #0]
	}
 800bad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bada:	3104      	adds	r1, #4
 800badc:	f7fe ba92 	b.w	800a004 <vListInsert>
 800bae0:	24001658 	.word	0x24001658
 800bae4:	24001180 	.word	0x24001180
 800bae8:	24001188 	.word	0x24001188
 800baec:	240011cc 	.word	0x240011cc
 800baf0:	24001164 	.word	0x24001164
 800baf4:	240011c8 	.word	0x240011c8

0800baf8 <xTaskRemoveFromEventList>:
{
 800baf8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bafa:	68c3      	ldr	r3, [r0, #12]
 800bafc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bafe:	b34c      	cbz	r4, 800bb54 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb00:	f104 0518 	add.w	r5, r4, #24
 800bb04:	4628      	mov	r0, r5
 800bb06:	f7fe fa95 	bl	800a034 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0a:	4b18      	ldr	r3, [pc, #96]	@ (800bb6c <xTaskRemoveFromEventList+0x74>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	b173      	cbz	r3, 800bb2e <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb10:	4629      	mov	r1, r5
 800bb12:	4817      	ldr	r0, [pc, #92]	@ (800bb70 <xTaskRemoveFromEventList+0x78>)
 800bb14:	f7fe fa68 	bl	8009fe8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb18:	4b16      	ldr	r3, [pc, #88]	@ (800bb74 <xTaskRemoveFromEventList+0x7c>)
 800bb1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d920      	bls.n	800bb66 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	4a14      	ldr	r2, [pc, #80]	@ (800bb78 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 800bb28:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800bb2a:	6013      	str	r3, [r2, #0]
}
 800bb2c:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb2e:	1d25      	adds	r5, r4, #4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7fe fa7f 	bl	800a034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb36:	4b11      	ldr	r3, [pc, #68]	@ (800bb7c <xTaskRemoveFromEventList+0x84>)
 800bb38:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	4290      	cmp	r0, r2
 800bb3e:	d900      	bls.n	800bb42 <xTaskRemoveFromEventList+0x4a>
 800bb40:	6018      	str	r0, [r3, #0]
 800bb42:	4b0f      	ldr	r3, [pc, #60]	@ (800bb80 <xTaskRemoveFromEventList+0x88>)
 800bb44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bb48:	4629      	mov	r1, r5
 800bb4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb4e:	f7fe fa4b 	bl	8009fe8 <vListInsertEnd>
 800bb52:	e7e1      	b.n	800bb18 <xTaskRemoveFromEventList+0x20>
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800bb64:	e7fe      	b.n	800bb64 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 800bb66:	2000      	movs	r0, #0
}
 800bb68:	bd38      	pop	{r3, r4, r5, pc}
 800bb6a:	bf00      	nop
 800bb6c:	24001160 	.word	0x24001160
 800bb70:	240011b4 	.word	0x240011b4
 800bb74:	24001658 	.word	0x24001658
 800bb78:	24001170 	.word	0x24001170
 800bb7c:	2400117c 	.word	0x2400117c
 800bb80:	240011f8 	.word	0x240011f8

0800bb84 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb84:	4a03      	ldr	r2, [pc, #12]	@ (800bb94 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb86:	4b04      	ldr	r3, [pc, #16]	@ (800bb98 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb88:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	e9c0 2300 	strd	r2, r3, [r0]
}
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	2400116c 	.word	0x2400116c
 800bb98:	24001180 	.word	0x24001180

0800bb9c <xTaskCheckForTimeOut>:
{
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800bb9e:	b308      	cbz	r0, 800bbe4 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800bba0:	460d      	mov	r5, r1
 800bba2:	b1b1      	cbz	r1, 800bbd2 <xTaskCheckForTimeOut+0x36>
 800bba4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bba6:	f000 fb8d 	bl	800c2c4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800bbaa:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800bbac:	4a1a      	ldr	r2, [pc, #104]	@ (800bc18 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800bbae:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800bbb0:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800bbb2:	d02c      	beq.n	800bc0e <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbb4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800bc1c <xTaskCheckForTimeOut+0x80>
 800bbb8:	6826      	ldr	r6, [r4, #0]
 800bbba:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbbe:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbc0:	42be      	cmp	r6, r7
 800bbc2:	d018      	beq.n	800bbf6 <xTaskCheckForTimeOut+0x5a>
 800bbc4:	4288      	cmp	r0, r1
 800bbc6:	d816      	bhi.n	800bbf6 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 800bbc8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800bbca:	f000 fb9d 	bl	800c308 <vPortExitCritical>
}
 800bbce:	4620      	mov	r0, r4
 800bbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800bbe2:	e7fe      	b.n	800bbe2 <xTaskCheckForTimeOut+0x46>
 800bbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800bbf4:	e7fe      	b.n	800bbf4 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbf6:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbfa:	4573      	cmp	r3, lr
 800bbfc:	d909      	bls.n	800bc12 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 800bbfe:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc00:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc04:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 800bc06:	4403      	add	r3, r0
 800bc08:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc0a:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 800bc0e:	2400      	movs	r4, #0
 800bc10:	e7db      	b.n	800bbca <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800bc16:	e7d7      	b.n	800bbc8 <xTaskCheckForTimeOut+0x2c>
 800bc18:	24001180 	.word	0x24001180
 800bc1c:	2400116c 	.word	0x2400116c

0800bc20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800bc20:	4b01      	ldr	r3, [pc, #4]	@ (800bc28 <vTaskMissedYield+0x8>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	601a      	str	r2, [r3, #0]
}
 800bc26:	4770      	bx	lr
 800bc28:	24001170 	.word	0x24001170

0800bc2c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <xTaskGetSchedulerState+0x18>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	b133      	cbz	r3, 800bc40 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc32:	4b05      	ldr	r3, [pc, #20]	@ (800bc48 <xTaskGetSchedulerState+0x1c>)
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	fab0 f080 	clz	r0, r0
 800bc3a:	0940      	lsrs	r0, r0, #5
 800bc3c:	0040      	lsls	r0, r0, #1
 800bc3e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc40:	2001      	movs	r0, #1
	}
 800bc42:	4770      	bx	lr
 800bc44:	24001178 	.word	0x24001178
 800bc48:	24001160 	.word	0x24001160

0800bc4c <xTaskPriorityInherit>:
	{
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800bc4e:	4604      	mov	r4, r0
 800bc50:	b1c8      	cbz	r0, 800bc86 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc52:	4d1b      	ldr	r5, [pc, #108]	@ (800bcc0 <xTaskPriorityInherit+0x74>)
 800bc54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800bc56:	682a      	ldr	r2, [r5, #0]
 800bc58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d214      	bcs.n	800bc88 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc5e:	6982      	ldr	r2, [r0, #24]
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	db04      	blt.n	800bc6e <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc64:	682a      	ldr	r2, [r5, #0]
 800bc66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc68:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800bc6c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bc72:	4e14      	ldr	r6, [pc, #80]	@ (800bcc4 <xTaskPriorityInherit+0x78>)
 800bc74:	6962      	ldr	r2, [r4, #20]
 800bc76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d00c      	beq.n	800bc98 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc7e:	682b      	ldr	r3, [r5, #0]
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800bc84:	2001      	movs	r0, #1
	}
 800bc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800bc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8e:	4298      	cmp	r0, r3
 800bc90:	bf2c      	ite	cs
 800bc92:	2000      	movcs	r0, #0
 800bc94:	2001      	movcc	r0, #1
	}
 800bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc98:	1d27      	adds	r7, r4, #4
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	f7fe f9ca 	bl	800a034 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bca0:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bca2:	4b09      	ldr	r3, [pc, #36]	@ (800bcc8 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bca4:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bca6:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bca8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcaa:	4290      	cmp	r0, r2
 800bcac:	d900      	bls.n	800bcb0 <xTaskPriorityInherit+0x64>
 800bcae:	6018      	str	r0, [r3, #0]
 800bcb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800bcba:	f7fe f995 	bl	8009fe8 <vListInsertEnd>
 800bcbe:	e7e1      	b.n	800bc84 <xTaskPriorityInherit+0x38>
 800bcc0:	24001658 	.word	0x24001658
 800bcc4:	240011f8 	.word	0x240011f8
 800bcc8:	2400117c 	.word	0x2400117c

0800bccc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800bccc:	b308      	cbz	r0, 800bd12 <xTaskPriorityDisinherit+0x46>
	{
 800bcce:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800bcd0:	4b1d      	ldr	r3, [pc, #116]	@ (800bd48 <xTaskPriorityDisinherit+0x7c>)
 800bcd2:	681c      	ldr	r4, [r3, #0]
 800bcd4:	4284      	cmp	r4, r0
 800bcd6:	d008      	beq.n	800bcea <xTaskPriorityDisinherit+0x1e>
 800bcd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	e7fe      	b.n	800bce8 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800bcec:	b143      	cbz	r3, 800bd00 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800bcf0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcf2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800bcf4:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcf6:	4291      	cmp	r1, r2
 800bcf8:	d000      	beq.n	800bcfc <xTaskPriorityDisinherit+0x30>
 800bcfa:	b163      	cbz	r3, 800bd16 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800bcfc:	2000      	movs	r0, #0
	}
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800bd10:	e7fe      	b.n	800bd10 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 800bd12:	2000      	movs	r0, #0
	}
 800bd14:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd16:	1d25      	adds	r5, r4, #4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7fe f98b 	bl	800a034 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd1e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 800bd20:	4b0a      	ldr	r3, [pc, #40]	@ (800bd4c <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd22:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd26:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd28:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	4290      	cmp	r0, r2
 800bd2e:	d900      	bls.n	800bd32 <xTaskPriorityDisinherit+0x66>
 800bd30:	6018      	str	r0, [r3, #0]
 800bd32:	4b07      	ldr	r3, [pc, #28]	@ (800bd50 <xTaskPriorityDisinherit+0x84>)
 800bd34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bd38:	4629      	mov	r1, r5
 800bd3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd3e:	f7fe f953 	bl	8009fe8 <vListInsertEnd>
					xReturn = pdTRUE;
 800bd42:	2001      	movs	r0, #1
	}
 800bd44:	bd38      	pop	{r3, r4, r5, pc}
 800bd46:	bf00      	nop
 800bd48:	24001658 	.word	0x24001658
 800bd4c:	2400117c 	.word	0x2400117c
 800bd50:	240011f8 	.word	0x240011f8

0800bd54 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d03c      	beq.n	800bdd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd58:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 800bd5a:	b570      	push	{r4, r5, r6, lr}
 800bd5c:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800bd5e:	b14b      	cbz	r3, 800bd74 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd60:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bd64:	4281      	cmp	r1, r0
 800bd66:	bf38      	it	cc
 800bd68:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d101      	bne.n	800bd72 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800bd6e:	428a      	cmp	r2, r1
 800bd70:	d109      	bne.n	800bd86 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800bd84:	e7fe      	b.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 800bd86:	4b18      	ldr	r3, [pc, #96]	@ (800bde8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	42a3      	cmp	r3, r4
 800bd8c:	d022      	beq.n	800bdd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd8e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd90:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db02      	blt.n	800bd9c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd96:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 800bd9a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800bda0:	4d12      	ldr	r5, [pc, #72]	@ (800bdec <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800bda2:	6961      	ldr	r1, [r4, #20]
 800bda4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d1e2      	bne.n	800bd72 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdac:	1d26      	adds	r6, r4, #4
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f7fe f940 	bl	800a034 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800bdb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800bdb6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	4290      	cmp	r0, r2
 800bdbc:	d900      	bls.n	800bdc0 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 800bdbe:	6018      	str	r0, [r3, #0]
 800bdc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 800bdca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800bdce:	f7fe b90b 	b.w	8009fe8 <vListInsertEnd>
 800bdd2:	4770      	bx	lr
 800bdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800bde4:	e7fe      	b.n	800bde4 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800bde6:	bf00      	nop
 800bde8:	24001658 	.word	0x24001658
 800bdec:	240011f8 	.word	0x240011f8
 800bdf0:	2400117c 	.word	0x2400117c

0800bdf4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800bdf4:	4b04      	ldr	r3, [pc, #16]	@ (800be08 <pvTaskIncrementMutexHeldCount+0x14>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	b11a      	cbz	r2, 800be02 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdfa:	6819      	ldr	r1, [r3, #0]
 800bdfc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800bdfe:	3201      	adds	r2, #1
 800be00:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800be02:	6818      	ldr	r0, [r3, #0]
	}
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	24001658 	.word	0x24001658

0800be0c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be10:	4e21      	ldr	r6, [pc, #132]	@ (800be98 <prvSwitchTimerLists+0x8c>)
 800be12:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be14:	e00d      	b.n	800be32 <prvSwitchTimerLists+0x26>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be16:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be18:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be1a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be1c:	1d25      	adds	r5, r4, #4
 800be1e:	4628      	mov	r0, r5
 800be20:	f7fe f908 	bl	800a034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be24:	6a23      	ldr	r3, [r4, #32]
 800be26:	4620      	mov	r0, r4
 800be28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be2a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800be2e:	075b      	lsls	r3, r3, #29
 800be30:	d40a      	bmi.n	800be48 <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be32:	6833      	ldr	r3, [r6, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	2a00      	cmp	r2, #0
 800be38:	d1ed      	bne.n	800be16 <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800be3a:	4a18      	ldr	r2, [pc, #96]	@ (800be9c <prvSwitchTimerLists+0x90>)
 800be3c:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be3e:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800be40:	6031      	str	r1, [r6, #0]
}
 800be42:	b004      	add	sp, #16
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be48:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be4a:	4629      	mov	r1, r5
	if( xTimerQueue != NULL )
 800be4c:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 800bea0 <prvSwitchTimerLists+0x94>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be50:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800be52:	429f      	cmp	r7, r3
 800be54:	d205      	bcs.n	800be62 <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be56:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be58:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be5a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be5c:	f7fe f8d2 	bl	800a004 <vListInsert>
 800be60:	e7e7      	b.n	800be32 <prvSwitchTimerLists+0x26>
	if( xTimerQueue != NULL )
 800be62:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
 800be66:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 800be68:	b16b      	cbz	r3, 800be86 <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be6a:	9402      	str	r4, [sp, #8]
		xMessage.xMessageID = xCommandID;
 800be6c:	e9cd 5700 	strd	r5, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be70:	f7ff fedc 	bl	800bc2c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be74:	462b      	mov	r3, r5
 800be76:	462a      	mov	r2, r5
 800be78:	4669      	mov	r1, sp
 800be7a:	f8d8 0000 	ldr.w	r0, [r8]
 800be7e:	f7fe fa79 	bl	800a374 <xQueueGenericSend>
				configASSERT( xResult );
 800be82:	2800      	cmp	r0, #0
 800be84:	d1d5      	bne.n	800be32 <prvSwitchTimerLists+0x26>
 800be86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	e7fe      	b.n	800be96 <prvSwitchTimerLists+0x8a>
 800be98:	2400175c 	.word	0x2400175c
 800be9c:	24001758 	.word	0x24001758
 800bea0:	24001754 	.word	0x24001754

0800bea4 <prvTimerTask>:
{
 800bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	4e9f      	ldr	r6, [pc, #636]	@ (800c128 <prvTimerTask+0x284>)
 800beaa:	b089      	sub	sp, #36	@ 0x24
 800beac:	4d9f      	ldr	r5, [pc, #636]	@ (800c12c <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
 800beae:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 800beb2:	4c9f      	ldr	r4, [pc, #636]	@ (800c130 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800beb4:	6833      	ldr	r3, [r6, #0]
 800beb6:	681f      	ldr	r7, [r3, #0]
 800beb8:	2f00      	cmp	r7, #0
 800beba:	f000 80b2 	beq.w	800c022 <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800bec2:	f7ff fd0f 	bl	800b8e4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800bec6:	f7ff fd25 	bl	800b914 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800beca:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800becc:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800bece:	4298      	cmp	r0, r3
 800bed0:	f0c0 80af 	bcc.w	800c032 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bed4:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 800bed6:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bed8:	f200 80d0 	bhi.w	800c07c <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
 800bedc:	f7ff fd0a 	bl	800b8f4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bee0:	6833      	ldr	r3, [r6, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bee8:	f10b 0804 	add.w	r8, fp, #4
 800beec:	4640      	mov	r0, r8
 800beee:	f7fe f8a1 	bl	800a034 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bef2:	f89b 3028 	ldrb.w	r3, [fp, #40]	@ 0x28
 800bef6:	0758      	lsls	r0, r3, #29
 800bef8:	f100 80d0 	bmi.w	800c09c <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800befc:	f023 0301 	bic.w	r3, r3, #1
 800bf00:	f88b 3028 	strb.w	r3, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf04:	f8db 3020 	ldr.w	r3, [fp, #32]
 800bf08:	4658      	mov	r0, fp
 800bf0a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4669      	mov	r1, sp
 800bf10:	6820      	ldr	r0, [r4, #0]
 800bf12:	f7fe fc6d 	bl	800a7f0 <xQueueReceive>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0cc      	beq.n	800beb4 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf1a:	9b00      	ldr	r3, [sp, #0]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf1c:	9802      	ldr	r0, [sp, #8]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	db77      	blt.n	800c012 <prvTimerTask+0x16e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf22:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	b113      	cbz	r3, 800bf2e <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf28:	1d38      	adds	r0, r7, #4
 800bf2a:	f7fe f883 	bl	800a034 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800bf2e:	f7ff fcf1 	bl	800b914 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800bf32:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800bf34:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800bf36:	4298      	cmp	r0, r3
 800bf38:	f0c0 8082 	bcc.w	800c040 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
 800bf3c:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
 800bf3e:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	d8e2      	bhi.n	800bf0c <prvTimerTask+0x68>
 800bf46:	e8df f003 	tbb	[pc, r3]
 800bf4a:	0505      	.short	0x0505
 800bf4c:	5b3e5405 	.word	0x5b3e5405
 800bf50:	3e540505 	.word	0x3e540505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf58:	9b01      	ldr	r3, [sp, #4]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf5a:	f042 0201 	orr.w	r2, r2, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf5e:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf60:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf64:	69ba      	ldr	r2, [r7, #24]
 800bf66:	1899      	adds	r1, r3, r2
 800bf68:	bf2c      	ite	cs
 800bf6a:	2001      	movcs	r0, #1
 800bf6c:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 800bf6e:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf70:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800bf72:	f200 8085 	bhi.w	800c080 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf76:	ebab 0303 	sub.w	r3, fp, r3
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	f200 80be 	bhi.w	800c0fc <prvTimerTask+0x258>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	4638      	mov	r0, r7
 800bf84:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bf8a:	0759      	lsls	r1, r3, #29
 800bf8c:	d5be      	bpl.n	800bf0c <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
 800bf8e:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf90:	9b01      	ldr	r3, [sp, #4]
 800bf92:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
 800bf94:	b171      	cbz	r1, 800bfb4 <prvTimerTask+0x110>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf96:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf98:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
 800bf9c:	2700      	movs	r7, #0
 800bf9e:	9704      	str	r7, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfa0:	f7ff fe44 	bl	800bc2c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfa4:	463b      	mov	r3, r7
 800bfa6:	463a      	mov	r2, r7
 800bfa8:	a904      	add	r1, sp, #16
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	f7fe f9e2 	bl	800a374 <xQueueGenericSend>
							configASSERT( xResult );
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d1ab      	bne.n	800bf0c <prvTimerTask+0x68>
 800bfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	e7fe      	b.n	800bfc4 <prvTimerTask+0x120>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfc6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfca:	9b01      	ldr	r3, [sp, #4]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfcc:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfd0:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfd2:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 809c 	beq.w	800c114 <prvTimerTask+0x270>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfdc:	445b      	add	r3, fp
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfde:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfe0:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800bfe2:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfe4:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800bfe6:	d855      	bhi.n	800c094 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfe8:	4b52      	ldr	r3, [pc, #328]	@ (800c134 <prvTimerTask+0x290>)
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	f7fe f80a 	bl	800a004 <vListInsert>
 800bff0:	e78c      	b.n	800bf0c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bff2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bff6:	f023 0301 	bic.w	r3, r3, #1
 800bffa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 800bffe:	e785      	b.n	800bf0c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c000:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c004:	079a      	lsls	r2, r3, #30
 800c006:	d570      	bpl.n	800c0ea <prvTimerTask+0x246>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c008:	f023 0301 	bic.w	r3, r3, #1
 800c00c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800c010:	e77c      	b.n	800bf0c <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	9903      	ldr	r1, [sp, #12]
 800c016:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c018:	9b00      	ldr	r3, [sp, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f6ff af76 	blt.w	800bf0c <prvTimerTask+0x68>
 800c020:	e77f      	b.n	800bf22 <prvTimerTask+0x7e>
	vTaskSuspendAll();
 800c022:	f7ff fc5f 	bl	800b8e4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c026:	f7ff fc75 	bl	800b914 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c02a:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800c02c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800c02e:	4298      	cmp	r0, r3
 800c030:	d209      	bcs.n	800c046 <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
 800c032:	f7ff feeb 	bl	800be0c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c036:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 800c03a:	f7ff fc5b 	bl	800b8f4 <xTaskResumeAll>
 800c03e:	e765      	b.n	800bf0c <prvTimerTask+0x68>
		prvSwitchTimerLists();
 800c040:	f7ff fee4 	bl	800be0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c044:	e77a      	b.n	800bf3c <prvTimerTask+0x98>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c046:	4b3b      	ldr	r3, [pc, #236]	@ (800c134 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 800c048:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	fab2 f282 	clz	r2, r2
 800c054:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c056:	eba7 010a 	sub.w	r1, r7, sl
 800c05a:	6820      	ldr	r0, [r4, #0]
 800c05c:	f7fe ffa6 	bl	800afac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c060:	f7ff fc48 	bl	800b8f4 <xTaskResumeAll>
 800c064:	2800      	cmp	r0, #0
 800c066:	f47f af51 	bne.w	800bf0c <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 800c06a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c06e:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	e747      	b.n	800bf0c <prvTimerTask+0x68>
 800c07c:	2200      	movs	r2, #0
 800c07e:	e7ea      	b.n	800c056 <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c080:	455b      	cmp	r3, fp
 800c082:	d902      	bls.n	800c08a <prvTimerTask+0x1e6>
 800c084:	2800      	cmp	r0, #0
 800c086:	f43f af7b 	beq.w	800bf80 <prvTimerTask+0xdc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c08a:	1d39      	adds	r1, r7, #4
 800c08c:	6830      	ldr	r0, [r6, #0]
 800c08e:	f7fd ffb9 	bl	800a004 <vListInsert>
	return xProcessTimerNow;
 800c092:	e73b      	b.n	800bf0c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c094:	6830      	ldr	r0, [r6, #0]
 800c096:	f7fd ffb5 	bl	800a004 <vListInsert>
 800c09a:	e737      	b.n	800bf0c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c09c:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0a0:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0a4:	183b      	adds	r3, r7, r0
	if( xNextExpiryTime <= xTimeNow )
 800c0a6:	459a      	cmp	sl, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0a8:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c0ac:	d321      	bcc.n	800c0f2 <prvTimerTask+0x24e>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ae:	ebaa 0a07 	sub.w	sl, sl, r7
 800c0b2:	4550      	cmp	r0, sl
 800c0b4:	d828      	bhi.n	800c108 <prvTimerTask+0x264>
	if( xTimerQueue != NULL )
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	b173      	cbz	r3, 800c0d8 <prvTimerTask+0x234>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0ba:	e9cd 7b05 	strd	r7, fp, [sp, #20]
		xMessage.xMessageID = xCommandID;
 800c0be:	2700      	movs	r7, #0
 800c0c0:	9704      	str	r7, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0c2:	f7ff fdb3 	bl	800bc2c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	463a      	mov	r2, r7
 800c0ca:	a904      	add	r1, sp, #16
 800c0cc:	6820      	ldr	r0, [r4, #0]
 800c0ce:	f7fe f951 	bl	800a374 <xQueueGenericSend>
			configASSERT( xResult );
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f47f af16 	bne.w	800bf04 <prvTimerTask+0x60>
 800c0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	e7fe      	b.n	800c0e8 <prvTimerTask+0x244>
							vPortFree( pxTimer );
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f000 fb06 	bl	800c6fc <vPortFree>
 800c0f0:	e70c      	b.n	800bf0c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0f2:	4641      	mov	r1, r8
 800c0f4:	6830      	ldr	r0, [r6, #0]
 800c0f6:	f7fd ff85 	bl	800a004 <vListInsert>
	return xProcessTimerNow;
 800c0fa:	e703      	b.n	800bf04 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <prvTimerTask+0x290>)
 800c0fe:	1d39      	adds	r1, r7, #4
 800c100:	6818      	ldr	r0, [r3, #0]
 800c102:	f7fd ff7f 	bl	800a004 <vListInsert>
	return xProcessTimerNow;
 800c106:	e701      	b.n	800bf0c <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c108:	4b0a      	ldr	r3, [pc, #40]	@ (800c134 <prvTimerTask+0x290>)
 800c10a:	4641      	mov	r1, r8
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f7fd ff79 	bl	800a004 <vListInsert>
	return xProcessTimerNow;
 800c112:	e6f7      	b.n	800bf04 <prvTimerTask+0x60>
 800c114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c124:	e7fe      	b.n	800c124 <prvTimerTask+0x280>
 800c126:	bf00      	nop
 800c128:	2400175c 	.word	0x2400175c
 800c12c:	2400174c 	.word	0x2400174c
 800c130:	24001754 	.word	0x24001754
 800c134:	24001758 	.word	0x24001758

0800c138 <xTimerCreateTimerTask>:
{
 800c138:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c13a:	4c23      	ldr	r4, [pc, #140]	@ (800c1c8 <xTimerCreateTimerTask+0x90>)
{
 800c13c:	b089      	sub	sp, #36	@ 0x24
	taskENTER_CRITICAL();
 800c13e:	f000 f8c1 	bl	800c2c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c142:	6825      	ldr	r5, [r4, #0]
 800c144:	b335      	cbz	r5, 800c194 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c146:	f000 f8df 	bl	800c308 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	b1cb      	cbz	r3, 800c182 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c14e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c150:	aa07      	add	r2, sp, #28
 800c152:	a906      	add	r1, sp, #24
 800c154:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c156:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c158:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c15c:	f7fd ff24 	bl	8009fa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c160:	4623      	mov	r3, r4
 800c162:	9a07      	ldr	r2, [sp, #28]
 800c164:	9500      	str	r5, [sp, #0]
 800c166:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800c16a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c16e:	4917      	ldr	r1, [pc, #92]	@ (800c1cc <xTimerCreateTimerTask+0x94>)
 800c170:	4817      	ldr	r0, [pc, #92]	@ (800c1d0 <xTimerCreateTimerTask+0x98>)
 800c172:	f7ff f997 	bl	800b4a4 <xTaskCreateStatic>
 800c176:	4b17      	ldr	r3, [pc, #92]	@ (800c1d4 <xTimerCreateTimerTask+0x9c>)
 800c178:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c17a:	b110      	cbz	r0, 800c182 <xTimerCreateTimerTask+0x4a>
}
 800c17c:	2001      	movs	r0, #1
 800c17e:	b009      	add	sp, #36	@ 0x24
 800c180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800c192:	e7fe      	b.n	800c192 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 800c194:	4f10      	ldr	r7, [pc, #64]	@ (800c1d8 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800c196:	4e11      	ldr	r6, [pc, #68]	@ (800c1dc <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800c198:	4638      	mov	r0, r7
 800c19a:	f7fd ff15 	bl	8009fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7fd ff12 	bl	8009fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1a4:	4a0e      	ldr	r2, [pc, #56]	@ (800c1e0 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1a6:	9500      	str	r5, [sp, #0]
 800c1a8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c1aa:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1ac:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c1ae:	4a0d      	ldr	r2, [pc, #52]	@ (800c1e4 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e8 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800c1b2:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c1ec <xTimerCreateTimerTask+0xb4>)
 800c1b6:	f7fd ff89 	bl	800a0cc <xQueueGenericCreateStatic>
 800c1ba:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d0c2      	beq.n	800c146 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1c0:	490b      	ldr	r1, [pc, #44]	@ (800c1f0 <xTimerCreateTimerTask+0xb8>)
 800c1c2:	f7fe fecb 	bl	800af5c <vQueueAddToRegistry>
 800c1c6:	e7be      	b.n	800c146 <xTimerCreateTimerTask+0xe>
 800c1c8:	24001754 	.word	0x24001754
 800c1cc:	080288bc 	.word	0x080288bc
 800c1d0:	0800bea5 	.word	0x0800bea5
 800c1d4:	24001750 	.word	0x24001750
 800c1d8:	24001774 	.word	0x24001774
 800c1dc:	24001760 	.word	0x24001760
 800c1e0:	2400175c 	.word	0x2400175c
 800c1e4:	24001758 	.word	0x24001758
 800c1e8:	2400165c 	.word	0x2400165c
 800c1ec:	240016ac 	.word	0x240016ac
 800c1f0:	080288b4 	.word	0x080288b4

0800c1f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1f4:	4808      	ldr	r0, [pc, #32]	@ (800c218 <prvPortStartFirstTask+0x24>)
 800c1f6:	6800      	ldr	r0, [r0, #0]
 800c1f8:	6800      	ldr	r0, [r0, #0]
 800c1fa:	f380 8808 	msr	MSP, r0
 800c1fe:	f04f 0000 	mov.w	r0, #0
 800c202:	f380 8814 	msr	CONTROL, r0
 800c206:	b662      	cpsie	i
 800c208:	b661      	cpsie	f
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	df00      	svc	0
 800c214:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c216:	0000      	.short	0x0000
 800c218:	e000ed08 	.word	0xe000ed08

0800c21c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c21c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c22c <vPortEnableVFP+0x10>
 800c220:	6801      	ldr	r1, [r0, #0]
 800c222:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c226:	6001      	str	r1, [r0, #0]
 800c228:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c22a:	0000      	.short	0x0000
 800c22c:	e000ed88 	.word	0xe000ed88

0800c230 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800c230:	4b0e      	ldr	r3, [pc, #56]	@ (800c26c <prvTaskExitError+0x3c>)
{
 800c232:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800c234:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800c236:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 800c238:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c23a:	3301      	adds	r3, #1
 800c23c:	d008      	beq.n	800c250 <prvTaskExitError+0x20>
 800c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	e7fe      	b.n	800c24e <prvTaskExitError+0x1e>
 800c250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0fc      	beq.n	800c260 <prvTaskExitError+0x30>
}
 800c266:	b002      	add	sp, #8
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	24000024 	.word	0x24000024

0800c270 <pxPortInitialiseStack>:
{
 800c270:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c272:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c276:	4809      	ldr	r0, [pc, #36]	@ (800c29c <pxPortInitialiseStack+0x2c>)
{
 800c278:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c27a:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c27e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c282:	f843 2c20 	str.w	r2, [r3, #-32]
}
 800c286:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c28a:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c28e:	f06f 0102 	mvn.w	r1, #2
}
 800c292:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c296:	f843 1c24 	str.w	r1, [r3, #-36]
}
 800c29a:	4770      	bx	lr
 800c29c:	0800c231 	.word	0x0800c231

0800c2a0 <SVC_Handler>:
	__asm volatile (
 800c2a0:	4b07      	ldr	r3, [pc, #28]	@ (800c2c0 <pxCurrentTCBConst2>)
 800c2a2:	6819      	ldr	r1, [r3, #0]
 800c2a4:	6808      	ldr	r0, [r1, #0]
 800c2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2aa:	f380 8809 	msr	PSP, r0
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8811 	msr	BASEPRI, r0
 800c2ba:	4770      	bx	lr
 800c2bc:	f3af 8000 	nop.w

0800c2c0 <pxCurrentTCBConst2>:
 800c2c0:	24001658 	.word	0x24001658

0800c2c4 <vPortEnterCritical>:
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800c2d4:	4a0b      	ldr	r2, [pc, #44]	@ (800c304 <vPortEnterCritical+0x40>)
 800c2d6:	6813      	ldr	r3, [r2, #0]
 800c2d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800c2da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800c2dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800c2de:	d000      	beq.n	800c2e2 <vPortEnterCritical+0x1e>
}
 800c2e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c2e6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0f7      	beq.n	800c2e0 <vPortEnterCritical+0x1c>
 800c2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	e7fe      	b.n	800c300 <vPortEnterCritical+0x3c>
 800c302:	bf00      	nop
 800c304:	24000024 	.word	0x24000024

0800c308 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800c308:	4a08      	ldr	r2, [pc, #32]	@ (800c32c <vPortExitCritical+0x24>)
 800c30a:	6813      	ldr	r3, [r2, #0]
 800c30c:	b943      	cbnz	r3, 800c320 <vPortExitCritical+0x18>
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	e7fe      	b.n	800c31e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800c320:	3b01      	subs	r3, #1
 800c322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c324:	b90b      	cbnz	r3, 800c32a <vPortExitCritical+0x22>
	__asm volatile
 800c326:	f383 8811 	msr	BASEPRI, r3
}
 800c32a:	4770      	bx	lr
 800c32c:	24000024 	.word	0x24000024

0800c330 <PendSV_Handler>:
	__asm volatile
 800c330:	f3ef 8009 	mrs	r0, PSP
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4b15      	ldr	r3, [pc, #84]	@ (800c390 <pxCurrentTCBConst>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f01e 0f10 	tst.w	lr, #16
 800c340:	bf08      	it	eq
 800c342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	6010      	str	r0, [r2, #0]
 800c34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c354:	f380 8811 	msr	BASEPRI, r0
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f7ff faf6 	bl	800b950 <vTaskSwitchContext>
 800c364:	f04f 0000 	mov.w	r0, #0
 800c368:	f380 8811 	msr	BASEPRI, r0
 800c36c:	bc09      	pop	{r0, r3}
 800c36e:	6819      	ldr	r1, [r3, #0]
 800c370:	6808      	ldr	r0, [r1, #0]
 800c372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c376:	f01e 0f10 	tst.w	lr, #16
 800c37a:	bf08      	it	eq
 800c37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c380:	f380 8809 	msr	PSP, r0
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w

0800c390 <pxCurrentTCBConst>:
 800c390:	24001658 	.word	0x24001658

0800c394 <xPortSysTickHandler>:
{
 800c394:	b508      	push	{r3, lr}
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c3a6:	f7ff fac3 	bl	800b930 <xTaskIncrementTick>
 800c3aa:	b128      	cbz	r0, 800c3b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c3b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f383 8811 	msr	BASEPRI, r3
}
 800c3be:	bd08      	pop	{r3, pc}

0800c3c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800c3c4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3c6:	4806      	ldr	r0, [pc, #24]	@ (800c3e0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3c8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3ca:	4906      	ldr	r1, [pc, #24]	@ (800c3e4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3cc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3ce:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3d0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3d2:	fba1 1303 	umull	r1, r3, r1, r3
 800c3d6:	099b      	lsrs	r3, r3, #6
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3dc:	6110      	str	r0, [r2, #16]
}
 800c3de:	4770      	bx	lr
 800c3e0:	24000014 	.word	0x24000014
 800c3e4:	10624dd3 	.word	0x10624dd3

0800c3e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c3ec:	4a48      	ldr	r2, [pc, #288]	@ (800c510 <xPortStartScheduler+0x128>)
 800c3ee:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800c3f2:	4291      	cmp	r1, r2
 800c3f4:	d041      	beq.n	800c47a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800c3fa:	4b46      	ldr	r3, [pc, #280]	@ (800c514 <xPortStartScheduler+0x12c>)
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d033      	beq.n	800c468 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c400:	4b45      	ldr	r3, [pc, #276]	@ (800c518 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c402:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c406:	4845      	ldr	r0, [pc, #276]	@ (800c51c <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c408:	4945      	ldr	r1, [pc, #276]	@ (800c520 <xPortStartScheduler+0x138>)
{
 800c40a:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c40c:	781a      	ldrb	r2, [r3, #0]
{
 800c40e:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c414:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c416:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c41a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c41c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c424:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c428:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c42c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c430:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c432:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c434:	d50f      	bpl.n	800c456 <xPortStartScheduler+0x6e>
 800c436:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c438:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c43c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c43e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	b2db      	uxtb	r3, r3
 800c444:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c448:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c44c:	061b      	lsls	r3, r3, #24
 800c44e:	d4f3      	bmi.n	800c438 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c450:	2903      	cmp	r1, #3
 800c452:	d01b      	beq.n	800c48c <xPortStartScheduler+0xa4>
 800c454:	6001      	str	r1, [r0, #0]
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	e7fe      	b.n	800c466 <xPortStartScheduler+0x7e>
 800c468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c478:	e7fe      	b.n	800c478 <xPortStartScheduler+0x90>
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c48a:	e7fe      	b.n	800c48a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c48c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c48e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c492:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c496:	4a20      	ldr	r2, [pc, #128]	@ (800c518 <xPortStartScheduler+0x130>)
 800c498:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 800c49a:	4e22      	ldr	r6, [pc, #136]	@ (800c524 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c49c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
 800c49e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4a0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4a2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800c4a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4aa:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4ae:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800c4b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4b6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800c4ba:	f7ff ff81 	bl	800c3c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c4be:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
 800c4c0:	f7ff feac 	bl	800c21c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4c4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800c4c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c4cc:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800c4d0:	f7ff fe90 	bl	800c1f4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c4d4:	f7ff fa3c 	bl	800b950 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800c4d8:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
 800c4da:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800c4dc:	3301      	adds	r3, #1
 800c4de:	d008      	beq.n	800c4f2 <xPortStartScheduler+0x10a>
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	e7fe      	b.n	800c4f0 <xPortStartScheduler+0x108>
 800c4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800c502:	9b03      	ldr	r3, [sp, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d0fc      	beq.n	800c502 <xPortStartScheduler+0x11a>
}
 800c508:	2000      	movs	r0, #0
 800c50a:	b004      	add	sp, #16
 800c50c:	bd70      	pop	{r4, r5, r6, pc}
 800c50e:	bf00      	nop
 800c510:	410fc271 	.word	0x410fc271
 800c514:	410fc270 	.word	0x410fc270
 800c518:	e000e400 	.word	0xe000e400
 800c51c:	24001788 	.word	0x24001788
 800c520:	2400178c 	.word	0x2400178c
 800c524:	24000024 	.word	0x24000024

0800c528 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c528:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c52c:	2b0f      	cmp	r3, #15
 800c52e:	d90e      	bls.n	800c54e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c530:	4911      	ldr	r1, [pc, #68]	@ (800c578 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c532:	4a12      	ldr	r2, [pc, #72]	@ (800c57c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c534:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c536:	7812      	ldrb	r2, [r2, #0]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d908      	bls.n	800c54e <vPortValidateInterruptPriority+0x26>
 800c53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	e7fe      	b.n	800c54c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c54e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c552:	4a0b      	ldr	r2, [pc, #44]	@ (800c580 <vPortValidateInterruptPriority+0x58>)
 800c554:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800c558:	6812      	ldr	r2, [r2, #0]
 800c55a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c55e:	4293      	cmp	r3, r2
 800c560:	d908      	bls.n	800c574 <vPortValidateInterruptPriority+0x4c>
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	e7fe      	b.n	800c572 <vPortValidateInterruptPriority+0x4a>
	}
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	e000e3f0 	.word	0xe000e3f0
 800c57c:	2400178c 	.word	0x2400178c
 800c580:	24001788 	.word	0x24001788

0800c584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c588:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800c58a:	f7ff f9ab 	bl	800b8e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c58e:	4a53      	ldr	r2, [pc, #332]	@ (800c6dc <pvPortMalloc+0x158>)
 800c590:	6815      	ldr	r5, [r2, #0]
 800c592:	2d00      	cmp	r5, #0
 800c594:	d035      	beq.n	800c602 <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c596:	4b52      	ldr	r3, [pc, #328]	@ (800c6e0 <pvPortMalloc+0x15c>)
 800c598:	681e      	ldr	r6, [r3, #0]
 800c59a:	4234      	tst	r4, r6
 800c59c:	d12b      	bne.n	800c5f6 <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c59e:	b354      	cbz	r4, 800c5f6 <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c5a0:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5a4:	0764      	lsls	r4, r4, #29
 800c5a6:	d002      	beq.n	800c5ae <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5a8:	f020 0007 	bic.w	r0, r0, #7
 800c5ac:	3008      	adds	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ae:	b310      	cbz	r0, 800c5f6 <pvPortMalloc+0x72>
 800c5b0:	f8df e140 	ldr.w	lr, [pc, #320]	@ 800c6f4 <pvPortMalloc+0x170>
 800c5b4:	f8de c000 	ldr.w	ip, [lr]
 800c5b8:	4584      	cmp	ip, r0
 800c5ba:	d31c      	bcc.n	800c5f6 <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800c5bc:	4c49      	ldr	r4, [pc, #292]	@ (800c6e4 <pvPortMalloc+0x160>)
 800c5be:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5c0:	e003      	b.n	800c5ca <pvPortMalloc+0x46>
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	b122      	cbz	r2, 800c5d0 <pvPortMalloc+0x4c>
 800c5c6:	461c      	mov	r4, r3
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	6859      	ldr	r1, [r3, #4]
 800c5cc:	4281      	cmp	r1, r0
 800c5ce:	d3f8      	bcc.n	800c5c2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5d0:	42ab      	cmp	r3, r5
 800c5d2:	d010      	beq.n	800c5f6 <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5d8:	1a0a      	subs	r2, r1, r0
 800c5da:	2a10      	cmp	r2, #16
 800c5dc:	d947      	bls.n	800c66e <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5de:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5e0:	0761      	lsls	r1, r4, #29
 800c5e2:	d02d      	beq.n	800c640 <pvPortMalloc+0xbc>
 800c5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	e7fe      	b.n	800c5f4 <pvPortMalloc+0x70>
void *pvReturn = NULL;
 800c5f6:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5f8:	f7ff f97c 	bl	800b8f4 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c602:	4b39      	ldr	r3, [pc, #228]	@ (800c6e8 <pvPortMalloc+0x164>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c604:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c608:	4e36      	ldr	r6, [pc, #216]	@ (800c6e4 <pvPortMalloc+0x160>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c60a:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
 800c60c:	4d37      	ldr	r5, [pc, #220]	@ (800c6ec <pvPortMalloc+0x168>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c60e:	bf18      	it	ne
 800c610:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c612:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c616:	bf18      	it	ne
 800c618:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800c61c:	6015      	str	r5, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c61e:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c620:	6033      	str	r3, [r6, #0]
 800c622:	4619      	mov	r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800c624:	6072      	str	r2, [r6, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c626:	1aeb      	subs	r3, r5, r3
}
 800c628:	4606      	mov	r6, r0
	pxEnd->pxNextFreeBlock = NULL;
 800c62a:	e9c5 2200 	strd	r2, r2, [r5]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c62e:	4a30      	ldr	r2, [pc, #192]	@ (800c6f0 <pvPortMalloc+0x16c>)
 800c630:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c632:	4a30      	ldr	r2, [pc, #192]	@ (800c6f4 <pvPortMalloc+0x170>)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c634:	e9c1 5300 	strd	r5, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c638:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c63a:	4b29      	ldr	r3, [pc, #164]	@ (800c6e0 <pvPortMalloc+0x15c>)
 800c63c:	6018      	str	r0, [r3, #0]
}
 800c63e:	e7ac      	b.n	800c59a <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c640:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c642:	4a28      	ldr	r2, [pc, #160]	@ (800c6e4 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 800c644:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c646:	4617      	mov	r7, r2
 800c648:	6812      	ldr	r2, [r2, #0]
 800c64a:	4294      	cmp	r4, r2
 800c64c:	d8fb      	bhi.n	800c646 <pvPortMalloc+0xc2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c64e:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c650:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c654:	eb07 0901 	add.w	r9, r7, r1
 800c658:	454c      	cmp	r4, r9
 800c65a:	d028      	beq.n	800c6ae <pvPortMalloc+0x12a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c65c:	eb04 0108 	add.w	r1, r4, r8
 800c660:	428a      	cmp	r2, r1
 800c662:	d02e      	beq.n	800c6c2 <pvPortMalloc+0x13e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c664:	4601      	mov	r1, r0
 800c666:	6022      	str	r2, [r4, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c668:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c66a:	bf18      	it	ne
 800c66c:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c66e:	4820      	ldr	r0, [pc, #128]	@ (800c6f0 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c670:	ebac 0201 	sub.w	r2, ip, r1
					pxBlock->pxNextFreeBlock = NULL;
 800c674:	2500      	movs	r5, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c676:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c678:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c67a:	f8ce 2000 	str.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c67e:	42a2      	cmp	r2, r4
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c680:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c684:	6059      	str	r1, [r3, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c686:	bf38      	it	cc
 800c688:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 800c68a:	481b      	ldr	r0, [pc, #108]	@ (800c6f8 <pvPortMalloc+0x174>)
					pxBlock->pxNextFreeBlock = NULL;
 800c68c:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c68e:	6802      	ldr	r2, [r0, #0]
 800c690:	3201      	adds	r2, #1
 800c692:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
 800c694:	f7ff f92e 	bl	800b8f4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c698:	0763      	lsls	r3, r4, #29
 800c69a:	d0af      	beq.n	800c5fc <pvPortMalloc+0x78>
 800c69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	e7fe      	b.n	800c6ac <pvPortMalloc+0x128>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6ae:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6b0:	eb07 0108 	add.w	r1, r7, r8
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6b4:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6b8:	428a      	cmp	r2, r1
 800c6ba:	d001      	beq.n	800c6c0 <pvPortMalloc+0x13c>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6bc:	6859      	ldr	r1, [r3, #4]
 800c6be:	e7d6      	b.n	800c66e <pvPortMalloc+0xea>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6c0:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6c2:	42aa      	cmp	r2, r5
 800c6c4:	d006      	beq.n	800c6d4 <pvPortMalloc+0x150>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6c6:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6c8:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6ca:	4441      	add	r1, r8
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6cc:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6ce:	6061      	str	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6d0:	6859      	ldr	r1, [r3, #4]
 800c6d2:	e7c9      	b.n	800c668 <pvPortMalloc+0xe4>
 800c6d4:	6859      	ldr	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6d6:	6022      	str	r2, [r4, #0]
 800c6d8:	e7c6      	b.n	800c668 <pvPortMalloc+0xe4>
 800c6da:	bf00      	nop
 800c6dc:	240017a4 	.word	0x240017a4
 800c6e0:	24001790 	.word	0x24001790
 800c6e4:	240017a8 	.word	0x240017a8
 800c6e8:	240017b0 	.word	0x240017b0
 800c6ec:	240097a8 	.word	0x240097a8
 800c6f0:	2400179c 	.word	0x2400179c
 800c6f4:	240017a0 	.word	0x240017a0
 800c6f8:	24001798 	.word	0x24001798

0800c6fc <vPortFree>:
	if( pv != NULL )
 800c6fc:	b1d0      	cbz	r0, 800c734 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6fe:	4a2d      	ldr	r2, [pc, #180]	@ (800c7b4 <vPortFree+0xb8>)
 800c700:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c704:	6812      	ldr	r2, [r2, #0]
 800c706:	4213      	tst	r3, r2
 800c708:	d00b      	beq.n	800c722 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c70a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c70e:	b191      	cbz	r1, 800c736 <vPortFree+0x3a>
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	e7fe      	b.n	800c720 <vPortFree+0x24>
 800c722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c732:	e7fe      	b.n	800c732 <vPortFree+0x36>
 800c734:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c736:	ea23 0302 	bic.w	r3, r3, r2
{
 800c73a:	b530      	push	{r4, r5, lr}
 800c73c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c73e:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
 800c742:	f1a0 0408 	sub.w	r4, r0, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c746:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800c748:	f7ff f8cc 	bl	800b8e4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c74c:	4a1a      	ldr	r2, [pc, #104]	@ (800c7b8 <vPortFree+0xbc>)
 800c74e:	9801      	ldr	r0, [sp, #4]
 800c750:	6813      	ldr	r3, [r2, #0]
 800c752:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800c756:	440b      	add	r3, r1
 800c758:	6013      	str	r3, [r2, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c75a:	4b18      	ldr	r3, [pc, #96]	@ (800c7bc <vPortFree+0xc0>)
 800c75c:	461a      	mov	r2, r3
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	429c      	cmp	r4, r3
 800c762:	d8fb      	bhi.n	800c75c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c764:	6855      	ldr	r5, [r2, #4]
 800c766:	eb02 0e05 	add.w	lr, r2, r5
 800c76a:	4574      	cmp	r4, lr
 800c76c:	d011      	beq.n	800c792 <vPortFree+0x96>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c76e:	eb04 0c01 	add.w	ip, r4, r1
 800c772:	4563      	cmp	r3, ip
 800c774:	d013      	beq.n	800c79e <vPortFree+0xa2>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c776:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 800c77a:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c77c:	bf18      	it	ne
 800c77e:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
 800c780:	4a0f      	ldr	r2, [pc, #60]	@ (800c7c0 <vPortFree+0xc4>)
 800c782:	6813      	ldr	r3, [r2, #0]
 800c784:	3301      	adds	r3, #1
 800c786:	6013      	str	r3, [r2, #0]
}
 800c788:	b003      	add	sp, #12
 800c78a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
 800c78e:	f7ff b8b1 	b.w	800b8f4 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c792:	4429      	add	r1, r5
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c794:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c796:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c798:	4283      	cmp	r3, r0
 800c79a:	d1f1      	bne.n	800c780 <vPortFree+0x84>
 800c79c:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c79e:	4809      	ldr	r0, [pc, #36]	@ (800c7c4 <vPortFree+0xc8>)
 800c7a0:	6800      	ldr	r0, [r0, #0]
 800c7a2:	4283      	cmp	r3, r0
 800c7a4:	d003      	beq.n	800c7ae <vPortFree+0xb2>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7a6:	e9d3 0500 	ldrd	r0, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7aa:	4429      	add	r1, r5
 800c7ac:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7ae:	6020      	str	r0, [r4, #0]
 800c7b0:	e7e3      	b.n	800c77a <vPortFree+0x7e>
 800c7b2:	bf00      	nop
 800c7b4:	24001790 	.word	0x24001790
 800c7b8:	240017a0 	.word	0x240017a0
 800c7bc:	240017a8 	.word	0x240017a8
 800c7c0:	24001794 	.word	0x24001794
 800c7c4:	240017a4 	.word	0x240017a4

0800c7c8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop

0800c7cc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c7cc:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800c7ce:	f001 fbed 	bl	800dfac <touchgfx_components_init>
    touchgfx_init();
}
 800c7d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 800c7d6:	f001 bb71 	b.w	800debc <touchgfx_init>
 800c7da:	bf00      	nop

0800c7dc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId CHINESE = 3; // Microsoft_Yahei_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop

0800c7e0 <_ZN23ApplicationFontProviderD0Ev>:
 800c7e0:	b510      	push	{r4, lr}
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	2104      	movs	r1, #4
 800c7e6:	f016 fabd 	bl	8022d64 <_ZdlPvj>
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	bd10      	pop	{r4, pc}
 800c7ee:	bf00      	nop

0800c7f0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c7f0:	b508      	push	{r3, lr}
    switch (typography)
 800c7f2:	2903      	cmp	r1, #3
 800c7f4:	d813      	bhi.n	800c81e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800c7f6:	e8df f001 	tbb	[pc, r1]
 800c7fa:	0e0a      	.short	0x0e0a
 800c7fc:	0206      	.short	0x0206
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    case Typography::CHINESE:
        // Microsoft_Yahei_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800c7fe:	f000 fe5f 	bl	800d4c0 <_ZN17TypedTextDatabase8getFontsEv>
 800c802:	68c0      	ldr	r0, [r0, #12]
    default:
        return 0;
    }
}
 800c804:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c806:	f000 fe5b 	bl	800d4c0 <_ZN17TypedTextDatabase8getFontsEv>
 800c80a:	6880      	ldr	r0, [r0, #8]
}
 800c80c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c80e:	f000 fe57 	bl	800d4c0 <_ZN17TypedTextDatabase8getFontsEv>
 800c812:	6800      	ldr	r0, [r0, #0]
}
 800c814:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c816:	f000 fe53 	bl	800d4c0 <_ZN17TypedTextDatabase8getFontsEv>
 800c81a:	6840      	ldr	r0, [r0, #4]
}
 800c81c:	bd08      	pop	{r3, pc}
    switch (typography)
 800c81e:	2000      	movs	r0, #0
}
 800c820:	bd08      	pop	{r3, pc}
 800c822:	bf00      	nop

0800c824 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800c824:	b169      	cbz	r1, 800c842 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c826:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800c828:	b530      	push	{r4, r5, lr}
 800c82a:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
 800c82c:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c82e:	6895      	ldr	r5, [r2, #8]
 800c830:	f10d 0303 	add.w	r3, sp, #3
 800c834:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800c836:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800c838:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c83c:	47a8      	blx	r5
        return glyph;
    }
 800c83e:	b003      	add	sp, #12
 800c840:	bd30      	pop	{r4, r5, pc}
            return 0;
 800c842:	4608      	mov	r0, r1
    }
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop

0800c848 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800c848:	89c0      	ldrh	r0, [r0, #14]
 800c84a:	4770      	bx	lr

0800c84c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800c84c:	8a00      	ldrh	r0, [r0, #16]
 800c84e:	4770      	bx	lr

0800c850 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800c850:	88c0      	ldrh	r0, [r0, #6]
 800c852:	4770      	bx	lr

0800c854 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800c854:	8880      	ldrh	r0, [r0, #4]
 800c856:	4770      	bx	lr

0800c858 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800c858:	7a80      	ldrb	r0, [r0, #10]
    }
 800c85a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800c85e:	4770      	bx	lr

0800c860 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800c860:	7a80      	ldrb	r0, [r0, #10]
    }
 800c862:	09c0      	lsrs	r0, r0, #7
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop

0800c868 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 800c868:	2000      	movs	r0, #0
 800c86a:	4770      	bx	lr

0800c86c <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 800c86c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c874 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	00000000 	.word	0x00000000

0800c878 <_ZN8touchgfx9TypedTextD1Ev>:
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
    }
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop

0800c87c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800c87c:	b510      	push	{r4, lr}
 800c87e:	4604      	mov	r4, r0
    }
 800c880:	2108      	movs	r1, #8
 800c882:	f016 fa6f 	bl	8022d64 <_ZdlPvj>
 800c886:	4620      	mov	r0, r4
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	bf00      	nop

0800c88c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800c88c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c88e:	4770      	bx	lr

0800c890 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800c890:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800c892:	4770      	bx	lr

0800c894 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop

0800c898 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c898:	888b      	ldrh	r3, [r1, #4]
 800c89a:	69c0      	ldr	r0, [r0, #28]
 800c89c:	0adb      	lsrs	r3, r3, #11
 800c89e:	680a      	ldr	r2, [r1, #0]
 800c8a0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800c8a4:	4410      	add	r0, r2
 800c8a6:	4770      	bx	lr

0800c8a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 800c8a8:	b1fa      	cbz	r2, 800c8ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x42>
{
 800c8aa:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800c8ac:	7b14      	ldrb	r4, [r2, #12]
 800c8ae:	b1d4      	cbz	r4, 800c8e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800c8b0:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800c8b4:	f892 e00b 	ldrb.w	lr, [r2, #11]
 800c8b8:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800c8bc:	6a03      	ldr	r3, [r0, #32]
 800c8be:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c8c2:	ea4e 0202 	orr.w	r2, lr, r2
 800c8c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c8ca:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8ce:	e004      	b.n	800c8da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x32>
 800c8d0:	f103 0304 	add.w	r3, r3, #4
    {
        if (prevChar == kerndata->unicodePrevChar)
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 800c8d4:	d807      	bhi.n	800c8e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c8d6:	4283      	cmp	r3, r0
 800c8d8:	d005      	beq.n	800c8e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
        if (prevChar == kerndata->unicodePrevChar)
 800c8da:	881a      	ldrh	r2, [r3, #0]
 800c8dc:	428a      	cmp	r2, r1
 800c8de:	d1f7      	bne.n	800c8d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
            return kerndata->distance;
 800c8e0:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800c8e4:	bd10      	pop	{r4, pc}
        return 0;
 800c8e6:	2000      	movs	r0, #0
}
 800c8e8:	bd10      	pop	{r4, pc}
        return 0;
 800c8ea:	4610      	mov	r0, r2
}
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop

0800c8f0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	212c      	movs	r1, #44	@ 0x2c
 800c8f6:	f016 fa35 	bl	8022d64 <_ZdlPvj>
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	bd10      	pop	{r4, pc}
 800c8fe:	bf00      	nop

0800c900 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c900:	b530      	push	{r4, r5, lr}
 800c902:	b08b      	sub	sp, #44	@ 0x2c
 800c904:	4604      	mov	r4, r0
 800c906:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
      arabicTable(formsTable)
 800c90a:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c90c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
      arabicTable(formsTable)
 800c910:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c912:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
      arabicTable(formsTable)
 800c916:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c918:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
      arabicTable(formsTable)
 800c91c:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c91e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
      arabicTable(formsTable)
 800c922:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c924:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
      arabicTable(formsTable)
 800c928:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c92a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
      arabicTable(formsTable)
 800c92e:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c930:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
      arabicTable(formsTable)
 800c934:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c936:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
      arabicTable(formsTable)
 800c93a:	9508      	str	r5, [sp, #32]
 800c93c:	f006 fb14 	bl	8012f68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
 800c940:	9b15      	ldr	r3, [sp, #84]	@ 0x54
}
 800c942:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
 800c944:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800c946:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c948:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800c94a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c94c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800c94e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c950:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c952:	4b02      	ldr	r3, [pc, #8]	@ (800c95c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 800c954:	6023      	str	r3, [r4, #0]
}
 800c956:	b00b      	add	sp, #44	@ 0x2c
 800c958:	bd30      	pop	{r4, r5, pc}
 800c95a:	bf00      	nop
 800c95c:	080288f0 	.word	0x080288f0

0800c960 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Microsoft_Yahei_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Microsoft_Yahei_24_4bpp();

touchgfx::GeneratedFont& getFont_Microsoft_Yahei_24_4bpp()
{
    static touchgfx::GeneratedFont Microsoft_Yahei_24_4bpp(glyphs_Microsoft_Yahei_24_4bpp, 16, 28, 24, 0, 0, 4, 1, 0, 0, unicodes_Microsoft_Yahei_24_4bpp, kerning_Microsoft_Yahei_24_4bpp, 63, 0, 0, 0);
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop

0800c964 <_Z31getFont_Microsoft_Yahei_24_4bppv>:
{
 800c964:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Microsoft_Yahei_24_4bpp(glyphs_Microsoft_Yahei_24_4bpp, 16, 28, 24, 0, 0, 4, 1, 0, 0, unicodes_Microsoft_Yahei_24_4bpp, kerning_Microsoft_Yahei_24_4bpp, 63, 0, 0, 0);
 800c966:	4d19      	ldr	r5, [pc, #100]	@ (800c9cc <_Z31getFont_Microsoft_Yahei_24_4bppv+0x68>)
{
 800c968:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont Microsoft_Yahei_24_4bpp(glyphs_Microsoft_Yahei_24_4bpp, 16, 28, 24, 0, 0, 4, 1, 0, 0, unicodes_Microsoft_Yahei_24_4bpp, kerning_Microsoft_Yahei_24_4bpp, 63, 0, 0, 0);
 800c96a:	682c      	ldr	r4, [r5, #0]
 800c96c:	f3bf 8f5b 	dmb	ish
 800c970:	f014 0401 	ands.w	r4, r4, #1
 800c974:	d002      	beq.n	800c97c <_Z31getFont_Microsoft_Yahei_24_4bppv+0x18>
    return Microsoft_Yahei_24_4bpp;
}
 800c976:	4816      	ldr	r0, [pc, #88]	@ (800c9d0 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x6c>)
 800c978:	b00f      	add	sp, #60	@ 0x3c
 800c97a:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont Microsoft_Yahei_24_4bpp(glyphs_Microsoft_Yahei_24_4bpp, 16, 28, 24, 0, 0, 4, 1, 0, 0, unicodes_Microsoft_Yahei_24_4bpp, kerning_Microsoft_Yahei_24_4bpp, 63, 0, 0, 0);
 800c97c:	4628      	mov	r0, r5
 800c97e:	f016 f9f3 	bl	8022d68 <__cxa_guard_acquire>
 800c982:	2800      	cmp	r0, #0
 800c984:	d0f7      	beq.n	800c976 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x12>
 800c986:	223f      	movs	r2, #63	@ 0x3f
 800c988:	4b12      	ldr	r3, [pc, #72]	@ (800c9d4 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x70>)
 800c98a:	4913      	ldr	r1, [pc, #76]	@ (800c9d8 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x74>)
 800c98c:	2018      	movs	r0, #24
 800c98e:	9308      	str	r3, [sp, #32]
 800c990:	2301      	movs	r3, #1
 800c992:	9000      	str	r0, [sp, #0]
 800c994:	9401      	str	r4, [sp, #4]
 800c996:	480e      	ldr	r0, [pc, #56]	@ (800c9d0 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x6c>)
 800c998:	e9cd 2409 	strd	r2, r4, [sp, #36]	@ 0x24
 800c99c:	2204      	movs	r2, #4
 800c99e:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800c9a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c9a6:	490d      	ldr	r1, [pc, #52]	@ (800c9dc <_Z31getFont_Microsoft_Yahei_24_4bppv+0x78>)
 800c9a8:	231c      	movs	r3, #28
 800c9aa:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800c9ae:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800c9b2:	2210      	movs	r2, #16
 800c9b4:	f7ff ffa4 	bl	800c900 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c9b8:	4809      	ldr	r0, [pc, #36]	@ (800c9e0 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x7c>)
 800c9ba:	f016 fa1f 	bl	8022dfc <atexit>
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f016 f9de 	bl	8022d80 <__cxa_guard_release>
}
 800c9c4:	4802      	ldr	r0, [pc, #8]	@ (800c9d0 <_Z31getFont_Microsoft_Yahei_24_4bppv+0x6c>)
 800c9c6:	b00f      	add	sp, #60	@ 0x3c
 800c9c8:	bd30      	pop	{r4, r5, pc}
 800c9ca:	bf00      	nop
 800c9cc:	240097b0 	.word	0x240097b0
 800c9d0:	240097b4 	.word	0x240097b4
 800c9d4:	0802acf4 	.word	0x0802acf4
 800c9d8:	0802ad1c 	.word	0x0802ad1c
 800c9dc:	0802abe4 	.word	0x0802abe4
 800c9e0:	0800c961 	.word	0x0800c961

0800c9e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop

0800c9e8 <_Z23getFont_verdana_10_4bppv>:
{
 800c9e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c9ea:	4d18      	ldr	r5, [pc, #96]	@ (800ca4c <_Z23getFont_verdana_10_4bppv+0x64>)
{
 800c9ec:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c9ee:	682c      	ldr	r4, [r5, #0]
 800c9f0:	f3bf 8f5b 	dmb	ish
 800c9f4:	f014 0401 	ands.w	r4, r4, #1
 800c9f8:	d002      	beq.n	800ca00 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
 800c9fa:	4815      	ldr	r0, [pc, #84]	@ (800ca50 <_Z23getFont_verdana_10_4bppv+0x68>)
 800c9fc:	b00f      	add	sp, #60	@ 0x3c
 800c9fe:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800ca00:	4628      	mov	r0, r5
 800ca02:	f016 f9b1 	bl	8022d68 <__cxa_guard_acquire>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0f7      	beq.n	800c9fa <_Z23getFont_verdana_10_4bppv+0x12>
 800ca0a:	213f      	movs	r1, #63	@ 0x3f
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	230a      	movs	r3, #10
 800ca10:	2004      	movs	r0, #4
 800ca12:	9204      	str	r2, [sp, #16]
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	9003      	str	r0, [sp, #12]
 800ca18:	480d      	ldr	r0, [pc, #52]	@ (800ca50 <_Z23getFont_verdana_10_4bppv+0x68>)
 800ca1a:	e9cd 1409 	strd	r1, r4, [sp, #36]	@ 0x24
 800ca1e:	490d      	ldr	r1, [pc, #52]	@ (800ca54 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800ca20:	9108      	str	r1, [sp, #32]
 800ca22:	490d      	ldr	r1, [pc, #52]	@ (800ca58 <_Z23getFont_verdana_10_4bppv+0x70>)
 800ca24:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800ca28:	9107      	str	r1, [sp, #28]
 800ca2a:	490c      	ldr	r1, [pc, #48]	@ (800ca5c <_Z23getFont_verdana_10_4bppv+0x74>)
 800ca2c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800ca30:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800ca34:	f7ff ff64 	bl	800c900 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ca38:	4809      	ldr	r0, [pc, #36]	@ (800ca60 <_Z23getFont_verdana_10_4bppv+0x78>)
 800ca3a:	f016 f9df 	bl	8022dfc <atexit>
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f016 f99e 	bl	8022d80 <__cxa_guard_release>
}
 800ca44:	4802      	ldr	r0, [pc, #8]	@ (800ca50 <_Z23getFont_verdana_10_4bppv+0x68>)
 800ca46:	b00f      	add	sp, #60	@ 0x3c
 800ca48:	bd30      	pop	{r4, r5, pc}
 800ca4a:	bf00      	nop
 800ca4c:	240097e0 	.word	0x240097e0
 800ca50:	240097e4 	.word	0x240097e4
 800ca54:	0802ad10 	.word	0x0802ad10
 800ca58:	0802ad58 	.word	0x0802ad58
 800ca5c:	0802acc4 	.word	0x0802acc4
 800ca60:	0800c9e5 	.word	0x0800c9e5

0800ca64 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <_Z23getFont_verdana_20_4bppv>:
{
 800ca68:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ca6a:	4d18      	ldr	r5, [pc, #96]	@ (800cacc <_Z23getFont_verdana_20_4bppv+0x64>)
{
 800ca6c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ca6e:	682c      	ldr	r4, [r5, #0]
 800ca70:	f3bf 8f5b 	dmb	ish
 800ca74:	f014 0401 	ands.w	r4, r4, #1
 800ca78:	d002      	beq.n	800ca80 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
 800ca7a:	4815      	ldr	r0, [pc, #84]	@ (800cad0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800ca7c:	b00f      	add	sp, #60	@ 0x3c
 800ca7e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ca80:	4628      	mov	r0, r5
 800ca82:	f016 f971 	bl	8022d68 <__cxa_guard_acquire>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d0f7      	beq.n	800ca7a <_Z23getFont_verdana_20_4bppv+0x12>
 800ca8a:	213f      	movs	r1, #63	@ 0x3f
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	2314      	movs	r3, #20
 800ca90:	2004      	movs	r0, #4
 800ca92:	9204      	str	r2, [sp, #16]
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	9003      	str	r0, [sp, #12]
 800ca98:	480d      	ldr	r0, [pc, #52]	@ (800cad0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800ca9a:	e9cd 1409 	strd	r1, r4, [sp, #36]	@ 0x24
 800ca9e:	490d      	ldr	r1, [pc, #52]	@ (800cad4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800caa0:	9108      	str	r1, [sp, #32]
 800caa2:	490d      	ldr	r1, [pc, #52]	@ (800cad8 <_Z23getFont_verdana_20_4bppv+0x70>)
 800caa4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800caa8:	9107      	str	r1, [sp, #28]
 800caaa:	490c      	ldr	r1, [pc, #48]	@ (800cadc <_Z23getFont_verdana_20_4bppv+0x74>)
 800caac:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cab0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800cab4:	f7ff ff24 	bl	800c900 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cab8:	4809      	ldr	r0, [pc, #36]	@ (800cae0 <_Z23getFont_verdana_20_4bppv+0x78>)
 800caba:	f016 f99f 	bl	8022dfc <atexit>
 800cabe:	4628      	mov	r0, r5
 800cac0:	f016 f95e 	bl	8022d80 <__cxa_guard_release>
}
 800cac4:	4802      	ldr	r0, [pc, #8]	@ (800cad0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800cac6:	b00f      	add	sp, #60	@ 0x3c
 800cac8:	bd30      	pop	{r4, r5, pc}
 800caca:	bf00      	nop
 800cacc:	24009810 	.word	0x24009810
 800cad0:	24009814 	.word	0x24009814
 800cad4:	0802ad14 	.word	0x0802ad14
 800cad8:	0802ad5c 	.word	0x0802ad5c
 800cadc:	0802acd4 	.word	0x0802acd4
 800cae0:	0800ca65 	.word	0x0800ca65

0800cae4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop

0800cae8 <_Z23getFont_verdana_40_4bppv>:
{
 800cae8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800caea:	4d18      	ldr	r5, [pc, #96]	@ (800cb4c <_Z23getFont_verdana_40_4bppv+0x64>)
{
 800caec:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800caee:	682c      	ldr	r4, [r5, #0]
 800caf0:	f3bf 8f5b 	dmb	ish
 800caf4:	f014 0401 	ands.w	r4, r4, #1
 800caf8:	d002      	beq.n	800cb00 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
 800cafa:	4815      	ldr	r0, [pc, #84]	@ (800cb50 <_Z23getFont_verdana_40_4bppv+0x68>)
 800cafc:	b00f      	add	sp, #60	@ 0x3c
 800cafe:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800cb00:	4628      	mov	r0, r5
 800cb02:	f016 f931 	bl	8022d68 <__cxa_guard_acquire>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d0f7      	beq.n	800cafa <_Z23getFont_verdana_40_4bppv+0x12>
 800cb0a:	213f      	movs	r1, #63	@ 0x3f
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	2328      	movs	r3, #40	@ 0x28
 800cb10:	2004      	movs	r0, #4
 800cb12:	9204      	str	r2, [sp, #16]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	9003      	str	r0, [sp, #12]
 800cb18:	480d      	ldr	r0, [pc, #52]	@ (800cb50 <_Z23getFont_verdana_40_4bppv+0x68>)
 800cb1a:	e9cd 1409 	strd	r1, r4, [sp, #36]	@ 0x24
 800cb1e:	490d      	ldr	r1, [pc, #52]	@ (800cb54 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800cb20:	9108      	str	r1, [sp, #32]
 800cb22:	490d      	ldr	r1, [pc, #52]	@ (800cb58 <_Z23getFont_verdana_40_4bppv+0x70>)
 800cb24:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800cb28:	9107      	str	r1, [sp, #28]
 800cb2a:	490c      	ldr	r1, [pc, #48]	@ (800cb5c <_Z23getFont_verdana_40_4bppv+0x74>)
 800cb2c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cb30:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800cb34:	f7ff fee4 	bl	800c900 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800cb38:	4809      	ldr	r0, [pc, #36]	@ (800cb60 <_Z23getFont_verdana_40_4bppv+0x78>)
 800cb3a:	f016 f95f 	bl	8022dfc <atexit>
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f016 f91e 	bl	8022d80 <__cxa_guard_release>
}
 800cb44:	4802      	ldr	r0, [pc, #8]	@ (800cb50 <_Z23getFont_verdana_40_4bppv+0x68>)
 800cb46:	b00f      	add	sp, #60	@ 0x3c
 800cb48:	bd30      	pop	{r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	24009840 	.word	0x24009840
 800cb50:	24009844 	.word	0x24009844
 800cb54:	0802ad18 	.word	0x0802ad18
 800cb58:	0802ad60 	.word	0x0802ad60
 800cb5c:	0802ace4 	.word	0x0802ace4
 800cb60:	0800cae5 	.word	0x0800cae5

0800cb64 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop

0800cb68 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800cb68:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800cb6c:	6808      	ldr	r0, [r1, #0]
 800cb6e:	6849      	ldr	r1, [r1, #4]
 800cb70:	c303      	stmia	r3!, {r0, r1}
    }
 800cb72:	4770      	bx	lr

0800cb74 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 800cb74:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 800cb76:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800cb7a:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800cb7e:	4770      	bx	lr

0800cb80 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop

0800cb84 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop

0800cb88 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800cb88:	6041      	str	r1, [r0, #4]
    }
 800cb8a:	4770      	bx	lr

0800cb8c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop

0800cb90 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cb90:	4905      	ldr	r1, [pc, #20]	@ (800cba8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
 800cb92:	2200      	movs	r2, #0
// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800cb94:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800cb98:	f8c0 2150 	str.w	r2, [r0, #336]	@ 0x150
 800cb9c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 800cba0:	e9c0 0152 	strd	r0, r1, [r0, #328]	@ 0x148

    virtual void changeToStartScreen()
    {
        gotoscreenScreenNoTransition();
    }
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	0800cc2d 	.word	0x0800cc2d

0800cbac <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800cbac:	2301      	movs	r3, #1
 800cbae:	7203      	strb	r3, [r0, #8]
    }
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop

0800cbb4 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop

0800cbb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop

0800cbbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
 800cbbc:	1d01      	adds	r1, r0, #4
 800cbbe:	c90e      	ldmia	r1, {r1, r2, r3}
 800cbc0:	ea4f 0c63 	mov.w	ip, r3, asr #1
 800cbc4:	eb01 0063 	add.w	r0, r1, r3, asr #1
 800cbc8:	07db      	lsls	r3, r3, #31
 800cbca:	d502      	bpl.n	800cbd2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
 800cbcc:	f851 300c 	ldr.w	r3, [r1, ip]
 800cbd0:	589a      	ldr	r2, [r3, r2]
 800cbd2:	4710      	bx	r2

0800cbd4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800cbd4:	6843      	ldr	r3, [r0, #4]
 800cbd6:	b13b      	cbz	r3, 800cbe8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800cbd8:	6883      	ldr	r3, [r0, #8]
 800cbda:	b10b      	cbz	r3, 800cbe0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 800cbdc:	2001      	movs	r0, #1
    }
 800cbde:	4770      	bx	lr
 800cbe0:	68c0      	ldr	r0, [r0, #12]
 800cbe2:	f000 0001 	and.w	r0, r0, #1
 800cbe6:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 800cbe8:	4618      	mov	r0, r3
 800cbea:	4770      	bx	lr

0800cbec <_ZN8touchgfx12NoTransitionD0Ev>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	4604      	mov	r4, r0
 800cbf0:	210c      	movs	r1, #12
 800cbf2:	f016 f8b7 	bl	8022d64 <_ZdlPvj>
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	bd10      	pop	{r4, pc}
 800cbfa:	bf00      	nop

0800cbfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	4604      	mov	r4, r0
 800cc00:	2110      	movs	r1, #16
 800cc02:	f016 f8af 	bl	8022d64 <_ZdlPvj>
 800cc06:	4620      	mov	r0, r4
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	bf00      	nop

0800cc0c <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800cc0c:	b510      	push	{r4, lr}
 800cc0e:	4604      	mov	r4, r0
 800cc10:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800cc14:	f016 f8a6 	bl	8022d64 <_ZdlPvj>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	bd10      	pop	{r4, pc}

0800cc1c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800cc1c:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 800cc1e:	f005 f87d 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 800cc22:	6803      	ldr	r3, [r0, #0]
    }
 800cc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 800cc28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc2a:	4718      	bx	r3

0800cc2c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc30:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 800cc34:	4607      	mov	r7, r0
 800cc36:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cc38:	68b0      	ldr	r0, [r6, #8]
 800cc3a:	6803      	ldr	r3, [r0, #0]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	4798      	blx	r3
 800cc40:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
 800cc44:	f0c0 809c 	bcc.w	800cd80 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x154>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cc48:	6870      	ldr	r0, [r6, #4]
 800cc4a:	6803      	ldr	r3, [r0, #0]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	4798      	blx	r3
 800cc50:	280f      	cmp	r0, #15
 800cc52:	f240 80a1 	bls.w	800cd98 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x16c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cc56:	68f0      	ldr	r0, [r6, #12]
 800cc58:	6803      	ldr	r3, [r0, #0]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	4798      	blx	r3
 800cc5e:	280b      	cmp	r0, #11
 800cc60:	f240 8094 	bls.w	800cd8c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x160>
    if (*currentTrans)
 800cc64:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 800cdc8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x19c>
    Application::getInstance()->clearAllTimerWidgets();
 800cc68:	f005 f858 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800cc6c:	3004      	adds	r0, #4
 800cc6e:	f005 f87a 	bl	8011d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800cc72:	f8d9 0000 	ldr.w	r0, [r9]
 800cc76:	b130      	cbz	r0, 800cc86 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x5a>
        (*currentTrans)->tearDown();
 800cc78:	6803      	ldr	r3, [r0, #0]
 800cc7a:	494a      	ldr	r1, [pc, #296]	@ (800cda4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x178>)
 800cc7c:	68da      	ldr	r2, [r3, #12]
 800cc7e:	428a      	cmp	r2, r1
 800cc80:	d177      	bne.n	800cd72 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x146>
        (*currentTrans)->~Transition();
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4798      	blx	r3
    if (*currentScreen)
 800cc86:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800cdcc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x1a0>
 800cc8a:	f8d8 0000 	ldr.w	r0, [r8]
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d061      	beq.n	800cd56 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x12a>
        (*currentScreen)->tearDownScreen();
 800cc92:	6803      	ldr	r3, [r0, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	4798      	blx	r3
    if (*currentPresenter)
 800cc98:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d055      	beq.n	800cd4c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x120>
        (*currentPresenter)->deactivate();
 800cca0:	6803      	ldr	r3, [r0, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	4798      	blx	r3
    if (*currentScreen)
 800cca6:	f8d8 0000 	ldr.w	r0, [r8]
 800ccaa:	b110      	cbz	r0, 800ccb2 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x86>
        (*currentScreen)->~Screen();
 800ccac:	6803      	ldr	r3, [r0, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4798      	blx	r3
    if (*currentPresenter)
 800ccb2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800ccb6:	b110      	cbz	r0, 800ccbe <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x92>
        (*currentPresenter)->~Presenter();
 800ccb8:	6803      	ldr	r3, [r0, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ccbe:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 800ccc4:	468b      	mov	fp, r1
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc8:	4798      	blx	r3
 800ccca:	4b37      	ldr	r3, [pc, #220]	@ (800cda8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x17c>)
 800cccc:	4604      	mov	r4, r0
 800ccce:	f8c0 b004 	str.w	fp, [r0, #4]
 800ccd2:	f880 b008 	strb.w	fp, [r0, #8]
 800ccd6:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ccd8:	68b0      	ldr	r0, [r6, #8]
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	6803      	ldr	r3, [r0, #0]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce0:	4798      	blx	r3
 800cce2:	4605      	mov	r5, r0
 800cce4:	f000 fc68 	bl	800d5b8 <_ZN10screenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800cce8:	6870      	ldr	r0, [r6, #4]
 800ccea:	4659      	mov	r1, fp
 800ccec:	6803      	ldr	r3, [r0, #0]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf0:	4798      	blx	r3
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	f000 fc35 	bl	800d564 <_ZN15screenPresenterC1ER10screenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 800ccfa:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 800ccfc:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800cd00:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800cd02:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800cd06:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800cd0a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800cd0e:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800cd10:	f8c6 a008 	str.w	sl, [r6, #8]
 800cd14:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800cd16:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800cd18:	4798      	blx	r3
    newPresenter->activate();
 800cd1a:	6833      	ldr	r3, [r6, #0]
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800cd22:	4621      	mov	r1, r4
 800cd24:	4628      	mov	r0, r5
 800cd26:	f006 fcc7 	bl	80136b8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	491f      	ldr	r1, [pc, #124]	@ (800cdac <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x180>)
 800cd2e:	691a      	ldr	r2, [r3, #16]
 800cd30:	428a      	cmp	r2, r1
 800cd32:	d11a      	bne.n	800cd6a <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x13e>
    newTransition->invalidate();
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	4a1e      	ldr	r2, [pc, #120]	@ (800cdb0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x184>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d111      	bne.n	800cd60 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x134>
        Application::getInstance()->invalidate();
 800cd3c:	f004 ffee 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 800cd40:	6803      	ldr	r3, [r0, #0]
 800cd42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800cd44:	b001      	add	sp, #4
 800cd46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4a:	4718      	bx	r3
    if (*currentScreen)
 800cd4c:	f8d8 0000 	ldr.w	r0, [r8]
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d1ab      	bne.n	800ccac <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x80>
 800cd54:	e7b3      	b.n	800ccbe <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x92>
    if (*currentPresenter)
 800cd56:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d1a0      	bne.n	800cca0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x74>
 800cd5e:	e7ae      	b.n	800ccbe <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x92>
    newTransition->invalidate();
 800cd60:	4620      	mov	r0, r4
 800cd62:	b001      	add	sp, #4
 800cd64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd68:	4718      	bx	r3
    newTransition->init();
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	4790      	blx	r2
    newTransition->invalidate();
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	e7e0      	b.n	800cd34 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x108>
        (*currentTrans)->tearDown();
 800cd72:	4790      	blx	r2
    if (*currentTrans)
 800cd74:	f8d9 0000 	ldr.w	r0, [r9]
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d084      	beq.n	800cc86 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x5a>
        (*currentTrans)->~Transition();
 800cd7c:	6803      	ldr	r3, [r0, #0]
 800cd7e:	e780      	b.n	800cc82 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x56>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cd80:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x188>)
 800cd82:	21a3      	movs	r1, #163	@ 0xa3
 800cd84:	4a0c      	ldr	r2, [pc, #48]	@ (800cdb8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x18c>)
 800cd86:	480d      	ldr	r0, [pc, #52]	@ (800cdbc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x190>)
 800cd88:	f016 f81a 	bl	8022dc0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cd8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x194>)
 800cd8e:	21a5      	movs	r1, #165	@ 0xa5
 800cd90:	4a09      	ldr	r2, [pc, #36]	@ (800cdb8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x18c>)
 800cd92:	480a      	ldr	r0, [pc, #40]	@ (800cdbc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x190>)
 800cd94:	f016 f814 	bl	8022dc0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cd98:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x198>)
 800cd9a:	21a4      	movs	r1, #164	@ 0xa4
 800cd9c:	4a06      	ldr	r2, [pc, #24]	@ (800cdb8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x18c>)
 800cd9e:	4807      	ldr	r0, [pc, #28]	@ (800cdbc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x190>)
 800cda0:	f016 f80e 	bl	8022dc0 <__assert_func>
 800cda4:	0800cb81 	.word	0x0800cb81
 800cda8:	08028cb0 	.word	0x08028cb0
 800cdac:	0800cb85 	.word	0x0800cb85
 800cdb0:	0800cc1d 	.word	0x0800cc1d
 800cdb4:	08028950 	.word	0x08028950
 800cdb8:	080289e0 	.word	0x080289e0
 800cdbc:	08028ab0 	.word	0x08028ab0
 800cdc0:	08028b98 	.word	0x08028b98
 800cdc4:	08028af4 	.word	0x08028af4
 800cdc8:	2400aac4 	.word	0x2400aac4
 800cdcc:	2400aac0 	.word	0x2400aac0

0800cdd0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    virtual void handlePendingScreenTransition()
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	4604      	mov	r4, r0
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800cdd4:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800cdd8:	b1b8      	cbz	r0, 800ce0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
 800cdda:	6802      	ldr	r2, [r0, #0]
 800cddc:	4916      	ldr	r1, [pc, #88]	@ (800ce38 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x68>)
 800cdde:	68d3      	ldr	r3, [r2, #12]
 800cde0:	428b      	cmp	r3, r1
 800cde2:	d11f      	bne.n	800ce24 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x54>
        return (pobject != 0) && (pmemfun != 0);
 800cde4:	6843      	ldr	r3, [r0, #4]
 800cde6:	b183      	cbz	r3, 800ce0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
 800cde8:	6881      	ldr	r1, [r0, #8]
 800cdea:	b179      	cbz	r1, 800ce0c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
            pendingScreenTransitionCallback->execute();
 800cdec:	6892      	ldr	r2, [r2, #8]
 800cdee:	4b13      	ldr	r3, [pc, #76]	@ (800ce3c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6c>)
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d11e      	bne.n	800ce32 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x62>
        (pobject->*pmemfun)();
 800cdf4:	68c2      	ldr	r2, [r0, #12]
 800cdf6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 800cdfa:	eb03 0062 	add.w	r0, r3, r2, asr #1
 800cdfe:	07d3      	lsls	r3, r2, #31
 800ce00:	d40d      	bmi.n	800ce1e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x4e>
 800ce02:	4788      	blx	r1
            pendingScreenTransitionCallback = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
        return (pobject != 0) && (pmemfun != 0);
 800ce0c:	68c5      	ldr	r5, [r0, #12]
 800ce0e:	07ee      	lsls	r6, r5, #31
 800ce10:	d5fb      	bpl.n	800ce0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
 800ce12:	6892      	ldr	r2, [r2, #8]
 800ce14:	4e09      	ldr	r6, [pc, #36]	@ (800ce3c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6c>)
 800ce16:	42b2      	cmp	r2, r6
 800ce18:	d10b      	bne.n	800ce32 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x62>
        (pobject->*pmemfun)();
 800ce1a:	eb03 0065 	add.w	r0, r3, r5, asr #1
 800ce1e:	6803      	ldr	r3, [r0, #0]
 800ce20:	5859      	ldr	r1, [r3, r1]
 800ce22:	e7ee      	b.n	800ce02 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ce24:	4798      	blx	r3
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d0ef      	beq.n	800ce0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
 800ce2a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800ce2e:	6802      	ldr	r2, [r0, #0]
 800ce30:	e7dc      	b.n	800cdec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
 800ce32:	4790      	blx	r2
 800ce34:	e7e6      	b.n	800ce04 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
 800ce36:	bf00      	nop
 800ce38:	0800cbd5 	.word	0x0800cbd5
 800ce3c:	0800cbbd 	.word	0x0800cbbd

0800ce40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	4604      	mov	r4, r0
 800ce44:	4615      	mov	r5, r2
 800ce46:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800ce48:	f005 f82e 	bl	8011ea8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800ce4c:	4a22      	ldr	r2, [pc, #136]	@ (800ced8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x98>)
        : currentPresenter(0),
 800ce4e:	2300      	movs	r3, #0
      frontendHeap(heap),
 800ce50:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
        instance = this;
 800ce54:	6014      	str	r4, [r2, #0]
        return instance;
 800ce56:	4d21      	ldr	r5, [pc, #132]	@ (800cedc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x9c>)
      model(m)
 800ce58:	4a21      	ldr	r2, [pc, #132]	@ (800cee0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0xa0>)
 800ce5a:	6828      	ldr	r0, [r5, #0]
 800ce5c:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
 800ce5e:	4a21      	ldr	r2, [pc, #132]	@ (800cee4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0xa4>)
 800ce60:	4921      	ldr	r1, [pc, #132]	@ (800cee8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0xa8>)
 800ce62:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
 800ce66:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 800ce6a:	f8c4 6158 	str.w	r6, [r4, #344]	@ 0x158
        : currentPresenter(0),
 800ce6e:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
 800ce72:	e9c4 3353 	strd	r3, r3, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ce76:	6802      	ldr	r2, [r0, #0]
 800ce78:	6892      	ldr	r2, [r2, #8]
 800ce7a:	428a      	cmp	r2, r1
 800ce7c:	d129      	bne.n	800ced2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x92>
        requestedOrientation = orientation;
 800ce7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce82:	f8a0 3078 	strh.w	r3, [r0, #120]	@ 0x78
    touchgfx::Texts::setLanguage(GB);
 800ce86:	2000      	movs	r0, #0
 800ce88:	f000 facc 	bl	800d424 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ce92:	b1e2      	cbz	r2, 800cece <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8e>
 800ce94:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ce96:	b1d0      	cbz	r0, 800cece <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8e>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ce98:	f00e fba5 	bl	801b5e6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cea2:	b192      	cbz	r2, 800ceca <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8a>
 800cea4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800cea6:	b180      	cbz	r0, 800ceca <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x8a>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800cea8:	f00e fc18 	bl	801b6dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ceb2:	b12a      	cbz	r2, 800cec0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>
 800ceb4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ceb6:	b118      	cbz	r0, 800cec0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800ceb8:	f00e fc1c 	bl	801b6f4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800cebc:	4620      	mov	r0, r4
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
        {
            return *instance->auxiliaryLCD;
        }
        return instance->lcdRef;
 800cec0:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800cec2:	f00e fc17 	bl	801b6f4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800cec6:	4620      	mov	r0, r4
 800cec8:	bd70      	pop	{r4, r5, r6, pc}
 800ceca:	6898      	ldr	r0, [r3, #8]
 800cecc:	e7ec      	b.n	800cea8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>
 800cece:	6898      	ldr	r0, [r3, #8]
 800ced0:	e7e2      	b.n	800ce98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ced2:	4619      	mov	r1, r3
 800ced4:	4790      	blx	r2
 800ced6:	e7d6      	b.n	800ce86 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800ced8:	2400aad0 	.word	0x2400aad0
 800cedc:	2400aa84 	.word	0x2400aa84
 800cee0:	08028c5c 	.word	0x08028c5c
 800cee4:	08028c44 	.word	0x08028c44
 800cee8:	0800cb75 	.word	0x0800cb75

0800ceec <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ceec:	4905      	ldr	r1, [pc, #20]	@ (800cf04 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x18>)
 800ceee:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
 800cef0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800cef4:	f8c0 2150 	str.w	r2, [r0, #336]	@ 0x150
 800cef8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
 800cefc:	e9c0 0152 	strd	r0, r1, [r0, #328]	@ 0x148
}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	0800cc2d 	.word	0x0800cc2d

0800cf08 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800cf08:	8081      	strh	r1, [r0, #4]
    }
 800cf0a:	4770      	bx	lr

0800cf0c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800cf0c:	80c1      	strh	r1, [r0, #6]
    }
 800cf0e:	4770      	bx	lr

0800cf10 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800cf10:	8101      	strh	r1, [r0, #8]
    }
 800cf12:	4770      	bx	lr

0800cf14 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800cf14:	8141      	strh	r1, [r0, #10]
    }
 800cf16:	4770      	bx	lr

0800cf18 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop

0800cf1c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop

0800cf20 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop

0800cf24 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop

0800cf28 <_ZN14screenViewBaseD1Ev>:
}

screenViewBase::~screenViewBase()
{

}
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop

0800cf2c <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{

}
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop

0800cf30 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800cf34:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
 800cf36:	68c3      	ldr	r3, [r0, #12]
 800cf38:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
 800cf3c:	f013 0f01 	tst.w	r3, #1
 800cf40:	eb04 0063 	add.w	r0, r4, r3, asr #1
 800cf44:	d004      	beq.n	800cf50 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x1c>
 800cf46:	ea4f 0c63 	mov.w	ip, r3, asr #1
 800cf4a:	f854 300c 	ldr.w	r3, [r4, ip]
 800cf4e:	589a      	ldr	r2, [r3, r2]
    }
 800cf50:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
 800cf54:	4710      	bx	r2
 800cf56:	bf00      	nop

0800cf58 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800cf58:	6843      	ldr	r3, [r0, #4]
 800cf5a:	b13b      	cbz	r3, 800cf6c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800cf5c:	6883      	ldr	r3, [r0, #8]
 800cf5e:	b10b      	cbz	r3, 800cf64 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 800cf60:	2001      	movs	r0, #1
    }
 800cf62:	4770      	bx	lr
 800cf64:	68c0      	ldr	r0, [r0, #12]
 800cf66:	f000 0001 	and.w	r0, r0, #1
 800cf6a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	4770      	bx	lr

0800cf70 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800cf70:	b510      	push	{r4, lr}
 800cf72:	4604      	mov	r4, r0
 800cf74:	2110      	movs	r1, #16
 800cf76:	f015 fef5 	bl	8022d64 <_ZdlPvj>
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	bf00      	nop

0800cf80 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800cf80:	b510      	push	{r4, lr}
 800cf82:	4604      	mov	r4, r0
}
 800cf84:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800cf88:	f015 feec 	bl	8022d64 <_ZdlPvj>
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	bd10      	pop	{r4, pc}

0800cf90 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel1)
 800cf90:	f100 0398 	add.w	r3, r0, #152	@ 0x98
 800cf94:	4299      	cmp	r1, r3
{
 800cf96:	b570      	push	{r4, r5, r6, lr}
 800cf98:	4604      	mov	r4, r0
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	460d      	mov	r5, r1
    if (&src == &buttonWithLabel1)
 800cf9e:	d005      	beq.n	800cfac <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
        textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9E6Y));
        textArea1.invalidate();
        textArea1.resizeToCurrentText();
        textArea1.invalidate();
    }
    if (&src == &buttonWithLabel2)
 800cfa0:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 800cfa4:	429d      	cmp	r5, r3
 800cfa6:	d019      	beq.n	800cfdc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c>
        textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AKQF));
        textArea1.invalidate();
        textArea1.resizeToCurrentText();
        textArea1.invalidate();
    }
}
 800cfa8:	b002      	add	sp, #8
 800cfaa:	bd70      	pop	{r4, r5, r6, pc}
        textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9E6Y));
 800cfac:	f500 7694 	add.w	r6, r0, #296	@ 0x128
        : typedTextId(id)
 800cfb0:	2304      	movs	r3, #4
 800cfb2:	4a16      	ldr	r2, [pc, #88]	@ (800d00c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x7c>)
 800cfb4:	4669      	mov	r1, sp
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cfbc:	9200      	str	r2, [sp, #0]
 800cfbe:	f002 ff37 	bl	800fe30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        textArea1.invalidate();
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f005 ff23 	bl	8012e0e <_ZNK8touchgfx8Drawable10invalidateEv>
        textArea1.resizeToCurrentText();
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f002 ff11 	bl	800fdf0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        textArea1.invalidate();
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f005 ff1d 	bl	8012e0e <_ZNK8touchgfx8Drawable10invalidateEv>
    if (&src == &buttonWithLabel2)
 800cfd4:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 800cfd8:	429d      	cmp	r5, r3
 800cfda:	d1e5      	bne.n	800cfa8 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
        textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AKQF));
 800cfdc:	f504 7494 	add.w	r4, r4, #296	@ 0x128
 800cfe0:	4a0a      	ldr	r2, [pc, #40]	@ (800d00c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x7c>)
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	4669      	mov	r1, sp
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	9200      	str	r2, [sp, #0]
 800cfea:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cfee:	f002 ff1f 	bl	800fe30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        textArea1.invalidate();
 800cff2:	4620      	mov	r0, r4
 800cff4:	f005 ff0b 	bl	8012e0e <_ZNK8touchgfx8Drawable10invalidateEv>
        textArea1.resizeToCurrentText();
 800cff8:	4620      	mov	r0, r4
 800cffa:	f002 fef9 	bl	800fdf0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        textArea1.invalidate();
 800cffe:	4620      	mov	r0, r4
}
 800d000:	b002      	add	sp, #8
 800d002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        textArea1.invalidate();
 800d006:	f005 bf02 	b.w	8012e0e <_ZNK8touchgfx8Drawable10invalidateEv>
 800d00a:	bf00      	nop
 800d00c:	080288e0 	.word	0x080288e0

0800d010 <_ZN14screenViewBaseC1Ev>:
screenViewBase::screenViewBase() :
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	b08b      	sub	sp, #44	@ 0x2c
 800d016:	4604      	mov	r4, r0
        : presenter(0)
 800d018:	f006 f9a2 	bl	8013360 <_ZN8touchgfx6ScreenC1Ev>
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800d01c:	4ba8      	ldr	r3, [pc, #672]	@ (800d2c0 <_ZN14screenViewBaseC1Ev+0x2b0>)
 800d01e:	2500      	movs	r5, #0
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 800d020:	4aa8      	ldr	r2, [pc, #672]	@ (800d2c4 <_ZN14screenViewBaseC1Ev+0x2b4>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800d022:	f64f 76ff 	movw	r6, #65535	@ 0xffff
          touchable(false),
 800d026:	f44f 7a80 	mov.w	sl, #256	@ 0x100
 800d02a:	f104 076c 	add.w	r7, r4, #108	@ 0x6c
 800d02e:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 800d032:	6423      	str	r3, [r4, #64]	@ 0x40
 800d034:	f104 0898 	add.w	r8, r4, #152	@ 0x98
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 800d038:	4ba3      	ldr	r3, [pc, #652]	@ (800d2c8 <_ZN14screenViewBaseC1Ev+0x2b8>)
    {
        Image::setBitmap(bmp);
 800d03a:	a908      	add	r1, sp, #32
 800d03c:	6022      	str	r2, [r4, #0]
 800d03e:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 800d040:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800d042:	f104 09e0 	add.w	r9, r4, #224	@ 0xe0
 800d046:	f8a4 a064 	strh.w	sl, [r4, #100]	@ 0x64
 800d04a:	f884 b066 	strb.w	fp, [r4, #102]	@ 0x66
 800d04e:	f8a4 a090 	strh.w	sl, [r4, #144]	@ 0x90
 800d052:	f8a4 6092 	strh.w	r6, [r4, #146]	@ 0x92
 800d056:	f884 6094 	strb.w	r6, [r4, #148]	@ 0x94
 800d05a:	63e5      	str	r5, [r4, #60]	@ 0x3c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800d05c:	6465      	str	r5, [r4, #68]	@ 0x44
          cachedAbsX(0),
 800d05e:	6625      	str	r5, [r4, #96]	@ 0x60
        : color(col)
 800d060:	66a5      	str	r5, [r4, #104]	@ 0x68
 800d062:	f8ad 6020 	strh.w	r6, [sp, #32]
        : x(0), y(0), width(0), height(0)
 800d066:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
          parent(0),
 800d06a:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 800d06e:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 800d072:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
 800d076:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
          nextSibling(0),
 800d07a:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
          cachedAbsX(0),
 800d07e:	e9c4 5522 	strd	r5, r5, [r4, #136]	@ 0x88
        Image::setBitmap(bmp);
 800d082:	f002 fff8 	bl	8010076 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d086:	4640      	mov	r0, r8
 800d088:	f003 f936 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800d08c:	4648      	mov	r0, r9
 800d08e:	f003 f933 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800d092:	4b8e      	ldr	r3, [pc, #568]	@ (800d2cc <_ZN14screenViewBaseC1Ev+0x2bc>)
          touchable(false),
 800d094:	f8a4 a14c 	strh.w	sl, [r4, #332]	@ 0x14c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800d098:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 800d09c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800d0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a4:	f8a4 6154 	strh.w	r6, [r4, #340]	@ 0x154
 800d0a8:	1d26      	adds	r6, r4, #4
 800d0aa:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
        : pobject(pObject), pmemfun(pmemfun_1)
 800d0ae:	4b88      	ldr	r3, [pc, #544]	@ (800d2d0 <_ZN14screenViewBaseC1Ev+0x2c0>)
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800d304 <_ZN14screenViewBaseC1Ev+0x2f4>
 800d0b6:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
 800d0ba:	4b86      	ldr	r3, [pc, #536]	@ (800d2d4 <_ZN14screenViewBaseC1Ev+0x2c4>)
 800d0bc:	f8c4 b15e 	str.w	fp, [r4, #350]	@ 0x15e
 800d0c0:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
        rect.x = x;
 800d0c4:	4b84      	ldr	r3, [pc, #528]	@ (800d2d8 <_ZN14screenViewBaseC1Ev+0x2c8>)
        : color(col)
 800d0c6:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
 800d0ca:	64a3      	str	r3, [r4, #72]	@ 0x48
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800d0cc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800d0d0:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
 800d0d4:	66a3      	str	r3, [r4, #104]	@ 0x68
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800d0d6:	f8c4 5164 	str.w	r5, [r4, #356]	@ 0x164
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800d0da:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
 800d0de:	f8c4 4174 	str.w	r4, [r4, #372]	@ 0x174
 800d0e2:	f8c4 517c 	str.w	r5, [r4, #380]	@ 0x17c
 800d0e6:	6465      	str	r5, [r4, #68]	@ 0x44
 800d0e8:	f8c4 a150 	str.w	sl, [r4, #336]	@ 0x150
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId < numberOfTypedTexts;
 800d0ec:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d308 <_ZN14screenViewBaseC1Ev+0x2f8>
        : x(0), y(0), width(0), height(0)
 800d0f0:	e9c4 554b 	strd	r5, r5, [r4, #300]	@ 0x12c
 800d0f4:	e9c4 554d 	strd	r5, r5, [r4, #308]	@ 0x134
          nextSibling(0),
 800d0f8:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
          cachedAbsX(0),
 800d0fc:	e9c4 5551 	strd	r5, r5, [r4, #324]	@ 0x144
 800d100:	f001 f900 	bl	800e304 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d104:	2304      	movs	r3, #4
    image1.setBitmap(touchgfx::Bitmap(BITMAP_TEMPLATERESOURCE_ID));
 800d106:	4638      	mov	r0, r7
 800d108:	a908      	add	r1, sp, #32
        rect.x = x;
 800d10a:	6725      	str	r5, [r4, #112]	@ 0x70
 800d10c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d110:	f002 ffb1 	bl	8010076 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d114:	4639      	mov	r1, r7
 800d116:	4630      	mov	r0, r6
 800d118:	f001 f8f4 	bl	800e304 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d11c:	4b6f      	ldr	r3, [pc, #444]	@ (800d2dc <_ZN14screenViewBaseC1Ev+0x2cc>)
 800d11e:	2203      	movs	r2, #3
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_M_BUTTON_CUSTOM_UI_NORMAL_ID), touchgfx::Bitmap(BITMAP_M_BUTTON_CUSTOM_UI_CLICKED_ID));
 800d120:	a907      	add	r1, sp, #28
 800d122:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d126:	2302      	movs	r3, #2
 800d128:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d12c:	4640      	mov	r0, r8
 800d12e:	aa08      	add	r2, sp, #32
 800d130:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d134:	f002 fed9 	bl	800feea <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800d138:	2302      	movs	r3, #2
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
    {
        if (typedText.hasValidId())
 800d13a:	f8bb 2000 	ldrh.w	r2, [fp]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 800d13e:	f504 7794 	add.w	r7, r4, #296	@ 0x128
 800d142:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
 800d146:	429a      	cmp	r2, r3
 800d148:	d928      	bls.n	800d19c <_ZN14screenViewBaseC1Ev+0x18c>
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800d14a:	4a65      	ldr	r2, [pc, #404]	@ (800d2e0 <_ZN14screenViewBaseC1Ev+0x2d0>)
 800d14c:	6812      	ldr	r2, [r2, #0]
 800d14e:	2a00      	cmp	r2, #0
 800d150:	f000 80b0 	beq.w	800d2b4 <_ZN14screenViewBaseC1Ev+0x2a4>
        return texts->getText(typedTextId);
 800d154:	4619      	mov	r1, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
        return fonts[typedTexts[typedTextId].fontIdx];
 800d156:	4b63      	ldr	r3, [pc, #396]	@ (800d2e4 <_ZN14screenViewBaseC1Ev+0x2d4>)
 800d158:	7912      	ldrb	r2, [r2, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 800d160:	4a61      	ldr	r2, [pc, #388]	@ (800d2e8 <_ZN14screenViewBaseC1Ev+0x2d8>)
        return fonts[typedTexts[typedTextId].fontIdx];
 800d162:	9300      	str	r3, [sp, #0]
        return texts->getText(typedTextId);
 800d164:	6810      	ldr	r0, [r2, #0]
 800d166:	f000 f99b 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800d16a:	9b00      	ldr	r3, [sp, #0]
 800d16c:	4601      	mov	r1, r0
 800d16e:	485f      	ldr	r0, [pc, #380]	@ (800d2ec <_ZN14screenViewBaseC1Ev+0x2dc>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	6b95      	ldr	r5, [r2, #56]	@ 0x38
 800d174:	4285      	cmp	r5, r0
 800d176:	f040 808c 	bne.w	800d292 <_ZN14screenViewBaseC1Ev+0x282>
        return fontHeight;
 800d17a:	889d      	ldrh	r5, [r3, #4]
 800d17c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d17e:	4618      	mov	r0, r3
 800d180:	9101      	str	r1, [sp, #4]
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	4790      	blx	r2
 800d186:	9b00      	ldr	r3, [sp, #0]
 800d188:	fb15 f500 	smulbb	r5, r5, r0
 800d18c:	9901      	ldr	r1, [sp, #4]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4618      	mov	r0, r3
 800d192:	b2ad      	uxth	r5, r5
 800d194:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800d196:	4798      	blx	r3
 800d198:	4405      	add	r5, r0
 800d19a:	b22d      	sxth	r5, r5
 800d19c:	4641      	mov	r1, r8
        color = col;
 800d19e:	f04f 33ff 	mov.w	r3, #4294967295
    buttonWithLabel1.setAction(buttonCallback);
 800d1a2:	f504 78b8 	add.w	r8, r4, #368	@ 0x170
 800d1a6:	4630      	mov	r0, r6
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800d1a8:	f8a4 50de 	strh.w	r5, [r4, #222]	@ 0xde
 800d1ac:	2500      	movs	r5, #0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800d1ae:	f8c4 80c0 	str.w	r8, [r4, #192]	@ 0xc0
        colorPressed = col;
 800d1b2:	e9c4 3335 	strd	r3, r3, [r4, #212]	@ 0xd4
 800d1b6:	f001 f8a5 	bl	800e304 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d1ba:	4b4d      	ldr	r3, [pc, #308]	@ (800d2f0 <_ZN14screenViewBaseC1Ev+0x2e0>)
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800d1bc:	aa08      	add	r2, sp, #32
 800d1be:	a907      	add	r1, sp, #28
 800d1c0:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	4648      	mov	r0, r9
 800d1c8:	f8ad 501c 	strh.w	r5, [sp, #28]
 800d1cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d1d0:	f002 fe8b 	bl	800feea <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800d1d4:	2301      	movs	r3, #1
        if (typedText.hasValidId())
 800d1d6:	f8bb 2000 	ldrh.w	r2, [fp]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	f8a4 3118 	strh.w	r3, [r4, #280]	@ 0x118
 800d1e0:	d925      	bls.n	800d22e <_ZN14screenViewBaseC1Ev+0x21e>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800d1e2:	4a3f      	ldr	r2, [pc, #252]	@ (800d2e0 <_ZN14screenViewBaseC1Ev+0x2d0>)
 800d1e4:	6812      	ldr	r2, [r2, #0]
 800d1e6:	2a00      	cmp	r2, #0
 800d1e8:	d064      	beq.n	800d2b4 <_ZN14screenViewBaseC1Ev+0x2a4>
        return texts->getText(typedTextId);
 800d1ea:	4619      	mov	r1, r3
        return fonts[typedTexts[typedTextId].fontIdx];
 800d1ec:	4b3d      	ldr	r3, [pc, #244]	@ (800d2e4 <_ZN14screenViewBaseC1Ev+0x2d4>)
 800d1ee:	7892      	ldrb	r2, [r2, #2]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 800d1f6:	4b3c      	ldr	r3, [pc, #240]	@ (800d2e8 <_ZN14screenViewBaseC1Ev+0x2d8>)
 800d1f8:	6818      	ldr	r0, [r3, #0]
 800d1fa:	f000 f951 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800d1fe:	f8db 3000 	ldr.w	r3, [fp]
 800d202:	4601      	mov	r1, r0
 800d204:	4839      	ldr	r0, [pc, #228]	@ (800d2ec <_ZN14screenViewBaseC1Ev+0x2dc>)
 800d206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d208:	4282      	cmp	r2, r0
 800d20a:	d14b      	bne.n	800d2a4 <_ZN14screenViewBaseC1Ev+0x294>
 800d20c:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 800d210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d212:	4658      	mov	r0, fp
 800d214:	9100      	str	r1, [sp, #0]
 800d216:	4798      	blx	r3
 800d218:	fb15 f500 	smulbb	r5, r5, r0
 800d21c:	f8db 3000 	ldr.w	r3, [fp]
 800d220:	4658      	mov	r0, fp
 800d222:	b2ad      	uxth	r5, r5
 800d224:	9900      	ldr	r1, [sp, #0]
 800d226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d228:	4798      	blx	r3
 800d22a:	4405      	add	r5, r0
 800d22c:	b22d      	sxth	r5, r5
        color = col;
 800d22e:	f04f 33ff 	mov.w	r3, #4294967295
 800d232:	4649      	mov	r1, r9
 800d234:	4630      	mov	r0, r6
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800d236:	f8a4 5126 	strh.w	r5, [r4, #294]	@ 0x126
 800d23a:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
        boundingArea = calculateBoundingArea();
 800d23e:	ad02      	add	r5, sp, #8
        linespace = space;
 800d240:	f04f 0800 	mov.w	r8, #0
        colorPressed = col;
 800d244:	e9c4 3347 	strd	r3, r3, [r4, #284]	@ 0x11c
 800d248:	f001 f85c 	bl	800e304 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d24c:	4b29      	ldr	r3, [pc, #164]	@ (800d2f4 <_ZN14screenViewBaseC1Ev+0x2e4>)
        boundingArea = calculateBoundingArea();
 800d24e:	4639      	mov	r1, r7
 800d250:	4628      	mov	r0, r5
 800d252:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
        color = newColor;
 800d256:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        linespace = space;
 800d25a:	f8a4 815c 	strh.w	r8, [r4, #348]	@ 0x15c
        color = newColor;
 800d25e:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 800d262:	f002 fb3d 	bl	800f8e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800d266:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
        : typedTextId(id)
 800d26a:	f8ad 8024 	strh.w	r8, [sp, #36]	@ 0x24
 800d26e:	f8cd a020 	str.w	sl, [sp, #32]
 800d272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8CBL));
 800d27a:	a908      	add	r1, sp, #32
 800d27c:	4638      	mov	r0, r7
 800d27e:	f002 fdd7 	bl	800fe30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800d282:	4630      	mov	r0, r6
 800d284:	4639      	mov	r1, r7
 800d286:	f001 f83d 	bl	800e304 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800d28a:	4620      	mov	r0, r4
 800d28c:	b00b      	add	sp, #44	@ 0x2c
 800d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800d292:	4618      	mov	r0, r3
 800d294:	9101      	str	r1, [sp, #4]
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	47a8      	blx	r5
 800d29a:	9b00      	ldr	r3, [sp, #0]
 800d29c:	4605      	mov	r5, r0
 800d29e:	9901      	ldr	r1, [sp, #4]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	e76b      	b.n	800d17c <_ZN14screenViewBaseC1Ev+0x16c>
 800d2a4:	9100      	str	r1, [sp, #0]
 800d2a6:	4658      	mov	r0, fp
 800d2a8:	4790      	blx	r2
 800d2aa:	f8db 3000 	ldr.w	r3, [fp]
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	9900      	ldr	r1, [sp, #0]
 800d2b2:	e7ad      	b.n	800d210 <_ZN14screenViewBaseC1Ev+0x200>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800d2b4:	4b10      	ldr	r3, [pc, #64]	@ (800d2f8 <_ZN14screenViewBaseC1Ev+0x2e8>)
 800d2b6:	216c      	movs	r1, #108	@ 0x6c
 800d2b8:	4a10      	ldr	r2, [pc, #64]	@ (800d2fc <_ZN14screenViewBaseC1Ev+0x2ec>)
 800d2ba:	4811      	ldr	r0, [pc, #68]	@ (800d300 <_ZN14screenViewBaseC1Ev+0x2f0>)
 800d2bc:	f015 fd80 	bl	8022dc0 <__assert_func>
 800d2c0:	080297ec 	.word	0x080297ec
 800d2c4:	08028db0 	.word	0x08028db0
 800d2c8:	08029854 	.word	0x08029854
 800d2cc:	0802975c 	.word	0x0802975c
 800d2d0:	08028d98 	.word	0x08028d98
 800d2d4:	0800cf91 	.word	0x0800cf91
 800d2d8:	01e00320 	.word	0x01e00320
 800d2dc:	00d6005e 	.word	0x00d6005e
 800d2e0:	2400aad4 	.word	0x2400aad4
 800d2e4:	2400aadc 	.word	0x2400aadc
 800d2e8:	2400aae0 	.word	0x2400aae0
 800d2ec:	0800c855 	.word	0x0800c855
 800d2f0:	0168002d 	.word	0x0168002d
 800d2f4:	013d01be 	.word	0x013d01be
 800d2f8:	08028ccc 	.word	0x08028ccc
 800d2fc:	08028d10 	.word	0x08028d10
 800d300:	08028d4c 	.word	0x08028d4c
 800d304:	080288e0 	.word	0x080288e0
 800d308:	2400aad8 	.word	0x2400aad8

0800d30c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800d30c:	4800      	ldr	r0, [pc, #0]	@ (800d310 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800d30e:	4770      	bx	lr
 800d310:	08028ddc 	.word	0x08028ddc

0800d314 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800d314:	2005      	movs	r0, #5
 800d316:	4770      	bx	lr

0800d318 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800d318:	2000      	movs	r0, #0
 800d31a:	4770      	bx	lr

0800d31c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 800d31c:	2000      	movs	r0, #0
 800d31e:	4770      	bx	lr

0800d320 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d320:	b40e      	push	{r1, r2, r3}
 800d322:	b500      	push	{lr}
 800d324:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800d326:	2100      	movs	r1, #0
{
 800d328:	ab03      	add	r3, sp, #12
 800d32a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800d32e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800d330:	f005 fc42 	bl	8012bb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800d334:	b002      	add	sp, #8
 800d336:	f85d eb04 	ldr.w	lr, [sp], #4
 800d33a:	b003      	add	sp, #12
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop

0800d340 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d340:	b40c      	push	{r2, r3}
 800d342:	b500      	push	{lr}
 800d344:	b083      	sub	sp, #12
 800d346:	ab04      	add	r3, sp, #16
 800d348:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800d34c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800d34e:	f005 fc33 	bl	8012bb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800d352:	b003      	add	sp, #12
 800d354:	f85d eb04 	ldr.w	lr, [sp], #4
 800d358:	b002      	add	sp, #8
 800d35a:	4770      	bx	lr

0800d35c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800d35c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800d35e:	b510      	push	{r4, lr}
 800d360:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800d362:	b133      	cbz	r3, 800d372 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800d364:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800d366:	b39b      	cbz	r3, 800d3d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
 800d368:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800d36a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d36e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800d370:	b923      	cbnz	r3, 800d37c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800d372:	4620      	mov	r0, r4
}
 800d374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800d378:	f006 bdfe 	b.w	8013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
 800d37c:	f006 fefa 	bl	8014174 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800d380:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800d382:	2b01      	cmp	r3, #1
 800d384:	d92a      	bls.n	800d3dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
 800d386:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800d388:	1c53      	adds	r3, r2, #1
 800d38a:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800d38c:	2b09      	cmp	r3, #9
 800d38e:	d812      	bhi.n	800d3b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
 800d390:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800d394:	f640 103f 	movw	r0, #2367	@ 0x93f
 800d398:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800d39a:	4281      	cmp	r1, r0
 800d39c:	d1e9      	bne.n	800d372 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
 800d39e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
 800d3a2:	0052      	lsls	r2, r2, #1
 800d3a4:	8c48      	ldrh	r0, [r1, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800d3a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
 800d3aa:	4422      	add	r2, r4
 800d3ac:	f640 113f 	movw	r1, #2367	@ 0x93f
            buffer[index < size ? index : 0] = newChar;
 800d3b0:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800d3b2:	8451      	strh	r1, [r2, #34]	@ 0x22
        }
 800d3b4:	e7dd      	b.n	800d372 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
 800d3b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800d3ba:	f640 113f 	movw	r1, #2367	@ 0x93f
 800d3be:	89db      	ldrh	r3, [r3, #14]
 800d3c0:	428b      	cmp	r3, r1
 800d3c2:	d1d6      	bne.n	800d372 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
 800d3c4:	eb04 0142 	add.w	r1, r4, r2, lsl #1
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	0052      	lsls	r2, r2, #1
 800d3cc:	8c48      	ldrh	r0, [r1, #34]	@ 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
 800d3ce:	e7ea      	b.n	800d3a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
 800d3d0:	4b05      	ldr	r3, [pc, #20]	@ (800d3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
 800d3d2:	21c5      	movs	r1, #197	@ 0xc5
 800d3d4:	4a05      	ldr	r2, [pc, #20]	@ (800d3ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 800d3d6:	4806      	ldr	r0, [pc, #24]	@ (800d3f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800d3d8:	f015 fcf2 	bl	8022dc0 <__assert_func>
            assert(offset < used);
 800d3dc:	4b05      	ldr	r3, [pc, #20]	@ (800d3f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800d3de:	21cb      	movs	r1, #203	@ 0xcb
 800d3e0:	4a05      	ldr	r2, [pc, #20]	@ (800d3f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 800d3e2:	4803      	ldr	r0, [pc, #12]	@ (800d3f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800d3e4:	f015 fcec 	bl	8022dc0 <__assert_func>
 800d3e8:	08028e40 	.word	0x08028e40
 800d3ec:	08028e4c 	.word	0x08028e4c
 800d3f0:	08028ef8 	.word	0x08028ef8
 800d3f4:	08028f40 	.word	0x08028f40
 800d3f8:	08028f50 	.word	0x08028f50

0800d3fc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800d3fc:	f006 bd85 	b.w	8013f0a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800d400 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800d400:	b510      	push	{r4, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
 800d408:	ac0a      	add	r4, sp, #40	@ 0x28
{
 800d40a:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800d40e:	461a      	mov	r2, r3
 800d410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d412:	4661      	mov	r1, ip
 800d414:	9401      	str	r4, [sp, #4]
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
 800d41a:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800d41c:	f004 f81a 	bl	8011454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800d420:	b006      	add	sp, #24
 800d422:	bd10      	pop	{r4, pc}

0800d424 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800d424:	b9e0      	cbnz	r0, 800d460 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
 800d426:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
 800d428:	4b13      	ldr	r3, [pc, #76]	@ (800d478 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	b1cb      	cbz	r3, 800d462 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800d42e:	4c13      	ldr	r4, [pc, #76]	@ (800d47c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800d430:	4813      	ldr	r0, [pc, #76]	@ (800d480 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800d432:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800d436:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800d438:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800d43a:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800d43c:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800d43e:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800d440:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800d442:	4b10      	ldr	r3, [pc, #64]	@ (800d484 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800d444:	2200      	movs	r2, #0
 800d446:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800d448:	f000 f83a 	bl	800d4c0 <_ZN17TypedTextDatabase8getFontsEv>
 800d44c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800d44e:	f000 f835 	bl	800d4bc <_ZN17TypedTextDatabase15getInstanceSizeEv>
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
    {
        typedTexts = data;
 800d452:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
 800d454:	4a0d      	ldr	r2, [pc, #52]	@ (800d48c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
 800d456:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
 800d458:	4b0d      	ldr	r3, [pc, #52]	@ (800d490 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
 800d45a:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
 800d45c:	8018      	strh	r0, [r3, #0]
    }
}
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800d462:	4c0c      	ldr	r4, [pc, #48]	@ (800d494 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
 800d464:	4905      	ldr	r1, [pc, #20]	@ (800d47c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800d466:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
 800d468:	480b      	ldr	r0, [pc, #44]	@ (800d498 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
 800d46a:	4b05      	ldr	r3, [pc, #20]	@ (800d480 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800d46c:	4a0b      	ldr	r2, [pc, #44]	@ (800d49c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
 800d46e:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800d470:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
 800d472:	2c00      	cmp	r4, #0
 800d474:	d1e5      	bne.n	800d442 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	2400987c 	.word	0x2400987c
 800d47c:	24009874 	.word	0x24009874
 800d480:	24009870 	.word	0x24009870
 800d484:	24009878 	.word	0x24009878
 800d488:	2400aad4 	.word	0x2400aad4
 800d48c:	2400aadc 	.word	0x2400aadc
 800d490:	2400aad8 	.word	0x2400aad8
 800d494:	08111230 	.word	0x08111230
 800d498:	081111f8 	.word	0x081111f8
 800d49c:	081111e4 	.word	0x081111e4

0800d4a0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800d4a0:	4a04      	ldr	r2, [pc, #16]	@ (800d4b4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800d4a2:	4b05      	ldr	r3, [pc, #20]	@ (800d4b8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800d4a4:	6812      	ldr	r2, [r2, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
 800d4ac:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	24009870 	.word	0x24009870
 800d4b8:	24009874 	.word	0x24009874

0800d4bc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800d4bc:	2005      	movs	r0, #5
 800d4be:	4770      	bx	lr

0800d4c0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800d4c0:	4800      	ldr	r0, [pc, #0]	@ (800d4c4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800d4c2:	4770      	bx	lr
 800d4c4:	24009880 	.word	0x24009880

0800d4c8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_Microsoft_Yahei_24_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800d4c8:	b510      	push	{r4, lr}
};
 800d4ca:	4c07      	ldr	r4, [pc, #28]	@ (800d4e8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
 800d4cc:	f7ff facc 	bl	800ca68 <_Z23getFont_verdana_20_4bppv>
};
 800d4d0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800d4d2:	f7ff fb09 	bl	800cae8 <_Z23getFont_verdana_40_4bppv>
};
 800d4d6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 800d4d8:	f7ff fa86 	bl	800c9e8 <_Z23getFont_verdana_10_4bppv>
};
 800d4dc:	60a0      	str	r0, [r4, #8]
    &(getFont_Microsoft_Yahei_24_4bpp())
 800d4de:	f7ff fa41 	bl	800c964 <_Z31getFont_Microsoft_Yahei_24_4bppv>
};
 800d4e2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 800d4e4:	bd10      	pop	{r4, pc}
 800d4e6:	bf00      	nop
 800d4e8:	24009880 	.word	0x24009880

0800d4ec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <_ZN19FrontendApplicationD0Ev>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800d4f8:	f015 fc34 	bl	8022d64 <_ZdlPvj>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	bd10      	pop	{r4, pc}

0800d500 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800d500:	b510      	push	{r4, lr}
 800d502:	4604      	mov	r4, r0
    {
        model.tick();
 800d504:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800d508:	f000 f814 	bl	800d534 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800d50c:	4620      	mov	r0, r4
    }
 800d50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800d512:	f004 bc85 	b.w	8011e20 <_ZN8touchgfx11Application15handleTickEventEv>
 800d516:	bf00      	nop

0800d518 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800d518:	b510      	push	{r4, lr}
 800d51a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800d51c:	f7ff fc90 	bl	800ce40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800d520:	4b01      	ldr	r3, [pc, #4]	@ (800d528 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800d522:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800d524:	6023      	str	r3, [r4, #0]
}
 800d526:	bd10      	pop	{r4, pc}
 800d528:	0802902c 	.word	0x0802902c

0800d52c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800d52c:	2200      	movs	r2, #0
 800d52e:	6002      	str	r2, [r0, #0]
{

}
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop

0800d534 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop

0800d538 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop

0800d53c <_ZThn4_N15screenPresenterD1Ev>:
 800d53c:	3804      	subs	r0, #4
 800d53e:	4770      	bx	lr

0800d540 <_ZN15screenPresenter10deactivateEv>:
}

void screenPresenter::activate()
{

}
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop

0800d544 <_ZN15screenPresenterD0Ev>:
 800d544:	b510      	push	{r4, lr}
 800d546:	4604      	mov	r4, r0
 800d548:	2110      	movs	r1, #16
 800d54a:	f015 fc0b 	bl	8022d64 <_ZdlPvj>
 800d54e:	4620      	mov	r0, r4
 800d550:	bd10      	pop	{r4, pc}
 800d552:	bf00      	nop

0800d554 <_ZThn4_N15screenPresenterD0Ev>:
 800d554:	b510      	push	{r4, lr}
 800d556:	1f04      	subs	r4, r0, #4
 800d558:	2110      	movs	r1, #16
 800d55a:	4620      	mov	r0, r4
 800d55c:	f015 fc02 	bl	8022d64 <_ZdlPvj>
 800d560:	4620      	mov	r0, r4
 800d562:	bd10      	pop	{r4, pc}

0800d564 <_ZN15screenPresenterC1ER10screenView>:
    : view(v)
 800d564:	4a05      	ldr	r2, [pc, #20]	@ (800d57c <_ZN15screenPresenterC1ER10screenView+0x18>)
 800d566:	60c1      	str	r1, [r0, #12]
 800d568:	6002      	str	r2, [r0, #0]
screenPresenter::screenPresenter(screenView& v)
 800d56a:	b410      	push	{r4}
    ModelListener() : model(0) {}
 800d56c:	2400      	movs	r4, #0
 800d56e:	6084      	str	r4, [r0, #8]
    : view(v)
 800d570:	f102 0418 	add.w	r4, r2, #24
 800d574:	6044      	str	r4, [r0, #4]
}
 800d576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	08029080 	.word	0x08029080

0800d580 <_ZN10screenView14tearDownScreenEv>:
}

void screenView::tearDownScreen()
{
    screenViewBase::tearDownScreen();
}
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop

0800d584 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800d584:	4b03      	ldr	r3, [pc, #12]	@ (800d594 <_ZN10screenViewD1Ev+0x10>)
 800d586:	b510      	push	{r4, lr}
 800d588:	4604      	mov	r4, r0
 800d58a:	6003      	str	r3, [r0, #0]
 800d58c:	f7ff fccc 	bl	800cf28 <_ZN14screenViewBaseD1Ev>
 800d590:	4620      	mov	r0, r4
 800d592:	bd10      	pop	{r4, pc}
 800d594:	080290a8 	.word	0x080290a8

0800d598 <_ZN10screenViewD0Ev>:
 800d598:	4b06      	ldr	r3, [pc, #24]	@ (800d5b4 <_ZN10screenViewD0Ev+0x1c>)
 800d59a:	b510      	push	{r4, lr}
 800d59c:	4604      	mov	r4, r0
 800d59e:	6003      	str	r3, [r0, #0]
 800d5a0:	f7ff fcc2 	bl	800cf28 <_ZN14screenViewBaseD1Ev>
 800d5a4:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f015 fbdb 	bl	8022d64 <_ZdlPvj>
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	bd10      	pop	{r4, pc}
 800d5b2:	bf00      	nop
 800d5b4:	080290a8 	.word	0x080290a8

0800d5b8 <_ZN10screenViewC1Ev>:
screenView::screenView()
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	f7ff fd28 	bl	800d010 <_ZN14screenViewBaseC1Ev>
 800d5c0:	4b01      	ldr	r3, [pc, #4]	@ (800d5c8 <_ZN10screenViewC1Ev+0x10>)
}
 800d5c2:	4620      	mov	r0, r4
screenView::screenView()
 800d5c4:	6023      	str	r3, [r4, #0]
}
 800d5c6:	bd10      	pop	{r4, pc}
 800d5c8:	080290a8 	.word	0x080290a8

0800d5cc <_ZN10screenView11setupScreenEv>:
    screenViewBase::setupScreen();
 800d5cc:	f7ff bcae 	b.w	800cf2c <_ZN14screenViewBase11setupScreenEv>

0800d5d0 <_ZN20STM32TouchController11sampleTouchERlS0_>:
     */
	Touch_Init();
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800d5d0:	b410      	push	{r4}
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
//    return false;
	if(touchInfo.flag == 1)
 800d5d2:	4c0a      	ldr	r4, [pc, #40]	@ (800d5fc <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
 800d5d4:	7823      	ldrb	r3, [r4, #0]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d003      	beq.n	800d5e2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
			y = touchInfo.y[0];
			return true;
		}
		else
		{
			return false;
 800d5da:	2000      	movs	r0, #0
		}
}
 800d5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e0:	4770      	bx	lr
			x = touchInfo.x[0];
 800d5e2:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 800d5e6:	b2d8      	uxtb	r0, r3
			y = touchInfo.y[0];
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
			x = touchInfo.x[0];
 800d5ea:	fa1f f48c 	uxth.w	r4, ip
			y = touchInfo.y[0];
 800d5ee:	b29b      	uxth	r3, r3
			x = touchInfo.x[0];
 800d5f0:	600c      	str	r4, [r1, #0]
}
 800d5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
			y = touchInfo.y[0];
 800d5f6:	6013      	str	r3, [r2, #0]
}
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	240008a4 	.word	0x240008a4

0800d600 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop

0800d604 <_ZN20STM32TouchController4initEv>:
	Touch_Init();
 800d604:	f7f4 bad6 	b.w	8001bb4 <Touch_Init>

0800d608 <_ZN20STM32TouchControllerD0Ev>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	4604      	mov	r4, r0
 800d60c:	2104      	movs	r1, #4
 800d60e:	f015 fba9 	bl	8022d64 <_ZdlPvj>
 800d612:	4620      	mov	r0, r4
 800d614:	bd10      	pop	{r4, pc}
 800d616:	bf00      	nop

0800d618 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop

0800d61c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop

0800d624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
}

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
 800d628:	2000      	movs	r0, #0
 800d62a:	4770      	bx	lr

0800d62c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800d62c:	2000      	movs	r0, #0
 800d62e:	4770      	bx	lr

0800d630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800d630:	1e0a      	subs	r2, r1, #0
 800d632:	4b03      	ldr	r3, [pc, #12]	@ (800d640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800d634:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800d636:	bf18      	it	ne
 800d638:	2201      	movne	r2, #1
 800d63a:	701a      	strb	r2, [r3, #0]
    }
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	2400aa83 	.word	0x2400aa83

0800d644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 800d644:	2000      	movs	r0, #0
 800d646:	4770      	bx	lr

0800d648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 800d648:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    virtual void taskDelay(uint16_t ms)
 800d64a:	4608      	mov	r0, r1
        if (taskDelayFunc)
 800d64c:	b103      	cbz	r3, 800d650 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800d64e:	4718      	bx	r3
        }
    }
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop

0800d654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 800d654:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop

0800d65c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop

0800d660 <_ZN11TouchGFXHAL10initializeEv>:
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800d660:	f000 bd92 	b.w	800e188 <_ZN20TouchGFXGeneratedHAL10initializeEv>

0800d664 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800d664:	f000 bd30 	b.w	800e0c8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800d668 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800d668:	f000 bd34 	b.w	800e0d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800d66c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800d66c:	f000 bd3e 	b.w	800e0ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

0800d670 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800d670:	f000 bd3e 	b.w	800e0f0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

0800d674 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800d674:	f000 bd04 	b.w	800e080 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800d678 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800d678:	f000 bd7c 	b.w	800e174 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800d67c <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800d67c:	f000 bd66 	b.w	800e14c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800d680 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800d680:	f000 bd08 	b.w	800e094 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

0800d684 <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 800d684:	f000 bd2e 	b.w	800e0e4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

0800d688 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    TouchGFXGeneratedHAL::endFrame();
 800d688:	f000 bd2e 	b.w	800e0e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>

0800d68c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800d68c:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800d68e:	4b09      	ldr	r3, [pc, #36]	@ (800d6b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	428b      	cmp	r3, r1
 800d694:	d808      	bhi.n	800d6a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 800d696:	4b08      	ldr	r3, [pc, #32]	@ (800d6b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d804      	bhi.n	800d6a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 800d69e:	4807      	ldr	r0, [pc, #28]	@ (800d6bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
 800d6a0:	4b07      	ldr	r3, [pc, #28]	@ (800d6c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
 800d6a2:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
 800d6a4:	801a      	strh	r2, [r3, #0]
    }
 800d6a6:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800d6a8:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800d6aa:	219e      	movs	r1, #158	@ 0x9e
 800d6ac:	4a06      	ldr	r2, [pc, #24]	@ (800d6c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 800d6ae:	4807      	ldr	r0, [pc, #28]	@ (800d6cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800d6b0:	f015 fb86 	bl	8022dc0 <__assert_func>
 800d6b4:	2400aa78 	.word	0x2400aa78
 800d6b8:	2400aa7a 	.word	0x2400aa7a
 800d6bc:	2400aa7e 	.word	0x2400aa7e
 800d6c0:	2400aa80 	.word	0x2400aa80
 800d6c4:	080290ec 	.word	0x080290ec
 800d6c8:	08029150 	.word	0x08029150
 800d6cc:	08029194 	.word	0x08029194

0800d6d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	4604      	mov	r4, r0
        swapFrameBuffers();
 800d6d4:	f001 fe66 	bl	800f3a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 800d6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800d6e4:	4718      	bx	r3
 800d6e6:	bf00      	nop

0800d6e8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800d6e8:	f001 b8a0 	b.w	800e82c <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800d6ec <_ZN11TouchGFXHALD0Ev>:
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	217c      	movs	r1, #124	@ 0x7c
 800d6f2:	f015 fb37 	bl	8022d64 <_ZdlPvj>
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	bd10      	pop	{r4, pc}
 800d6fa:	bf00      	nop

0800d6fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800d6fc:	f890 c078 	ldrb.w	ip, [r0, #120]	@ 0x78
 800d700:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 800d704:	4b0b      	ldr	r3, [pc, #44]	@ (800d734 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
        if (requestedOrientation != nativeDisplayOrientation)
 800d706:	458c      	cmp	ip, r1
            if (DISPLAY_ROTATION == rotate0)
 800d708:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800d70a:	d00b      	beq.n	800d724 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
 800d70c:	b94a      	cbnz	r2, 800d722 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800d70e:	4a0a      	ldr	r2, [pc, #40]	@ (800d738 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
 800d710:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800d714:	4909      	ldr	r1, [pc, #36]	@ (800d73c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 800d716:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800d718:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800d71c:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800d71e:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800d720:	8013      	strh	r3, [r2, #0]
        }
    }
 800d722:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
 800d724:	2a00      	cmp	r2, #0
 800d726:	d0fc      	beq.n	800d722 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800d728:	4a03      	ldr	r2, [pc, #12]	@ (800d738 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
 800d72a:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800d72e:	4903      	ldr	r1, [pc, #12]	@ (800d73c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 800d730:	e7f1      	b.n	800d716 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
 800d732:	bf00      	nop
 800d734:	2400aa7c 	.word	0x2400aa7c
 800d738:	2400aa7a 	.word	0x2400aa7a
 800d73c:	2400aa78 	.word	0x2400aa78

0800d740 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 800d740:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800d742:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800d746:	b118      	cbz	r0, 800d750 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 800d748:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 800d74a:	6803      	ldr	r3, [r0, #0]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4718      	bx	r3
    }
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop

0800d754 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
 800d754:	6840      	ldr	r0, [r0, #4]
 800d756:	4a04      	ldr	r2, [pc, #16]	@ (800d768 <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
 800d758:	6803      	ldr	r3, [r0, #0]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d101      	bne.n	800d764 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
 800d760:	2000      	movs	r0, #0
 800d762:	4770      	bx	lr
        return dma.getDMAType();
 800d764:	4718      	bx	r3
 800d766:	bf00      	nop
 800d768:	0800d629 	.word	0x0800d629

0800d76c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800d76c:	b1a9      	cbz	r1, 800d79a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800d76e:	6402      	str	r2, [r0, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800d770:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800d772:	63c1      	str	r1, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800d774:	bf18      	it	ne
 800d776:	2201      	movne	r2, #1
 800d778:	490c      	ldr	r1, [pc, #48]	@ (800d7ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 800d77a:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 800d77c:	6802      	ldr	r2, [r0, #0]
 800d77e:	490c      	ldr	r1, [pc, #48]	@ (800d7b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
 800d780:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800d784:	428a      	cmp	r2, r1
 800d786:	d106      	bne.n	800d796 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800d788:	1e19      	subs	r1, r3, #0
 800d78a:	4a0a      	ldr	r2, [pc, #40]	@ (800d7b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800d78c:	6443      	str	r3, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800d78e:	bf18      	it	ne
 800d790:	2101      	movne	r1, #1
 800d792:	7011      	strb	r1, [r2, #0]
 800d794:	4770      	bx	lr
        setAnimationStorage(animationStorage);
 800d796:	4619      	mov	r1, r3
 800d798:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800d79a:	4b07      	ldr	r3, [pc, #28]	@ (800d7b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
 800d79c:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800d7a0:	4a06      	ldr	r2, [pc, #24]	@ (800d7bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
 800d7a2:	4807      	ldr	r0, [pc, #28]	@ (800d7c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800d7a4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800d7a6:	f015 fb0b 	bl	8022dc0 <__assert_func>
 800d7aa:	bf00      	nop
 800d7ac:	2400aa82 	.word	0x2400aa82
 800d7b0:	0800d631 	.word	0x0800d631
 800d7b4:	2400aa83 	.word	0x2400aa83
 800d7b8:	080291d8 	.word	0x080291d8
 800d7bc:	08029210 	.word	0x08029210
 800d7c0:	08029194 	.word	0x08029194

0800d7c4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	2200      	movs	r2, #0
{
 800d7c8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800d7ca:	4608      	mov	r0, r1
 800d7cc:	f7fc fa84 	bl	8009cd8 <osSemaphoreNew>
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d800 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800d7d2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800d7d4:	b140      	cbz	r0, 800d7e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2104      	movs	r1, #4
 800d7da:	2001      	movs	r0, #1
 800d7dc:	f7fc fb24 	bl	8009e28 <osMessageQueueNew>
 800d7e0:	4b08      	ldr	r3, [pc, #32]	@ (800d804 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800d7e2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800d7e4:	b130      	cbz	r0, 800d7f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800d7e6:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800d7e8:	4b07      	ldr	r3, [pc, #28]	@ (800d808 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800d7ea:	2128      	movs	r1, #40	@ 0x28
 800d7ec:	4a07      	ldr	r2, [pc, #28]	@ (800d80c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800d7ee:	4808      	ldr	r0, [pc, #32]	@ (800d810 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800d7f0:	f015 fae6 	bl	8022dc0 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800d7f4:	4b07      	ldr	r3, [pc, #28]	@ (800d814 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800d7f6:	212c      	movs	r1, #44	@ 0x2c
 800d7f8:	4a04      	ldr	r2, [pc, #16]	@ (800d80c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800d7fa:	4805      	ldr	r0, [pc, #20]	@ (800d810 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800d7fc:	f015 fae0 	bl	8022dc0 <__assert_func>
 800d800:	24009894 	.word	0x24009894
 800d804:	24009890 	.word	0x24009890
 800d808:	08029338 	.word	0x08029338
 800d80c:	08029384 	.word	0x08029384
 800d810:	080293b4 	.word	0x080293b4
 800d814:	080293e0 	.word	0x080293e0

0800d818 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800d818:	4b02      	ldr	r3, [pc, #8]	@ (800d824 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 800d81a:	f04f 31ff 	mov.w	r1, #4294967295
 800d81e:	6818      	ldr	r0, [r3, #0]
 800d820:	f7fc baa6 	b.w	8009d70 <osSemaphoreAcquire>
 800d824:	24009894 	.word	0x24009894

0800d828 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 800d828:	4b01      	ldr	r3, [pc, #4]	@ (800d830 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800d82a:	6818      	ldr	r0, [r3, #0]
 800d82c:	f7fc bad2 	b.w	8009dd4 <osSemaphoreRelease>
 800d830:	24009894 	.word	0x24009894

0800d834 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800d834:	4b02      	ldr	r3, [pc, #8]	@ (800d840 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 800d836:	2100      	movs	r1, #0
 800d838:	6818      	ldr	r0, [r3, #0]
 800d83a:	f7fc ba99 	b.w	8009d70 <osSemaphoreAcquire>
 800d83e:	bf00      	nop
 800d840:	24009894 	.word	0x24009894

0800d844 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 800d844:	4b01      	ldr	r3, [pc, #4]	@ (800d84c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
 800d846:	6818      	ldr	r0, [r3, #0]
 800d848:	f7fc bac4 	b.w	8009dd4 <osSemaphoreRelease>
 800d84c:	24009894 	.word	0x24009894

0800d850 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800d850:	4803      	ldr	r0, [pc, #12]	@ (800d860 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 800d852:	2300      	movs	r3, #0
 800d854:	4903      	ldr	r1, [pc, #12]	@ (800d864 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800d856:	461a      	mov	r2, r3
 800d858:	6800      	ldr	r0, [r0, #0]
 800d85a:	f7fc bb21 	b.w	8009ea0 <osMessageQueuePut>
 800d85e:	bf00      	nop
 800d860:	24009890 	.word	0x24009890
 800d864:	24000028 	.word	0x24000028

0800d868 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800d868:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800d86a:	2300      	movs	r3, #0
{
 800d86c:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800d86e:	4c07      	ldr	r4, [pc, #28]	@ (800d88c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800d870:	461a      	mov	r2, r3
 800d872:	a901      	add	r1, sp, #4
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	f7fc fb4f 	bl	8009f18 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800d87a:	f04f 33ff 	mov.w	r3, #4294967295
 800d87e:	2200      	movs	r2, #0
 800d880:	a901      	add	r1, sp, #4
 800d882:	6820      	ldr	r0, [r4, #0]
 800d884:	f7fc fb48 	bl	8009f18 <osMessageQueueGet>
}
 800d888:	b002      	add	sp, #8
 800d88a:	bd10      	pop	{r4, pc}
 800d88c:	24009890 	.word	0x24009890

0800d890 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 800d890:	6803      	ldr	r3, [r0, #0]
 800d892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d894:	4718      	bx	r3
 800d896:	bf00      	nop

0800d898 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800d898:	2001      	movs	r0, #1
 800d89a:	4770      	bx	lr

0800d89c <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 800d89c:	6803      	ldr	r3, [r0, #0]
 800d89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a0:	4718      	bx	r3
 800d8a2:	bf00      	nop

0800d8a4 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 800d8a4:	e7fe      	b.n	800d8a4 <DMA2D_XferErrorCallback>
 800d8a6:	bf00      	nop

0800d8a8 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 800d8a8:	4905      	ldr	r1, [pc, #20]	@ (800d8c0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d8aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d8ae:	4b05      	ldr	r3, [pc, #20]	@ (800d8c4 <_ZN8STM32DMAD1Ev+0x1c>)
 800d8b0:	6001      	str	r1, [r0, #0]
 800d8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800d8b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d8ba:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 800d8be:	4770      	bx	lr
 800d8c0:	08029568 	.word	0x08029568
 800d8c4:	e000e100 	.word	0xe000e100

0800d8c8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d8c8:	4b11      	ldr	r3, [pc, #68]	@ (800d910 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800d8ca:	4912      	ldr	r1, [pc, #72]	@ (800d914 <_ZN8STM32DMA10initializeEv+0x4c>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d8cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800d8d0:	4811      	ldr	r0, [pc, #68]	@ (800d918 <_ZN8STM32DMA10initializeEv+0x50>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d8d2:	f042 0210 	orr.w	r2, r2, #16
{
 800d8d6:	b410      	push	{r4}
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800d8d8:	4c10      	ldr	r4, [pc, #64]	@ (800d91c <_ZN8STM32DMA10initializeEv+0x54>)
{
 800d8da:	b083      	sub	sp, #12
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800d8dc:	e9c1 4008 	strd	r4, r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d8e0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800d8e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800d8e8:	f002 0210 	and.w	r2, r2, #16
 800d8ec:	9201      	str	r2, [sp, #4]
 800d8ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800d8f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d8f2:	f042 0210 	orr.w	r2, r2, #16
 800d8f6:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800d8f8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800d8fa:	f022 0210 	bic.w	r2, r2, #16
 800d8fe:	67da      	str	r2, [r3, #124]	@ 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d900:	4b07      	ldr	r3, [pc, #28]	@ (800d920 <_ZN8STM32DMA10initializeEv+0x58>)
 800d902:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d906:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 800d908:	b003      	add	sp, #12
 800d90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	58024400 	.word	0x58024400
 800d914:	240004c0 	.word	0x240004c0
 800d918:	0800d8a5 	.word	0x0800d8a5
 800d91c:	0800d95d 	.word	0x0800d95d
 800d920:	e000e100 	.word	0xe000e100

0800d924 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 800d924:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop

0800d92c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800d92c:	4909      	ldr	r1, [pc, #36]	@ (800d954 <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d92e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800d932:	4b09      	ldr	r3, [pc, #36]	@ (800d958 <_ZN8STM32DMAD0Ev+0x2c>)
 800d934:	b510      	push	{r4, lr}
 800d936:	6001      	str	r1, [r0, #0]
 800d938:	4604      	mov	r4, r0
 800d93a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800d93e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d942:	f3bf 8f6f 	isb	sy
}
 800d946:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 800d94a:	f015 fa0b 	bl	8022d64 <_ZdlPvj>
 800d94e:	4620      	mov	r0, r4
 800d950:	bd10      	pop	{r4, pc}
 800d952:	bf00      	nop
 800d954:	08029568 	.word	0x08029568
 800d958:	e000e100 	.word	0xe000e100

0800d95c <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
 800d95c:	4b05      	ldr	r3, [pc, #20]	@ (800d974 <DMA2D_XferCpltCallback+0x18>)
 800d95e:	4906      	ldr	r1, [pc, #24]	@ (800d978 <DMA2D_XferCpltCallback+0x1c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6858      	ldr	r0, [r3, #4]
 800d964:	6803      	ldr	r3, [r0, #0]
 800d966:	695a      	ldr	r2, [r3, #20]
 800d968:	428a      	cmp	r2, r1
 800d96a:	d101      	bne.n	800d970 <DMA2D_XferCpltCallback+0x14>
 800d96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d96e:	4718      	bx	r3
 800d970:	4710      	bx	r2
 800d972:	bf00      	nop
 800d974:	2400aa84 	.word	0x2400aa84
 800d978:	0800d89d 	.word	0x0800d89d

0800d97c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800d97c:	b570      	push	{r4, r5, r6, lr}
    switch (format)
 800d97e:	7f8b      	ldrb	r3, [r1, #30]
 800d980:	2b0a      	cmp	r3, #10
 800d982:	d83d      	bhi.n	800da00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
 800d984:	e8df f003 	tbb	[pc, r3]
 800d988:	3c2a063a 	.word	0x3c2a063a
 800d98c:	063c3c3c 	.word	0x063c3c3c
 800d990:	0606      	.short	0x0606
 800d992:	06          	.byte	0x06
 800d993:	00          	.byte	0x00
 800d994:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800d996:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 800d99a:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800d99c:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800d99e:	4b1b      	ldr	r3, [pc, #108]	@ (800da0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x90>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800d9a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800d9a4:	690d      	ldr	r5, [r1, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800d9a6:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800d9aa:	635c      	str	r4, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800d9ac:	6458      	str	r0, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800d9ae:	63dd      	str	r5, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800d9b0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800d9b2:	680e      	ldr	r6, [r1, #0]
        return color;
 800d9b4:	68c8      	ldr	r0, [r1, #12]
 800d9b6:	2e08      	cmp	r6, #8
 800d9b8:	d012      	beq.n	800d9e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800d9ba:	0a02      	lsrs	r2, r0, #8
        WRITE_REG(DMA2D->FGOR, 0);
 800d9bc:	2500      	movs	r5, #0
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800d9be:	0941      	lsrs	r1, r0, #5
 800d9c0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800d9c4:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800d9c8:	61dc      	str	r4, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800d9ca:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
        WRITE_REG(DMA2D->FGOR, 0);
 800d9ce:	611d      	str	r5, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800d9d0:	430a      	orrs	r2, r1

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 800d9d2:	490f      	ldr	r1, [pc, #60]	@ (800da10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800d9d4:	4302      	orrs	r2, r0
 800d9d6:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 800d9d8:	6019      	str	r1, [r3, #0]
    }
}
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800d9dc:	2400      	movs	r4, #0
 800d9de:	e7da      	b.n	800d996 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800d9e0:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800d9e2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800d9e4:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800d9e6:	4a0b      	ldr	r2, [pc, #44]	@ (800da14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
 800d9e8:	7f09      	ldrb	r1, [r1, #28]
 800d9ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 800d9ee:	490a      	ldr	r1, [pc, #40]	@ (800da18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800d9f0:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800d9f2:	6218      	str	r0, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800d9f4:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800d9f6:	60dd      	str	r5, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 800d9f8:	6019      	str	r1, [r3, #0]
}
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800d9fc:	2402      	movs	r4, #2
 800d9fe:	e7ca      	b.n	800d996 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 800da00:	4b06      	ldr	r3, [pc, #24]	@ (800da1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 800da02:	2190      	movs	r1, #144	@ 0x90
 800da04:	4a06      	ldr	r2, [pc, #24]	@ (800da20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 800da06:	4807      	ldr	r0, [pc, #28]	@ (800da24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 800da08:	f015 f9da 	bl	8022dc0 <__assert_func>
 800da0c:	52001000 	.word	0x52001000
 800da10:	00032301 	.word	0x00032301
 800da14:	00010009 	.word	0x00010009
 800da18:	00022301 	.word	0x00022301
 800da1c:	08029424 	.word	0x08029424
 800da20:	08029440 	.word	0x08029440
 800da24:	0802948c 	.word	0x0802948c

0800da28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800da2a:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
 800da2e:	f1be 0f0b 	cmp.w	lr, #11
 800da32:	f200 80ac 	bhi.w	800db8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 800da36:	e8df f00e 	tbb	[pc, lr]
 800da3a:	605b      	.short	0x605b
 800da3c:	aaaaaa46 	.word	0xaaaaaa46
 800da40:	060606aa 	.word	0x060606aa
 800da44:	0606      	.short	0x0606
        dma2dColorMode = DMA2D_INPUT_L8;
 800da46:	2605      	movs	r6, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800da48:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
 800da4c:	f1bc 0f0b 	cmp.w	ip, #11
 800da50:	f200 809d 	bhi.w	800db8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 800da54:	e8df f00c 	tbb	[pc, ip]
 800da58:	9b0d494e 	.word	0x9b0d494e
 800da5c:	069b9b9b 	.word	0x069b9b9b
 800da60:	06060606 	.word	0x06060606
    switch (format)
 800da64:	f1bc 0f0b 	cmp.w	ip, #11
 800da68:	f000 8097 	beq.w	800db9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x172>
        dma2dColorMode = DMA2D_INPUT_L8;
 800da6c:	2405      	movs	r4, #5
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800da6e:	2701      	movs	r7, #1
 800da70:	e001      	b.n	800da76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4e>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800da72:	2400      	movs	r4, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800da74:	4627      	mov	r7, r4
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800da76:	8a8b      	ldrh	r3, [r1, #20]
 800da78:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800da7a:	8b0d      	ldrh	r5, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800da7c:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800da7e:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800da80:	1aed      	subs	r5, r5, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800da82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800da86:	4b4b      	ldr	r3, [pc, #300]	@ (800dbb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
 800da88:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800da8a:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800da8c:	611d      	str	r5, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800da8e:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800da90:	690d      	ldr	r5, [r1, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800da92:	635f      	str	r7, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800da94:	6458      	str	r0, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800da96:	63dd      	str	r5, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800da98:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 800da9a:	680a      	ldr	r2, [r1, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800da9c:	7f0f      	ldrb	r7, [r1, #28]
    switch (blitOp.operation)
 800da9e:	2a80      	cmp	r2, #128	@ 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800daa0:	ea4f 6007 	mov.w	r0, r7, lsl #24
    switch (blitOp.operation)
 800daa4:	d02e      	beq.n	800db04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xdc>
 800daa6:	d810      	bhi.n	800daca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800daa8:	2a20      	cmp	r2, #32
 800daaa:	d028      	beq.n	800dafe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 800daac:	2a40      	cmp	r2, #64	@ 0x40
 800daae:	d026      	beq.n	800dafe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 800dab0:	2a04      	cmp	r2, #4
 800dab2:	d15a      	bne.n	800db6a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x142>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800dab4:	4330      	orrs	r0, r6
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800dab6:	4a40      	ldr	r2, [pc, #256]	@ (800dbb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800dab8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800dabc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800dabe:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800dac0:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800dac2:	601a      	str	r2, [r3, #0]
}
 800dac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800dac6:	2600      	movs	r6, #0
 800dac8:	e7be      	b.n	800da48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
    switch (blitOp.operation)
 800daca:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800dace:	d059      	beq.n	800db84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>
 800dad0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800dad4:	d149      	bne.n	800db6a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x142>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800dad6:	4a39      	ldr	r2, [pc, #228]	@ (800dbbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
 800dad8:	4302      	orrs	r2, r0
 800dada:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800dadc:	4a36      	ldr	r2, [pc, #216]	@ (800dbb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
 800dade:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800dae0:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800dae2:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800dae4:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800dae6:	601a      	str	r2, [r3, #0]
}
 800dae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
 800daea:	2401      	movs	r4, #1
 800daec:	4627      	mov	r7, r4
 800daee:	e7c2      	b.n	800da76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4e>
 800daf0:	2602      	movs	r6, #2
 800daf2:	e7a9      	b.n	800da48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
 800daf4:	2402      	movs	r4, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800daf6:	4627      	mov	r7, r4
 800daf8:	e7bd      	b.n	800da76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4e>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800dafa:	2601      	movs	r6, #1
 800dafc:	e7a4      	b.n	800da48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800dafe:	4330      	orrs	r0, r6
 800db00:	4b2c      	ldr	r3, [pc, #176]	@ (800dbb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
 800db02:	e7d8      	b.n	800dab6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8e>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800db04:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800db06:	4330      	orrs	r0, r6
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800db08:	1d11      	adds	r1, r2, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800db0a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800db0e:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800db10:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800db12:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800db14:	625c      	str	r4, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800db16:	615d      	str	r5, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 800db18:	b9b1      	cbnz	r1, 800db48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x120>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800db1a:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
 800db1c:	2701      	movs	r7, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800db1e:	69d8      	ldr	r0, [r3, #28]
 800db20:	4a27      	ldr	r2, [pc, #156]	@ (800dbc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>)
 800db22:	3901      	subs	r1, #1
 800db24:	4002      	ands	r2, r0
 800db26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800db2a:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800db2c:	4a21      	ldr	r2, [pc, #132]	@ (800dbb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
 800db2e:	69d3      	ldr	r3, [r2, #28]
 800db30:	f043 0320 	orr.w	r3, r3, #32
 800db34:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800db36:	69d3      	ldr	r3, [r2, #28]
 800db38:	069b      	lsls	r3, r3, #26
 800db3a:	d4fc      	bmi.n	800db36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10e>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800db3c:	2310      	movs	r3, #16
 800db3e:	6093      	str	r3, [r2, #8]
            if (blend)
 800db40:	b317      	cbz	r7, 800db88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800db42:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
 800db44:	6013      	str	r3, [r2, #0]
}
 800db46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db48:	2901      	cmp	r1, #1
 800db4a:	d12c      	bne.n	800dba6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800db4c:	8851      	ldrh	r1, [r2, #2]
                if (blitOp.alpha == 255)
 800db4e:	3fff      	subs	r7, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800db50:	69d8      	ldr	r0, [r3, #28]
 800db52:	4a1b      	ldr	r2, [pc, #108]	@ (800dbc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>)
 800db54:	f101 31ff 	add.w	r1, r1, #4294967295
                if (blitOp.alpha == 255)
 800db58:	bf18      	it	ne
 800db5a:	2701      	movne	r7, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800db5c:	4002      	ands	r2, r0
 800db5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800db62:	f042 0210 	orr.w	r2, r2, #16
 800db66:	61da      	str	r2, [r3, #28]
                break;
 800db68:	e7e0      	b.n	800db2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        if (blitOp.srcFormat != blitOp.dstFormat)
 800db6a:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800db6c:	ea46 0600 	orr.w	r6, r6, r0
 800db70:	4b10      	ldr	r3, [pc, #64]	@ (800dbb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
 800db72:	f446 3600 	orr.w	r6, r6, #131072	@ 0x20000
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800db76:	bf14      	ite	ne
 800db78:	4a12      	ldrne	r2, [pc, #72]	@ (800dbc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800db7a:	f242 3201 	movweq	r2, #8961	@ 0x2301
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800db7e:	61de      	str	r6, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800db80:	601a      	str	r2, [r3, #0]
}
 800db82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800db84:	4a10      	ldr	r2, [pc, #64]	@ (800dbc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
 800db86:	e7a7      	b.n	800dad8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800db88:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>)
 800db8a:	6013      	str	r3, [r2, #0]
}
 800db8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
 800db8e:	4b0f      	ldr	r3, [pc, #60]	@ (800dbcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 800db90:	216f      	movs	r1, #111	@ 0x6f
 800db92:	4a0f      	ldr	r2, [pc, #60]	@ (800dbd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>)
 800db94:	480f      	ldr	r0, [pc, #60]	@ (800dbd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
 800db96:	f015 f913 	bl	8022dc0 <__assert_func>
        assert(0 && "Unsupported Format!");
 800db9a:	4b0c      	ldr	r3, [pc, #48]	@ (800dbcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a4>)
 800db9c:	2190      	movs	r1, #144	@ 0x90
 800db9e:	4a0e      	ldr	r2, [pc, #56]	@ (800dbd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 800dba0:	480c      	ldr	r0, [pc, #48]	@ (800dbd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
 800dba2:	f015 f90d 	bl	8022dc0 <__assert_func>
                assert(0 && "Unsupported format");
 800dba6:	4b0d      	ldr	r3, [pc, #52]	@ (800dbdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>)
 800dba8:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800dbac:	4a0c      	ldr	r2, [pc, #48]	@ (800dbe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
 800dbae:	4809      	ldr	r0, [pc, #36]	@ (800dbd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
 800dbb0:	f015 f906 	bl	8022dc0 <__assert_func>
 800dbb4:	52001000 	.word	0x52001000
 800dbb8:	00022301 	.word	0x00022301
 800dbbc:	00020009 	.word	0x00020009
 800dbc0:	ffff00ef 	.word	0xffff00ef
 800dbc4:	00012301 	.word	0x00012301
 800dbc8:	0002000a 	.word	0x0002000a
 800dbcc:	08029424 	.word	0x08029424
 800dbd0:	080294b8 	.word	0x080294b8
 800dbd4:	0802948c 	.word	0x0802948c
 800dbd8:	08029440 	.word	0x08029440
 800dbdc:	08029504 	.word	0x08029504
 800dbe0:	08029520 	.word	0x08029520

0800dbe4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 800dbe4:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800dbe6:	4b0b      	ldr	r3, [pc, #44]	@ (800dc14 <_ZN8STM32DMAC1Ev+0x30>)
STM32DMA::STM32DMA()
 800dbe8:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800dbea:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800dbec:	2500      	movs	r5, #0
 800dbee:	300c      	adds	r0, #12
 800dbf0:	2260      	movs	r2, #96	@ 0x60
 800dbf2:	7235      	strb	r5, [r6, #8]
 800dbf4:	7275      	strb	r5, [r6, #9]
 800dbf6:	6070      	str	r0, [r6, #4]
 800dbf8:	f844 3b20 	str.w	r3, [r4], #32
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	f001 fd0f 	bl	800f620 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800dc02:	4621      	mov	r1, r4
 800dc04:	f506 635a 	add.w	r3, r6, #3488	@ 0xda0
        : color(0)
 800dc08:	60cd      	str	r5, [r1, #12]
 800dc0a:	3124      	adds	r1, #36	@ 0x24
 800dc0c:	4299      	cmp	r1, r3
 800dc0e:	d1fb      	bne.n	800dc08 <_ZN8STM32DMAC1Ev+0x24>
}
 800dc10:	4630      	mov	r0, r6
 800dc12:	bd70      	pop	{r4, r5, r6, pc}
 800dc14:	08029568 	.word	0x08029568

0800dc18 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800dc18:	4a03      	ldr	r2, [pc, #12]	@ (800dc28 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800dc1a:	6813      	ldr	r3, [r2, #0]
 800dc1c:	07db      	lsls	r3, r3, #31
 800dc1e:	d4fc      	bmi.n	800dc1a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dc20:	2323      	movs	r3, #35	@ 0x23
 800dc22:	6093      	str	r3, [r2, #8]
}
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	52001000 	.word	0x52001000

0800dc2c <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800dc2c:	4a0b      	ldr	r2, [pc, #44]	@ (800dc5c <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 800dc2e:	6953      	ldr	r3, [r2, #20]
    if ( dsize > 0 ) { 
 800dc30:	03db      	lsls	r3, r3, #15
 800dc32:	d501      	bpl.n	800dc38 <_ZN8touchgfx5paint9flushLineEPmi+0xc>
 800dc34:	2900      	cmp	r1, #0
 800dc36:	dc00      	bgt.n	800dc3a <_ZN8touchgfx5paint9flushLineEPmi+0xe>
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 800dc38:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800dc3a:	f000 031f 	and.w	r3, r0, #31
 800dc3e:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800dc46:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800dc4a:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 800dc4c:	1a0b      	subs	r3, r1, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	dcf9      	bgt.n	800dc46 <_ZN8touchgfx5paint9flushLineEPmi+0x1a>
 800dc52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	4770      	bx	lr
 800dc5c:	e000ed00 	.word	0xe000ed00

0800dc60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 800dc60:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800dc62:	4c10      	ldr	r4, [pc, #64]	@ (800dca4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x44>)
 800dc64:	6825      	ldr	r5, [r4, #0]
 800dc66:	07ed      	lsls	r5, r5, #31
 800dc68:	d4fc      	bmi.n	800dc64 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dc6a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800dc6c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800dc6e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dc70:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800dc72:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 800dc76:	f04f 0502 	mov.w	r5, #2
 800dc7a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800dc7c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800dc7e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800dc80:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 800dc82:	d009      	beq.n	800dc98 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x38>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dc84:	061b      	lsls	r3, r3, #24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800dc86:	4a08      	ldr	r2, [pc, #32]	@ (800dca8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x48>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dc88:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 800dc8c:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800dc8e:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800dc90:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800dc92:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800dc94:	bc30      	pop	{r4, r5}
 800dc96:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dc98:	4a04      	ldr	r2, [pc, #16]	@ (800dcac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>)
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800dc9a:	2301      	movs	r3, #1
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dc9c:	61e2      	str	r2, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800dc9e:	6023      	str	r3, [r4, #0]
}
 800dca0:	bc30      	pop	{r4, r5}
 800dca2:	4770      	bx	lr
 800dca4:	52001000 	.word	0x52001000
 800dca8:	00020001 	.word	0x00020001
 800dcac:	ff020002 	.word	0xff020002

0800dcb0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 800dcb0:	b470      	push	{r4, r5, r6}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800dcb2:	4c0c      	ldr	r4, [pc, #48]	@ (800dce4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x34>)
 800dcb4:	6825      	ldr	r5, [r4, #0]
 800dcb6:	07ed      	lsls	r5, r5, #31
 800dcb8:	d4fc      	bmi.n	800dcb4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x4>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800dcba:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 800dcbc:	2502      	movs	r5, #2

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dcbe:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dcc0:	2623      	movs	r6, #35	@ 0x23
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800dcc2:	f042 0201 	orr.w	r2, r2, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dcc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800dcca:	60a6      	str	r6, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 800dccc:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800dcce:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800dcd0:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800dcd2:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800dcd4:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800dcd6:	4b04      	ldr	r3, [pc, #16]	@ (800dce8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x38>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800dcd8:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800dcda:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800dcdc:	6023      	str	r3, [r4, #0]
}
 800dcde:	bc70      	pop	{r4, r5, r6}
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop
 800dce4:	52001000 	.word	0x52001000
 800dce8:	00020001 	.word	0x00020001

0800dcec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800dcec:	2001      	movs	r0, #1
 800dcee:	4770      	bx	lr

0800dcf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800dcf0:	200c      	movs	r0, #12
 800dcf2:	4770      	bx	lr

0800dcf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800dcf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dcf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
 800dcfc:	3008      	adds	r0, #8
 800dcfe:	4770      	bx	lr

0800dd00 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800dd00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dd04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
 800dd08:	3008      	adds	r0, #8
 800dd0a:	4770      	bx	lr

0800dd0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800dd0c:	2001      	movs	r0, #1
 800dd0e:	4770      	bx	lr

0800dd10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800dd10:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop

0800dd18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800dd18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dd1c:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    }
 800dd20:	3008      	adds	r0, #8
 800dd22:	4770      	bx	lr

0800dd24 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800dd24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dd28:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    }
 800dd2c:	3008      	adds	r0, #8
 800dd2e:	4770      	bx	lr

0800dd30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800dd30:	2001      	movs	r0, #1
 800dd32:	4770      	bx	lr

0800dd34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800dd34:	2010      	movs	r0, #16
 800dd36:	4770      	bx	lr

0800dd38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800dd38:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800dd3c:	3008      	adds	r0, #8
 800dd3e:	4770      	bx	lr

0800dd40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800dd40:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800dd44:	3008      	adds	r0, #8
 800dd46:	4770      	bx	lr

0800dd48 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoscreenScreenNoTransition();
 800dd48:	4608      	mov	r0, r1
 800dd4a:	f7ff b8cf 	b.w	800ceec <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
 800dd4e:	bf00      	nop

0800dd50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800dd50:	4b03      	ldr	r3, [pc, #12]	@ (800dd60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800dd52:	b510      	push	{r4, lr}
 800dd54:	4604      	mov	r4, r0
 800dd56:	6003      	str	r3, [r0, #0]
 800dd58:	f000 faa7 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	bd10      	pop	{r4, pc}
 800dd60:	08029620 	.word	0x08029620

0800dd64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800dd64:	4b05      	ldr	r3, [pc, #20]	@ (800dd7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800dd66:	b510      	push	{r4, lr}
 800dd68:	4604      	mov	r4, r0
 800dd6a:	6003      	str	r3, [r0, #0]
 800dd6c:	f000 fa9d 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800dd70:	2114      	movs	r1, #20
 800dd72:	4620      	mov	r0, r4
 800dd74:	f014 fff6 	bl	8022d64 <_ZdlPvj>
 800dd78:	4620      	mov	r0, r4
 800dd7a:	bd10      	pop	{r4, pc}
 800dd7c:	08029620 	.word	0x08029620

0800dd80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800dd80:	4b03      	ldr	r3, [pc, #12]	@ (800dd90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800dd82:	b510      	push	{r4, lr}
 800dd84:	4604      	mov	r4, r0
 800dd86:	6003      	str	r3, [r0, #0]
 800dd88:	f000 fa8f 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	bd10      	pop	{r4, pc}
 800dd90:	080295ec 	.word	0x080295ec

0800dd94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800dd94:	4b06      	ldr	r3, [pc, #24]	@ (800ddb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 800dd96:	b510      	push	{r4, lr}
 800dd98:	4604      	mov	r4, r0
 800dd9a:	6003      	str	r3, [r0, #0]
 800dd9c:	f000 fa85 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800dda0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800dda4:	4620      	mov	r0, r4
 800dda6:	f014 ffdd 	bl	8022d64 <_ZdlPvj>
 800ddaa:	4620      	mov	r0, r4
 800ddac:	bd10      	pop	{r4, pc}
 800ddae:	bf00      	nop
 800ddb0:	080295ec 	.word	0x080295ec

0800ddb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800ddb4:	4b03      	ldr	r3, [pc, #12]	@ (800ddc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800ddb6:	b510      	push	{r4, lr}
 800ddb8:	4604      	mov	r4, r0
 800ddba:	6003      	str	r3, [r0, #0]
 800ddbc:	f000 fa75 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	bd10      	pop	{r4, pc}
 800ddc4:	080295b8 	.word	0x080295b8

0800ddc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800ddc8:	4b05      	ldr	r3, [pc, #20]	@ (800dde0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	6003      	str	r3, [r0, #0]
 800ddd0:	f000 fa6b 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ddd4:	2118      	movs	r1, #24
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	f014 ffc4 	bl	8022d64 <_ZdlPvj>
 800dddc:	4620      	mov	r0, r4
 800ddde:	bd10      	pop	{r4, pc}
 800dde0:	080295b8 	.word	0x080295b8

0800dde4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800dde4:	b510      	push	{r4, lr}
 800dde6:	4a0c      	ldr	r2, [pc, #48]	@ (800de18 <_ZN12FrontendHeapD1Ev+0x34>)
 800dde8:	4604      	mov	r4, r0
 800ddea:	4b0c      	ldr	r3, [pc, #48]	@ (800de1c <_ZN12FrontendHeapD1Ev+0x38>)
 800ddec:	f500 70da 	add.w	r0, r0, #436	@ 0x1b4
 800ddf0:	6022      	str	r2, [r4, #0]
 800ddf2:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
 800ddf6:	f000 fa58 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	4b08      	ldr	r3, [pc, #32]	@ (800de20 <_ZN12FrontendHeapD1Ev+0x3c>)
 800ddfe:	f840 3f2c 	str.w	r3, [r0, #44]!
 800de02:	f000 fa52 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de06:	4620      	mov	r0, r4
 800de08:	4b06      	ldr	r3, [pc, #24]	@ (800de24 <_ZN12FrontendHeapD1Ev+0x40>)
 800de0a:	f840 3f14 	str.w	r3, [r0, #20]!
 800de0e:	f000 fa4c 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de12:	4620      	mov	r0, r4
 800de14:	bd10      	pop	{r4, pc}
 800de16:	bf00      	nop
 800de18:	08029654 	.word	0x08029654
 800de1c:	08029620 	.word	0x08029620
 800de20:	080295ec 	.word	0x080295ec
 800de24:	080295b8 	.word	0x080295b8

0800de28 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800de28:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 800de2a:	4c0c      	ldr	r4, [pc, #48]	@ (800de5c <__tcf_0+0x34>)
 800de2c:	4a0c      	ldr	r2, [pc, #48]	@ (800de60 <__tcf_0+0x38>)
 800de2e:	4b0d      	ldr	r3, [pc, #52]	@ (800de64 <__tcf_0+0x3c>)
 800de30:	f504 70da 	add.w	r0, r4, #436	@ 0x1b4
 800de34:	6022      	str	r2, [r4, #0]
 800de36:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
 800de3a:	f000 fa36 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de3e:	4620      	mov	r0, r4
 800de40:	4b09      	ldr	r3, [pc, #36]	@ (800de68 <__tcf_0+0x40>)
 800de42:	f840 3f2c 	str.w	r3, [r0, #44]!
 800de46:	f000 fa30 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de4a:	4620      	mov	r0, r4
 800de4c:	4b07      	ldr	r3, [pc, #28]	@ (800de6c <__tcf_0+0x44>)
        static FrontendHeap instance;
 800de4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de52:	f840 3f14 	str.w	r3, [r0, #20]!
 800de56:	f000 ba28 	b.w	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de5a:	bf00      	nop
 800de5c:	2400a74c 	.word	0x2400a74c
 800de60:	08029654 	.word	0x08029654
 800de64:	08029620 	.word	0x08029620
 800de68:	080295ec 	.word	0x080295ec
 800de6c:	080295b8 	.word	0x080295b8

0800de70 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800de70:	b510      	push	{r4, lr}
 800de72:	4a0e      	ldr	r2, [pc, #56]	@ (800deac <_ZN12FrontendHeapD0Ev+0x3c>)
 800de74:	4604      	mov	r4, r0
 800de76:	4b0e      	ldr	r3, [pc, #56]	@ (800deb0 <_ZN12FrontendHeapD0Ev+0x40>)
 800de78:	f500 70da 	add.w	r0, r0, #436	@ 0x1b4
 800de7c:	6022      	str	r2, [r4, #0]
 800de7e:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
 800de82:	f000 fa12 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de86:	4620      	mov	r0, r4
 800de88:	4b0a      	ldr	r3, [pc, #40]	@ (800deb4 <_ZN12FrontendHeapD0Ev+0x44>)
 800de8a:	f840 3f2c 	str.w	r3, [r0, #44]!
 800de8e:	f000 fa0c 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de92:	4b09      	ldr	r3, [pc, #36]	@ (800deb8 <_ZN12FrontendHeapD0Ev+0x48>)
 800de94:	4620      	mov	r0, r4
 800de96:	f840 3f14 	str.w	r3, [r0, #20]!
 800de9a:	f000 fa06 	bl	800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f44f 714a 	mov.w	r1, #808	@ 0x328
 800dea4:	f014 ff5e 	bl	8022d64 <_ZdlPvj>
 800dea8:	4620      	mov	r0, r4
 800deaa:	bd10      	pop	{r4, pc}
 800deac:	08029654 	.word	0x08029654
 800deb0:	08029620 	.word	0x08029620
 800deb4:	080295ec 	.word	0x080295ec
 800deb8:	080295b8 	.word	0x080295b8

0800debc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 800debc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec0:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800dec2:	2400      	movs	r4, #0
 800dec4:	f7ff fa22 	bl	800d30c <_ZN14BitmapDatabase11getInstanceEv>
 800dec8:	4605      	mov	r5, r0
 800deca:	f7ff fa23 	bl	800d314 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800dece:	4623      	mov	r3, r4
 800ded0:	4601      	mov	r1, r0
 800ded2:	4622      	mov	r2, r4
 800ded4:	4628      	mov	r0, r5
 800ded6:	9400      	str	r4, [sp, #0]
 800ded8:	f006 fc20 	bl	801471c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800dedc:	4b28      	ldr	r3, [pc, #160]	@ (800df80 <touchgfx_init+0xc4>)
 800dede:	4a29      	ldr	r2, [pc, #164]	@ (800df84 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800dee0:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800dee2:	4c29      	ldr	r4, [pc, #164]	@ (800df88 <touchgfx_init+0xcc>)
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	f7ff fa9d 	bl	800d424 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800deea:	4828      	ldr	r0, [pc, #160]	@ (800df8c <touchgfx_init+0xd0>)
 800deec:	f006 fb7e 	bl	80145ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	f3bf 8f5b 	dmb	ish
 800def6:	07db      	lsls	r3, r3, #31
 800def8:	d505      	bpl.n	800df06 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800defa:	4825      	ldr	r0, [pc, #148]	@ (800df90 <touchgfx_init+0xd4>)
}
 800defc:	b002      	add	sp, #8
 800defe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800df02:	f7ff bbad 	b.w	800d660 <_ZN11TouchGFXHAL10initializeEv>
 800df06:	4620      	mov	r0, r4
 800df08:	f014 ff2e 	bl	8022d68 <__cxa_guard_acquire>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d0f4      	beq.n	800defa <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800df10:	4d20      	ldr	r5, [pc, #128]	@ (800df94 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800df12:	4b21      	ldr	r3, [pc, #132]	@ (800df98 <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800df14:	f505 76e6 	add.w	r6, r5, #460	@ 0x1cc
        : presenterStorage(pres),
 800df18:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
 800df1c:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
          transitionStorage(tra),
 800df20:	f505 77da 	add.w	r7, r5, #436	@ 0x1b4
 800df24:	602b      	str	r3, [r5, #0]
 800df26:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
 800df28:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
 800df2a:	e9c5 0801 	strd	r0, r8, [r5, #4]
 800df2e:	f000 f9bd 	bl	800e2ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 800df32:	4b1a      	ldr	r3, [pc, #104]	@ (800df9c <touchgfx_init+0xe0>)
 800df34:	4640      	mov	r0, r8
 800df36:	616b      	str	r3, [r5, #20]
 800df38:	f000 f9b8 	bl	800e2ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 800df3c:	4b18      	ldr	r3, [pc, #96]	@ (800dfa0 <touchgfx_init+0xe4>)
 800df3e:	4638      	mov	r0, r7
 800df40:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800df42:	f000 f9b3 	bl	800e2ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 800df46:	4b17      	ldr	r3, [pc, #92]	@ (800dfa4 <touchgfx_init+0xe8>)
 800df48:	f505 70e4 	add.w	r0, r5, #456	@ 0x1c8
 800df4c:	f8c5 31b4 	str.w	r3, [r5, #436]	@ 0x1b4
 800df50:	f7ff faec 	bl	800d52c <_ZN5ModelC1Ev>
 800df54:	462a      	mov	r2, r5
 800df56:	f505 71e4 	add.w	r1, r5, #456	@ 0x1c8
 800df5a:	4630      	mov	r0, r6
 800df5c:	f7ff fadc 	bl	800d518 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800df60:	4630      	mov	r0, r6
 800df62:	f7fe ffc3 	bl	800ceec <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
        static FrontendHeap instance;
 800df66:	4810      	ldr	r0, [pc, #64]	@ (800dfa8 <touchgfx_init+0xec>)
 800df68:	f014 ff48 	bl	8022dfc <atexit>
 800df6c:	4620      	mov	r0, r4
 800df6e:	f014 ff07 	bl	8022d80 <__cxa_guard_release>
 800df72:	4807      	ldr	r0, [pc, #28]	@ (800df90 <touchgfx_init+0xd4>)
}
 800df74:	b002      	add	sp, #8
 800df76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800df7a:	f7ff bb71 	b.w	800d660 <_ZN11TouchGFXHAL10initializeEv>
 800df7e:	bf00      	nop
 800df80:	2400aae0 	.word	0x2400aae0
 800df84:	24009914 	.word	0x24009914
 800df88:	2400a748 	.word	0x2400a748
 800df8c:	2400002c 	.word	0x2400002c
 800df90:	24009898 	.word	0x24009898
 800df94:	2400a74c 	.word	0x2400a74c
 800df98:	08029654 	.word	0x08029654
 800df9c:	080295b8 	.word	0x080295b8
 800dfa0:	080295ec 	.word	0x080295ec
 800dfa4:	08029620 	.word	0x08029620
 800dfa8:	0800de29 	.word	0x0800de29

0800dfac <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop

0800dfb0 <_GLOBAL__sub_I_touchgfx_init>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 800dfb0:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800dfb2:	4e22      	ldr	r6, [pc, #136]	@ (800e03c <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 800dfb4:	4b22      	ldr	r3, [pc, #136]	@ (800e040 <_GLOBAL__sub_I_touchgfx_init+0x90>)
 800dfb6:	4c23      	ldr	r4, [pc, #140]	@ (800e044 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 800dfb8:	4630      	mov	r0, r6
static LCD16bpp display;
 800dfba:	4d23      	ldr	r5, [pc, #140]	@ (800e048 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800dfbc:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800dfbe:	f7ff fe11 	bl	800dbe4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f00b fcbc 	bl	8019940 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 800dfc8:	4b20      	ldr	r3, [pc, #128]	@ (800e04c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
          mcuInstrumentation(0),
 800dfca:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800dfcc:	f44f 7048 	mov.w	r0, #800	@ 0x320
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800dfd0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800dfd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dfd6:	861a      	strh	r2, [r3, #48]	@ 0x30
        : x(0), y(0), width(0), height(0)
 800dfd8:	655a      	str	r2, [r3, #84]	@ 0x54
          useAuxiliaryLCD(false),
 800dfda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          lastY(0),
 800dfde:	665a      	str	r2, [r3, #100]	@ 0x64
          vSyncCompensationEnabled(false),
 800dfe0:	66da      	str	r2, [r3, #108]	@ 0x6c
          updateMCULoad(0),
 800dfe2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 800dfe6:	675a      	str	r2, [r3, #116]	@ 0x74
          mcuInstrumentation(0),
 800dfe8:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
 800dfec:	4c18      	ldr	r4, [pc, #96]	@ (800e050 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 800dfee:	669c      	str	r4, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800dff0:	4c18      	ldr	r4, [pc, #96]	@ (800e054 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 800dff2:	679c      	str	r4, [r3, #120]	@ 0x78
        instance = this;
 800dff4:	4c18      	ldr	r4, [pc, #96]	@ (800e058 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 800dff6:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800dff8:	4c18      	ldr	r4, [pc, #96]	@ (800e05c <_GLOBAL__sub_I_touchgfx_init+0xac>)
 800dffa:	8020      	strh	r0, [r4, #0]
 800dffc:	4c18      	ldr	r4, [pc, #96]	@ (800e060 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lcdRef(display),
 800dffe:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800e002:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800e004:	f44f 7580 	mov.w	r5, #256	@ 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800e008:	4816      	ldr	r0, [pc, #88]	@ (800e064 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
 800e00a:	4c17      	ldr	r4, [pc, #92]	@ (800e068 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800e00c:	649d      	str	r5, [r3, #72]	@ 0x48
          frameBufferAllocator(0),
 800e00e:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
 800e012:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
 800e016:	e9c3 2209 	strd	r2, r2, [r3, #36]	@ 0x24
          frameBuffer0(0),
 800e01a:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 800e01e:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
 800e022:	e9c3 2213 	strd	r2, r2, [r3, #76]	@ 0x4c
          lastX(0),
 800e026:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800e02a:	8021      	strh	r1, [r4, #0]
 800e02c:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 800e02e:	480f      	ldr	r0, [pc, #60]	@ (800e06c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800e030:	490f      	ldr	r1, [pc, #60]	@ (800e070 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800e032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        DISPLAY_ROTATION = rotate0;
 800e036:	7002      	strb	r2, [r0, #0]
 800e038:	6019      	str	r1, [r3, #0]
}
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
 800e03c:	240099a4 	.word	0x240099a4
 800e040:	080290dc 	.word	0x080290dc
 800e044:	2400a744 	.word	0x2400a744
 800e048:	24009918 	.word	0x24009918
 800e04c:	24009898 	.word	0x24009898
 800e050:	01000001 	.word	0x01000001
 800e054:	01010000 	.word	0x01010000
 800e058:	2400aa84 	.word	0x2400aa84
 800e05c:	2400aa78 	.word	0x2400aa78
 800e060:	2400aa7e 	.word	0x2400aa7e
 800e064:	2400aa80 	.word	0x2400aa80
 800e068:	2400aa7a 	.word	0x2400aa7a
 800e06c:	2400aa7c 	.word	0x2400aa7c
 800e070:	08029268 	.word	0x08029268

0800e074 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800e074:	4801      	ldr	r0, [pc, #4]	@ (800e07c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800e076:	f7ff bc17 	b.w	800d8a8 <_ZN8STM32DMAD1Ev>
 800e07a:	bf00      	nop
 800e07c:	240099a4 	.word	0x240099a4

0800e080 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e080:	4b03      	ldr	r3, [pc, #12]	@ (800e090 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800e082:	2290      	movs	r2, #144	@ 0x90
 800e084:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800e088:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	e000e100 	.word	0xe000e100

0800e094 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800e094:	4a09      	ldr	r2, [pc, #36]	@ (800e0bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800e096:	490a      	ldr	r1, [pc, #40]	@ (800e0c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800e098:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800e09a:	480a      	ldr	r0, [pc, #40]	@ (800e0c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800e09c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800e0a6:	6911      	ldr	r1, [r2, #16]
 800e0a8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800e0ac:	3901      	subs	r1, #1
 800e0ae:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800e0b0:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800e0b2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800e0b4:	f043 0301 	orr.w	r3, r3, #1
 800e0b8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800e0ba:	4770      	bx	lr
 800e0bc:	50001000 	.word	0x50001000
 800e0c0:	2400aa76 	.word	0x2400aa76
 800e0c4:	2400aa74 	.word	0x2400aa74

0800e0c8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800e0c8:	4b01      	ldr	r3, [pc, #4]	@ (800e0d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800e0ca:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 800e0ce:	4770      	bx	lr
 800e0d0:	50001000 	.word	0x50001000

0800e0d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800e0d4:	4b02      	ldr	r3, [pc, #8]	@ (800e0e0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800e0d6:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800e0d8:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800e0dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800e0de:	4770      	bx	lr
 800e0e0:	50001000 	.word	0x50001000

0800e0e4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800e0e4:	f000 bbde 	b.w	800e8a4 <_ZN8touchgfx3HAL10beginFrameEv>

0800e0e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 800e0e8:	f000 bbe8 	b.w	800e8bc <_ZN8touchgfx3HAL8endFrameEv>

0800e0ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800e0ec:	f000 bba4 	b.w	800e838 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

0800e0f0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 800e0f0:	f000 bd13 	b.w	800eb1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800e0f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800e0f4:	4814      	ldr	r0, [pc, #80]	@ (800e148 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
 800e0f6:	6943      	ldr	r3, [r0, #20]
 800e0f8:	03d9      	lsls	r1, r3, #15
 800e0fa:	d523      	bpl.n	800e144 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800e0fc:	2300      	movs	r3, #0
{
 800e0fe:	b510      	push	{r4, lr}
 800e100:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e104:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800e108:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e10c:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e110:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e114:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 800e118:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e11c:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e120:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e122:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 800e126:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800e128:	f8c0 2274 	str.w	r2, [r0, #628]	@ 0x274
      } while (ways-- != 0U);
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	d1f8      	bne.n	800e122 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
 800e130:	f1ac 0c20 	sub.w	ip, ip, #32
 800e134:	f11c 0f20 	cmn.w	ip, #32
 800e138:	d1f0      	bne.n	800e11c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
 800e13a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e13e:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800e142:	bd10      	pop	{r4, pc}
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	e000ed00 	.word	0xe000ed00

0800e14c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e14c:	4b08      	ldr	r3, [pc, #32]	@ (800e170 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800e14e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800e152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800e156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800e166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e16a:	f3bf 8f6f 	isb	sy
}
 800e16e:	4770      	bx	lr
 800e170:	e000e100 	.word	0xe000e100

0800e174 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e174:	4b03      	ldr	r3, [pc, #12]	@ (800e184 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800e176:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800e17a:	609a      	str	r2, [r3, #8]
 800e17c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e180:	609a      	str	r2, [r3, #8]
}
 800e182:	4770      	bx	lr
 800e184:	e000e100 	.word	0xe000e100

0800e188 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	4604      	mov	r4, r0
    HAL::initialize();
 800e18c:	f000 fba3 	bl	800e8d6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800e194:	f003 fdc2 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 800e198:	4601      	mov	r1, r0
 800e19a:	4620      	mov	r0, r4
 800e19c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC00BB800, (void*)0);
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4a12      	ldr	r2, [pc, #72]	@ (800e1ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 800e1a2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800e1a6:	4295      	cmp	r5, r2
 800e1a8:	d111      	bne.n	800e1ce <_ZN20TouchGFXGeneratedHAL10initializeEv+0x46>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e1aa:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 800e1ae:	4a10      	ldr	r2, [pc, #64]	@ (800e1f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
        setAnimationStorage(animationStorage);
 800e1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e1b4:	490f      	ldr	r1, [pc, #60]	@ (800e1f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e1b6:	e9c4 020f 	strd	r0, r2, [r4, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e1ba:	4a0f      	ldr	r2, [pc, #60]	@ (800e1f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 800e1bc:	2001      	movs	r0, #1
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	7008      	strb	r0, [r1, #0]
        setAnimationStorage(animationStorage);
 800e1c2:	d10d      	bne.n	800e1e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e1c4:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e1c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e1fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e1c8:	6463      	str	r3, [r4, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e1ca:	7013      	strb	r3, [r2, #0]
}
 800e1cc:	bd70      	pop	{r4, r5, r6, pc}
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC00BB800, (void*)0);
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	46ac      	mov	ip, r5
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4a06      	ldr	r2, [pc, #24]	@ (800e1f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 800e1d6:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
}
 800e1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC00BB800, (void*)0);
 800e1de:	4760      	bx	ip
        setAnimationStorage(animationStorage);
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	2100      	movs	r1, #0
}
 800e1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1e8:	4718      	bx	r3
 800e1ea:	bf00      	nop
 800e1ec:	0800d76d 	.word	0x0800d76d
 800e1f0:	c00bb800 	.word	0xc00bb800
 800e1f4:	2400aa82 	.word	0x2400aa82
 800e1f8:	0800d631 	.word	0x0800d631
 800e1fc:	2400aa83 	.word	0x2400aa83

0800e200 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800e200:	b510      	push	{r4, lr}
        return instance;
 800e202:	4c14      	ldr	r4, [pc, #80]	@ (800e254 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	b323      	cbz	r3, 800e252 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800e208:	4b13      	ldr	r3, [pc, #76]	@ (800e258 <HAL_LTDC_LineEventCallback+0x58>)
 800e20a:	4a14      	ldr	r2, [pc, #80]	@ (800e25c <HAL_LTDC_LineEventCallback+0x5c>)
 800e20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e20e:	8811      	ldrh	r1, [r2, #0]
 800e210:	428b      	cmp	r3, r1
 800e212:	d00a      	beq.n	800e22a <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800e214:	f7f5 ff34 	bl	8004080 <HAL_LTDC_ProgramLineEvent>
 800e218:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800e21a:	6803      	ldr	r3, [r0, #0]
 800e21c:	6a1b      	ldr	r3, [r3, #32]
 800e21e:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 800e220:	2000      	movs	r0, #0
        }
    }
 800e222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800e226:	f7ff b9fb 	b.w	800d620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800e22a:	4b0d      	ldr	r3, [pc, #52]	@ (800e260 <HAL_LTDC_LineEventCallback+0x60>)
 800e22c:	8819      	ldrh	r1, [r3, #0]
 800e22e:	f7f5 ff27 	bl	8004080 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800e232:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800e234:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e238:	3301      	adds	r3, #1
 800e23a:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            OSWrappers::signalVSync();
 800e23e:	f7ff fb07 	bl	800d850 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 800e242:	6820      	ldr	r0, [r4, #0]
 800e244:	f001 f8ae 	bl	800f3a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800e248:	2000      	movs	r0, #0
    }
 800e24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800e24e:	f7ff b9e5 	b.w	800d61c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
 800e252:	bd10      	pop	{r4, pc}
 800e254:	2400aa84 	.word	0x2400aa84
 800e258:	50001000 	.word	0x50001000
 800e25c:	2400aa76 	.word	0x2400aa76
 800e260:	2400aa74 	.word	0x2400aa74

0800e264 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800e264:	8880      	ldrh	r0, [r0, #4]
 800e266:	4770      	bx	lr

0800e268 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	6803      	ldr	r3, [r0, #0]
 800e26c:	460c      	mov	r4, r1
 800e26e:	2100      	movs	r1, #0
 800e270:	4605      	mov	r5, r0
 800e272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e274:	4798      	blx	r3
 800e276:	4606      	mov	r6, r0
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	4628      	mov	r0, r5
 800e27c:	1ba4      	subs	r4, r4, r6
 800e27e:	6a1b      	ldr	r3, [r3, #32]
 800e280:	b2a4      	uxth	r4, r4
 800e282:	4798      	blx	r3
 800e284:	fbb4 f0f0 	udiv	r0, r4, r0
 800e288:	bd70      	pop	{r4, r5, r6, pc}

0800e28a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800e28a:	2300      	movs	r3, #0
 800e28c:	8083      	strh	r3, [r0, #4]
 800e28e:	4770      	bx	lr

0800e290 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e290:	b510      	push	{r4, lr}
 800e292:	6803      	ldr	r3, [r0, #0]
 800e294:	4604      	mov	r4, r0
 800e296:	8881      	ldrh	r1, [r0, #4]
 800e298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29a:	4798      	blx	r3
 800e29c:	88a3      	ldrh	r3, [r4, #4]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	80a3      	strh	r3, [r4, #4]
 800e2a2:	bd10      	pop	{r4, pc}

0800e2a4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e2a4:	6803      	ldr	r3, [r0, #0]
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a8:	4718      	bx	r3

0800e2aa <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e2aa:	4770      	bx	lr

0800e2ac <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e2ac:	4a02      	ldr	r2, [pc, #8]	@ (800e2b8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e2ae:	6002      	str	r2, [r0, #0]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	8082      	strh	r2, [r0, #4]
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	08029668 	.word	0x08029668

0800e2bc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
 800e2bc:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800e2c0:	b112      	cbz	r2, 800e2c8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	695b      	ldr	r3, [r3, #20]
 800e2c6:	4718      	bx	r3
 800e2c8:	4770      	bx	lr

0800e2ca <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
 800e2ca:	4770      	bx	lr

0800e2cc <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
 800e2cc:	4770      	bx	lr

0800e2ce <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
 800e2ce:	4770      	bx	lr

0800e2d0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
 800e2d0:	4770      	bx	lr

0800e2d2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
 800e2d2:	4770      	bx	lr

0800e2d4 <_ZN8touchgfx8Drawable6moveToEss>:
 800e2d4:	88c3      	ldrh	r3, [r0, #6]
 800e2d6:	1ad2      	subs	r2, r2, r3
 800e2d8:	8883      	ldrh	r3, [r0, #4]
 800e2da:	1ac9      	subs	r1, r1, r3
 800e2dc:	6803      	ldr	r3, [r0, #0]
 800e2de:	b212      	sxth	r2, r2
 800e2e0:	b209      	sxth	r1, r1
 800e2e2:	b410      	push	{r4}
 800e2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ea:	4718      	bx	r3

0800e2ec <_ZN8touchgfx9Container13getFirstChildEv>:
 800e2ec:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e2ee:	4770      	bx	lr

0800e2f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e2f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	b12b      	cbz	r3, 800e302 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e2f6:	b920      	cbnz	r0, 800e302 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e2f8:	1a5a      	subs	r2, r3, r1
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	4250      	negs	r0, r2
 800e2fe:	4150      	adcs	r0, r2
 800e300:	e7f8      	b.n	800e2f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e302:	4770      	bx	lr

0800e304 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800e304:	2300      	movs	r3, #0
 800e306:	6148      	str	r0, [r1, #20]
 800e308:	618b      	str	r3, [r1, #24]
 800e30a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e30c:	b913      	cbnz	r3, 800e314 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800e30e:	6281      	str	r1, [r0, #40]	@ 0x28
 800e310:	4770      	bx	lr
 800e312:	4613      	mov	r3, r2
 800e314:	699a      	ldr	r2, [r3, #24]
 800e316:	2a00      	cmp	r2, #0
 800e318:	d1fb      	bne.n	800e312 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800e31a:	6199      	str	r1, [r3, #24]
 800e31c:	4770      	bx	lr

0800e31e <_ZN8touchgfx9Container9removeAllEv>:
 800e31e:	2200      	movs	r2, #0
 800e320:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e322:	b123      	cbz	r3, 800e32e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e324:	6999      	ldr	r1, [r3, #24]
 800e326:	6281      	str	r1, [r0, #40]	@ 0x28
 800e328:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e32c:	e7f8      	b.n	800e320 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e32e:	4770      	bx	lr

0800e330 <_ZN8touchgfx9Container6unlinkEv>:
 800e330:	2300      	movs	r3, #0
 800e332:	6283      	str	r3, [r0, #40]	@ 0x28
 800e334:	4770      	bx	lr

0800e336 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e336:	2200      	movs	r2, #0
 800e338:	8002      	strh	r2, [r0, #0]
 800e33a:	8042      	strh	r2, [r0, #2]
 800e33c:	8082      	strh	r2, [r0, #4]
 800e33e:	80c2      	strh	r2, [r0, #6]
 800e340:	4770      	bx	lr

0800e342 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e342:	b570      	push	{r4, r5, r6, lr}
 800e344:	460d      	mov	r5, r1
 800e346:	4616      	mov	r6, r2
 800e348:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e34a:	b13c      	cbz	r4, 800e35c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e34c:	6823      	ldr	r3, [r4, #0]
 800e34e:	4620      	mov	r0, r4
 800e350:	4632      	mov	r2, r6
 800e352:	4629      	mov	r1, r5
 800e354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e356:	4798      	blx	r3
 800e358:	69a4      	ldr	r4, [r4, #24]
 800e35a:	e7f6      	b.n	800e34a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e35c:	bd70      	pop	{r4, r5, r6, pc}

0800e35e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e35e:	b538      	push	{r3, r4, r5, lr}
 800e360:	460d      	mov	r5, r1
 800e362:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e364:	b134      	cbz	r4, 800e374 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e366:	682b      	ldr	r3, [r5, #0]
 800e368:	4621      	mov	r1, r4
 800e36a:	4628      	mov	r0, r5
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	4798      	blx	r3
 800e370:	69a4      	ldr	r4, [r4, #24]
 800e372:	e7f7      	b.n	800e364 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e374:	bd38      	pop	{r3, r4, r5, pc}

0800e376 <_ZN8touchgfx9ContainerD1Ev>:
 800e376:	4770      	bx	lr

0800e378 <_ZN8touchgfx9ContainerD0Ev>:
 800e378:	b510      	push	{r4, lr}
 800e37a:	4604      	mov	r4, r0
 800e37c:	212c      	movs	r1, #44	@ 0x2c
 800e37e:	f014 fcf1 	bl	8022d64 <_ZdlPvj>
 800e382:	4620      	mov	r0, r4
 800e384:	bd10      	pop	{r4, pc}

0800e386 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e386:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e388:	b19b      	cbz	r3, 800e3b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e38a:	428b      	cmp	r3, r1
 800e38c:	d109      	bne.n	800e3a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e38e:	699a      	ldr	r2, [r3, #24]
 800e390:	2100      	movs	r1, #0
 800e392:	6159      	str	r1, [r3, #20]
 800e394:	6282      	str	r2, [r0, #40]	@ 0x28
 800e396:	b902      	cbnz	r2, 800e39a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e398:	4770      	bx	lr
 800e39a:	6199      	str	r1, [r3, #24]
 800e39c:	4770      	bx	lr
 800e39e:	4613      	mov	r3, r2
 800e3a0:	b13a      	cbz	r2, 800e3b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e3a2:	699a      	ldr	r2, [r3, #24]
 800e3a4:	428a      	cmp	r2, r1
 800e3a6:	d1fa      	bne.n	800e39e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e3a8:	698a      	ldr	r2, [r1, #24]
 800e3aa:	619a      	str	r2, [r3, #24]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e3b2:	4770      	bx	lr

0800e3b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e3b4:	b410      	push	{r4}
 800e3b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	b92b      	cbnz	r3, 800e3c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e3bc:	6803      	ldr	r3, [r0, #0]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3c6:	4718      	bx	r3
 800e3c8:	b941      	cbnz	r1, 800e3dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e3ca:	6193      	str	r3, [r2, #24]
 800e3cc:	6282      	str	r2, [r0, #40]	@ 0x28
 800e3ce:	6154      	str	r4, [r2, #20]
 800e3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d0f9      	beq.n	800e3d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e3dc:	4299      	cmp	r1, r3
 800e3de:	6998      	ldr	r0, [r3, #24]
 800e3e0:	d1f9      	bne.n	800e3d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e3e2:	6190      	str	r0, [r2, #24]
 800e3e4:	618a      	str	r2, [r1, #24]
 800e3e6:	e7f2      	b.n	800e3ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800e3e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800e3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ec:	461f      	mov	r7, r3
 800e3ee:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	b103      	cbz	r3, 800e3fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800e3f8:	6038      	str	r0, [r7, #0]
 800e3fa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e3fc:	b314      	cbz	r4, 800e444 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800e3fe:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e402:	b1eb      	cbz	r3, 800e440 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e404:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e408:	428d      	cmp	r5, r1
 800e40a:	db19      	blt.n	800e440 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e40c:	b289      	uxth	r1, r1
 800e40e:	8923      	ldrh	r3, [r4, #8]
 800e410:	440b      	add	r3, r1
 800e412:	b21b      	sxth	r3, r3
 800e414:	429d      	cmp	r5, r3
 800e416:	da13      	bge.n	800e440 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e418:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e41c:	4296      	cmp	r6, r2
 800e41e:	db0f      	blt.n	800e440 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e420:	b292      	uxth	r2, r2
 800e422:	8963      	ldrh	r3, [r4, #10]
 800e424:	4413      	add	r3, r2
 800e426:	b21b      	sxth	r3, r3
 800e428:	429e      	cmp	r6, r3
 800e42a:	da09      	bge.n	800e440 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	1ab2      	subs	r2, r6, r2
 800e430:	1a69      	subs	r1, r5, r1
 800e432:	4620      	mov	r0, r4
 800e434:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800e438:	b212      	sxth	r2, r2
 800e43a:	463b      	mov	r3, r7
 800e43c:	b209      	sxth	r1, r1
 800e43e:	47c0      	blx	r8
 800e440:	69a4      	ldr	r4, [r4, #24]
 800e442:	e7db      	b.n	800e3fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	4c6d      	ldr	r4, [pc, #436]	@ (800e604 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800e44e:	b0a1      	sub	sp, #132	@ 0x84
 800e450:	4606      	mov	r6, r0
 800e452:	6824      	ldr	r4, [r4, #0]
 800e454:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800e456:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800e45a:	2400      	movs	r4, #0
 800e45c:	9303      	str	r3, [sp, #12]
 800e45e:	802c      	strh	r4, [r5, #0]
 800e460:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800e462:	802c      	strh	r4, [r5, #0]
 800e464:	601c      	str	r4, [r3, #0]
 800e466:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e46a:	f7ff ffbd 	bl	800e3e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e46e:	f1b9 0f03 	cmp.w	r9, #3
 800e472:	f340 80c1 	ble.w	800e5f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800e476:	4631      	mov	r1, r6
 800e478:	a80c      	add	r0, sp, #48	@ 0x30
 800e47a:	f004 fd63 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e47e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800e482:	9306      	str	r3, [sp, #24]
 800e484:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800e488:	9307      	str	r3, [sp, #28]
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	f8d3 a000 	ldr.w	sl, [r3]
 800e490:	f1ba 0f00 	cmp.w	sl, #0
 800e494:	f000 80b3 	beq.w	800e5fe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800e498:	4651      	mov	r1, sl
 800e49a:	a810      	add	r0, sp, #64	@ 0x40
 800e49c:	f004 fd52 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4a0:	2002      	movs	r0, #2
 800e4a2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800e4a6:	9b01      	ldr	r3, [sp, #4]
 800e4a8:	9a06      	ldr	r2, [sp, #24]
 800e4aa:	fb91 f1f0 	sdiv	r1, r1, r0
 800e4ae:	189d      	adds	r5, r3, r2
 800e4b0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800e4b4:	9a07      	ldr	r2, [sp, #28]
 800e4b6:	4419      	add	r1, r3
 800e4b8:	9b02      	ldr	r3, [sp, #8]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800e4c0:	1a6d      	subs	r5, r5, r1
 800e4c2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800e4c6:	fb92 f2f0 	sdiv	r2, r2, r0
 800e4ca:	440a      	add	r2, r1
 800e4cc:	1a9b      	subs	r3, r3, r2
 800e4ce:	435b      	muls	r3, r3
 800e4d0:	fb05 3505 	mla	r5, r5, r5, r3
 800e4d4:	4f4c      	ldr	r7, [pc, #304]	@ (800e608 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800e4d6:	ac10      	add	r4, sp, #64	@ 0x40
 800e4d8:	f1b9 0f0c 	cmp.w	r9, #12
 800e4dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e4de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e4e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e4e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4e8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800e4ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e4f0:	f04f 0303 	mov.w	r3, #3
 800e4f4:	bfd8      	it	le
 800e4f6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800e4fa:	f04f 0400 	mov.w	r4, #0
 800e4fe:	f8cd 9000 	str.w	r9, [sp]
 800e502:	bfcc      	ite	gt
 800e504:	4698      	movgt	r8, r3
 800e506:	fb92 f8f3 	sdivle	r8, r2, r3
 800e50a:	1c63      	adds	r3, r4, #1
 800e50c:	aa10      	add	r2, sp, #64	@ 0x40
 800e50e:	f004 0401 	and.w	r4, r4, #1
 800e512:	f04f 0b00 	mov.w	fp, #0
 800e516:	9308      	str	r3, [sp, #32]
 800e518:	9b00      	ldr	r3, [sp, #0]
 800e51a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800e51e:	fb93 f3f8 	sdiv	r3, r3, r8
 800e522:	3404      	adds	r4, #4
 800e524:	b29b      	uxth	r3, r3
 800e526:	9304      	str	r3, [sp, #16]
 800e528:	9a04      	ldr	r2, [sp, #16]
 800e52a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e52e:	fb13 f302 	smulbb	r3, r3, r2
 800e532:	9a01      	ldr	r2, [sp, #4]
 800e534:	b29b      	uxth	r3, r3
 800e536:	1899      	adds	r1, r3, r2
 800e538:	9305      	str	r3, [sp, #20]
 800e53a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e53e:	b209      	sxth	r1, r1
 800e540:	4299      	cmp	r1, r3
 800e542:	db4d      	blt.n	800e5e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e544:	8932      	ldrh	r2, [r6, #8]
 800e546:	4413      	add	r3, r2
 800e548:	b21b      	sxth	r3, r3
 800e54a:	4299      	cmp	r1, r3
 800e54c:	da48      	bge.n	800e5e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e54e:	9b04      	ldr	r3, [sp, #16]
 800e550:	6827      	ldr	r7, [r4, #0]
 800e552:	fb17 f703 	smulbb	r7, r7, r3
 800e556:	9b02      	ldr	r3, [sp, #8]
 800e558:	b2bf      	uxth	r7, r7
 800e55a:	18fa      	adds	r2, r7, r3
 800e55c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e560:	b212      	sxth	r2, r2
 800e562:	429a      	cmp	r2, r3
 800e564:	db3c      	blt.n	800e5e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e566:	8970      	ldrh	r0, [r6, #10]
 800e568:	4403      	add	r3, r0
 800e56a:	b21b      	sxth	r3, r3
 800e56c:	429a      	cmp	r2, r3
 800e56e:	da37      	bge.n	800e5e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e570:	2300      	movs	r3, #0
 800e572:	4630      	mov	r0, r6
 800e574:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e576:	ab0b      	add	r3, sp, #44	@ 0x2c
 800e578:	f7ff ff36 	bl	800e3e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e57c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e57e:	b37a      	cbz	r2, 800e5e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e580:	4552      	cmp	r2, sl
 800e582:	d02d      	beq.n	800e5e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e584:	4611      	mov	r1, r2
 800e586:	a80e      	add	r0, sp, #56	@ 0x38
 800e588:	9209      	str	r2, [sp, #36]	@ 0x24
 800e58a:	f004 fcdb 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e58e:	f04f 0e02 	mov.w	lr, #2
 800e592:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800e596:	9a06      	ldr	r2, [sp, #24]
 800e598:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800e59c:	9b01      	ldr	r3, [sp, #4]
 800e59e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800e5a2:	4413      	add	r3, r2
 800e5a4:	9a07      	ldr	r2, [sp, #28]
 800e5a6:	fb91 f1fe 	sdiv	r1, r1, lr
 800e5aa:	fb9c fcfe 	sdiv	ip, ip, lr
 800e5ae:	4401      	add	r1, r0
 800e5b0:	1a58      	subs	r0, r3, r1
 800e5b2:	9b02      	ldr	r3, [sp, #8]
 800e5b4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800e5b8:	4413      	add	r3, r2
 800e5ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5bc:	448c      	add	ip, r1
 800e5be:	eba3 030c 	sub.w	r3, r3, ip
 800e5c2:	435b      	muls	r3, r3
 800e5c4:	fb00 3300 	mla	r3, r0, r0, r3
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	d208      	bcs.n	800e5de <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800e5cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5ce:	461d      	mov	r5, r3
 800e5d0:	9803      	ldr	r0, [sp, #12]
 800e5d2:	6001      	str	r1, [r0, #0]
 800e5d4:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800e5d6:	9805      	ldr	r0, [sp, #20]
 800e5d8:	8008      	strh	r0, [r1, #0]
 800e5da:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800e5dc:	800f      	strh	r7, [r1, #0]
 800e5de:	4692      	mov	sl, r2
 800e5e0:	f10b 0b01 	add.w	fp, fp, #1
 800e5e4:	3408      	adds	r4, #8
 800e5e6:	f1bb 0f04 	cmp.w	fp, #4
 800e5ea:	d19d      	bne.n	800e528 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800e5ec:	9b00      	ldr	r3, [sp, #0]
 800e5ee:	9c08      	ldr	r4, [sp, #32]
 800e5f0:	444b      	add	r3, r9
 800e5f2:	4544      	cmp	r4, r8
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	d188      	bne.n	800e50a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800e5f8:	b021      	add	sp, #132	@ 0x84
 800e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fe:	f04f 35ff 	mov.w	r5, #4294967295
 800e602:	e767      	b.n	800e4d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800e604:	2400aa84 	.word	0x2400aa84
 800e608:	080274a0 	.word	0x080274a0

0800e60c <_ZN8touchgfx4RectaNERKS0_>:
 800e60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e610:	f9b1 7000 	ldrsh.w	r7, [r1]
 800e614:	888c      	ldrh	r4, [r1, #4]
 800e616:	f9b0 9000 	ldrsh.w	r9, [r0]
 800e61a:	443c      	add	r4, r7
 800e61c:	b2a4      	uxth	r4, r4
 800e61e:	fa0f f884 	sxth.w	r8, r4
 800e622:	45c1      	cmp	r9, r8
 800e624:	da2f      	bge.n	800e686 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e626:	8882      	ldrh	r2, [r0, #4]
 800e628:	444a      	add	r2, r9
 800e62a:	b292      	uxth	r2, r2
 800e62c:	fa0f fe82 	sxth.w	lr, r2
 800e630:	4577      	cmp	r7, lr
 800e632:	da28      	bge.n	800e686 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e634:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e638:	88cb      	ldrh	r3, [r1, #6]
 800e63a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e63e:	442b      	add	r3, r5
 800e640:	b21b      	sxth	r3, r3
 800e642:	429e      	cmp	r6, r3
 800e644:	da1f      	bge.n	800e686 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e646:	88c3      	ldrh	r3, [r0, #6]
 800e648:	4433      	add	r3, r6
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	fa0f fc83 	sxth.w	ip, r3
 800e650:	4565      	cmp	r5, ip
 800e652:	da18      	bge.n	800e686 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e654:	454f      	cmp	r7, r9
 800e656:	bfb8      	it	lt
 800e658:	464f      	movlt	r7, r9
 800e65a:	42b5      	cmp	r5, r6
 800e65c:	bfb8      	it	lt
 800e65e:	4635      	movlt	r5, r6
 800e660:	45f0      	cmp	r8, lr
 800e662:	bfd8      	it	le
 800e664:	4622      	movle	r2, r4
 800e666:	1bd2      	subs	r2, r2, r7
 800e668:	8082      	strh	r2, [r0, #4]
 800e66a:	884a      	ldrh	r2, [r1, #2]
 800e66c:	88c9      	ldrh	r1, [r1, #6]
 800e66e:	8007      	strh	r7, [r0, #0]
 800e670:	440a      	add	r2, r1
 800e672:	8045      	strh	r5, [r0, #2]
 800e674:	b292      	uxth	r2, r2
 800e676:	b211      	sxth	r1, r2
 800e678:	458c      	cmp	ip, r1
 800e67a:	bfa8      	it	ge
 800e67c:	4613      	movge	r3, r2
 800e67e:	1b5b      	subs	r3, r3, r5
 800e680:	80c3      	strh	r3, [r0, #6]
 800e682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e686:	2300      	movs	r3, #0
 800e688:	8003      	strh	r3, [r0, #0]
 800e68a:	8043      	strh	r3, [r0, #2]
 800e68c:	8083      	strh	r3, [r0, #4]
 800e68e:	80c3      	strh	r3, [r0, #6]
 800e690:	e7f7      	b.n	800e682 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800e692 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e692:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	dd06      	ble.n	800e6a8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800e69a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	bfcc      	ite	gt
 800e6a2:	2000      	movgt	r0, #0
 800e6a4:	2001      	movle	r0, #1
 800e6a6:	4770      	bx	lr
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	4770      	bx	lr

0800e6ac <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800e6b6:	8003      	strh	r3, [r0, #0]
 800e6b8:	8043      	strh	r3, [r0, #2]
 800e6ba:	8083      	strh	r3, [r0, #4]
 800e6bc:	80c3      	strh	r3, [r0, #6]
 800e6be:	2d00      	cmp	r5, #0
 800e6c0:	d040      	beq.n	800e744 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e6c2:	1d28      	adds	r0, r5, #4
 800e6c4:	f7ff ffe5 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e6c8:	b988      	cbnz	r0, 800e6ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7ff ffe1 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e6d0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e6d4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e6d8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e6dc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e6e0:	b138      	cbz	r0, 800e6f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e6e2:	8022      	strh	r2, [r4, #0]
 800e6e4:	8063      	strh	r3, [r4, #2]
 800e6e6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e6ea:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e6ee:	69ad      	ldr	r5, [r5, #24]
 800e6f0:	e7e5      	b.n	800e6be <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e6f2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e6f6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e6fa:	4290      	cmp	r0, r2
 800e6fc:	4607      	mov	r7, r0
 800e6fe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e702:	460e      	mov	r6, r1
 800e704:	bfa8      	it	ge
 800e706:	4617      	movge	r7, r2
 800e708:	4299      	cmp	r1, r3
 800e70a:	4472      	add	r2, lr
 800e70c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e710:	bfa8      	it	ge
 800e712:	461e      	movge	r6, r3
 800e714:	4440      	add	r0, r8
 800e716:	4471      	add	r1, lr
 800e718:	4463      	add	r3, ip
 800e71a:	b200      	sxth	r0, r0
 800e71c:	8027      	strh	r7, [r4, #0]
 800e71e:	b212      	sxth	r2, r2
 800e720:	8066      	strh	r6, [r4, #2]
 800e722:	b209      	sxth	r1, r1
 800e724:	b21b      	sxth	r3, r3
 800e726:	4290      	cmp	r0, r2
 800e728:	bfac      	ite	ge
 800e72a:	ebc7 0200 	rsbge	r2, r7, r0
 800e72e:	ebc7 0202 	rsblt	r2, r7, r2
 800e732:	4299      	cmp	r1, r3
 800e734:	bfac      	ite	ge
 800e736:	ebc6 0301 	rsbge	r3, r6, r1
 800e73a:	ebc6 0303 	rsblt	r3, r6, r3
 800e73e:	80a2      	strh	r2, [r4, #4]
 800e740:	80e3      	strh	r3, [r4, #6]
 800e742:	e7d4      	b.n	800e6ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e744:	4620      	mov	r0, r4
 800e746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e74a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e74a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e74e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e752:	b383      	cbz	r3, 800e7b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e754:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e756:	b374      	cbz	r4, 800e7b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e758:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e75c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e760:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e764:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e768:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e76c:	b303      	cbz	r3, 800e7b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e76e:	4668      	mov	r0, sp
 800e770:	1d21      	adds	r1, r4, #4
 800e772:	f8ad 5000 	strh.w	r5, [sp]
 800e776:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e77a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e77e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e782:	f7ff ff43 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 800e786:	4668      	mov	r0, sp
 800e788:	f7ff ff83 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e78c:	b980      	cbnz	r0, 800e7b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e78e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e792:	4669      	mov	r1, sp
 800e794:	88a2      	ldrh	r2, [r4, #4]
 800e796:	4620      	mov	r0, r4
 800e798:	1a9b      	subs	r3, r3, r2
 800e79a:	88e2      	ldrh	r2, [r4, #6]
 800e79c:	f8ad 3000 	strh.w	r3, [sp]
 800e7a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e7a4:	1a9b      	subs	r3, r3, r2
 800e7a6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	4798      	blx	r3
 800e7b0:	69a4      	ldr	r4, [r4, #24]
 800e7b2:	2c00      	cmp	r4, #0
 800e7b4:	d1d8      	bne.n	800e768 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e7b6:	b002      	add	sp, #8
 800e7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e7bc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e7bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7be:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	b323      	cbz	r3, 800e812 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e7c8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e7ca:	b314      	cbz	r4, 800e812 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e7cc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e7d0:	b1eb      	cbz	r3, 800e80e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e7d2:	6828      	ldr	r0, [r5, #0]
 800e7d4:	466b      	mov	r3, sp
 800e7d6:	6869      	ldr	r1, [r5, #4]
 800e7d8:	c303      	stmia	r3!, {r0, r1}
 800e7da:	4668      	mov	r0, sp
 800e7dc:	1d21      	adds	r1, r4, #4
 800e7de:	f7ff ff15 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 800e7e2:	4668      	mov	r0, sp
 800e7e4:	f7ff ff55 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e7e8:	b988      	cbnz	r0, 800e80e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e7ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7ee:	4669      	mov	r1, sp
 800e7f0:	88a2      	ldrh	r2, [r4, #4]
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	88e2      	ldrh	r2, [r4, #6]
 800e7f8:	f8ad 3000 	strh.w	r3, [sp]
 800e7fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e800:	1a9b      	subs	r3, r3, r2
 800e802:	4632      	mov	r2, r6
 800e804:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e80c:	4798      	blx	r3
 800e80e:	69a4      	ldr	r4, [r4, #24]
 800e810:	e7db      	b.n	800e7ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e812:	b002      	add	sp, #8
 800e814:	bd70      	pop	{r4, r5, r6, pc}

0800e816 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e816:	6803      	ldr	r3, [r0, #0]
 800e818:	b513      	push	{r0, r1, r4, lr}
 800e81a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800e81e:	2300      	movs	r3, #0
 800e820:	e9cd 3300 	strd	r3, r3, [sp]
 800e824:	466b      	mov	r3, sp
 800e826:	47a0      	blx	r4
 800e828:	b002      	add	sp, #8
 800e82a:	bd10      	pop	{r4, pc}

0800e82c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e82c:	2301      	movs	r3, #1
 800e82e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800e832:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800e836:	4770      	bx	lr

0800e838 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e838:	2301      	movs	r3, #1
 800e83a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800e83e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800e842:	4770      	bx	lr

0800e844 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e844:	6843      	ldr	r3, [r0, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	725a      	strb	r2, [r3, #9]
 800e84a:	6840      	ldr	r0, [r0, #4]
 800e84c:	6803      	ldr	r3, [r0, #0]
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	4718      	bx	r3

0800e852 <_ZN8touchgfx3HAL8flushDMAEv>:
 800e852:	6840      	ldr	r0, [r0, #4]
 800e854:	6803      	ldr	r3, [r0, #0]
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	4718      	bx	r3

0800e85a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800e85a:	b530      	push	{r4, r5, lr}
 800e85c:	b08b      	sub	sp, #44	@ 0x2c
 800e85e:	6804      	ldr	r4, [r0, #0]
 800e860:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800e864:	9509      	str	r5, [sp, #36]	@ 0x24
 800e866:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800e86a:	9508      	str	r5, [sp, #32]
 800e86c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800e870:	9507      	str	r5, [sp, #28]
 800e872:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800e876:	9506      	str	r5, [sp, #24]
 800e878:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800e87c:	9505      	str	r5, [sp, #20]
 800e87e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800e882:	9504      	str	r5, [sp, #16]
 800e884:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800e888:	9503      	str	r5, [sp, #12]
 800e88a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800e88e:	9502      	str	r5, [sp, #8]
 800e890:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800e894:	e9cd 3500 	strd	r3, r5, [sp]
 800e898:	4613      	mov	r3, r2
 800e89a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800e89c:	2200      	movs	r2, #0
 800e89e:	47a0      	blx	r4
 800e8a0:	b00b      	add	sp, #44	@ 0x2c
 800e8a2:	bd30      	pop	{r4, r5, pc}

0800e8a4 <_ZN8touchgfx3HAL10beginFrameEv>:
 800e8a4:	4b04      	ldr	r3, [pc, #16]	@ (800e8b8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	b123      	cbz	r3, 800e8b4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e8aa:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800e8ae:	f080 0001 	eor.w	r0, r0, #1
 800e8b2:	4770      	bx	lr
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	4770      	bx	lr
 800e8b8:	2400aa82 	.word	0x2400aa82

0800e8bc <_ZN8touchgfx3HAL8endFrameEv>:
 800e8bc:	b510      	push	{r4, lr}
 800e8be:	4604      	mov	r4, r0
 800e8c0:	6840      	ldr	r0, [r0, #4]
 800e8c2:	6803      	ldr	r3, [r0, #0]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	4798      	blx	r3
 800e8c8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800e8cc:	b113      	cbz	r3, 800e8d4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e8d4:	bd10      	pop	{r4, pc}

0800e8d6 <_ZN8touchgfx3HAL10initializeEv>:
 800e8d6:	b510      	push	{r4, lr}
 800e8d8:	4604      	mov	r4, r0
 800e8da:	f7fe ff73 	bl	800d7c4 <_ZN8touchgfx10OSWrappers10initializeEv>
 800e8de:	f7fe fe9b 	bl	800d618 <_ZN8touchgfx4GPIO4initEv>
 800e8e2:	6860      	ldr	r0, [r4, #4]
 800e8e4:	6803      	ldr	r3, [r0, #0]
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	4798      	blx	r3
 800e8ea:	68e0      	ldr	r0, [r4, #12]
 800e8ec:	6803      	ldr	r3, [r0, #0]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	4798      	blx	r3
 800e8f2:	6823      	ldr	r3, [r4, #0]
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	4718      	bx	r3

0800e8fe <_ZN8touchgfx3HAL9taskEntryEv>:
 800e8fe:	b508      	push	{r3, lr}
 800e900:	6803      	ldr	r3, [r0, #0]
 800e902:	4604      	mov	r4, r0
 800e904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e908:	4798      	blx	r3
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e90e:	4620      	mov	r0, r4
 800e910:	4798      	blx	r3
 800e912:	f7fe ffa9 	bl	800d868 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e91a:	e7f8      	b.n	800e90e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800e91c <_ZN8touchgfx3HAL4tickEv>:
 800e91c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e91e:	6803      	ldr	r3, [r0, #0]
 800e920:	4604      	mov	r4, r0
 800e922:	4d5b      	ldr	r5, [pc, #364]	@ (800ea90 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800e924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e928:	4798      	blx	r3
 800e92a:	2800      	cmp	r0, #0
 800e92c:	f000 8095 	beq.w	800ea5a <_ZN8touchgfx3HAL4tickEv+0x13e>
 800e930:	2001      	movs	r0, #1
 800e932:	2600      	movs	r6, #0
 800e934:	f7fe fe72 	bl	800d61c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e938:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800e93c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800e940:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e944:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800e948:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800e94c:	b133      	cbz	r3, 800e95c <_ZN8touchgfx3HAL4tickEv+0x40>
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	4620      	mov	r0, r4
 800e952:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e956:	4798      	blx	r3
 800e958:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800e95c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800e960:	2601      	movs	r6, #1
 800e962:	6862      	ldr	r2, [r4, #4]
 800e964:	f083 0301 	eor.w	r3, r3, #1
 800e968:	702e      	strb	r6, [r5, #0]
 800e96a:	7253      	strb	r3, [r2, #9]
 800e96c:	f003 f9d6 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 800e970:	6803      	ldr	r3, [r0, #0]
 800e972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e974:	4798      	blx	r3
 800e976:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e97a:	b90b      	cbnz	r3, 800e980 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e97c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800e980:	f003 f9cc 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 800e984:	6803      	ldr	r3, [r0, #0]
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	4798      	blx	r3
 800e98a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e98c:	6803      	ldr	r3, [r0, #0]
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	4798      	blx	r3
 800e992:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e996:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800e99a:	3b01      	subs	r3, #1
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e9a2:	b10a      	cbz	r2, 800e9a8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1eb      	bne.n	800e980 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e9a8:	4a3a      	ldr	r2, [pc, #232]	@ (800ea94 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e9aa:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800e9ae:	7813      	ldrb	r3, [r2, #0]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	b25b      	sxtb	r3, r3
 800e9b4:	4299      	cmp	r1, r3
 800e9b6:	7013      	strb	r3, [r2, #0]
 800e9b8:	dc10      	bgt.n	800e9dc <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	68e0      	ldr	r0, [r4, #12]
 800e9be:	a902      	add	r1, sp, #8
 800e9c0:	7013      	strb	r3, [r2, #0]
 800e9c2:	aa03      	add	r2, sp, #12
 800e9c4:	6803      	ldr	r3, [r0, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	4798      	blx	r3
 800e9ca:	6823      	ldr	r3, [r4, #0]
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d050      	beq.n	800ea72 <_ZN8touchgfx3HAL4tickEv+0x156>
 800e9d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e9da:	4798      	blx	r3
 800e9dc:	2300      	movs	r3, #0
 800e9de:	6960      	ldr	r0, [r4, #20]
 800e9e0:	f88d 3007 	strb.w	r3, [sp, #7]
 800e9e4:	b158      	cbz	r0, 800e9fe <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e9e6:	6803      	ldr	r3, [r0, #0]
 800e9e8:	f10d 0107 	add.w	r1, sp, #7
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	4798      	blx	r3
 800e9f0:	b128      	cbz	r0, 800e9fe <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e9f2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e9f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e9f8:	6803      	ldr	r3, [r0, #0]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	4798      	blx	r3
 800e9fe:	f104 001c 	add.w	r0, r4, #28
 800ea02:	f014 f8db 	bl	8022bbc <_ZN8touchgfx8Gestures4tickEv>
 800ea06:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800ea0a:	b30b      	cbz	r3, 800ea50 <_ZN8touchgfx3HAL4tickEv+0x134>
 800ea0c:	6920      	ldr	r0, [r4, #16]
 800ea0e:	6803      	ldr	r3, [r0, #0]
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	4798      	blx	r3
 800ea14:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ea16:	4606      	mov	r6, r0
 800ea18:	b903      	cbnz	r3, 800ea1c <_ZN8touchgfx3HAL4tickEv+0x100>
 800ea1a:	6760      	str	r0, [r4, #116]	@ 0x74
 800ea1c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ea1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ea98 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ea20:	1af3      	subs	r3, r6, r3
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d914      	bls.n	800ea50 <_ZN8touchgfx3HAL4tickEv+0x134>
 800ea26:	6920      	ldr	r0, [r4, #16]
 800ea28:	6803      	ldr	r3, [r0, #0]
 800ea2a:	699b      	ldr	r3, [r3, #24]
 800ea2c:	4798      	blx	r3
 800ea2e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800ea30:	2264      	movs	r2, #100	@ 0x64
 800ea32:	1af3      	subs	r3, r6, r3
 800ea34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea38:	fbb0 f0f3 	udiv	r0, r0, r3
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	dc1d      	bgt.n	800ea7c <_ZN8touchgfx3HAL4tickEv+0x160>
 800ea40:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800ea44:	6920      	ldr	r0, [r4, #16]
 800ea46:	2100      	movs	r1, #0
 800ea48:	6803      	ldr	r3, [r0, #0]
 800ea4a:	69db      	ldr	r3, [r3, #28]
 800ea4c:	4798      	blx	r3
 800ea4e:	6766      	str	r6, [r4, #116]	@ 0x74
 800ea50:	f003 f964 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 800ea54:	6803      	ldr	r3, [r0, #0]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea58:	4798      	blx	r3
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea62:	4798      	blx	r3
 800ea64:	2001      	movs	r0, #1
 800ea66:	f7fe fddb 	bl	800d620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	702b      	strb	r3, [r5, #0]
 800ea6e:	b004      	add	sp, #16
 800ea70:	bd70      	pop	{r4, r5, r6, pc}
 800ea72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ea76:	4620      	mov	r0, r4
 800ea78:	4798      	blx	r3
 800ea7a:	e7af      	b.n	800e9dc <_ZN8touchgfx3HAL4tickEv+0xc0>
 800ea7c:	2863      	cmp	r0, #99	@ 0x63
 800ea7e:	bfcb      	itete	gt
 800ea80:	2300      	movgt	r3, #0
 800ea82:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800ea86:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800ea8a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800ea8e:	e7d9      	b.n	800ea44 <_ZN8touchgfx3HAL4tickEv+0x128>
 800ea90:	2400aa88 	.word	0x2400aa88
 800ea94:	2400aa89 	.word	0x2400aa89
 800ea98:	05f5e100 	.word	0x05f5e100

0800ea9c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800ea9c:	b510      	push	{r4, lr}
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	f7fe fec2 	bl	800d828 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	6863      	ldr	r3, [r4, #4]
 800eaa8:	729a      	strb	r2, [r3, #10]
 800eaaa:	bd10      	pop	{r4, pc}

0800eaac <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800eaac:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800eaae:	301c      	adds	r0, #28
 800eab0:	f014 b882 	b.w	8022bb8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800eab4 <_ZN8touchgfx3HAL5touchEll>:
 800eab4:	b530      	push	{r4, r5, lr}
 800eab6:	b087      	sub	sp, #28
 800eab8:	4604      	mov	r4, r0
 800eaba:	a804      	add	r0, sp, #16
 800eabc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800eac0:	f002 ff12 	bl	80118e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800eac4:	9b04      	ldr	r3, [sp, #16]
 800eac6:	a906      	add	r1, sp, #24
 800eac8:	a803      	add	r0, sp, #12
 800eaca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800eace:	9b05      	ldr	r3, [sp, #20]
 800ead0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800ead4:	f002 ff5a 	bl	801198c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ead8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800eadc:	f104 001c 	add.w	r0, r4, #28
 800eae0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800eae4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800eae8:	b189      	cbz	r1, 800eb0e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800eaea:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800eaf6:	462a      	mov	r2, r5
 800eaf8:	f014 f86e 	bl	8022bd8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800eafc:	b128      	cbz	r0, 800eb0a <_ZN8touchgfx3HAL5touchEll+0x56>
 800eafe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800eb02:	6623      	str	r3, [r4, #96]	@ 0x60
 800eb04:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800eb08:	6663      	str	r3, [r4, #100]	@ 0x64
 800eb0a:	b007      	add	sp, #28
 800eb0c:	bd30      	pop	{r4, r5, pc}
 800eb0e:	f014 f8a3 	bl	8022c58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800eb12:	2301      	movs	r3, #1
 800eb14:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800eb18:	e7f1      	b.n	800eafe <_ZN8touchgfx3HAL5touchEll+0x4a>

0800eb1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d046      	beq.n	800ebae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800eb20:	ea81 0002 	eor.w	r0, r1, r2
 800eb24:	07c4      	lsls	r4, r0, #31
 800eb26:	d508      	bpl.n	800eb3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800eb28:	440b      	add	r3, r1
 800eb2a:	3a01      	subs	r2, #1
 800eb2c:	428b      	cmp	r3, r1
 800eb2e:	d93e      	bls.n	800ebae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800eb30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800eb34:	f801 0b01 	strb.w	r0, [r1], #1
 800eb38:	e7f8      	b.n	800eb2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800eb3a:	07d0      	lsls	r0, r2, #31
 800eb3c:	bf42      	ittt	mi
 800eb3e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800eb42:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800eb46:	f801 0b01 	strbmi.w	r0, [r1], #1
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d911      	bls.n	800eb72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800eb4e:	ea81 0402 	eor.w	r4, r1, r2
 800eb52:	4610      	mov	r0, r2
 800eb54:	07a4      	lsls	r4, r4, #30
 800eb56:	d022      	beq.n	800eb9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800eb58:	f023 0401 	bic.w	r4, r3, #1
 800eb5c:	440c      	add	r4, r1
 800eb5e:	428c      	cmp	r4, r1
 800eb60:	4602      	mov	r2, r0
 800eb62:	d904      	bls.n	800eb6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800eb64:	8812      	ldrh	r2, [r2, #0]
 800eb66:	3002      	adds	r0, #2
 800eb68:	f821 2b02 	strh.w	r2, [r1], #2
 800eb6c:	e7f7      	b.n	800eb5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	f023 0003 	bic.w	r0, r3, #3
 800eb76:	4408      	add	r0, r1
 800eb78:	4288      	cmp	r0, r1
 800eb7a:	4614      	mov	r4, r2
 800eb7c:	d904      	bls.n	800eb88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800eb7e:	6824      	ldr	r4, [r4, #0]
 800eb80:	3204      	adds	r2, #4
 800eb82:	f841 4b04 	str.w	r4, [r1], #4
 800eb86:	e7f7      	b.n	800eb78 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800eb88:	f003 0303 	and.w	r3, r3, #3
 800eb8c:	3a01      	subs	r2, #1
 800eb8e:	440b      	add	r3, r1
 800eb90:	428b      	cmp	r3, r1
 800eb92:	d90c      	bls.n	800ebae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800eb94:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800eb98:	f801 0b01 	strb.w	r0, [r1], #1
 800eb9c:	e7f8      	b.n	800eb90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800eb9e:	0790      	lsls	r0, r2, #30
 800eba0:	d0e7      	beq.n	800eb72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800eba2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800eba6:	3b02      	subs	r3, #2
 800eba8:	f821 0b02 	strh.w	r0, [r1], #2
 800ebac:	e7e1      	b.n	800eb72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800ebae:	2001      	movs	r0, #1
 800ebb0:	bd10      	pop	{r4, pc}

0800ebb2 <_ZN8touchgfx3HAL7noTouchEv>:
 800ebb2:	b510      	push	{r4, lr}
 800ebb4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800ebb8:	4604      	mov	r4, r0
 800ebba:	b153      	cbz	r3, 800ebd2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800ebbc:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800ebc6:	301c      	adds	r0, #28
 800ebc8:	f014 f846 	bl	8022c58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800ebd2:	bd10      	pop	{r4, pc}

0800ebd4 <_ZN8touchgfx8Drawable5setXYEss>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	6803      	ldr	r3, [r0, #0]
 800ebd8:	4604      	mov	r4, r0
 800ebda:	4615      	mov	r5, r2
 800ebdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebde:	4798      	blx	r3
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebec:	4718      	bx	r3
	...

0800ebf0 <_ZN8touchgfx3HAL3lcdEv>:
 800ebf0:	4b04      	ldr	r3, [pc, #16]	@ (800ec04 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ebf8:	b10a      	cbz	r2, 800ebfe <_ZN8touchgfx3HAL3lcdEv+0xe>
 800ebfa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ebfc:	b900      	cbnz	r0, 800ec00 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800ebfe:	6898      	ldr	r0, [r3, #8]
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	2400aa84 	.word	0x2400aa84

0800ec08 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800ec08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec0c:	b085      	sub	sp, #20
 800ec0e:	4604      	mov	r4, r0
 800ec10:	2000      	movs	r0, #0
 800ec12:	4699      	mov	r9, r3
 800ec14:	ad04      	add	r5, sp, #16
 800ec16:	460f      	mov	r7, r1
 800ec18:	4690      	mov	r8, r2
 800ec1a:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ec1e:	69a0      	ldr	r0, [r4, #24]
 800ec20:	6806      	ldr	r6, [r0, #0]
 800ec22:	9501      	str	r5, [sp, #4]
 800ec24:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800ec28:	9500      	str	r5, [sp, #0]
 800ec2a:	6835      	ldr	r5, [r6, #0]
 800ec2c:	47a8      	blx	r5
 800ec2e:	4d10      	ldr	r5, [pc, #64]	@ (800ec70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800ec30:	4606      	mov	r6, r0
 800ec32:	f8a5 9000 	strh.w	r9, [r5]
 800ec36:	f7ff ffdb 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800ec3a:	6803      	ldr	r3, [r0, #0]
 800ec3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec3e:	4798      	blx	r3
 800ec40:	b128      	cbz	r0, 800ec4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800ec42:	2801      	cmp	r0, #1
 800ec44:	d00b      	beq.n	800ec5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800ec46:	4630      	mov	r0, r6
 800ec48:	b005      	add	sp, #20
 800ec4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec4e:	882b      	ldrh	r3, [r5, #0]
 800ec50:	fb08 7203 	mla	r2, r8, r3, r7
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800ec5a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ec5c:	e7f3      	b.n	800ec46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800ec5e:	882a      	ldrh	r2, [r5, #0]
 800ec60:	9b03      	ldr	r3, [sp, #12]
 800ec62:	fb08 7202 	mla	r2, r8, r2, r7
 800ec66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ec6a:	1a9a      	subs	r2, r3, r2
 800ec6c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800ec6e:	e7ea      	b.n	800ec46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800ec70:	2400aa7e 	.word	0x2400aa7e

0800ec74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec76:	b08b      	sub	sp, #44	@ 0x2c
 800ec78:	4617      	mov	r7, r2
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	461d      	mov	r5, r3
 800ec80:	f7ff ffb6 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800ec84:	6803      	ldr	r3, [r0, #0]
 800ec86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec88:	4798      	blx	r3
 800ec8a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800ec8e:	9007      	str	r0, [sp, #28]
 800ec90:	4631      	mov	r1, r6
 800ec92:	6822      	ldr	r2, [r4, #0]
 800ec94:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800ec98:	4b0c      	ldr	r3, [pc, #48]	@ (800eccc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	881b      	ldrh	r3, [r3, #0]
 800ec9e:	9306      	str	r3, [sp, #24]
 800eca0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800ecaa:	9304      	str	r3, [sp, #16]
 800ecac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ecb0:	9303      	str	r3, [sp, #12]
 800ecb2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ecb6:	9302      	str	r3, [sp, #8]
 800ecb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800ecbc:	e9cd 5300 	strd	r5, r3, [sp]
 800ecc0:	463b      	mov	r3, r7
 800ecc2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	47a8      	blx	r5
 800ecc8:	b00b      	add	sp, #44	@ 0x2c
 800ecca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eccc:	2400aa7e 	.word	0x2400aa7e

0800ecd0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800ecd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecd4:	4698      	mov	r8, r3
 800ecd6:	6803      	ldr	r3, [r0, #0]
 800ecd8:	b08b      	sub	sp, #44	@ 0x2c
 800ecda:	4617      	mov	r7, r2
 800ecdc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800ecde:	460e      	mov	r6, r1
 800ece0:	4b13      	ldr	r3, [pc, #76]	@ (800ed30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800ece2:	4604      	mov	r4, r0
 800ece4:	f8b3 9000 	ldrh.w	r9, [r3]
 800ece8:	f7ff ff82 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800ecec:	6803      	ldr	r3, [r0, #0]
 800ecee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf0:	4798      	blx	r3
 800ecf2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4631      	mov	r1, r6
 800ecfa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800ecfe:	2302      	movs	r3, #2
 800ed00:	4620      	mov	r0, r4
 800ed02:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800ed06:	2301      	movs	r3, #1
 800ed08:	9305      	str	r3, [sp, #20]
 800ed0a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800ed0e:	9304      	str	r3, [sp, #16]
 800ed10:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800ed14:	9303      	str	r3, [sp, #12]
 800ed16:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ed1a:	9302      	str	r3, [sp, #8]
 800ed1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ed20:	e9cd 8300 	strd	r8, r3, [sp]
 800ed24:	463b      	mov	r3, r7
 800ed26:	47a8      	blx	r5
 800ed28:	b00b      	add	sp, #44	@ 0x2c
 800ed2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed2e:	bf00      	nop
 800ed30:	2400aa7e 	.word	0x2400aa7e

0800ed34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800ed34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed38:	4698      	mov	r8, r3
 800ed3a:	6803      	ldr	r3, [r0, #0]
 800ed3c:	b087      	sub	sp, #28
 800ed3e:	460e      	mov	r6, r1
 800ed40:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800ed42:	4617      	mov	r7, r2
 800ed44:	4b0f      	ldr	r3, [pc, #60]	@ (800ed84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800ed46:	4604      	mov	r4, r0
 800ed48:	f8b3 9000 	ldrh.w	r9, [r3]
 800ed4c:	f7ff ff50 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800ed50:	6803      	ldr	r3, [r0, #0]
 800ed52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed54:	4798      	blx	r3
 800ed56:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800ed5a:	463a      	mov	r2, r7
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed62:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800ed66:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	9302      	str	r3, [sp, #8]
 800ed6e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800ed72:	9301      	str	r3, [sp, #4]
 800ed74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	4643      	mov	r3, r8
 800ed7c:	47a8      	blx	r5
 800ed7e:	b007      	add	sp, #28
 800ed80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed84:	2400aa7e 	.word	0x2400aa7e

0800ed88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	b08f      	sub	sp, #60	@ 0x3c
 800ed90:	4610      	mov	r0, r2
 800ed92:	460d      	mov	r5, r1
 800ed94:	4691      	mov	r9, r2
 800ed96:	461e      	mov	r6, r3
 800ed98:	f005 fc40 	bl	801461c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	f000 809d 	beq.w	800eedc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800eda2:	6823      	ldr	r3, [r4, #0]
 800eda4:	4620      	mov	r0, r4
 800eda6:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800ef40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800edaa:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800edae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb0:	4798      	blx	r3
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	4620      	mov	r0, r4
 800edb6:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800ef44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800edba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edbc:	4798      	blx	r3
 800edbe:	f8bb 3000 	ldrh.w	r3, [fp]
 800edc2:	4f5c      	ldr	r7, [pc, #368]	@ (800ef34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	f8ba 3000 	ldrh.w	r3, [sl]
 800edca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800edce:	4640      	mov	r0, r8
 800edd0:	9302      	str	r3, [sp, #8]
 800edd2:	883b      	ldrh	r3, [r7, #0]
 800edd4:	9303      	str	r3, [sp, #12]
 800edd6:	4b58      	ldr	r3, [pc, #352]	@ (800ef38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800edd8:	881a      	ldrh	r2, [r3, #0]
 800edda:	9305      	str	r3, [sp, #20]
 800eddc:	9204      	str	r2, [sp, #16]
 800edde:	f005 fcb1 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ede2:	8038      	strh	r0, [r7, #0]
 800ede4:	4640      	mov	r0, r8
 800ede6:	f005 fce1 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800edea:	9b05      	ldr	r3, [sp, #20]
 800edec:	b280      	uxth	r0, r0
 800edee:	8018      	strh	r0, [r3, #0]
 800edf0:	4b52      	ldr	r3, [pc, #328]	@ (800ef3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d174      	bne.n	800eee2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800edf8:	883b      	ldrh	r3, [r7, #0]
 800edfa:	f8aa 0000 	strh.w	r0, [sl]
 800edfe:	f8ab 3000 	strh.w	r3, [fp]
 800ee02:	4648      	mov	r0, r9
 800ee04:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800ee08:	f005 fc08 	bl	801461c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800ee12:	4611      	mov	r1, r2
 800ee14:	4628      	mov	r0, r5
 800ee16:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800ee1a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800ee1e:	f7ff fed9 	bl	800ebd4 <_ZN8touchgfx8Drawable5setXYEss>
 800ee22:	2301      	movs	r3, #1
 800ee24:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800ee28:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ee2c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	dd5c      	ble.n	800eeee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800ee34:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dd58      	ble.n	800eeee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800ee3c:	462a      	mov	r2, r5
 800ee3e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee40:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ee44:	6851      	ldr	r1, [r2, #4]
 800ee46:	c303      	stmia	r3!, {r0, r1}
 800ee48:	4631      	mov	r1, r6
 800ee4a:	a80a      	add	r0, sp, #40	@ 0x28
 800ee4c:	f7ff fbde 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 800ee50:	4b38      	ldr	r3, [pc, #224]	@ (800ef34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ee52:	2100      	movs	r1, #0
 800ee54:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ee58:	4b37      	ldr	r3, [pc, #220]	@ (800ef38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ee5a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800ee5e:	aa0a      	add	r2, sp, #40	@ 0x28
 800ee60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee64:	910c      	str	r1, [sp, #48]	@ 0x30
 800ee66:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800ee6a:	ab08      	add	r3, sp, #32
 800ee6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee70:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee74:	4618      	mov	r0, r3
 800ee76:	a90c      	add	r1, sp, #48	@ 0x30
 800ee78:	f7ff fbc8 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 800ee7c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d13c      	bne.n	800eefc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800ee82:	2000      	movs	r0, #0
 800ee84:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800ee88:	2600      	movs	r6, #0
 800ee8a:	696b      	ldr	r3, [r5, #20]
 800ee8c:	a908      	add	r1, sp, #32
 800ee8e:	682a      	ldr	r2, [r5, #0]
 800ee90:	4628      	mov	r0, r5
 800ee92:	9305      	str	r3, [sp, #20]
 800ee94:	616e      	str	r6, [r5, #20]
 800ee96:	6892      	ldr	r2, [r2, #8]
 800ee98:	4790      	blx	r2
 800ee9a:	9b05      	ldr	r3, [sp, #20]
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	4649      	mov	r1, r9
 800eea0:	616b      	str	r3, [r5, #20]
 800eea2:	4628      	mov	r0, r5
 800eea4:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800eea8:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800eeac:	f7ff fe92 	bl	800ebd4 <_ZN8touchgfx8Drawable5setXYEss>
 800eeb0:	9a01      	ldr	r2, [sp, #4]
 800eeb2:	4b23      	ldr	r3, [pc, #140]	@ (800ef40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	801a      	strh	r2, [r3, #0]
 800eeb8:	9a02      	ldr	r2, [sp, #8]
 800eeba:	4b22      	ldr	r3, [pc, #136]	@ (800ef44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800eebc:	801a      	strh	r2, [r3, #0]
 800eebe:	9a03      	ldr	r2, [sp, #12]
 800eec0:	4b1c      	ldr	r3, [pc, #112]	@ (800ef34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800eec2:	801a      	strh	r2, [r3, #0]
 800eec4:	4b1c      	ldr	r3, [pc, #112]	@ (800ef38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800eec6:	9a04      	ldr	r2, [sp, #16]
 800eec8:	801a      	strh	r2, [r3, #0]
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800eed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eed2:	4798      	blx	r3
 800eed4:	6823      	ldr	r3, [r4, #0]
 800eed6:	4620      	mov	r0, r4
 800eed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeda:	4798      	blx	r3
 800eedc:	b00f      	add	sp, #60	@ 0x3c
 800eede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee2:	883b      	ldrh	r3, [r7, #0]
 800eee4:	f8ab 0000 	strh.w	r0, [fp]
 800eee8:	f8aa 3000 	strh.w	r3, [sl]
 800eeec:	e789      	b.n	800ee02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800eeee:	462a      	mov	r2, r5
 800eef0:	ab0a      	add	r3, sp, #40	@ 0x28
 800eef2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800eef6:	6851      	ldr	r1, [r2, #4]
 800eef8:	c303      	stmia	r3!, {r0, r1}
 800eefa:	e7a9      	b.n	800ee50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800eefc:	a807      	add	r0, sp, #28
 800eefe:	f005 fd97 	bl	8014a30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ef02:	4606      	mov	r6, r0
 800ef04:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800ef06:	6803      	ldr	r3, [r0, #0]
 800ef08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef0a:	4798      	blx	r3
 800ef0c:	4286      	cmp	r6, r0
 800ef0e:	d1b8      	bne.n	800ee82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800ef10:	f7ff fe6e 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800ef14:	6803      	ldr	r3, [r0, #0]
 800ef16:	4606      	mov	r6, r0
 800ef18:	a807      	add	r0, sp, #28
 800ef1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef1c:	9305      	str	r3, [sp, #20]
 800ef1e:	f005 fd87 	bl	8014a30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ef22:	9b05      	ldr	r3, [sp, #20]
 800ef24:	4601      	mov	r1, r0
 800ef26:	4630      	mov	r0, r6
 800ef28:	4798      	blx	r3
 800ef2a:	f080 0001 	eor.w	r0, r0, #1
 800ef2e:	b2c0      	uxtb	r0, r0
 800ef30:	e7a8      	b.n	800ee84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800ef32:	bf00      	nop
 800ef34:	2400aa78 	.word	0x2400aa78
 800ef38:	2400aa7a 	.word	0x2400aa7a
 800ef3c:	2400aa7c 	.word	0x2400aa7c
 800ef40:	2400aa7e 	.word	0x2400aa7e
 800ef44:	2400aa80 	.word	0x2400aa80

0800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800ef48:	4b07      	ldr	r3, [pc, #28]	@ (800ef68 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800ef4a:	b510      	push	{r4, lr}
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	4604      	mov	r4, r0
 800ef50:	b13b      	cbz	r3, 800ef62 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ef52:	6803      	ldr	r3, [r0, #0]
 800ef54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef56:	4798      	blx	r3
 800ef58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ef5a:	4283      	cmp	r3, r0
 800ef5c:	d101      	bne.n	800ef62 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ef5e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800ef64:	e7fc      	b.n	800ef60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800ef66:	bf00      	nop
 800ef68:	2400aa82 	.word	0x2400aa82

0800ef6c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800ef6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef70:	461d      	mov	r5, r3
 800ef72:	b08a      	sub	sp, #40	@ 0x28
 800ef74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef78:	4690      	mov	r8, r2
 800ef7a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800ef7e:	2400      	movs	r4, #0
 800ef80:	4607      	mov	r7, r0
 800ef82:	fb06 8505 	mla	r5, r6, r5, r8
 800ef86:	9404      	str	r4, [sp, #16]
 800ef88:	f88d 4020 	strb.w	r4, [sp, #32]
 800ef8c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ef90:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800ef94:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ef98:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ef9c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800efa0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800efa4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800efa8:	f7ff ffce 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800efac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800efb6:	a901      	add	r1, sp, #4
 800efb8:	9505      	str	r5, [sp, #20]
 800efba:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800efbe:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800efc2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800efc6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800efca:	6803      	ldr	r3, [r0, #0]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	4798      	blx	r3
 800efd0:	b00a      	add	sp, #40	@ 0x28
 800efd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800efd6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800efd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efda:	b08b      	sub	sp, #44	@ 0x2c
 800efdc:	2400      	movs	r4, #0
 800efde:	4691      	mov	r9, r2
 800efe0:	461d      	mov	r5, r3
 800efe2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800efe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800efea:	4688      	mov	r8, r1
 800efec:	4607      	mov	r7, r0
 800efee:	9404      	str	r4, [sp, #16]
 800eff0:	fb06 9505 	mla	r5, r6, r5, r9
 800eff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eff8:	f7ff ffa6 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800effc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f000:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f00a:	a901      	add	r1, sp, #4
 800f00c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f010:	9505      	str	r5, [sp, #20]
 800f012:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f016:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f01a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f01e:	f8cd 8010 	str.w	r8, [sp, #16]
 800f022:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f026:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f02a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f02e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f032:	6803      	ldr	r3, [r0, #0]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	4798      	blx	r3
 800f038:	b00b      	add	sp, #44	@ 0x2c
 800f03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f040 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f044:	b08a      	sub	sp, #40	@ 0x28
 800f046:	4698      	mov	r8, r3
 800f048:	2300      	movs	r3, #0
 800f04a:	4606      	mov	r6, r0
 800f04c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800f050:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800f054:	2d0b      	cmp	r5, #11
 800f056:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800f05a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800f05e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800f062:	9304      	str	r3, [sp, #16]
 800f064:	d137      	bne.n	800f0d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800f066:	2380      	movs	r3, #128	@ 0x80
 800f068:	f88d 0020 	strb.w	r0, [sp, #32]
 800f06c:	4630      	mov	r0, r6
 800f06e:	9203      	str	r2, [sp, #12]
 800f070:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f074:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f078:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f07c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f080:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f084:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f088:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f08c:	f7ff ff5c 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f090:	2c0b      	cmp	r4, #11
 800f092:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f096:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f09a:	bf94      	ite	ls
 800f09c:	4b19      	ldrls	r3, [pc, #100]	@ (800f104 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800f09e:	2100      	movhi	r1, #0
 800f0a0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800f0a4:	bf98      	it	ls
 800f0a6:	5d19      	ldrbls	r1, [r3, r4]
 800f0a8:	fb02 8307 	mla	r3, r2, r7, r8
 800f0ac:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f0b0:	10c9      	asrs	r1, r1, #3
 800f0b2:	fb01 0003 	mla	r0, r1, r3, r0
 800f0b6:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800f0ba:	a901      	add	r1, sp, #4
 800f0bc:	9005      	str	r0, [sp, #20]
 800f0be:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	6870      	ldr	r0, [r6, #4]
 800f0c6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f0ca:	6803      	ldr	r3, [r0, #0]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	4798      	blx	r3
 800f0d0:	b00a      	add	sp, #40	@ 0x28
 800f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d6:	2d02      	cmp	r5, #2
 800f0d8:	d109      	bne.n	800f0ee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800f0da:	28ff      	cmp	r0, #255	@ 0xff
 800f0dc:	d105      	bne.n	800f0ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800f0de:	f1bc 0f00 	cmp.w	ip, #0
 800f0e2:	bf14      	ite	ne
 800f0e4:	2340      	movne	r3, #64	@ 0x40
 800f0e6:	2320      	moveq	r3, #32
 800f0e8:	e7be      	b.n	800f068 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f0ea:	2340      	movs	r3, #64	@ 0x40
 800f0ec:	e7bc      	b.n	800f068 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f0ee:	28ff      	cmp	r0, #255	@ 0xff
 800f0f0:	d105      	bne.n	800f0fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800f0f2:	f1bc 0f00 	cmp.w	ip, #0
 800f0f6:	bf14      	ite	ne
 800f0f8:	2304      	movne	r3, #4
 800f0fa:	2301      	moveq	r3, #1
 800f0fc:	e7b4      	b.n	800f068 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f0fe:	2304      	movs	r3, #4
 800f100:	e7b2      	b.n	800f068 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f102:	bf00      	nop
 800f104:	08029724 	.word	0x08029724

0800f108 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	b08b      	sub	sp, #44	@ 0x2c
 800f10e:	461d      	mov	r5, r3
 800f110:	2400      	movs	r4, #0
 800f112:	4688      	mov	r8, r1
 800f114:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800f118:	4693      	mov	fp, r2
 800f11a:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800f11e:	4607      	mov	r7, r0
 800f120:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800f124:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800f128:	9404      	str	r4, [sp, #16]
 800f12a:	bf14      	ite	ne
 800f12c:	2308      	movne	r3, #8
 800f12e:	2302      	moveq	r3, #2
 800f130:	fb05 b50a 	mla	r5, r5, sl, fp
 800f134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f138:	f7ff ff06 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f13c:	2e0b      	cmp	r6, #11
 800f13e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800f142:	a901      	add	r1, sp, #4
 800f144:	bf98      	it	ls
 800f146:	4b13      	ldrls	r3, [pc, #76]	@ (800f194 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800f148:	f8ad a01e 	strh.w	sl, [sp, #30]
 800f14c:	bf98      	it	ls
 800f14e:	5d9c      	ldrbls	r4, [r3, r6]
 800f150:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f154:	10e4      	asrs	r4, r4, #3
 800f156:	f8cd 8010 	str.w	r8, [sp, #16]
 800f15a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f15e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f162:	fb04 0405 	mla	r4, r4, r5, r0
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f16c:	2300      	movs	r3, #0
 800f16e:	9405      	str	r4, [sp, #20]
 800f170:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f174:	f88d 9020 	strb.w	r9, [sp, #32]
 800f178:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800f17c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f180:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800f184:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800f188:	6803      	ldr	r3, [r0, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	4798      	blx	r3
 800f18e:	b00b      	add	sp, #44	@ 0x2c
 800f190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f194:	08029724 	.word	0x08029724

0800f198 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	461e      	mov	r6, r3
 800f19e:	4b0a      	ldr	r3, [pc, #40]	@ (800f1c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800f1a0:	460f      	mov	r7, r1
 800f1a2:	4690      	mov	r8, r2
 800f1a4:	881d      	ldrh	r5, [r3, #0]
 800f1a6:	f7ff fd23 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800f1aa:	6803      	ldr	r3, [r0, #0]
 800f1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ae:	4798      	blx	r3
 800f1b0:	280b      	cmp	r0, #11
 800f1b2:	bf96      	itet	ls
 800f1b4:	4b05      	ldrls	r3, [pc, #20]	@ (800f1cc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800f1b6:	2400      	movhi	r4, #0
 800f1b8:	5c1c      	ldrbls	r4, [r3, r0]
 800f1ba:	fb08 7005 	mla	r0, r8, r5, r7
 800f1be:	10e4      	asrs	r4, r4, #3
 800f1c0:	fb04 6000 	mla	r0, r4, r0, r6
 800f1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c8:	2400aa7e 	.word	0x2400aa7e
 800f1cc:	08029724 	.word	0x08029724

0800f1d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800f1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1d2:	b08b      	sub	sp, #44	@ 0x2c
 800f1d4:	461f      	mov	r7, r3
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4616      	mov	r6, r2
 800f1da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f1de:	2500      	movs	r5, #0
 800f1e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f1e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f1e8:	9504      	str	r5, [sp, #16]
 800f1ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f1ee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f1f2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f1f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f1fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f1fe:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f202:	f88d 3020 	strb.w	r3, [sp, #32]
 800f206:	f7ff fe9f 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f20a:	463a      	mov	r2, r7
 800f20c:	4631      	mov	r1, r6
 800f20e:	4603      	mov	r3, r0
 800f210:	4620      	mov	r0, r4
 800f212:	f7ff ffc1 	bl	800f198 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f216:	4b0e      	ldr	r3, [pc, #56]	@ (800f250 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800f218:	9005      	str	r0, [sp, #20]
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f220:	f7ff fce6 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800f224:	6803      	ldr	r3, [r0, #0]
 800f226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f228:	4798      	blx	r3
 800f22a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f22c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800f230:	a901      	add	r1, sp, #4
 800f232:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800f236:	9304      	str	r3, [sp, #16]
 800f238:	6860      	ldr	r0, [r4, #4]
 800f23a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f23e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800f242:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f246:	6803      	ldr	r3, [r0, #0]
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	4798      	blx	r3
 800f24c:	b00b      	add	sp, #44	@ 0x2c
 800f24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f250:	2400aa7e 	.word	0x2400aa7e

0800f254 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800f254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f256:	b08d      	sub	sp, #52	@ 0x34
 800f258:	2501      	movs	r5, #1
 800f25a:	4604      	mov	r4, r0
 800f25c:	466b      	mov	r3, sp
 800f25e:	9503      	str	r5, [sp, #12]
 800f260:	e883 0006 	stmia.w	r3, {r1, r2}
 800f264:	2300      	movs	r3, #0
 800f266:	f8bd 6000 	ldrh.w	r6, [sp]
 800f26a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800f26e:	9306      	str	r3, [sp, #24]
 800f270:	6803      	ldr	r3, [r0, #0]
 800f272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f274:	4798      	blx	r3
 800f276:	463a      	mov	r2, r7
 800f278:	4631      	mov	r1, r6
 800f27a:	4603      	mov	r3, r0
 800f27c:	4620      	mov	r0, r4
 800f27e:	f7ff ff8b 	bl	800f198 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f282:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f284:	9004      	str	r0, [sp, #16]
 800f286:	9307      	str	r3, [sp, #28]
 800f288:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f28c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f290:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f294:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f298:	4b0e      	ldr	r3, [pc, #56]	@ (800f2d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f2a0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f2a4:	f7ff fca4 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800f2a8:	6803      	ldr	r3, [r0, #0]
 800f2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ac:	4798      	blx	r3
 800f2ae:	23ff      	movs	r3, #255	@ 0xff
 800f2b0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f2b4:	a903      	add	r1, sp, #12
 800f2b6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f2ba:	6860      	ldr	r0, [r4, #4]
 800f2bc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f2c0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f2c4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f2c8:	6803      	ldr	r3, [r0, #0]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	4798      	blx	r3
 800f2ce:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800f2d0:	b00d      	add	sp, #52	@ 0x34
 800f2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d4:	2400aa7e 	.word	0x2400aa7e

0800f2d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800f2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2dc:	b08c      	sub	sp, #48	@ 0x30
 800f2de:	461e      	mov	r6, r3
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	466d      	mov	r5, sp
 800f2e6:	9306      	str	r3, [sp, #24]
 800f2e8:	6803      	ldr	r3, [r0, #0]
 800f2ea:	e885 0006 	stmia.w	r5, {r1, r2}
 800f2ee:	2501      	movs	r5, #1
 800f2f0:	f8bd 7000 	ldrh.w	r7, [sp]
 800f2f4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800f2f8:	9503      	str	r5, [sp, #12]
 800f2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2fc:	4798      	blx	r3
 800f2fe:	4642      	mov	r2, r8
 800f300:	4639      	mov	r1, r7
 800f302:	4603      	mov	r3, r0
 800f304:	4620      	mov	r0, r4
 800f306:	f7ff ff47 	bl	800f198 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f30a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f30e:	9004      	str	r0, [sp, #16]
 800f310:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f314:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f318:	9607      	str	r6, [sp, #28]
 800f31a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800f31e:	4b10      	ldr	r3, [pc, #64]	@ (800f360 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800f326:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f328:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800f32c:	f7ff fc60 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 800f330:	6803      	ldr	r3, [r0, #0]
 800f332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f334:	4798      	blx	r3
 800f336:	23ff      	movs	r3, #255	@ 0xff
 800f338:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800f33c:	a903      	add	r1, sp, #12
 800f33e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800f342:	6860      	ldr	r0, [r4, #4]
 800f344:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800f348:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800f34c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800f350:	6803      	ldr	r3, [r0, #0]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	4798      	blx	r3
 800f356:	4630      	mov	r0, r6
 800f358:	b00c      	add	sp, #48	@ 0x30
 800f35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f35e:	bf00      	nop
 800f360:	2400aa7e 	.word	0x2400aa7e

0800f364 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800f364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f366:	b085      	sub	sp, #20
 800f368:	4605      	mov	r5, r0
 800f36a:	ac02      	add	r4, sp, #8
 800f36c:	e884 0006 	stmia.w	r4, {r1, r2}
 800f370:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800f374:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800f378:	f7ff fde6 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f37c:	4631      	mov	r1, r6
 800f37e:	4603      	mov	r3, r0
 800f380:	463a      	mov	r2, r7
 800f382:	4628      	mov	r0, r5
 800f384:	f7ff ff08 	bl	800f198 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f388:	4a05      	ldr	r2, [pc, #20]	@ (800f3a0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	8812      	ldrh	r2, [r2, #0]
 800f38e:	9200      	str	r2, [sp, #0]
 800f390:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800f392:	4603      	mov	r3, r0
 800f394:	4628      	mov	r0, r5
 800f396:	e894 0006 	ldmia.w	r4, {r1, r2}
 800f39a:	47b0      	blx	r6
 800f39c:	b005      	add	sp, #20
 800f39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3a0:	2400aa7e 	.word	0x2400aa7e

0800f3a4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800f3a4:	b570      	push	{r4, r5, r6, lr}
 800f3a6:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	b19b      	cbz	r3, 800f3d6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800f3ae:	2002      	movs	r0, #2
 800f3b0:	f7fe f938 	bl	800d624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f3bc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800f3c6:	f7ff fdbf 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f3ca:	4601      	mov	r1, r0
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	462b      	mov	r3, r5
 800f3d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3d4:	4718      	bx	r3
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}

0800f3d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800f3d8:	b538      	push	{r3, r4, r5, lr}
 800f3da:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800f3de:	4604      	mov	r4, r0
 800f3e0:	460d      	mov	r5, r1
 800f3e2:	428b      	cmp	r3, r1
 800f3e4:	d006      	beq.n	800f3f4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800f3e6:	6803      	ldr	r3, [r0, #0]
 800f3e8:	b929      	cbnz	r1, 800f3f6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800f3ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f3ee:	4798      	blx	r3
 800f3f0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800f3f4:	bd38      	pop	{r3, r4, r5, pc}
 800f3f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f3fa:	e7f8      	b.n	800f3ee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800f3fc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800f3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f434 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800f3fe:	b510      	push	{r4, lr}
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	4604      	mov	r4, r0
 800f404:	b95b      	cbnz	r3, 800f41e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f406:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d007      	beq.n	800f41e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f40e:	6840      	ldr	r0, [r0, #4]
 800f410:	f000 f912 	bl	800f638 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800f414:	b118      	cbz	r0, 800f41e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f416:	6862      	ldr	r2, [r4, #4]
 800f418:	7a53      	ldrb	r3, [r2, #9]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d0fc      	beq.n	800f418 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800f41e:	f7fe f9fb 	bl	800d818 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f422:	4620      	mov	r0, r4
 800f424:	2100      	movs	r1, #0
 800f426:	f7ff ffd7 	bl	800f3d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f42a:	4620      	mov	r0, r4
 800f42c:	f7ff fd8c 	bl	800ef48 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f430:	bd10      	pop	{r4, pc}
 800f432:	bf00      	nop
 800f434:	2400aa82 	.word	0x2400aa82

0800f438 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800f438:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800f43c:	1a13      	subs	r3, r2, r0
 800f43e:	4258      	negs	r0, r3
 800f440:	4158      	adcs	r0, r3
 800f442:	4770      	bx	lr

0800f444 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800f444:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800f448:	1a9b      	subs	r3, r3, r2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	bfdc      	itt	le
 800f44e:	6882      	ldrle	r2, [r0, #8]
 800f450:	189b      	addle	r3, r3, r2
 800f452:	2b01      	cmp	r3, #1
 800f454:	bfcc      	ite	gt
 800f456:	2000      	movgt	r0, #0
 800f458:	2001      	movle	r0, #1
 800f45a:	4770      	bx	lr

0800f45c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800f45c:	6902      	ldr	r2, [r0, #16]
 800f45e:	6843      	ldr	r3, [r0, #4]
 800f460:	2024      	movs	r0, #36	@ 0x24
 800f462:	fb00 3002 	mla	r0, r0, r2, r3
 800f466:	4770      	bx	lr

0800f468 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800f468:	6803      	ldr	r3, [r0, #0]
 800f46a:	691b      	ldr	r3, [r3, #16]
 800f46c:	4718      	bx	r3

0800f46e <_ZN8touchgfx13DMA_Interface7executeEv>:
 800f46e:	2301      	movs	r3, #1
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	7203      	strb	r3, [r0, #8]
 800f474:	4604      	mov	r4, r0
 800f476:	6840      	ldr	r0, [r0, #4]
 800f478:	6803      	ldr	r3, [r0, #0]
 800f47a:	699b      	ldr	r3, [r3, #24]
 800f47c:	4798      	blx	r3
 800f47e:	6803      	ldr	r3, [r0, #0]
 800f480:	4605      	mov	r5, r0
 800f482:	2b40      	cmp	r3, #64	@ 0x40
 800f484:	d00c      	beq.n	800f4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f486:	d810      	bhi.n	800f4aa <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800f488:	2b04      	cmp	r3, #4
 800f48a:	d01d      	beq.n	800f4c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800f48c:	d804      	bhi.n	800f498 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d006      	beq.n	800f4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f492:	2b02      	cmp	r3, #2
 800f494:	d02c      	beq.n	800f4f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800f496:	bd70      	pop	{r4, r5, r6, pc}
 800f498:	2b08      	cmp	r3, #8
 800f49a:	d01d      	beq.n	800f4d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800f49c:	2b20      	cmp	r3, #32
 800f49e:	d1fa      	bne.n	800f496 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4a6:	4798      	blx	r3
 800f4a8:	e013      	b.n	800f4d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800f4aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4ae:	d0f7      	beq.n	800f4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f4b0:	d804      	bhi.n	800f4bc <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800f4b2:	2b80      	cmp	r3, #128	@ 0x80
 800f4b4:	d0f4      	beq.n	800f4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f4b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4ba:	e7f0      	b.n	800f49e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800f4bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4c0:	d0ee      	beq.n	800f4a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f4c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4c6:	e7e5      	b.n	800f494 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800f4c8:	6823      	ldr	r3, [r4, #0]
 800f4ca:	7f01      	ldrb	r1, [r0, #28]
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4d0:	4798      	blx	r3
 800f4d2:	6823      	ldr	r3, [r4, #0]
 800f4d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4d6:	e006      	b.n	800f4e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	7f01      	ldrb	r1, [r0, #28]
 800f4dc:	4620      	mov	r0, r4
 800f4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4e0:	4798      	blx	r3
 800f4e2:	6823      	ldr	r3, [r4, #0]
 800f4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4ee:	4718      	bx	r3
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4f6:	4798      	blx	r3
 800f4f8:	e7f3      	b.n	800f4e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800f4fa <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800f4fa:	4770      	bx	lr

0800f4fc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800f4fc:	4770      	bx	lr

0800f4fe <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800f4fe:	4770      	bx	lr

0800f500 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800f500:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800f504:	b510      	push	{r4, lr}
 800f506:	1ad2      	subs	r2, r2, r3
 800f508:	2a00      	cmp	r2, #0
 800f50a:	bfdc      	itt	le
 800f50c:	6884      	ldrle	r4, [r0, #8]
 800f50e:	1912      	addle	r2, r2, r4
 800f510:	2a01      	cmp	r2, #1
 800f512:	dd16      	ble.n	800f542 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800f514:	6842      	ldr	r2, [r0, #4]
 800f516:	2424      	movs	r4, #36	@ 0x24
 800f518:	fb04 2303 	mla	r3, r4, r3, r2
 800f51c:	f101 0220 	add.w	r2, r1, #32
 800f520:	f851 4b04 	ldr.w	r4, [r1], #4
 800f524:	4291      	cmp	r1, r2
 800f526:	f843 4b04 	str.w	r4, [r3], #4
 800f52a:	d1f9      	bne.n	800f520 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800f52c:	780a      	ldrb	r2, [r1, #0]
 800f52e:	701a      	strb	r2, [r3, #0]
 800f530:	68c3      	ldr	r3, [r0, #12]
 800f532:	6882      	ldr	r2, [r0, #8]
 800f534:	f3bf 8f5b 	dmb	ish
 800f538:	3301      	adds	r3, #1
 800f53a:	429a      	cmp	r2, r3
 800f53c:	bfd8      	it	le
 800f53e:	1a9b      	suble	r3, r3, r2
 800f540:	60c3      	str	r3, [r0, #12]
 800f542:	bd10      	pop	{r4, pc}

0800f544 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800f544:	6903      	ldr	r3, [r0, #16]
 800f546:	6882      	ldr	r2, [r0, #8]
 800f548:	f3bf 8f5b 	dmb	ish
 800f54c:	3301      	adds	r3, #1
 800f54e:	429a      	cmp	r2, r3
 800f550:	bfd8      	it	le
 800f552:	1a9b      	suble	r3, r3, r2
 800f554:	6103      	str	r3, [r0, #16]
 800f556:	4770      	bx	lr

0800f558 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	4604      	mov	r4, r0
 800f55c:	460e      	mov	r6, r1
 800f55e:	6860      	ldr	r0, [r4, #4]
 800f560:	6803      	ldr	r3, [r0, #0]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	4798      	blx	r3
 800f566:	2800      	cmp	r0, #0
 800f568:	d1f9      	bne.n	800f55e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800f56a:	4d0d      	ldr	r5, [pc, #52]	@ (800f5a0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800f56c:	6828      	ldr	r0, [r5, #0]
 800f56e:	6803      	ldr	r3, [r0, #0]
 800f570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f572:	4798      	blx	r3
 800f574:	f7fe f95e 	bl	800d834 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800f578:	6828      	ldr	r0, [r5, #0]
 800f57a:	2101      	movs	r1, #1
 800f57c:	f7ff ff2c 	bl	800f3d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f580:	6860      	ldr	r0, [r4, #4]
 800f582:	4631      	mov	r1, r6
 800f584:	6803      	ldr	r3, [r0, #0]
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	4798      	blx	r3
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	4620      	mov	r0, r4
 800f58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f590:	4798      	blx	r3
 800f592:	6828      	ldr	r0, [r5, #0]
 800f594:	6803      	ldr	r3, [r0, #0]
 800f596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f59a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f59c:	4718      	bx	r3
 800f59e:	bf00      	nop
 800f5a0:	2400aa84 	.word	0x2400aa84

0800f5a4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800f5a4:	b508      	push	{r3, lr}
 800f5a6:	f7fe f937 	bl	800d818 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f5aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f5ae:	f7fe b93b 	b.w	800d828 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f5b2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800f5b2:	b510      	push	{r4, lr}
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	2114      	movs	r1, #20
 800f5b8:	f013 fbd4 	bl	8022d64 <_ZdlPvj>
 800f5bc:	4620      	mov	r0, r4
 800f5be:	bd10      	pop	{r4, pc}

0800f5c0 <_ZN8touchgfx13DMA_Interface5startEv>:
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	6840      	ldr	r0, [r0, #4]
 800f5c6:	6803      	ldr	r3, [r0, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4798      	blx	r3
 800f5cc:	b948      	cbnz	r0, 800f5e2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f5ce:	7a63      	ldrb	r3, [r4, #9]
 800f5d0:	b13b      	cbz	r3, 800f5e2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f5d2:	7a23      	ldrb	r3, [r4, #8]
 800f5d4:	b92b      	cbnz	r3, 800f5e2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	4620      	mov	r0, r4
 800f5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e0:	4718      	bx	r3
 800f5e2:	bd10      	pop	{r4, pc}

0800f5e4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800f5e4:	b570      	push	{r4, r5, r6, lr}
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	6840      	ldr	r0, [r0, #4]
 800f5ea:	6803      	ldr	r3, [r0, #0]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4798      	blx	r3
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	b930      	cbnz	r0, 800f602 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f5f4:	7a23      	ldrb	r3, [r4, #8]
 800f5f6:	b123      	cbz	r3, 800f602 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f5f8:	6860      	ldr	r0, [r4, #4]
 800f5fa:	6803      	ldr	r3, [r0, #0]
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	4798      	blx	r3
 800f600:	7225      	strb	r5, [r4, #8]
 800f602:	6860      	ldr	r0, [r4, #4]
 800f604:	6803      	ldr	r3, [r0, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4798      	blx	r3
 800f60a:	b928      	cbnz	r0, 800f618 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	4620      	mov	r0, r4
 800f610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f616:	4718      	bx	r3
 800f618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f61c:	f7fe b912 	b.w	800d844 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800f620 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800f620:	b510      	push	{r4, lr}
 800f622:	6082      	str	r2, [r0, #8]
 800f624:	2200      	movs	r2, #0
 800f626:	4c03      	ldr	r4, [pc, #12]	@ (800f634 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800f628:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800f62c:	e9c0 4100 	strd	r4, r1, [r0]
 800f630:	bd10      	pop	{r4, pc}
 800f632:	bf00      	nop
 800f634:	08029738 	.word	0x08029738

0800f638 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800f638:	6840      	ldr	r0, [r0, #4]
 800f63a:	6803      	ldr	r3, [r0, #0]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4718      	bx	r3

0800f640 <_ZN8touchgfx8Drawable13getFirstChildEv>:
 800f640:	2000      	movs	r0, #0
 800f642:	4770      	bx	lr

0800f644 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
 800f644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f648:	8183      	strh	r3, [r0, #12]
 800f64a:	f04f 33ff 	mov.w	r3, #4294967295
 800f64e:	6203      	str	r3, [r0, #32]
 800f650:	6813      	ldr	r3, [r2, #0]
 800f652:	61c3      	str	r3, [r0, #28]
 800f654:	6010      	str	r0, [r2, #0]
 800f656:	4770      	bx	lr

0800f658 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
 800f658:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800f65c:	b11a      	cbz	r2, 800f666 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800f65e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800f662:	b102      	cbz	r2, 800f666 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800f664:	6018      	str	r0, [r3, #0]
 800f666:	4770      	bx	lr

0800f668 <_ZN8touchgfx8TextArea8setWidthEs>:
 800f668:	b530      	push	{r4, r5, lr}
 800f66a:	b085      	sub	sp, #20
 800f66c:	6803      	ldr	r3, [r0, #0]
 800f66e:	4604      	mov	r4, r0
 800f670:	8101      	strh	r1, [r0, #8]
 800f672:	466d      	mov	r5, sp
 800f674:	4601      	mov	r1, r0
 800f676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f67a:	343c      	adds	r4, #60	@ 0x3c
 800f67c:	4628      	mov	r0, r5
 800f67e:	4798      	blx	r3
 800f680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f688:	b005      	add	sp, #20
 800f68a:	bd30      	pop	{r4, r5, pc}

0800f68c <_ZN8touchgfx8TextArea9setHeightEs>:
 800f68c:	b530      	push	{r4, r5, lr}
 800f68e:	b085      	sub	sp, #20
 800f690:	6803      	ldr	r3, [r0, #0]
 800f692:	4604      	mov	r4, r0
 800f694:	8141      	strh	r1, [r0, #10]
 800f696:	466d      	mov	r5, sp
 800f698:	4601      	mov	r1, r0
 800f69a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f69e:	343c      	adds	r4, #60	@ 0x3c
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	4798      	blx	r3
 800f6a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f6a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f6ac:	b005      	add	sp, #20
 800f6ae:	bd30      	pop	{r4, r5, pc}

0800f6b0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	8002      	strh	r2, [r0, #0]
 800f6b4:	8042      	strh	r2, [r0, #2]
 800f6b6:	8082      	strh	r2, [r0, #4]
 800f6b8:	80c2      	strh	r2, [r0, #6]
 800f6ba:	4770      	bx	lr

0800f6bc <_ZN8touchgfx8TextArea8setAlphaEh>:
 800f6bc:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 800f6c0:	4770      	bx	lr
	...

0800f6c4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	6803      	ldr	r3, [r0, #0]
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800f6cc:	460d      	mov	r5, r1
 800f6ce:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 800f6d0:	4b08      	ldr	r3, [pc, #32]	@ (800f6f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800f6d8:	4b07      	ldr	r3, [pc, #28]	@ (800f6f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f6e0:	6803      	ldr	r3, [r0, #0]
 800f6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e4:	4798      	blx	r3
 800f6e6:	1a29      	subs	r1, r5, r0
 800f6e8:	4633      	mov	r3, r6
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	b209      	sxth	r1, r1
 800f6ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6f2:	4718      	bx	r3
 800f6f4:	2400aad4 	.word	0x2400aad4
 800f6f8:	2400aadc 	.word	0x2400aadc

0800f6fc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800f6fc:	b570      	push	{r4, r5, r6, lr}
 800f6fe:	6803      	ldr	r3, [r0, #0]
 800f700:	4604      	mov	r4, r0
 800f702:	4615      	mov	r5, r2
 800f704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f706:	4798      	blx	r3
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	4629      	mov	r1, r5
 800f70c:	4620      	mov	r0, r4
 800f70e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f714:	4718      	bx	r3

0800f716 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800f716:	2000      	movs	r0, #0
 800f718:	4770      	bx	lr

0800f71a <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 800f71a:	2000      	movs	r0, #0
 800f71c:	4770      	bx	lr
	...

0800f720 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800f720:	4b07      	ldr	r3, [pc, #28]	@ (800f740 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800f722:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	4293      	cmp	r3, r2
 800f728:	bf81      	itttt	hi
 800f72a:	4b06      	ldrhi	r3, [pc, #24]	@ (800f744 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800f72c:	681b      	ldrhi	r3, [r3, #0]
 800f72e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800f732:	7858      	ldrbhi	r0, [r3, #1]
 800f734:	bf8c      	ite	hi
 800f736:	f000 0003 	andhi.w	r0, r0, #3
 800f73a:	2000      	movls	r0, #0
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	2400aad8 	.word	0x2400aad8
 800f744:	2400aad4 	.word	0x2400aad4

0800f748 <_ZN8touchgfx8TextAreaD1Ev>:
 800f748:	4770      	bx	lr
	...

0800f74c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800f74c:	4b11      	ldr	r3, [pc, #68]	@ (800f794 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800f74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f752:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800f754:	4604      	mov	r4, r0
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	428b      	cmp	r3, r1
 800f75a:	d918      	bls.n	800f78e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800f75c:	6803      	ldr	r3, [r0, #0]
 800f75e:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800f760:	4b0d      	ldr	r3, [pc, #52]	@ (800f798 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800f762:	6818      	ldr	r0, [r3, #0]
 800f764:	f7fd fe9c 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	4606      	mov	r6, r0
 800f76c:	4620      	mov	r0, r4
 800f76e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f770:	4798      	blx	r3
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	4607      	mov	r7, r0
 800f776:	4620      	mov	r0, r4
 800f778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f77c:	4798      	blx	r3
 800f77e:	463a      	mov	r2, r7
 800f780:	4603      	mov	r3, r0
 800f782:	4631      	mov	r1, r6
 800f784:	4620      	mov	r0, r4
 800f786:	46ac      	mov	ip, r5
 800f788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f78c:	4760      	bx	ip
 800f78e:	2000      	movs	r0, #0
 800f790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f794:	2400aad8 	.word	0x2400aad8
 800f798:	2400aae0 	.word	0x2400aae0

0800f79c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800f79c:	4b18      	ldr	r3, [pc, #96]	@ (800f800 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800f79e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7a2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	428b      	cmp	r3, r1
 800f7aa:	d926      	bls.n	800f7fa <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800f7ac:	4b15      	ldr	r3, [pc, #84]	@ (800f804 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800f7b4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800f7b8:	4b13      	ldr	r3, [pc, #76]	@ (800f808 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800f7ba:	7855      	ldrb	r5, [r2, #1]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800f7c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f7c6:	6833      	ldr	r3, [r6, #0]
 800f7c8:	69df      	ldr	r7, [r3, #28]
 800f7ca:	4b10      	ldr	r3, [pc, #64]	@ (800f80c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	f7fd fe67 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800f7d2:	6823      	ldr	r3, [r4, #0]
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7da:	4798      	blx	r3
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	4681      	mov	r9, r0
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7e6:	4798      	blx	r3
 800f7e8:	464b      	mov	r3, r9
 800f7ea:	9000      	str	r0, [sp, #0]
 800f7ec:	4642      	mov	r2, r8
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	47b8      	blx	r7
 800f7f4:	b003      	add	sp, #12
 800f7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fa:	2000      	movs	r0, #0
 800f7fc:	e7fa      	b.n	800f7f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800f7fe:	bf00      	nop
 800f800:	2400aad8 	.word	0x2400aad8
 800f804:	2400aad4 	.word	0x2400aad4
 800f808:	2400aadc 	.word	0x2400aadc
 800f80c:	2400aae0 	.word	0x2400aae0

0800f810 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800f810:	b40e      	push	{r1, r2, r3}
 800f812:	4b30      	ldr	r3, [pc, #192]	@ (800f8d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800f814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f818:	881a      	ldrh	r2, [r3, #0]
 800f81a:	b09d      	sub	sp, #116	@ 0x74
 800f81c:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800f81e:	4604      	mov	r4, r0
 800f820:	429a      	cmp	r2, r3
 800f822:	d954      	bls.n	800f8ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800f824:	aa26      	add	r2, sp, #152	@ 0x98
 800f826:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800f8d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800f82a:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800f8dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800f82e:	9202      	str	r2, [sp, #8]
 800f830:	f8d9 2000 	ldr.w	r2, [r9]
 800f834:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f838:	f8d8 3000 	ldr.w	r3, [r8]
 800f83c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	4628      	mov	r0, r5
 800f844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f846:	4798      	blx	r3
 800f848:	4606      	mov	r6, r0
 800f84a:	b207      	sxth	r7, r0
 800f84c:	a803      	add	r0, sp, #12
 800f84e:	f003 ff39 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 800f852:	682b      	ldr	r3, [r5, #0]
 800f854:	4628      	mov	r0, r5
 800f856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f858:	4798      	blx	r3
 800f85a:	682b      	ldr	r3, [r5, #0]
 800f85c:	4682      	mov	sl, r0
 800f85e:	4628      	mov	r0, r5
 800f860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f862:	4798      	blx	r3
 800f864:	4653      	mov	r3, sl
 800f866:	9000      	str	r0, [sp, #0]
 800f868:	a803      	add	r0, sp, #12
 800f86a:	9a02      	ldr	r2, [sp, #8]
 800f86c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800f86e:	f003 ff84 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f872:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800f874:	f8d9 3000 	ldr.w	r3, [r9]
 800f878:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800f87c:	8925      	ldrh	r5, [r4, #8]
 800f87e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800f882:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800f886:	eba5 050c 	sub.w	r5, r5, ip
 800f88a:	784a      	ldrb	r2, [r1, #1]
 800f88c:	f8d8 3000 	ldr.w	r3, [r8]
 800f890:	b22d      	sxth	r5, r5
 800f892:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800f896:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800f89a:	9500      	str	r5, [sp, #0]
 800f89c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f8a0:	a803      	add	r0, sp, #12
 800f8a2:	f001 fda7 	bl	80113f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f8a6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800f8aa:	b203      	sxth	r3, r0
 800f8ac:	18b9      	adds	r1, r7, r2
 800f8ae:	2900      	cmp	r1, #0
 800f8b0:	dd0b      	ble.n	800f8ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800f8b2:	3b01      	subs	r3, #1
 800f8b4:	fb13 f302 	smulbb	r3, r3, r2
 800f8b8:	fb16 3300 	smlabb	r3, r6, r0, r3
 800f8bc:	b21f      	sxth	r7, r3
 800f8be:	4638      	mov	r0, r7
 800f8c0:	b01d      	add	sp, #116	@ 0x74
 800f8c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c6:	b003      	add	sp, #12
 800f8c8:	4770      	bx	lr
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dcf7      	bgt.n	800f8be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f8ce:	2700      	movs	r7, #0
 800f8d0:	e7f5      	b.n	800f8be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f8d2:	bf00      	nop
 800f8d4:	2400aad8 	.word	0x2400aad8
 800f8d8:	2400aad4 	.word	0x2400aad4
 800f8dc:	2400aadc 	.word	0x2400aadc

0800f8e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800f8e0:	4bbd      	ldr	r3, [pc, #756]	@ (800fbd8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800f8e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800f8ec:	b0a9      	sub	sp, #164	@ 0xa4
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	428b      	cmp	r3, r1
 800f8f2:	d809      	bhi.n	800f908 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8fa:	6083      	str	r3, [r0, #8]
 800f8fc:	e9c0 3200 	strd	r3, r2, [r0]
 800f900:	4640      	mov	r0, r8
 800f902:	b029      	add	sp, #164	@ 0xa4
 800f904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f908:	4eb4      	ldr	r6, [pc, #720]	@ (800fbdc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800f90a:	6833      	ldr	r3, [r6, #0]
 800f90c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800f910:	4bb3      	ldr	r3, [pc, #716]	@ (800fbe0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f918:	4bb2      	ldr	r3, [pc, #712]	@ (800fbe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800f91a:	6818      	ldr	r0, [r3, #0]
 800f91c:	f7fd fdc0 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	4681      	mov	r9, r0
 800f924:	4628      	mov	r0, r5
 800f926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f928:	4798      	blx	r3
 800f92a:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800f92c:	b203      	sxth	r3, r0
 800f92e:	4682      	mov	sl, r0
 800f930:	4407      	add	r7, r0
 800f932:	a80f      	add	r0, sp, #60	@ 0x3c
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	b2bb      	uxth	r3, r7
 800f938:	9303      	str	r3, [sp, #12]
 800f93a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f040 80a5 	bne.w	800fa8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 800f944:	f003 febe 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	4628      	mov	r0, r5
 800f94c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f94e:	4798      	blx	r3
 800f950:	682b      	ldr	r3, [r5, #0]
 800f952:	4606      	mov	r6, r0
 800f954:	4628      	mov	r0, r5
 800f956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f958:	4798      	blx	r3
 800f95a:	6823      	ldr	r3, [r4, #0]
 800f95c:	4607      	mov	r7, r0
 800f95e:	4620      	mov	r0, r4
 800f960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f962:	4798      	blx	r3
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	4683      	mov	fp, r0
 800f968:	4620      	mov	r0, r4
 800f96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f96e:	4798      	blx	r3
 800f970:	463b      	mov	r3, r7
 800f972:	4649      	mov	r1, r9
 800f974:	4632      	mov	r2, r6
 800f976:	2600      	movs	r6, #0
 800f978:	e9cd b000 	strd	fp, r0, [sp]
 800f97c:	a80f      	add	r0, sp, #60	@ 0x3c
 800f97e:	4637      	mov	r7, r6
 800f980:	f003 ff10 	bl	80137a4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800f984:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f988:	f8df b250 	ldr.w	fp, [pc, #592]	@ 800fbdc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800f98c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800f990:	bf0c      	ite	eq
 800f992:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800f996:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800f99a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800f99c:	4629      	mov	r1, r5
 800f99e:	f8db 3000 	ldr.w	r3, [fp]
 800f9a2:	a80f      	add	r0, sp, #60	@ 0x3c
 800f9a4:	3701      	adds	r7, #1
 800f9a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f9aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f9ae:	b2bf      	uxth	r7, r7
 800f9b0:	785b      	ldrb	r3, [r3, #1]
 800f9b2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f9b6:	f001 fa24 	bl	8010e02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800f9ba:	9b03      	ldr	r3, [sp, #12]
 800f9bc:	4286      	cmp	r6, r0
 800f9be:	eba9 0903 	sub.w	r9, r9, r3
 800f9c2:	bfb8      	it	lt
 800f9c4:	4606      	movlt	r6, r0
 800f9c6:	a80f      	add	r0, sp, #60	@ 0x3c
 800f9c8:	fa0f f989 	sxth.w	r9, r9
 800f9cc:	b236      	sxth	r6, r6
 800f9ce:	f003 fea0 	bl	8013712 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800f9d2:	b918      	cbnz	r0, 800f9dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f9d4:	7a2b      	ldrb	r3, [r5, #8]
 800f9d6:	444b      	add	r3, r9
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dcde      	bgt.n	800f99a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 800f9dc:	9b03      	ldr	r3, [sp, #12]
 800f9de:	4620      	mov	r0, r4
 800f9e0:	9a04      	ldr	r2, [sp, #16]
 800f9e2:	fb13 f707 	smulbb	r7, r3, r7
 800f9e6:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f9e8:	f895 9009 	ldrb.w	r9, [r5, #9]
 800f9ec:	1aff      	subs	r7, r7, r3
 800f9ee:	b2bf      	uxth	r7, r7
 800f9f0:	b23b      	sxth	r3, r7
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	bfa8      	it	ge
 800f9f6:	4657      	movge	r7, sl
 800f9f8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f9fc:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	444f      	add	r7, r9
 800fa04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa06:	bf08      	it	eq
 800fa08:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800fa0c:	fa1f f987 	uxth.w	r9, r7
 800fa10:	bf18      	it	ne
 800fa12:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800fa16:	4798      	blx	r3
 800fa18:	2801      	cmp	r0, #1
 800fa1a:	fa0f f789 	sxth.w	r7, r9
 800fa1e:	b2b3      	uxth	r3, r6
 800fa20:	f000 80e2 	beq.w	800fbe8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800fa24:	2802      	cmp	r0, #2
 800fa26:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800fa2a:	f000 80e3 	beq.w	800fbf4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800fa2e:	7aea      	ldrb	r2, [r5, #11]
 800fa30:	b236      	sxth	r6, r6
 800fa32:	7b2d      	ldrb	r5, [r5, #12]
 800fa34:	1ab6      	subs	r6, r6, r2
 800fa36:	442a      	add	r2, r5
 800fa38:	fa1f fa86 	uxth.w	sl, r6
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800fa42:	fa0f fb8a 	sxth.w	fp, sl
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	2a02      	cmp	r2, #2
 800fa4a:	b21e      	sxth	r6, r3
 800fa4c:	f000 80d6 	beq.w	800fbfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800fa50:	2a03      	cmp	r2, #3
 800fa52:	f000 80de 	beq.w	800fc12 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800fa56:	2a01      	cmp	r2, #1
 800fa58:	f040 80e6 	bne.w	800fc28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800fa5c:	8925      	ldrh	r5, [r4, #8]
 800fa5e:	4633      	mov	r3, r6
 800fa60:	463e      	mov	r6, r7
 800fa62:	eba5 0909 	sub.w	r9, r5, r9
 800fa66:	461f      	mov	r7, r3
 800fa68:	465d      	mov	r5, fp
 800fa6a:	fa0f fb89 	sxth.w	fp, r9
 800fa6e:	4b5d      	ldr	r3, [pc, #372]	@ (800fbe4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800fa70:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800fa72:	6818      	ldr	r0, [r3, #0]
 800fa74:	f7fd fd14 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fa78:	f8a8 b000 	strh.w	fp, [r8]
 800fa7c:	f8a8 5002 	strh.w	r5, [r8, #2]
 800fa80:	f8a8 6004 	strh.w	r6, [r8, #4]
 800fa84:	f8a8 7006 	strh.w	r7, [r8, #6]
 800fa88:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa8c:	e738      	b.n	800f900 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800fa8e:	f003 fe19 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 800fa92:	682b      	ldr	r3, [r5, #0]
 800fa94:	4628      	mov	r0, r5
 800fa96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa98:	4798      	blx	r3
 800fa9a:	682b      	ldr	r3, [r5, #0]
 800fa9c:	4607      	mov	r7, r0
 800fa9e:	4628      	mov	r0, r5
 800faa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800faa2:	4798      	blx	r3
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	4683      	mov	fp, r0
 800faa8:	4620      	mov	r0, r4
 800faaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800faac:	4798      	blx	r3
 800faae:	6822      	ldr	r2, [r4, #0]
 800fab0:	9005      	str	r0, [sp, #20]
 800fab2:	4620      	mov	r0, r4
 800fab4:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fab8:	4790      	blx	r2
 800faba:	9b05      	ldr	r3, [sp, #20]
 800fabc:	463a      	mov	r2, r7
 800fabe:	4649      	mov	r1, r9
 800fac0:	9001      	str	r0, [sp, #4]
 800fac2:	a80f      	add	r0, sp, #60	@ 0x3c
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	465b      	mov	r3, fp
 800fac8:	f003 fe6c 	bl	80137a4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800facc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800fad0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800fad4:	af0f      	add	r7, sp, #60	@ 0x3c
 800fad6:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800fada:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fade:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800fae0:	bf0a      	itet	eq
 800fae2:	464a      	moveq	r2, r9
 800fae4:	461a      	movne	r2, r3
 800fae6:	4699      	moveq	r9, r3
 800fae8:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800faec:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800faf0:	1ad2      	subs	r2, r2, r3
 800faf2:	6833      	ldr	r3, [r6, #0]
 800faf4:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800faf8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800fafc:	7859      	ldrb	r1, [r3, #1]
 800fafe:	2300      	movs	r3, #0
 800fb00:	9707      	str	r7, [sp, #28]
 800fb02:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800fb06:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fb0a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800fb0e:	f88d 1020 	strb.w	r1, [sp, #32]
 800fb12:	9509      	str	r5, [sp, #36]	@ 0x24
 800fb14:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fb18:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800fb1c:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800fb20:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800fb24:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800fb28:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800fb2c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800fb30:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800fb34:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800fb38:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fb3c:	b350      	cbz	r0, 800fb94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800fb3e:	682b      	ldr	r3, [r5, #0]
 800fb40:	4628      	mov	r0, r5
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	4798      	blx	r3
 800fb46:	4607      	mov	r7, r0
 800fb48:	b320      	cbz	r0, 800fb94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800fb4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	6803      	ldr	r3, [r0, #0]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	4798      	blx	r3
 800fb54:	4606      	mov	r6, r0
 800fb56:	b1e8      	cbz	r0, 800fb94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800fb58:	7b43      	ldrb	r3, [r0, #13]
 800fb5a:	7a82      	ldrb	r2, [r0, #10]
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb62:	4313      	orrs	r3, r2
 800fb64:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800fb68:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800fb6c:	2b06      	cmp	r3, #6
 800fb6e:	d111      	bne.n	800fb94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800fb70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb72:	4632      	mov	r2, r6
 800fb74:	4639      	mov	r1, r7
 800fb76:	6803      	ldr	r3, [r0, #0]
 800fb78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb7a:	4798      	blx	r3
 800fb7c:	7b73      	ldrb	r3, [r6, #13]
 800fb7e:	005b      	lsls	r3, r3, #1
 800fb80:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800fb84:	7ab3      	ldrb	r3, [r6, #10]
 800fb86:	4313      	orrs	r3, r2
 800fb88:	4418      	add	r0, r3
 800fb8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800fb8e:	4418      	add	r0, r3
 800fb90:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800fb94:	2600      	movs	r6, #0
 800fb96:	4637      	mov	r7, r6
 800fb98:	a806      	add	r0, sp, #24
 800fb9a:	3701      	adds	r7, #1
 800fb9c:	f001 fb27 	bl	80111ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800fba0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800fba4:	9b03      	ldr	r3, [sp, #12]
 800fba6:	b2bf      	uxth	r7, r7
 800fba8:	4286      	cmp	r6, r0
 800fbaa:	eba9 0903 	sub.w	r9, r9, r3
 800fbae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800fbb2:	bfb8      	it	lt
 800fbb4:	4606      	movlt	r6, r0
 800fbb6:	fa0f f989 	sxth.w	r9, r9
 800fbba:	b236      	sxth	r6, r6
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f43f af0d 	beq.w	800f9dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800fbc2:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f47f af08 	bne.w	800f9dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800fbcc:	7a2b      	ldrb	r3, [r5, #8]
 800fbce:	444b      	add	r3, r9
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dce1      	bgt.n	800fb98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 800fbd4:	e702      	b.n	800f9dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800fbd6:	bf00      	nop
 800fbd8:	2400aad8 	.word	0x2400aad8
 800fbdc:	2400aad4 	.word	0x2400aad4
 800fbe0:	2400aadc 	.word	0x2400aadc
 800fbe4:	2400aae0 	.word	0x2400aae0
 800fbe8:	ebaa 0606 	sub.w	r6, sl, r6
 800fbec:	2002      	movs	r0, #2
 800fbee:	fb96 f6f0 	sdiv	r6, r6, r0
 800fbf2:	e71c      	b.n	800fa2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 800fbf4:	441e      	add	r6, r3
 800fbf6:	ebaa 0606 	sub.w	r6, sl, r6
 800fbfa:	e718      	b.n	800fa2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 800fbfc:	8925      	ldrh	r5, [r4, #8]
 800fbfe:	1aed      	subs	r5, r5, r3
 800fc00:	eba5 050a 	sub.w	r5, r5, sl
 800fc04:	fa0f fb85 	sxth.w	fp, r5
 800fc08:	8965      	ldrh	r5, [r4, #10]
 800fc0a:	eba5 0509 	sub.w	r5, r5, r9
 800fc0e:	b22d      	sxth	r5, r5
 800fc10:	e72d      	b.n	800fa6e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800fc12:	8965      	ldrh	r5, [r4, #10]
 800fc14:	f04f 0b00 	mov.w	fp, #0
 800fc18:	1aed      	subs	r5, r5, r3
 800fc1a:	4633      	mov	r3, r6
 800fc1c:	463e      	mov	r6, r7
 800fc1e:	eba5 050a 	sub.w	r5, r5, sl
 800fc22:	461f      	mov	r7, r3
 800fc24:	b22d      	sxth	r5, r5
 800fc26:	e722      	b.n	800fa6e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800fc28:	2500      	movs	r5, #0
 800fc2a:	e720      	b.n	800fa6e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0800fc2c <_ZN8touchgfx8TextAreaD0Ev>:
 800fc2c:	b510      	push	{r4, lr}
 800fc2e:	4604      	mov	r4, r0
 800fc30:	2148      	movs	r1, #72	@ 0x48
 800fc32:	f013 f897 	bl	8022d64 <_ZdlPvj>
 800fc36:	4620      	mov	r0, r4
 800fc38:	bd10      	pop	{r4, pc}
	...

0800fc3c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800fc3c:	b513      	push	{r0, r1, r4, lr}
 800fc3e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800fc42:	4604      	mov	r4, r0
 800fc44:	b1fb      	cbz	r3, 800fc86 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800fc46:	4b16      	ldr	r3, [pc, #88]	@ (800fca0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800fc48:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	428b      	cmp	r3, r1
 800fc4e:	d91a      	bls.n	800fc86 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800fc50:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	dd16      	ble.n	800fc86 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800fc58:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	dd12      	ble.n	800fc86 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800fc60:	4b10      	ldr	r3, [pc, #64]	@ (800fca4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800fc62:	6818      	ldr	r0, [r3, #0]
 800fc64:	f7fd fc1c 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fc68:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800fc6c:	6822      	ldr	r2, [r4, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	db06      	blt.n	800fc80 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800fc72:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	db02      	blt.n	800fc80 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800fc7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fc7c:	4298      	cmp	r0, r3
 800fc7e:	d004      	beq.n	800fc8a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800fc80:	6953      	ldr	r3, [r2, #20]
 800fc82:	4620      	mov	r0, r4
 800fc84:	4798      	blx	r3
 800fc86:	b002      	add	sp, #8
 800fc88:	bd10      	pop	{r4, pc}
 800fc8a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800fc8e:	466b      	mov	r3, sp
 800fc90:	6912      	ldr	r2, [r2, #16]
 800fc92:	c903      	ldmia	r1, {r0, r1}
 800fc94:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc98:	4619      	mov	r1, r3
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	4790      	blx	r2
 800fc9e:	e7f2      	b.n	800fc86 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800fca0:	2400aad8 	.word	0x2400aad8
 800fca4:	2400aae0 	.word	0x2400aae0

0800fca8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800fca8:	4b45      	ldr	r3, [pc, #276]	@ (800fdc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800fcaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcae:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800fcb0:	b08e      	sub	sp, #56	@ 0x38
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d97e      	bls.n	800fdb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800fcba:	6808      	ldr	r0, [r1, #0]
 800fcbc:	ab05      	add	r3, sp, #20
 800fcbe:	6849      	ldr	r1, [r1, #4]
 800fcc0:	4d40      	ldr	r5, [pc, #256]	@ (800fdc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800fcc2:	c303      	stmia	r3!, {r0, r1}
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	6828      	ldr	r0, [r5, #0]
 800fcc8:	f7fd fbea 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fccc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	db11      	blt.n	800fcf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800fcd4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	db0d      	blt.n	800fcf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800fcdc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fcde:	4298      	cmp	r0, r3
 800fce0:	d10a      	bne.n	800fcf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800fce2:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800fce6:	ab09      	add	r3, sp, #36	@ 0x24
 800fce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcec:	e883 0003 	stmia.w	r3, {r0, r1}
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	a805      	add	r0, sp, #20
 800fcf4:	f7fe fc8a 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 800fcf8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dd5b      	ble.n	800fdb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800fd00:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	dd57      	ble.n	800fdb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800fd08:	4f2f      	ldr	r7, [pc, #188]	@ (800fdc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800fd0a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800fd12:	4b2e      	ldr	r3, [pc, #184]	@ (800fdcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800fd1a:	2e00      	cmp	r6, #0
 800fd1c:	d04c      	beq.n	800fdb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800fd26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd28:	4798      	blx	r3
 800fd2a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800fd32:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800fd36:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800fd3a:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800fd3e:	785b      	ldrb	r3, [r3, #1]
 800fd40:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800fd44:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800fd48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fd4a:	9609      	str	r6, [sp, #36]	@ 0x24
 800fd4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd50:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800fd52:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800fd5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd5e:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800fd62:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800fd66:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800fd6a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800fd6e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800fd72:	b10a      	cbz	r2, 800fd78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800fd74:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800fd76:	b906      	cbnz	r6, 800fd7a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800fd78:	689e      	ldr	r6, [r3, #8]
 800fd7a:	af07      	add	r7, sp, #28
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	4638      	mov	r0, r7
 800fd80:	f003 f8e0 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd84:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800fd86:	6828      	ldr	r0, [r5, #0]
 800fd88:	f7fd fb8a 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	4605      	mov	r5, r0
 800fd90:	4620      	mov	r0, r4
 800fd92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd94:	4798      	blx	r3
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	4680      	mov	r8, r0
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fda0:	4798      	blx	r3
 800fda2:	ab09      	add	r3, sp, #36	@ 0x24
 800fda4:	9501      	str	r5, [sp, #4]
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	ab05      	add	r3, sp, #20
 800fdaa:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800fdae:	4630      	mov	r0, r6
 800fdb0:	e897 0006 	ldmia.w	r7, {r1, r2}
 800fdb4:	f7fd fb24 	bl	800d400 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800fdb8:	b00e      	add	sp, #56	@ 0x38
 800fdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdbe:	bf00      	nop
 800fdc0:	2400aad8 	.word	0x2400aad8
 800fdc4:	2400aae0 	.word	0x2400aae0
 800fdc8:	2400aad4 	.word	0x2400aad4
 800fdcc:	2400aadc 	.word	0x2400aadc
 800fdd0:	2400aa84 	.word	0x2400aa84

0800fdd4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fdd4:	b570      	push	{r4, r5, r6, lr}
 800fdd6:	6803      	ldr	r3, [r0, #0]
 800fdd8:	4604      	mov	r4, r0
 800fdda:	4615      	mov	r5, r2
 800fddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdde:	4798      	blx	r3
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	4629      	mov	r1, r5
 800fde4:	4620      	mov	r0, r4
 800fde6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdec:	4718      	bx	r3
	...

0800fdf0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4b0e      	ldr	r3, [pc, #56]	@ (800fe2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d214      	bcs.n	800fe28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800fdfe:	6803      	ldr	r3, [r0, #0]
 800fe00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe02:	4798      	blx	r3
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	4605      	mov	r5, r0
 800fe08:	4620      	mov	r0, r4
 800fe0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe0c:	4798      	blx	r3
 800fe0e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800fe12:	b22d      	sxth	r5, r5
 800fe14:	4601      	mov	r1, r0
 800fe16:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800fe1a:	bf06      	itte	eq
 800fe1c:	4602      	moveq	r2, r0
 800fe1e:	4629      	moveq	r1, r5
 800fe20:	462a      	movne	r2, r5
 800fe22:	4620      	mov	r0, r4
 800fe24:	f7ff ffd6 	bl	800fdd4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fe28:	bd38      	pop	{r3, r4, r5, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2400aad8 	.word	0x2400aad8

0800fe30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800fe30:	b530      	push	{r4, r5, lr}
 800fe32:	888b      	ldrh	r3, [r1, #4]
 800fe34:	b085      	sub	sp, #20
 800fe36:	4604      	mov	r4, r0
 800fe38:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fe3a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800fe3e:	b923      	cbnz	r3, 800fe4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fe40:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800fe44:	b90b      	cbnz	r3, 800fe4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fe46:	f7ff ffd3 	bl	800fdf0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800fe4a:	6823      	ldr	r3, [r4, #0]
 800fe4c:	466d      	mov	r5, sp
 800fe4e:	4621      	mov	r1, r4
 800fe50:	343c      	adds	r4, #60	@ 0x3c
 800fe52:	4628      	mov	r0, r5
 800fe54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe58:	4798      	blx	r3
 800fe5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe62:	b005      	add	sp, #20
 800fe64:	bd30      	pop	{r4, r5, pc}

0800fe66 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800fe66:	2300      	movs	r3, #0
 800fe68:	8083      	strh	r3, [r0, #4]
 800fe6a:	80c3      	strh	r3, [r0, #6]
 800fe6c:	8003      	strh	r3, [r0, #0]
 800fe6e:	8043      	strh	r3, [r0, #2]
 800fe70:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800fe74:	2bff      	cmp	r3, #255	@ 0xff
 800fe76:	bf01      	itttt	eq
 800fe78:	890b      	ldrheq	r3, [r1, #8]
 800fe7a:	8083      	strheq	r3, [r0, #4]
 800fe7c:	894b      	ldrheq	r3, [r1, #10]
 800fe7e:	80c3      	strheq	r3, [r0, #6]
 800fe80:	4770      	bx	lr
	...

0800fe84 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800fe84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe86:	4604      	mov	r4, r0
 800fe88:	466b      	mov	r3, sp
 800fe8a:	6808      	ldr	r0, [r1, #0]
 800fe8c:	6849      	ldr	r1, [r1, #4]
 800fe8e:	c303      	stmia	r3!, {r0, r1}
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	4669      	mov	r1, sp
 800fe94:	4620      	mov	r0, r4
 800fe96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe98:	4798      	blx	r3
 800fe9a:	4b08      	ldr	r3, [pc, #32]	@ (800febc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800fea2:	b10a      	cbz	r2, 800fea8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800fea4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800fea6:	b900      	cbnz	r0, 800feaa <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800fea8:	6898      	ldr	r0, [r3, #8]
 800feaa:	6803      	ldr	r3, [r0, #0]
 800feac:	4669      	mov	r1, sp
 800feae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800feb0:	6a1d      	ldr	r5, [r3, #32]
 800feb2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800feb6:	47a8      	blx	r5
 800feb8:	b003      	add	sp, #12
 800feba:	bd30      	pop	{r4, r5, pc}
 800febc:	2400aa84 	.word	0x2400aa84

0800fec0 <_ZN8touchgfx3BoxD1Ev>:
 800fec0:	4770      	bx	lr

0800fec2 <_ZN8touchgfx3BoxD0Ev>:
 800fec2:	b510      	push	{r4, lr}
 800fec4:	4604      	mov	r4, r0
 800fec6:	212c      	movs	r1, #44	@ 0x2c
 800fec8:	f012 ff4c 	bl	8022d64 <_ZdlPvj>
 800fecc:	4620      	mov	r0, r4
 800fece:	bd10      	pop	{r4, pc}

0800fed0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800fed0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800fed4:	b12a      	cbz	r2, 800fee2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fed6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800feda:	b112      	cbz	r2, 800fee2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fedc:	6803      	ldr	r3, [r0, #0]
 800fede:	695b      	ldr	r3, [r3, #20]
 800fee0:	4718      	bx	r3
 800fee2:	4770      	bx	lr

0800fee4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800fee4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800fee8:	4770      	bx	lr

0800feea <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800feea:	b570      	push	{r4, r5, r6, lr}
 800feec:	880b      	ldrh	r3, [r1, #0]
 800feee:	4605      	mov	r5, r0
 800fef0:	4604      	mov	r4, r0
 800fef2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800fef4:	8813      	ldrh	r3, [r2, #0]
 800fef6:	f825 3f30 	strh.w	r3, [r5, #48]!
 800fefa:	4628      	mov	r0, r5
 800fefc:	f004 fc22 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ff00:	4606      	mov	r6, r0
 800ff02:	4628      	mov	r0, r5
 800ff04:	f004 fc52 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	4631      	mov	r1, r6
 800ff0e:	4620      	mov	r0, r4
 800ff10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff12:	4798      	blx	r3
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	4629      	mov	r1, r5
 800ff18:	4620      	mov	r0, r4
 800ff1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff20:	4718      	bx	r3

0800ff22 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ff22:	b510      	push	{r4, lr}
 800ff24:	4604      	mov	r4, r0
 800ff26:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800ff28:	b150      	cbz	r0, 800ff40 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ff2a:	6803      	ldr	r3, [r0, #0]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	4798      	blx	r3
 800ff30:	b130      	cbz	r0, 800ff40 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ff32:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ff34:	4621      	mov	r1, r4
 800ff36:	6803      	ldr	r3, [r0, #0]
 800ff38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	4718      	bx	r3
 800ff40:	bd10      	pop	{r4, pc}

0800ff42 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800ff42:	b510      	push	{r4, lr}
 800ff44:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800ff48:	4604      	mov	r4, r0
 800ff4a:	2bff      	cmp	r3, #255	@ 0xff
 800ff4c:	d006      	beq.n	800ff5c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	8003      	strh	r3, [r0, #0]
 800ff52:	8043      	strh	r3, [r0, #2]
 800ff54:	8083      	strh	r3, [r0, #4]
 800ff56:	80c3      	strh	r3, [r0, #6]
 800ff58:	4620      	mov	r0, r4
 800ff5a:	bd10      	pop	{r4, pc}
 800ff5c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800ff60:	b11b      	cbz	r3, 800ff6a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800ff62:	3130      	adds	r1, #48	@ 0x30
 800ff64:	f004 fc56 	bl	8014814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ff68:	e7f6      	b.n	800ff58 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800ff6a:	312e      	adds	r1, #46	@ 0x2e
 800ff6c:	e7fa      	b.n	800ff64 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800ff70 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800ff70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff74:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ff78:	b08a      	sub	sp, #40	@ 0x28
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	4688      	mov	r8, r1
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d066      	beq.n	8010050 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800ff82:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ff84:	a805      	add	r0, sp, #20
 800ff86:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff8a:	f004 fbdb 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ff8e:	4607      	mov	r7, r0
 800ff90:	a805      	add	r0, sp, #20
 800ff92:	f004 fc0b 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ff96:	f9b8 6000 	ldrsh.w	r6, [r8]
 800ff9a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	4432      	add	r2, r6
 800ffa2:	9306      	str	r3, [sp, #24]
 800ffa4:	b292      	uxth	r2, r2
 800ffa6:	fa0f fc82 	sxth.w	ip, r2
 800ffaa:	459c      	cmp	ip, r3
 800ffac:	dd52      	ble.n	8010054 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffae:	42b7      	cmp	r7, r6
 800ffb0:	dd50      	ble.n	8010054 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffb2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ffb6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ffba:	442b      	add	r3, r5
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	b219      	sxth	r1, r3
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	dd47      	ble.n	8010054 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffc4:	42a8      	cmp	r0, r5
 800ffc6:	dd45      	ble.n	8010054 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffc8:	4567      	cmp	r7, ip
 800ffca:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800ffce:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800ffd2:	bfb8      	it	lt
 800ffd4:	b2ba      	uxthlt	r2, r7
 800ffd6:	4288      	cmp	r0, r1
 800ffd8:	f8ad 6018 	strh.w	r6, [sp, #24]
 800ffdc:	bfb8      	it	lt
 800ffde:	b283      	uxthlt	r3, r0
 800ffe0:	1b92      	subs	r2, r2, r6
 800ffe2:	f8ad 501a 	strh.w	r5, [sp, #26]
 800ffe6:	1b5b      	subs	r3, r3, r5
 800ffe8:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ffec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fff0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800fff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d026      	beq.n	801004a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800fffc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010000:	2b00      	cmp	r3, #0
 8010002:	dd22      	ble.n	801004a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010004:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010008:	2b00      	cmp	r3, #0
 801000a:	dd1e      	ble.n	801004a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801000c:	2300      	movs	r3, #0
 801000e:	a908      	add	r1, sp, #32
 8010010:	4620      	mov	r0, r4
 8010012:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8010016:	6823      	ldr	r3, [r4, #0]
 8010018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801001a:	4798      	blx	r3
 801001c:	4b0f      	ldr	r3, [pc, #60]	@ (801005c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010024:	b10a      	cbz	r2, 801002a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8010026:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010028:	b900      	cbnz	r0, 801002c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801002a:	6898      	ldr	r0, [r3, #8]
 801002c:	2501      	movs	r5, #1
 801002e:	6801      	ldr	r1, [r0, #0]
 8010030:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8010034:	9502      	str	r5, [sp, #8]
 8010036:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801003a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801003e:	9401      	str	r4, [sp, #4]
 8010040:	ac06      	add	r4, sp, #24
 8010042:	9400      	str	r4, [sp, #0]
 8010044:	688c      	ldr	r4, [r1, #8]
 8010046:	a905      	add	r1, sp, #20
 8010048:	47a0      	blx	r4
 801004a:	b00a      	add	sp, #40	@ 0x28
 801004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010050:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8010052:	e797      	b.n	800ff84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8010054:	2300      	movs	r3, #0
 8010056:	9307      	str	r3, [sp, #28]
 8010058:	e7ca      	b.n	800fff0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801005a:	bf00      	nop
 801005c:	2400aa84 	.word	0x2400aa84

08010060 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8010060:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8010064:	b12a      	cbz	r2, 8010072 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8010066:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801006a:	b112      	cbz	r2, 8010072 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801006c:	6803      	ldr	r3, [r0, #0]
 801006e:	695b      	ldr	r3, [r3, #20]
 8010070:	4718      	bx	r3
 8010072:	4770      	bx	lr

08010074 <_ZN8touchgfx5ImageD1Ev>:
 8010074:	4770      	bx	lr

08010076 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8010076:	b570      	push	{r4, r5, r6, lr}
 8010078:	880b      	ldrh	r3, [r1, #0]
 801007a:	460d      	mov	r5, r1
 801007c:	4604      	mov	r4, r0
 801007e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8010080:	4608      	mov	r0, r1
 8010082:	f004 fb5f 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010086:	4606      	mov	r6, r0
 8010088:	4628      	mov	r0, r5
 801008a:	f004 fb8f 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	4605      	mov	r5, r0
 8010092:	4631      	mov	r1, r6
 8010094:	4620      	mov	r0, r4
 8010096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010098:	4798      	blx	r3
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	4629      	mov	r1, r5
 801009e:	4620      	mov	r0, r4
 80100a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100a6:	4718      	bx	r3

080100a8 <_ZN8touchgfx5ImageD0Ev>:
 80100a8:	b510      	push	{r4, lr}
 80100aa:	4604      	mov	r4, r0
 80100ac:	212c      	movs	r1, #44	@ 0x2c
 80100ae:	f012 fe59 	bl	8022d64 <_ZdlPvj>
 80100b2:	4620      	mov	r0, r4
 80100b4:	bd10      	pop	{r4, pc}

080100b6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80100b6:	b510      	push	{r4, lr}
 80100b8:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80100bc:	4604      	mov	r4, r0
 80100be:	2bff      	cmp	r3, #255	@ 0xff
 80100c0:	d006      	beq.n	80100d0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80100c2:	2300      	movs	r3, #0
 80100c4:	8003      	strh	r3, [r0, #0]
 80100c6:	8043      	strh	r3, [r0, #2]
 80100c8:	8083      	strh	r3, [r0, #4]
 80100ca:	80c3      	strh	r3, [r0, #6]
 80100cc:	4620      	mov	r0, r4
 80100ce:	bd10      	pop	{r4, pc}
 80100d0:	3126      	adds	r1, #38	@ 0x26
 80100d2:	f004 fb9f 	bl	8014814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80100d6:	e7f9      	b.n	80100cc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080100d8 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80100d8:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80100dc:	b12a      	cbz	r2, 80100ea <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80100de:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80100e2:	b112      	cbz	r2, 80100ea <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80100e4:	6803      	ldr	r3, [r0, #0]
 80100e6:	695b      	ldr	r3, [r3, #20]
 80100e8:	4718      	bx	r3
 80100ea:	4770      	bx	lr

080100ec <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80100ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	4604      	mov	r4, r0
 80100f2:	b088      	sub	sp, #32
 80100f4:	2500      	movs	r5, #0
 80100f6:	460f      	mov	r7, r1
 80100f8:	f854 3b26 	ldr.w	r3, [r4], #38
 80100fc:	a904      	add	r1, sp, #16
 80100fe:	4606      	mov	r6, r0
 8010100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010102:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010106:	4798      	blx	r3
 8010108:	4620      	mov	r0, r4
 801010a:	f004 fb1b 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801010e:	4680      	mov	r8, r0
 8010110:	4620      	mov	r0, r4
 8010112:	f004 fb4b 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010116:	9506      	str	r5, [sp, #24]
 8010118:	ad06      	add	r5, sp, #24
 801011a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801011e:	4639      	mov	r1, r7
 8010120:	f8ad 801c 	strh.w	r8, [sp, #28]
 8010124:	4628      	mov	r0, r5
 8010126:	f7fe fa71 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 801012a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd19      	ble.n	8010166 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010132:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010136:	2b00      	cmp	r3, #0
 8010138:	dd15      	ble.n	8010166 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801013a:	4b0c      	ldr	r3, [pc, #48]	@ (801016c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010142:	b10a      	cbz	r2, 8010148 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8010144:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010146:	b900      	cbnz	r0, 801014a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8010148:	6898      	ldr	r0, [r3, #8]
 801014a:	2701      	movs	r7, #1
 801014c:	6801      	ldr	r1, [r0, #0]
 801014e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010152:	9702      	str	r7, [sp, #8]
 8010154:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8010158:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801015c:	e9cd 5600 	strd	r5, r6, [sp]
 8010160:	688d      	ldr	r5, [r1, #8]
 8010162:	4621      	mov	r1, r4
 8010164:	47a8      	blx	r5
 8010166:	b008      	add	sp, #32
 8010168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801016c:	2400aa84 	.word	0x2400aa84

08010170 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8010170:	4770      	bx	lr

08010172 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8010172:	b510      	push	{r4, lr}
 8010174:	4604      	mov	r4, r0
 8010176:	2148      	movs	r1, #72	@ 0x48
 8010178:	f012 fdf4 	bl	8022d64 <_ZdlPvj>
 801017c:	4620      	mov	r0, r4
 801017e:	bd10      	pop	{r4, pc}

08010180 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8010180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010184:	b08d      	sub	sp, #52	@ 0x34
 8010186:	4604      	mov	r4, r0
 8010188:	460f      	mov	r7, r1
 801018a:	f7ff fef1 	bl	800ff70 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801018e:	4a55      	ldr	r2, [pc, #340]	@ (80102e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8010190:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8010192:	8812      	ldrh	r2, [r2, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	f240 8082 	bls.w	801029e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801019a:	4d53      	ldr	r5, [pc, #332]	@ (80102e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 801019c:	682a      	ldr	r2, [r5, #0]
 801019e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80101a2:	4b52      	ldr	r3, [pc, #328]	@ (80102ec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80101b0:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80101b4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80101b8:	2a03      	cmp	r2, #3
 80101ba:	d811      	bhi.n	80101e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80101bc:	e8df f002 	tbb	[pc, r2]
 80101c0:	89727902 	.word	0x89727902
 80101c4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80101c8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80101cc:	1ad2      	subs	r2, r2, r3
 80101ce:	2002      	movs	r0, #2
 80101d0:	f8ad 1010 	strh.w	r1, [sp, #16]
 80101d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80101d8:	fb92 f2f0 	sdiv	r2, r2, r0
 80101dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80101e0:	f10d 080c 	add.w	r8, sp, #12
 80101e4:	f10d 0914 	add.w	r9, sp, #20
 80101e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80101ec:	e889 0003 	stmia.w	r9, {r0, r1}
 80101f0:	4639      	mov	r1, r7
 80101f2:	4648      	mov	r0, r9
 80101f4:	f7fe fa0a 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 80101f8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd4e      	ble.n	801029e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8010200:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010204:	2b00      	cmp	r3, #0
 8010206:	dd4a      	ble.n	801029e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8010208:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801020c:	4641      	mov	r1, r8
 801020e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010212:	4620      	mov	r0, r4
 8010214:	1a9b      	subs	r3, r3, r2
 8010216:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801021a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801021e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801022c:	4798      	blx	r3
 801022e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010232:	2b00      	cmp	r3, #0
 8010234:	d053      	beq.n	80102de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8010236:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010238:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801023a:	682b      	ldr	r3, [r5, #0]
 801023c:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8010240:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010244:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8010248:	785b      	ldrb	r3, [r3, #1]
 801024a:	9209      	str	r2, [sp, #36]	@ 0x24
 801024c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8010250:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010254:	9607      	str	r6, [sp, #28]
 8010256:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801025a:	2300      	movs	r3, #0
 801025c:	f88d 5020 	strb.w	r5, [sp, #32]
 8010260:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010264:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8010268:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801026c:	4b20      	ldr	r3, [pc, #128]	@ (80102f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801026e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010278:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801027c:	b10a      	cbz	r2, 8010282 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801027e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010280:	b904      	cbnz	r4, 8010284 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8010282:	689c      	ldr	r4, [r3, #8]
 8010284:	4b1b      	ldr	r3, [pc, #108]	@ (80102f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8010286:	6818      	ldr	r0, [r3, #0]
 8010288:	f7fd f90a 	bl	800d4a0 <_ZNK8touchgfx5Texts7getTextEt>
 801028c:	ab07      	add	r3, sp, #28
 801028e:	9001      	str	r0, [sp, #4]
 8010290:	4620      	mov	r0, r4
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	464b      	mov	r3, r9
 8010296:	e898 0006 	ldmia.w	r8, {r1, r2}
 801029a:	f7fd f8b1 	bl	800d400 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801029e:	b00d      	add	sp, #52	@ 0x34
 80102a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102a4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80102a8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80102ac:	1ad2      	subs	r2, r2, r3
 80102ae:	3201      	adds	r2, #1
 80102b0:	e78d      	b.n	80101ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80102b2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80102b6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80102ba:	1ad2      	subs	r2, r2, r3
 80102bc:	3201      	adds	r2, #1
 80102be:	2002      	movs	r0, #2
 80102c0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80102c4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80102c8:	fb92 f2f0 	sdiv	r2, r2, r0
 80102cc:	f8ad 200c 	strh.w	r2, [sp, #12]
 80102d0:	e786      	b.n	80101e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80102d2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80102d6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	e7ef      	b.n	80102be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80102de:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80102e0:	e7aa      	b.n	8010238 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80102e2:	bf00      	nop
 80102e4:	2400aad8 	.word	0x2400aad8
 80102e8:	2400aad4 	.word	0x2400aad4
 80102ec:	2400aadc 	.word	0x2400aadc
 80102f0:	2400aa84 	.word	0x2400aa84
 80102f4:	2400aae0 	.word	0x2400aae0

080102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80102f8:	2101      	movs	r1, #1
 80102fa:	2200      	movs	r2, #0
 80102fc:	b510      	push	{r4, lr}
 80102fe:	4c13      	ldr	r4, [pc, #76]	@ (801034c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8010300:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8010304:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010308:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801030c:	6004      	str	r4, [r0, #0]
 801030e:	4c10      	ldr	r4, [pc, #64]	@ (8010350 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8010310:	8082      	strh	r2, [r0, #4]
 8010312:	80c2      	strh	r2, [r0, #6]
 8010314:	8102      	strh	r2, [r0, #8]
 8010316:	8142      	strh	r2, [r0, #10]
 8010318:	8182      	strh	r2, [r0, #12]
 801031a:	81c2      	strh	r2, [r0, #14]
 801031c:	8202      	strh	r2, [r0, #16]
 801031e:	8242      	strh	r2, [r0, #18]
 8010320:	61c2      	str	r2, [r0, #28]
 8010322:	8402      	strh	r2, [r0, #32]
 8010324:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010326:	6282      	str	r2, [r0, #40]	@ 0x28
 8010328:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 801032c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801032e:	8601      	strh	r1, [r0, #48]	@ 0x30
 8010330:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8010334:	6344      	str	r4, [r0, #52]	@ 0x34
 8010336:	8701      	strh	r1, [r0, #56]	@ 0x38
 8010338:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801033c:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8010340:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010344:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8010348:	bd10      	pop	{r4, pc}
 801034a:	bf00      	nop
 801034c:	080298c0 	.word	0x080298c0
 8010350:	080288e0 	.word	0x080288e0

08010354 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010354:	b510      	push	{r4, lr}
 8010356:	6803      	ldr	r3, [r0, #0]
 8010358:	460c      	mov	r4, r1
 801035a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801035c:	4798      	blx	r3
 801035e:	1b03      	subs	r3, r0, r4
 8010360:	4258      	negs	r0, r3
 8010362:	4158      	adcs	r0, r3
 8010364:	bd10      	pop	{r4, pc}
	...

08010368 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010368:	4b01      	ldr	r3, [pc, #4]	@ (8010370 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801036a:	6019      	str	r1, [r3, #0]
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	2400aa8c 	.word	0x2400aa8c

08010374 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010378:	4696      	mov	lr, r2
 801037a:	b097      	sub	sp, #92	@ 0x5c
 801037c:	4605      	mov	r5, r0
 801037e:	4614      	mov	r4, r2
 8010380:	460e      	mov	r6, r1
 8010382:	461f      	mov	r7, r3
 8010384:	f10d 0c1c 	add.w	ip, sp, #28
 8010388:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801038c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8010390:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8010394:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801039c:	f8de 3000 	ldr.w	r3, [lr]
 80103a0:	f104 0e14 	add.w	lr, r4, #20
 80103a4:	f8cc 3000 	str.w	r3, [ip]
 80103a8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80103ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103b4:	f8de 3000 	ldr.w	r3, [lr]
 80103b8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80103bc:	f8cc 3000 	str.w	r3, [ip]
 80103c0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80103c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80103cc:	f8de 3000 	ldr.w	r3, [lr]
 80103d0:	4631      	mov	r1, r6
 80103d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80103d4:	4628      	mov	r0, r5
 80103d6:	f8cc 3000 	str.w	r3, [ip]
 80103da:	682b      	ldr	r3, [r5, #0]
 80103dc:	9201      	str	r2, [sp, #4]
 80103de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80103e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80103e4:	9200      	str	r2, [sp, #0]
 80103e6:	aa07      	add	r2, sp, #28
 80103e8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80103ec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80103f0:	463b      	mov	r3, r7
 80103f2:	47d8      	blx	fp
 80103f4:	46a6      	mov	lr, r4
 80103f6:	f10d 0c1c 	add.w	ip, sp, #28
 80103fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80103fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010402:	f8de 3000 	ldr.w	r3, [lr]
 8010406:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801040a:	343c      	adds	r4, #60	@ 0x3c
 801040c:	f8cc 3000 	str.w	r3, [ip]
 8010410:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801041c:	f8de 3000 	ldr.w	r3, [lr]
 8010420:	f8cc 3000 	str.w	r3, [ip]
 8010424:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8010428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801042a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	4631      	mov	r1, r6
 8010432:	4628      	mov	r0, r5
 8010434:	f8cc 3000 	str.w	r3, [ip]
 8010438:	682b      	ldr	r3, [r5, #0]
 801043a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801043e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010440:	f8cd 8008 	str.w	r8, [sp, #8]
 8010444:	9201      	str	r2, [sp, #4]
 8010446:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010448:	9200      	str	r2, [sp, #0]
 801044a:	aa07      	add	r2, sp, #28
 801044c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801044e:	463b      	mov	r3, r7
 8010450:	47a0      	blx	r4
 8010452:	b017      	add	sp, #92	@ 0x5c
 8010454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010458 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	b08d      	sub	sp, #52	@ 0x34
 801045e:	4688      	mov	r8, r1
 8010460:	f8d3 c000 	ldr.w	ip, [r3]
 8010464:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8010466:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801046a:	680f      	ldr	r7, [r1, #0]
 801046c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8010470:	eba7 070c 	sub.w	r7, r7, ip
 8010474:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8010478:	edd3 6a07 	vldr	s13, [r3, #28]
 801047c:	42bc      	cmp	r4, r7
 801047e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010480:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8010484:	bfa8      	it	ge
 8010486:	463c      	movge	r4, r7
 8010488:	f9b1 9000 	ldrsh.w	r9, [r1]
 801048c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8010490:	ee07 4a90 	vmov	s15, r4
 8010494:	eb09 0e0c 	add.w	lr, r9, ip
 8010498:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801049c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80104a0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80104a4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80104a8:	4571      	cmp	r1, lr
 80104aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80104ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 80104b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80104b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80104ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80104be:	ee32 1a05 	vadd.f32	s2, s4, s10
 80104c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80104c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80104ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 80104ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 80104d2:	f340 808c 	ble.w	80105ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80104d6:	eba1 060e 	sub.w	r6, r1, lr
 80104da:	fb96 f5f4 	sdiv	r5, r6, r4
 80104de:	ee07 5a10 	vmov	s14, r5
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	fb04 6615 	mls	r6, r4, r5, r6
 80104e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 80104f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80104f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80104f8:	dd12      	ble.n	8010520 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80104fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80104fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8010502:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010506:	eef5 6a40 	vcmp.f32	s13, #0.0
 801050a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801050e:	bf14      	ite	ne
 8010510:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8010514:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010518:	ee61 1a87 	vmul.f32	s3, s3, s14
 801051c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010520:	fb05 f204 	mul.w	r2, r5, r4
 8010524:	1abf      	subs	r7, r7, r2
 8010526:	4494      	add	ip, r2
 8010528:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801052c:	4411      	add	r1, r2
 801052e:	eb09 020c 	add.w	r2, r9, ip
 8010532:	b209      	sxth	r1, r1
 8010534:	443a      	add	r2, r7
 8010536:	428a      	cmp	r2, r1
 8010538:	bfc4      	itt	gt
 801053a:	eba1 0209 	subgt.w	r2, r1, r9
 801053e:	eba2 070c 	subgt.w	r7, r2, ip
 8010542:	2f00      	cmp	r7, #0
 8010544:	dd50      	ble.n	80105e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8010546:	fb97 f1f4 	sdiv	r1, r7, r4
 801054a:	fb04 7211 	mls	r2, r4, r1, r7
 801054e:	b90a      	cbnz	r2, 8010554 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8010550:	3901      	subs	r1, #1
 8010552:	4622      	mov	r2, r4
 8010554:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010558:	6840      	ldr	r0, [r0, #4]
 801055a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801055e:	44b6      	add	lr, r6
 8010560:	f8d0 a000 	ldr.w	sl, [r0]
 8010564:	2900      	cmp	r1, #0
 8010566:	bfcc      	ite	gt
 8010568:	46a1      	movgt	r9, r4
 801056a:	4691      	movle	r9, r2
 801056c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801056e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8010570:	fb04 e505 	mla	r5, r4, r5, lr
 8010574:	eef0 6a42 	vmov.f32	s13, s4
 8010578:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801057c:	9008      	str	r0, [sp, #32]
 801057e:	eeb0 7a61 	vmov.f32	s14, s3
 8010582:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8010584:	695b      	ldr	r3, [r3, #20]
 8010586:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801058a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801058e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8010592:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010594:	445b      	add	r3, fp
 8010596:	9307      	str	r3, [sp, #28]
 8010598:	ee16 3a90 	vmov	r3, s13
 801059c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80105a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80105a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80105a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80105ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80105b0:	ee17 7a90 	vmov	r7, s15
 80105b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80105b8:	fb97 f7f4 	sdiv	r7, r7, r4
 80105bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80105c0:	ee17 ca90 	vmov	ip, s15
 80105c4:	fb9c fcf4 	sdiv	ip, ip, r4
 80105c8:	fb0c 3306 	mla	r3, ip, r6, r3
 80105cc:	9302      	str	r3, [sp, #8]
 80105ce:	ee17 3a10 	vmov	r3, s14
 80105d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80105d6:	fb07 3706 	mla	r7, r7, r6, r3
 80105da:	eba9 0306 	sub.w	r3, r9, r6
 80105de:	e9cd 4700 	strd	r4, r7, [sp]
 80105e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80105e6:	47a0      	blx	r4
 80105e8:	b00d      	add	sp, #52	@ 0x34
 80105ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ee:	2500      	movs	r5, #0
 80105f0:	462e      	mov	r6, r5
 80105f2:	e799      	b.n	8010528 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080105f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	b0db      	sub	sp, #364	@ 0x16c
 80105fa:	461d      	mov	r5, r3
 80105fc:	4614      	mov	r4, r2
 80105fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8010602:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010604:	4629      	mov	r1, r5
 8010606:	930a      	str	r3, [sp, #40]	@ 0x28
 8010608:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801060c:	9009      	str	r0, [sp, #36]	@ 0x24
 801060e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010610:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8010614:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8010618:	9310      	str	r3, [sp, #64]	@ 0x40
 801061a:	6803      	ldr	r3, [r0, #0]
 801061c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801061e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010622:	47b8      	blx	r7
 8010624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010626:	6058      	str	r0, [r3, #4]
 8010628:	2800      	cmp	r0, #0
 801062a:	f000 83a1 	beq.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801062e:	682b      	ldr	r3, [r5, #0]
 8010630:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8010634:	ed94 7a02 	vldr	s14, [r4, #8]
 8010638:	9314      	str	r3, [sp, #80]	@ 0x50
 801063a:	686b      	ldr	r3, [r5, #4]
 801063c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010640:	9315      	str	r3, [sp, #84]	@ 0x54
 8010642:	4bc1      	ldr	r3, [pc, #772]	@ (8010948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8010644:	7819      	ldrb	r1, [r3, #0]
 8010646:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801064a:	2900      	cmp	r1, #0
 801064c:	bf16      	itet	ne
 801064e:	4619      	movne	r1, r3
 8010650:	4611      	moveq	r1, r2
 8010652:	4613      	movne	r3, r2
 8010654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010658:	9116      	str	r1, [sp, #88]	@ 0x58
 801065a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801065e:	f240 8387 	bls.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010662:	ed94 7a07 	vldr	s14, [r4, #28]
 8010666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066e:	f240 837f 	bls.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010672:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8010676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801067a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801067e:	f240 8377 	bls.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010682:	6822      	ldr	r2, [r4, #0]
 8010684:	4bb1      	ldr	r3, [pc, #708]	@ (801094c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8010686:	429a      	cmp	r2, r3
 8010688:	f2c0 8372 	blt.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801068c:	49b0      	ldr	r1, [pc, #704]	@ (8010950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801068e:	6963      	ldr	r3, [r4, #20]
 8010690:	428a      	cmp	r2, r1
 8010692:	f300 836d 	bgt.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010696:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801069a:	48ae      	ldr	r0, [pc, #696]	@ (8010954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801069c:	33ff      	adds	r3, #255	@ 0xff
 801069e:	4283      	cmp	r3, r0
 80106a0:	f200 8366 	bhi.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80106a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80106a6:	4dac      	ldr	r5, [pc, #688]	@ (8010958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80106a8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80106ac:	33ff      	adds	r3, #255	@ 0xff
 80106ae:	42ab      	cmp	r3, r5
 80106b0:	f200 835e 	bhi.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80106b4:	6862      	ldr	r2, [r4, #4]
 80106b6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80106ba:	33ff      	adds	r3, #255	@ 0xff
 80106bc:	4283      	cmp	r3, r0
 80106be:	f200 8357 	bhi.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80106c2:	69a1      	ldr	r1, [r4, #24]
 80106c4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80106c8:	33ff      	adds	r3, #255	@ 0xff
 80106ca:	4283      	cmp	r3, r0
 80106cc:	f200 8350 	bhi.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80106d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80106d2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80106d6:	30ff      	adds	r0, #255	@ 0xff
 80106d8:	42a8      	cmp	r0, r5
 80106da:	f200 8349 	bhi.w	8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80106de:	428a      	cmp	r2, r1
 80106e0:	f280 8110 	bge.w	8010904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80106e4:	429a      	cmp	r2, r3
 80106e6:	f300 8119 	bgt.w	801091c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80106ea:	4299      	cmp	r1, r3
 80106ec:	f280 811d 	bge.w	801092a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80106f0:	2502      	movs	r5, #2
 80106f2:	2701      	movs	r7, #1
 80106f4:	46a9      	mov	r9, r5
 80106f6:	46b8      	mov	r8, r7
 80106f8:	f04f 0a00 	mov.w	sl, #0
 80106fc:	4621      	mov	r1, r4
 80106fe:	a849      	add	r0, sp, #292	@ 0x124
 8010700:	f003 fd58 	bl	80141b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010704:	4622      	mov	r2, r4
 8010706:	4653      	mov	r3, sl
 8010708:	a949      	add	r1, sp, #292	@ 0x124
 801070a:	f8cd 9000 	str.w	r9, [sp]
 801070e:	a819      	add	r0, sp, #100	@ 0x64
 8010710:	f003 fe80 	bl	8014414 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010714:	4622      	mov	r2, r4
 8010716:	4653      	mov	r3, sl
 8010718:	a949      	add	r1, sp, #292	@ 0x124
 801071a:	f8cd 8000 	str.w	r8, [sp]
 801071e:	a829      	add	r0, sp, #164	@ 0xa4
 8010720:	f003 fe78 	bl	8014414 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010724:	4643      	mov	r3, r8
 8010726:	4622      	mov	r2, r4
 8010728:	a949      	add	r1, sp, #292	@ 0x124
 801072a:	f8cd 9000 	str.w	r9, [sp]
 801072e:	a839      	add	r0, sp, #228	@ 0xe4
 8010730:	f003 fe70 	bl	8014414 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010734:	42af      	cmp	r7, r5
 8010736:	af12      	add	r7, sp, #72	@ 0x48
 8010738:	bfb7      	itett	lt
 801073a:	2300      	movlt	r3, #0
 801073c:	2301      	movge	r3, #1
 801073e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8010740:	ac19      	addlt	r4, sp, #100	@ 0x64
 8010742:	bfb1      	iteee	lt
 8010744:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8010746:	ad19      	addge	r5, sp, #100	@ 0x64
 8010748:	930e      	strge	r3, [sp, #56]	@ 0x38
 801074a:	ac29      	addge	r4, sp, #164	@ 0xa4
 801074c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801074e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010752:	e887 0003 	stmia.w	r7, {r0, r1}
 8010756:	b928      	cbnz	r0, 8010764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8010758:	4b80      	ldr	r3, [pc, #512]	@ (801095c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801075a:	6818      	ldr	r0, [r3, #0]
 801075c:	6803      	ldr	r3, [r0, #0]
 801075e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010760:	4798      	blx	r3
 8010762:	6038      	str	r0, [r7, #0]
 8010764:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8010766:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801076a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801076e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8010770:	930c      	str	r3, [sp, #48]	@ 0x30
 8010772:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010774:	6963      	ldr	r3, [r4, #20]
 8010776:	440b      	add	r3, r1
 8010778:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801077c:	4408      	add	r0, r1
 801077e:	b200      	sxth	r0, r0
 8010780:	4283      	cmp	r3, r0
 8010782:	900d      	str	r0, [sp, #52]	@ 0x34
 8010784:	f280 80dd 	bge.w	8010942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8010788:	428b      	cmp	r3, r1
 801078a:	da08      	bge.n	801079e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801078c:	2a00      	cmp	r2, #0
 801078e:	dd06      	ble.n	801079e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010790:	1acb      	subs	r3, r1, r3
 8010792:	429a      	cmp	r2, r3
 8010794:	f2c0 80e4 	blt.w	8010960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8010798:	2b00      	cmp	r3, #0
 801079a:	f300 80e2 	bgt.w	8010962 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801079e:	6967      	ldr	r7, [r4, #20]
 80107a0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80107a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107a6:	443b      	add	r3, r7
 80107a8:	461f      	mov	r7, r3
 80107aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107ac:	1bdf      	subs	r7, r3, r7
 80107ae:	4297      	cmp	r7, r2
 80107b0:	bfa8      	it	ge
 80107b2:	4617      	movge	r7, r2
 80107b4:	2f00      	cmp	r7, #0
 80107b6:	f340 8166 	ble.w	8010a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80107ba:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80107bc:	6829      	ldr	r1, [r5, #0]
 80107be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80107c6:	4411      	add	r1, r2
 80107c8:	6820      	ldr	r0, [r4, #0]
 80107ca:	4299      	cmp	r1, r3
 80107cc:	dd1a      	ble.n	8010804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80107ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80107d2:	4402      	add	r2, r0
 80107d4:	440b      	add	r3, r1
 80107d6:	b21b      	sxth	r3, r3
 80107d8:	429a      	cmp	r2, r3
 80107da:	dc13      	bgt.n	8010804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80107dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80107de:	a912      	add	r1, sp, #72	@ 0x48
 80107e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	9206      	str	r2, [sp, #24]
 80107e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80107ea:	9500      	str	r5, [sp, #0]
 80107ec:	9205      	str	r2, [sp, #20]
 80107ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80107f4:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80107f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80107fa:	aa49      	add	r2, sp, #292	@ 0x124
 80107fc:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8010800:	4623      	mov	r3, r4
 8010802:	47c8      	blx	r9
 8010804:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8010808:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801080c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8010810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010814:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8010818:	68a1      	ldr	r1, [r4, #8]
 801081a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801081e:	ed94 6a08 	vldr	s12, [r4, #32]
 8010822:	edd4 6a07 	vldr	s13, [r4, #28]
 8010826:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801082a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801082e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8010832:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010836:	edc4 6a07 	vstr	s13, [r4, #28]
 801083a:	441a      	add	r2, r3
 801083c:	6963      	ldr	r3, [r4, #20]
 801083e:	3301      	adds	r3, #1
 8010840:	6022      	str	r2, [r4, #0]
 8010842:	6163      	str	r3, [r4, #20]
 8010844:	69a3      	ldr	r3, [r4, #24]
 8010846:	3b01      	subs	r3, #1
 8010848:	61a3      	str	r3, [r4, #24]
 801084a:	6923      	ldr	r3, [r4, #16]
 801084c:	440b      	add	r3, r1
 801084e:	68e1      	ldr	r1, [r4, #12]
 8010850:	428b      	cmp	r3, r1
 8010852:	6123      	str	r3, [r4, #16]
 8010854:	db15      	blt.n	8010882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8010856:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801085a:	3201      	adds	r2, #1
 801085c:	1a5b      	subs	r3, r3, r1
 801085e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010862:	6022      	str	r2, [r4, #0]
 8010864:	6123      	str	r3, [r4, #16]
 8010866:	edc4 6a07 	vstr	s13, [r4, #28]
 801086a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801086e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010872:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8010876:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801087e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8010882:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8010886:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801088a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801088e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010892:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8010896:	68a9      	ldr	r1, [r5, #8]
 8010898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801089c:	ed95 6a08 	vldr	s12, [r5, #32]
 80108a0:	edd5 6a07 	vldr	s13, [r5, #28]
 80108a4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80108a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80108ac:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80108b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80108b4:	edc5 6a07 	vstr	s13, [r5, #28]
 80108b8:	441a      	add	r2, r3
 80108ba:	696b      	ldr	r3, [r5, #20]
 80108bc:	3301      	adds	r3, #1
 80108be:	602a      	str	r2, [r5, #0]
 80108c0:	616b      	str	r3, [r5, #20]
 80108c2:	69ab      	ldr	r3, [r5, #24]
 80108c4:	3b01      	subs	r3, #1
 80108c6:	61ab      	str	r3, [r5, #24]
 80108c8:	692b      	ldr	r3, [r5, #16]
 80108ca:	440b      	add	r3, r1
 80108cc:	68e9      	ldr	r1, [r5, #12]
 80108ce:	428b      	cmp	r3, r1
 80108d0:	612b      	str	r3, [r5, #16]
 80108d2:	db15      	blt.n	8010900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80108d4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80108d8:	3201      	adds	r2, #1
 80108da:	1a5b      	subs	r3, r3, r1
 80108dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80108e0:	602a      	str	r2, [r5, #0]
 80108e2:	612b      	str	r3, [r5, #16]
 80108e4:	edc5 6a07 	vstr	s13, [r5, #28]
 80108e8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80108ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80108f0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80108f4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80108f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108fc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8010900:	3f01      	subs	r7, #1
 8010902:	e757      	b.n	80107b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010904:	4299      	cmp	r1, r3
 8010906:	dc13      	bgt.n	8010930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010908:	429a      	cmp	r2, r3
 801090a:	da14      	bge.n	8010936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801090c:	2502      	movs	r5, #2
 801090e:	2703      	movs	r7, #3
 8010910:	f04f 0800 	mov.w	r8, #0
 8010914:	46a9      	mov	r9, r5
 8010916:	f04f 0a01 	mov.w	sl, #1
 801091a:	e6ef      	b.n	80106fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801091c:	2501      	movs	r5, #1
 801091e:	2700      	movs	r7, #0
 8010920:	46a9      	mov	r9, r5
 8010922:	46b8      	mov	r8, r7
 8010924:	f04f 0a02 	mov.w	sl, #2
 8010928:	e6e8      	b.n	80106fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801092a:	2501      	movs	r5, #1
 801092c:	2702      	movs	r7, #2
 801092e:	e6e1      	b.n	80106f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8010930:	2500      	movs	r5, #0
 8010932:	2701      	movs	r7, #1
 8010934:	e7f4      	b.n	8010920 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8010936:	2702      	movs	r7, #2
 8010938:	2503      	movs	r5, #3
 801093a:	f04f 0900 	mov.w	r9, #0
 801093e:	46b8      	mov	r8, r7
 8010940:	e7e9      	b.n	8010916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8010942:	4613      	mov	r3, r2
 8010944:	e728      	b.n	8010798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8010946:	bf00      	nop
 8010948:	2400aa7c 	.word	0x2400aa7c
 801094c:	fffd8f01 	.word	0xfffd8f01
 8010950:	00027100 	.word	0x00027100
 8010954:	0004e1ff 	.word	0x0004e1ff
 8010958:	0004e1fe 	.word	0x0004e1fe
 801095c:	2400aa84 	.word	0x2400aa84
 8010960:	4613      	mov	r3, r2
 8010962:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010964:	469e      	mov	lr, r3
 8010966:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8010968:	469c      	mov	ip, r3
 801096a:	9111      	str	r1, [sp, #68]	@ 0x44
 801096c:	f04f 0900 	mov.w	r9, #0
 8010970:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8010974:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8010978:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801097c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8010980:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8010984:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010988:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801098c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8010990:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8010994:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8010998:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801099c:	f1bc 0f00 	cmp.w	ip, #0
 80109a0:	d147      	bne.n	8010a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80109a2:	eb03 0c07 	add.w	ip, r3, r7
 80109a6:	1ad7      	subs	r7, r2, r3
 80109a8:	f1b9 0f00 	cmp.w	r9, #0
 80109ac:	d009      	beq.n	80109c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80109ae:	9029      	str	r0, [sp, #164]	@ 0xa4
 80109b0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80109b4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80109b8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80109bc:	912d      	str	r1, [sp, #180]	@ 0xb4
 80109be:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80109c2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80109c4:	f04f 0800 	mov.w	r8, #0
 80109c8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80109cc:	9111      	str	r1, [sp, #68]	@ 0x44
 80109ce:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80109d2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80109d6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80109da:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80109de:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80109e2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80109e6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80109ea:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80109ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80109f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80109f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80109fa:	f1be 0f00 	cmp.w	lr, #0
 80109fe:	d031      	beq.n	8010a64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8010a00:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010a02:	4450      	add	r0, sl
 8010a04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010a08:	4431      	add	r1, r6
 8010a0a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010a0e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010a12:	4549      	cmp	r1, r9
 8010a14:	db08      	blt.n	8010a28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8010a16:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010a1a:	3001      	adds	r0, #1
 8010a1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010a20:	eba1 0109 	sub.w	r1, r1, r9
 8010a24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010a28:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010a2c:	f04f 0801 	mov.w	r8, #1
 8010a30:	e7e3      	b.n	80109fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8010a32:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010a34:	4450      	add	r0, sl
 8010a36:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010a3a:	4431      	add	r1, r6
 8010a3c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010a40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010a44:	4541      	cmp	r1, r8
 8010a46:	db08      	blt.n	8010a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8010a48:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010a52:	eba1 0108 	sub.w	r1, r1, r8
 8010a56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010a5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010a5e:	f04f 0901 	mov.w	r9, #1
 8010a62:	e79b      	b.n	801099c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8010a64:	449c      	add	ip, r3
 8010a66:	1aff      	subs	r7, r7, r3
 8010a68:	f1b8 0f00 	cmp.w	r8, #0
 8010a6c:	d009      	beq.n	8010a82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8010a6e:	9019      	str	r0, [sp, #100]	@ 0x64
 8010a70:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8010a74:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8010a78:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8010a7c:	911d      	str	r1, [sp, #116]	@ 0x74
 8010a7e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8010a82:	1ad2      	subs	r2, r2, r3
 8010a84:	e68b      	b.n	801079e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a88:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 80d1 	beq.w	8010c32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8010a90:	ad19      	add	r5, sp, #100	@ 0x64
 8010a92:	ac39      	add	r4, sp, #228	@ 0xe4
 8010a94:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8010a96:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010a9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010aa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010aa2:	6963      	ldr	r3, [r4, #20]
 8010aa4:	440b      	add	r3, r1
 8010aa6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010aaa:	4408      	add	r0, r1
 8010aac:	b200      	sxth	r0, r0
 8010aae:	4283      	cmp	r3, r0
 8010ab0:	900d      	str	r0, [sp, #52]	@ 0x34
 8010ab2:	f280 80c1 	bge.w	8010c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8010ab6:	428b      	cmp	r3, r1
 8010ab8:	da08      	bge.n	8010acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010aba:	2a00      	cmp	r2, #0
 8010abc:	dd06      	ble.n	8010acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010abe:	1acb      	subs	r3, r1, r3
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	f2c0 80bb 	blt.w	8010c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	f300 80b9 	bgt.w	8010c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8010acc:	6967      	ldr	r7, [r4, #20]
 8010ace:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8010ad2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ad4:	443b      	add	r3, r7
 8010ad6:	461f      	mov	r7, r3
 8010ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ada:	1bdf      	subs	r7, r3, r7
 8010adc:	4297      	cmp	r7, r2
 8010ade:	bfa8      	it	ge
 8010ae0:	4617      	movge	r7, r2
 8010ae2:	2f00      	cmp	r7, #0
 8010ae4:	f340 813c 	ble.w	8010d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8010ae8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8010aea:	6829      	ldr	r1, [r5, #0]
 8010aec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010af0:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010af4:	4411      	add	r1, r2
 8010af6:	6820      	ldr	r0, [r4, #0]
 8010af8:	4299      	cmp	r1, r3
 8010afa:	dd1a      	ble.n	8010b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010afc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010b00:	4402      	add	r2, r0
 8010b02:	440b      	add	r3, r1
 8010b04:	b21b      	sxth	r3, r3
 8010b06:	429a      	cmp	r2, r3
 8010b08:	dc13      	bgt.n	8010b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010b0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010b0c:	a912      	add	r1, sp, #72	@ 0x48
 8010b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	9206      	str	r2, [sp, #24]
 8010b16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b18:	9500      	str	r5, [sp, #0]
 8010b1a:	9205      	str	r2, [sp, #20]
 8010b1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b1e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010b22:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8010b24:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010b28:	aa49      	add	r2, sp, #292	@ 0x124
 8010b2a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8010b2e:	4623      	mov	r3, r4
 8010b30:	47c8      	blx	r9
 8010b32:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8010b36:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8010b3a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8010b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b42:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8010b46:	68a1      	ldr	r1, [r4, #8]
 8010b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b4c:	ed94 6a08 	vldr	s12, [r4, #32]
 8010b50:	edd4 6a07 	vldr	s13, [r4, #28]
 8010b54:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8010b58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010b5c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8010b60:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b64:	edc4 6a07 	vstr	s13, [r4, #28]
 8010b68:	441a      	add	r2, r3
 8010b6a:	6963      	ldr	r3, [r4, #20]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	6022      	str	r2, [r4, #0]
 8010b70:	6163      	str	r3, [r4, #20]
 8010b72:	69a3      	ldr	r3, [r4, #24]
 8010b74:	3b01      	subs	r3, #1
 8010b76:	61a3      	str	r3, [r4, #24]
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	440b      	add	r3, r1
 8010b7c:	68e1      	ldr	r1, [r4, #12]
 8010b7e:	428b      	cmp	r3, r1
 8010b80:	6123      	str	r3, [r4, #16]
 8010b82:	db15      	blt.n	8010bb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8010b84:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8010b88:	3201      	adds	r2, #1
 8010b8a:	1a5b      	subs	r3, r3, r1
 8010b8c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010b90:	6022      	str	r2, [r4, #0]
 8010b92:	6123      	str	r3, [r4, #16]
 8010b94:	edc4 6a07 	vstr	s13, [r4, #28]
 8010b98:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8010b9c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010ba0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8010ba4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8010ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bac:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8010bb0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8010bb4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8010bb8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8010bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010bc0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8010bc4:	68a9      	ldr	r1, [r5, #8]
 8010bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bca:	ed95 6a08 	vldr	s12, [r5, #32]
 8010bce:	edd5 6a07 	vldr	s13, [r5, #28]
 8010bd2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8010bd6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010bda:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8010bde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010be2:	edc5 6a07 	vstr	s13, [r5, #28]
 8010be6:	441a      	add	r2, r3
 8010be8:	696b      	ldr	r3, [r5, #20]
 8010bea:	3301      	adds	r3, #1
 8010bec:	602a      	str	r2, [r5, #0]
 8010bee:	616b      	str	r3, [r5, #20]
 8010bf0:	69ab      	ldr	r3, [r5, #24]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	61ab      	str	r3, [r5, #24]
 8010bf6:	692b      	ldr	r3, [r5, #16]
 8010bf8:	440b      	add	r3, r1
 8010bfa:	68e9      	ldr	r1, [r5, #12]
 8010bfc:	428b      	cmp	r3, r1
 8010bfe:	612b      	str	r3, [r5, #16]
 8010c00:	db15      	blt.n	8010c2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8010c02:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8010c06:	3201      	adds	r2, #1
 8010c08:	1a5b      	subs	r3, r3, r1
 8010c0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010c0e:	602a      	str	r2, [r5, #0]
 8010c10:	612b      	str	r3, [r5, #16]
 8010c12:	edc5 6a07 	vstr	s13, [r5, #28]
 8010c16:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8010c1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010c1e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8010c22:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8010c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c2a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8010c2e:	3f01      	subs	r7, #1
 8010c30:	e757      	b.n	8010ae2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8010c32:	ad39      	add	r5, sp, #228	@ 0xe4
 8010c34:	ac19      	add	r4, sp, #100	@ 0x64
 8010c36:	e72d      	b.n	8010a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8010c38:	4613      	mov	r3, r2
 8010c3a:	e744      	b.n	8010ac6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8010c40:	469e      	mov	lr, r3
 8010c42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8010c46:	461f      	mov	r7, r3
 8010c48:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8010c4c:	f04f 0900 	mov.w	r9, #0
 8010c50:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8010c54:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8010c58:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8010c5c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8010c60:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8010c64:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8010c66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8010c6a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8010c6e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8010c72:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8010c76:	960e      	str	r6, [sp, #56]	@ 0x38
 8010c78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8010c7c:	2f00      	cmp	r7, #0
 8010c7e:	d146      	bne.n	8010d0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8010c80:	449c      	add	ip, r3
 8010c82:	1ad7      	subs	r7, r2, r3
 8010c84:	f1b9 0f00 	cmp.w	r9, #0
 8010c88:	d009      	beq.n	8010c9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8010c8a:	9039      	str	r0, [sp, #228]	@ 0xe4
 8010c8c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8010c8e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8010c92:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8010c96:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8010c9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8010c9e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8010ca0:	f04f 0800 	mov.w	r8, #0
 8010ca4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8010ca8:	910e      	str	r1, [sp, #56]	@ 0x38
 8010caa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8010cae:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8010cb2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8010cb6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8010cba:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8010cbe:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8010cc2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8010cc6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8010cca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8010cce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8010cd2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8010cd6:	f1be 0f00 	cmp.w	lr, #0
 8010cda:	d030      	beq.n	8010d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8010cdc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010cde:	4450      	add	r0, sl
 8010ce0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010ce4:	4431      	add	r1, r6
 8010ce6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010cea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010cee:	4549      	cmp	r1, r9
 8010cf0:	db08      	blt.n	8010d04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8010cf2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010cf6:	3001      	adds	r0, #1
 8010cf8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010cfc:	eba1 0109 	sub.w	r1, r1, r9
 8010d00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010d04:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010d08:	f04f 0801 	mov.w	r8, #1
 8010d0c:	e7e3      	b.n	8010cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8010d0e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010d10:	4450      	add	r0, sl
 8010d12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010d16:	4431      	add	r1, r6
 8010d18:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010d1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010d20:	4541      	cmp	r1, r8
 8010d22:	db08      	blt.n	8010d36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8010d24:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010d28:	3001      	adds	r0, #1
 8010d2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010d2e:	eba1 0108 	sub.w	r1, r1, r8
 8010d32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010d36:	3f01      	subs	r7, #1
 8010d38:	f04f 0901 	mov.w	r9, #1
 8010d3c:	e79e      	b.n	8010c7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8010d3e:	449c      	add	ip, r3
 8010d40:	1aff      	subs	r7, r7, r3
 8010d42:	f1b8 0f00 	cmp.w	r8, #0
 8010d46:	d009      	beq.n	8010d5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8010d48:	9019      	str	r0, [sp, #100]	@ 0x64
 8010d4a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8010d4e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8010d52:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8010d56:	911d      	str	r1, [sp, #116]	@ 0x74
 8010d58:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8010d5c:	1ad2      	subs	r2, r2, r3
 8010d5e:	e6b5      	b.n	8010acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010d60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	b923      	cbnz	r3, 8010d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d66:	4b04      	ldr	r3, [pc, #16]	@ (8010d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8010d68:	6818      	ldr	r0, [r3, #0]
 8010d6a:	6803      	ldr	r3, [r0, #0]
 8010d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d6e:	4798      	blx	r3
 8010d70:	b05b      	add	sp, #364	@ 0x16c
 8010d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d76:	bf00      	nop
 8010d78:	2400aa84 	.word	0x2400aa84

08010d7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8010d7c:	b570      	push	{r4, r5, r6, lr}
 8010d7e:	4604      	mov	r4, r0
 8010d80:	2500      	movs	r5, #0
 8010d82:	9805      	ldr	r0, [sp, #20]
 8010d84:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8010d88:	6061      	str	r1, [r4, #4]
 8010d8a:	8263      	strh	r3, [r4, #18]
 8010d8c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8010d90:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010d94:	8025      	strh	r5, [r4, #0]
 8010d96:	7221      	strb	r1, [r4, #8]
 8010d98:	7266      	strb	r6, [r4, #9]
 8010d9a:	60e0      	str	r0, [r4, #12]
 8010d9c:	8222      	strh	r2, [r4, #16]
 8010d9e:	82a3      	strh	r3, [r4, #20]
 8010da0:	82e5      	strh	r5, [r4, #22]
 8010da2:	8325      	strh	r5, [r4, #24]
 8010da4:	8365      	strh	r5, [r4, #26]
 8010da6:	83a5      	strh	r5, [r4, #28]
 8010da8:	83e5      	strh	r5, [r4, #30]
 8010daa:	8425      	strh	r5, [r4, #32]
 8010dac:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8010db0:	b32e      	cbz	r6, 8010dfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010db2:	6803      	ldr	r3, [r0, #0]
 8010db4:	695b      	ldr	r3, [r3, #20]
 8010db6:	4798      	blx	r3
 8010db8:	4606      	mov	r6, r0
 8010dba:	b300      	cbz	r0, 8010dfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010dbc:	68e0      	ldr	r0, [r4, #12]
 8010dbe:	4631      	mov	r1, r6
 8010dc0:	6803      	ldr	r3, [r0, #0]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	4798      	blx	r3
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	b1c8      	cbz	r0, 8010dfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010dca:	7b43      	ldrb	r3, [r0, #13]
 8010dcc:	7a82      	ldrb	r2, [r0, #10]
 8010dce:	005b      	lsls	r3, r3, #1
 8010dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	8423      	strh	r3, [r4, #32]
 8010dd8:	7a63      	ldrb	r3, [r4, #9]
 8010dda:	2b06      	cmp	r3, #6
 8010ddc:	d10f      	bne.n	8010dfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010dde:	68e0      	ldr	r0, [r4, #12]
 8010de0:	462a      	mov	r2, r5
 8010de2:	4631      	mov	r1, r6
 8010de4:	6803      	ldr	r3, [r0, #0]
 8010de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010de8:	4798      	blx	r3
 8010dea:	7b6b      	ldrb	r3, [r5, #13]
 8010dec:	005b      	lsls	r3, r3, #1
 8010dee:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8010df2:	7aab      	ldrb	r3, [r5, #10]
 8010df4:	4313      	orrs	r3, r2
 8010df6:	4418      	add	r0, r3
 8010df8:	8c23      	ldrh	r3, [r4, #32]
 8010dfa:	4418      	add	r0, r3
 8010dfc:	8420      	strh	r0, [r4, #32]
 8010dfe:	4620      	mov	r0, r4
 8010e00:	bd70      	pop	{r4, r5, r6, pc}

08010e02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8010e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e06:	2400      	movs	r4, #0
 8010e08:	b085      	sub	sp, #20
 8010e0a:	4681      	mov	r9, r0
 8010e0c:	4688      	mov	r8, r1
 8010e0e:	4692      	mov	sl, r2
 8010e10:	469b      	mov	fp, r3
 8010e12:	4627      	mov	r7, r4
 8010e14:	4625      	mov	r5, r4
 8010e16:	4626      	mov	r6, r4
 8010e18:	4554      	cmp	r4, sl
 8010e1a:	da2a      	bge.n	8010e72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	9303      	str	r3, [sp, #12]
 8010e20:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8010e24:	429d      	cmp	r5, r3
 8010e26:	d004      	beq.n	8010e32 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8010e28:	f242 030b 	movw	r3, #8203	@ 0x200b
 8010e2c:	429d      	cmp	r5, r3
 8010e2e:	bf18      	it	ne
 8010e30:	462f      	movne	r7, r5
 8010e32:	ab03      	add	r3, sp, #12
 8010e34:	4642      	mov	r2, r8
 8010e36:	4659      	mov	r1, fp
 8010e38:	4648      	mov	r0, r9
 8010e3a:	f002 ffd1 	bl	8013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010e3e:	4605      	mov	r5, r0
 8010e40:	b1b8      	cbz	r0, 8010e72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010e42:	280a      	cmp	r0, #10
 8010e44:	d015      	beq.n	8010e72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010e46:	9a03      	ldr	r2, [sp, #12]
 8010e48:	b18a      	cbz	r2, 8010e6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8010e4a:	7b50      	ldrb	r0, [r2, #13]
 8010e4c:	4639      	mov	r1, r7
 8010e4e:	7a93      	ldrb	r3, [r2, #10]
 8010e50:	0040      	lsls	r0, r0, #1
 8010e52:	8895      	ldrh	r5, [r2, #4]
 8010e54:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8010e58:	4303      	orrs	r3, r0
 8010e5a:	4640      	mov	r0, r8
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e64:	4798      	blx	r3
 8010e66:	9b01      	ldr	r3, [sp, #4]
 8010e68:	4418      	add	r0, r3
 8010e6a:	4406      	add	r6, r0
 8010e6c:	b2b6      	uxth	r6, r6
 8010e6e:	3401      	adds	r4, #1
 8010e70:	e7d2      	b.n	8010e18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8010e72:	4630      	mov	r0, r6
 8010e74:	b005      	add	sp, #20
 8010e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8010e7a:	2a02      	cmp	r2, #2
 8010e7c:	b530      	push	{r4, r5, lr}
 8010e7e:	d011      	beq.n	8010ea4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8010e80:	2a03      	cmp	r2, #3
 8010e82:	d01c      	beq.n	8010ebe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8010e84:	2a01      	cmp	r2, #1
 8010e86:	d10c      	bne.n	8010ea2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010e88:	888b      	ldrh	r3, [r1, #4]
 8010e8a:	8801      	ldrh	r1, [r0, #0]
 8010e8c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010e90:	1a5b      	subs	r3, r3, r1
 8010e92:	8844      	ldrh	r4, [r0, #2]
 8010e94:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010e98:	1a9b      	subs	r3, r3, r2
 8010e9a:	8004      	strh	r4, [r0, #0]
 8010e9c:	8081      	strh	r1, [r0, #4]
 8010e9e:	8043      	strh	r3, [r0, #2]
 8010ea0:	80c2      	strh	r2, [r0, #6]
 8010ea2:	bd30      	pop	{r4, r5, pc}
 8010ea4:	88cb      	ldrh	r3, [r1, #6]
 8010ea6:	8842      	ldrh	r2, [r0, #2]
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	88c2      	ldrh	r2, [r0, #6]
 8010eac:	1a9b      	subs	r3, r3, r2
 8010eae:	888a      	ldrh	r2, [r1, #4]
 8010eb0:	8801      	ldrh	r1, [r0, #0]
 8010eb2:	8043      	strh	r3, [r0, #2]
 8010eb4:	1a52      	subs	r2, r2, r1
 8010eb6:	8881      	ldrh	r1, [r0, #4]
 8010eb8:	1a52      	subs	r2, r2, r1
 8010eba:	8002      	strh	r2, [r0, #0]
 8010ebc:	e7f1      	b.n	8010ea2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010ebe:	88cb      	ldrh	r3, [r1, #6]
 8010ec0:	8841      	ldrh	r1, [r0, #2]
 8010ec2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010ec6:	1a5b      	subs	r3, r3, r1
 8010ec8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010ecc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010ed0:	1a9b      	subs	r3, r3, r2
 8010ed2:	8045      	strh	r5, [r0, #2]
 8010ed4:	8082      	strh	r2, [r0, #4]
 8010ed6:	8003      	strh	r3, [r0, #0]
 8010ed8:	80c4      	strh	r4, [r0, #6]
 8010eda:	e7e2      	b.n	8010ea2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08010edc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8010edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee0:	b09f      	sub	sp, #124	@ 0x7c
 8010ee2:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010ee4:	9312      	str	r3, [sp, #72]	@ 0x48
 8010ee6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8010ee8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8010eea:	8812      	ldrh	r2, [r2, #0]
 8010eec:	889b      	ldrh	r3, [r3, #4]
 8010eee:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8010ef0:	4413      	add	r3, r2
 8010ef2:	900e      	str	r0, [sp, #56]	@ 0x38
 8010ef4:	6828      	ldr	r0, [r5, #0]
 8010ef6:	b21b      	sxth	r3, r3
 8010ef8:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010efa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8010efe:	9311      	str	r3, [sp, #68]	@ 0x44
 8010f00:	6803      	ldr	r3, [r0, #0]
 8010f02:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8010f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f08:	4798      	blx	r3
 8010f0a:	682b      	ldr	r3, [r5, #0]
 8010f0c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8010f0e:	7b1a      	ldrb	r2, [r3, #12]
 8010f10:	7adb      	ldrb	r3, [r3, #11]
 8010f12:	9215      	str	r2, [sp, #84]	@ 0x54
 8010f14:	9316      	str	r3, [sp, #88]	@ 0x58
 8010f16:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8010f1a:	2c00      	cmp	r4, #0
 8010f1c:	d067      	beq.n	8010fee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8010f1e:	7c2b      	ldrb	r3, [r5, #16]
 8010f20:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8010f22:	2b06      	cmp	r3, #6
 8010f24:	bf14      	ite	ne
 8010f26:	2301      	movne	r3, #1
 8010f28:	2302      	moveq	r3, #2
 8010f2a:	4413      	add	r3, r2
 8010f2c:	f04f 0900 	mov.w	r9, #0
 8010f30:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f32:	464c      	mov	r4, r9
 8010f34:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8010f38:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8010f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010f40:	4293      	cmp	r3, r2
 8010f42:	f280 808b 	bge.w	801105c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8010f46:	2300      	movs	r3, #0
 8010f48:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8010f4c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8010f50:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8010f54:	429c      	cmp	r4, r3
 8010f56:	d006      	beq.n	8010f66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8010f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f5a:	f242 020b 	movw	r2, #8203	@ 0x200b
 8010f5e:	4294      	cmp	r4, r2
 8010f60:	bf18      	it	ne
 8010f62:	4623      	movne	r3, r4
 8010f64:	930c      	str	r3, [sp, #48]	@ 0x30
 8010f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f68:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8010f6a:	682a      	ldr	r2, [r5, #0]
 8010f6c:	428b      	cmp	r3, r1
 8010f6e:	db40      	blt.n	8010ff2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8010f70:	6813      	ldr	r3, [r2, #0]
 8010f72:	4610      	mov	r0, r2
 8010f74:	695b      	ldr	r3, [r3, #20]
 8010f76:	4798      	blx	r3
 8010f78:	4604      	mov	r4, r0
 8010f7a:	6828      	ldr	r0, [r5, #0]
 8010f7c:	aa1d      	add	r2, sp, #116	@ 0x74
 8010f7e:	4621      	mov	r1, r4
 8010f80:	6803      	ldr	r3, [r0, #0]
 8010f82:	689f      	ldr	r7, [r3, #8]
 8010f84:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8010f88:	47b8      	blx	r7
 8010f8a:	901c      	str	r0, [sp, #112]	@ 0x70
 8010f8c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8010f90:	429c      	cmp	r4, r3
 8010f92:	f000 80eb 	beq.w	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8010f96:	f242 030b 	movw	r3, #8203	@ 0x200b
 8010f9a:	429c      	cmp	r4, r3
 8010f9c:	f000 80e6 	beq.w	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8010fa0:	2c00      	cmp	r4, #0
 8010fa2:	f000 810d 	beq.w	80111c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8010fa6:	2c0a      	cmp	r4, #10
 8010fa8:	d05e      	beq.n	8011068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8010faa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010fac:	b36a      	cbz	r2, 801100a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8010fae:	8894      	ldrh	r4, [r2, #4]
 8010fb0:	f1bb 0f00 	cmp.w	fp, #0
 8010fb4:	d03a      	beq.n	801102c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8010fb6:	f892 900d 	ldrb.w	r9, [r2, #13]
 8010fba:	f1bb 0f01 	cmp.w	fp, #1
 8010fbe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8010fc2:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8010fc6:	f892 900a 	ldrb.w	r9, [r2, #10]
 8010fca:	ea49 0903 	orr.w	r9, r9, r3
 8010fce:	d133      	bne.n	8011038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8010fd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fd2:	eba6 0609 	sub.w	r6, r6, r9
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d14d      	bne.n	8011076 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8010fda:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010fdc:	eb09 0306 	add.w	r3, r9, r6
 8010fe0:	4413      	add	r3, r2
 8010fe2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8010fe4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	da4e      	bge.n	801108a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8010fec:	e036      	b.n	801105c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8010fee:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8010ff0:	e79c      	b.n	8010f2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8010ff2:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8010ff6:	4659      	mov	r1, fp
 8010ff8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8010ffa:	9301      	str	r3, [sp, #4]
 8010ffc:	ab1d      	add	r3, sp, #116	@ 0x74
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	ab1c      	add	r3, sp, #112	@ 0x70
 8011002:	f002 ff36 	bl	8013e72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011006:	4604      	mov	r4, r0
 8011008:	e7c0      	b.n	8010f8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801100a:	6828      	ldr	r0, [r5, #0]
 801100c:	6803      	ldr	r3, [r0, #0]
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	4798      	blx	r3
 8011012:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011016:	4298      	cmp	r0, r3
 8011018:	f000 80a8 	beq.w	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801101c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011020:	4298      	cmp	r0, r3
 8011022:	f000 80a3 	beq.w	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011026:	f1bb 0f00 	cmp.w	fp, #0
 801102a:	d100      	bne.n	801102e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801102c:	444e      	add	r6, r9
 801102e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011030:	2a00      	cmp	r2, #0
 8011032:	d1c0      	bne.n	8010fb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8011034:	4691      	mov	r9, r2
 8011036:	e099      	b.n	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 80c2 	beq.w	80111c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8011040:	f1bb 0f00 	cmp.w	fp, #0
 8011044:	d117      	bne.n	8011076 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011046:	6828      	ldr	r0, [r5, #0]
 8011048:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801104a:	6803      	ldr	r3, [r0, #0]
 801104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801104e:	4798      	blx	r3
 8011050:	4406      	add	r6, r0
 8011052:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011054:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011056:	1af3      	subs	r3, r6, r3
 8011058:	4293      	cmp	r3, r2
 801105a:	dd16      	ble.n	801108a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801105c:	2c00      	cmp	r4, #0
 801105e:	f000 80af 	beq.w	80111c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011062:	2c0a      	cmp	r4, #10
 8011064:	f040 809d 	bne.w	80111a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8011068:	240a      	movs	r4, #10
 801106a:	fab4 f084 	clz	r0, r4
 801106e:	0940      	lsrs	r0, r0, #5
 8011070:	b01f      	add	sp, #124	@ 0x7c
 8011072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011076:	6828      	ldr	r0, [r5, #0]
 8011078:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801107a:	6803      	ldr	r3, [r0, #0]
 801107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801107e:	4798      	blx	r3
 8011080:	f1bb 0f01 	cmp.w	fp, #1
 8011084:	eba6 0600 	sub.w	r6, r6, r0
 8011088:	d0a7      	beq.n	8010fda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801108a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801108c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801108e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011092:	f9b3 8000 	ldrsh.w	r8, [r3]
 8011096:	7b43      	ldrb	r3, [r0, #13]
 8011098:	4431      	add	r1, r6
 801109a:	015b      	lsls	r3, r3, #5
 801109c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80110a0:	7983      	ldrb	r3, [r0, #6]
 80110a2:	4313      	orrs	r3, r2
 80110a4:	440b      	add	r3, r1
 80110a6:	4543      	cmp	r3, r8
 80110a8:	db60      	blt.n	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80110aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80110ac:	4299      	cmp	r1, r3
 80110ae:	da5d      	bge.n	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80110b0:	6828      	ldr	r0, [r5, #0]
 80110b2:	45b0      	cmp	r8, r6
 80110b4:	6803      	ldr	r3, [r0, #0]
 80110b6:	bfcc      	ite	gt
 80110b8:	eba8 0806 	subgt.w	r8, r8, r6
 80110bc:	f04f 0800 	movle.w	r8, #0
 80110c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110c2:	bfc8      	it	gt
 80110c4:	fa1f f888 	uxthgt.w	r8, r8
 80110c8:	4798      	blx	r3
 80110ca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80110cc:	7b53      	ldrb	r3, [r2, #13]
 80110ce:	00d9      	lsls	r1, r3, #3
 80110d0:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 80110d4:	7a11      	ldrb	r1, [r2, #8]
 80110d6:	4339      	orrs	r1, r7
 80110d8:	065f      	lsls	r7, r3, #25
 80110da:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80110dc:	bf48      	it	mi
 80110de:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 80110e2:	4407      	add	r7, r0
 80110e4:	bf48      	it	mi
 80110e6:	b209      	sxthmi	r1, r1
 80110e8:	1a7f      	subs	r7, r7, r1
 80110ea:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80110ec:	b2bf      	uxth	r7, r7
 80110ee:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80110f2:	fa0f fa87 	sxth.w	sl, r7
 80110f6:	4551      	cmp	r1, sl
 80110f8:	dd3c      	ble.n	8011174 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80110fa:	011b      	lsls	r3, r3, #4
 80110fc:	79d0      	ldrb	r0, [r2, #7]
 80110fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011102:	4303      	orrs	r3, r0
 8011104:	449a      	add	sl, r3
 8011106:	4551      	cmp	r1, sl
 8011108:	dc30      	bgt.n	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801110a:	1bcf      	subs	r7, r1, r7
 801110c:	468a      	mov	sl, r1
 801110e:	b23f      	sxth	r7, r7
 8011110:	9219      	str	r2, [sp, #100]	@ 0x64
 8011112:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011114:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011116:	6828      	ldr	r0, [r5, #0]
 8011118:	2a00      	cmp	r2, #0
 801111a:	d12d      	bne.n	8011178 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801111c:	9318      	str	r3, [sp, #96]	@ 0x60
 801111e:	b2bf      	uxth	r7, r7
 8011120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011122:	6819      	ldr	r1, [r3, #0]
 8011124:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8011126:	6801      	ldr	r1, [r0, #0]
 8011128:	9314      	str	r3, [sp, #80]	@ 0x50
 801112a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801112c:	4788      	blx	r1
 801112e:	79a9      	ldrb	r1, [r5, #6]
 8011130:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011132:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011134:	7ba9      	ldrb	r1, [r5, #14]
 8011136:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011138:	910a      	str	r1, [sp, #40]	@ 0x28
 801113a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801113e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011140:	68a9      	ldr	r1, [r5, #8]
 8011142:	9306      	str	r3, [sp, #24]
 8011144:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011146:	9205      	str	r2, [sp, #20]
 8011148:	9304      	str	r3, [sp, #16]
 801114a:	f8cd a004 	str.w	sl, [sp, #4]
 801114e:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8011152:	44b0      	add	r8, r6
 8011154:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8011156:	fa0f f388 	sxth.w	r3, r8
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801115e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011162:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	47b8      	blx	r7
 801116c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801116e:	3301      	adds	r3, #1
 8011170:	930d      	str	r3, [sp, #52]	@ 0x34
 8011172:	e6e3      	b.n	8010f3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8011174:	2700      	movs	r7, #0
 8011176:	e7cb      	b.n	8011110 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8011178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801117a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801117e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011180:	f8dc 1000 	ldr.w	r1, [ip]
 8011184:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8011188:	79aa      	ldrb	r2, [r5, #6]
 801118a:	9203      	str	r2, [sp, #12]
 801118c:	7baa      	ldrb	r2, [r5, #14]
 801118e:	9202      	str	r2, [sp, #8]
 8011190:	68aa      	ldr	r2, [r5, #8]
 8011192:	e9cd 0200 	strd	r0, r2, [sp]
 8011196:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011198:	4660      	mov	r0, ip
 801119a:	688f      	ldr	r7, [r1, #8]
 801119c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801119e:	47b8      	blx	r7
 80111a0:	e7e4      	b.n	801116c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80111a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80111a4:	3501      	adds	r5, #1
 80111a6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80111a8:	429d      	cmp	r5, r3
 80111aa:	f6bf af5e 	bge.w	801106a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80111ae:	4659      	mov	r1, fp
 80111b0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80111b2:	f7fc f8d3 	bl	800d35c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80111b6:	4604      	mov	r4, r0
 80111b8:	b110      	cbz	r0, 80111c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80111ba:	280a      	cmp	r0, #10
 80111bc:	d1f2      	bne.n	80111a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 80111be:	e753      	b.n	8011068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80111c0:	2400      	movs	r4, #0
 80111c2:	e752      	b.n	801106a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80111c4:	f1bb 0f00 	cmp.w	fp, #0
 80111c8:	f43f af43 	beq.w	8011052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80111cc:	e75d      	b.n	801108a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

080111ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80111ce:	b530      	push	{r4, r5, lr}
 80111d0:	8ac4      	ldrh	r4, [r0, #22]
 80111d2:	8b45      	ldrh	r5, [r0, #26]
 80111d4:	8343      	strh	r3, [r0, #26]
 80111d6:	442c      	add	r4, r5
 80111d8:	1ae4      	subs	r4, r4, r3
 80111da:	8b83      	ldrh	r3, [r0, #28]
 80111dc:	82c4      	strh	r4, [r0, #22]
 80111de:	8b04      	ldrh	r4, [r0, #24]
 80111e0:	4422      	add	r2, r4
 80111e2:	440c      	add	r4, r1
 80111e4:	1a59      	subs	r1, r3, r1
 80111e6:	83c2      	strh	r2, [r0, #30]
 80111e8:	8304      	strh	r4, [r0, #24]
 80111ea:	8381      	strh	r1, [r0, #28]
 80111ec:	bd30      	pop	{r4, r5, pc}

080111ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80111ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f2:	4604      	mov	r4, r0
 80111f4:	8a47      	ldrh	r7, [r0, #18]
 80111f6:	68c0      	ldr	r0, [r0, #12]
 80111f8:	b085      	sub	sp, #20
 80111fa:	6803      	ldr	r3, [r0, #0]
 80111fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111fe:	4798      	blx	r3
 8011200:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8011204:	7a63      	ldrb	r3, [r4, #9]
 8011206:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801120a:	3b01      	subs	r3, #1
 801120c:	42b7      	cmp	r7, r6
 801120e:	bfac      	ite	ge
 8011210:	f04f 0900 	movge.w	r9, #0
 8011214:	f04f 0901 	movlt.w	r9, #1
 8011218:	2b05      	cmp	r3, #5
 801121a:	d804      	bhi.n	8011226 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801121c:	e8df f003 	tbb	[pc, r3]
 8011220:	470f0854 	.word	0x470f0854
 8011224:	4c4c      	.short	0x4c4c
 8011226:	2500      	movs	r5, #0
 8011228:	46a9      	mov	r9, r5
 801122a:	462e      	mov	r6, r5
 801122c:	462f      	mov	r7, r5
 801122e:	e00e      	b.n	801124e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011230:	42b7      	cmp	r7, r6
 8011232:	f04f 0500 	mov.w	r5, #0
 8011236:	bfb4      	ite	lt
 8011238:	2600      	movlt	r6, #0
 801123a:	2601      	movge	r6, #1
 801123c:	e7f6      	b.n	801122c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801123e:	42b7      	cmp	r7, r6
 8011240:	464d      	mov	r5, r9
 8011242:	f04f 0900 	mov.w	r9, #0
 8011246:	bfb4      	ite	lt
 8011248:	2600      	movlt	r6, #0
 801124a:	2601      	movge	r6, #1
 801124c:	464f      	mov	r7, r9
 801124e:	f04f 0800 	mov.w	r8, #0
 8011252:	f8a4 8016 	strh.w	r8, [r4, #22]
 8011256:	f8a4 8018 	strh.w	r8, [r4, #24]
 801125a:	f8cd 8004 	str.w	r8, [sp, #4]
 801125e:	2300      	movs	r3, #0
 8011260:	9303      	str	r3, [sp, #12]
 8011262:	8823      	ldrh	r3, [r4, #0]
 8011264:	2b20      	cmp	r3, #32
 8011266:	d033      	beq.n	80112d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8011268:	f242 010b 	movw	r1, #8203	@ 0x200b
 801126c:	1a5a      	subs	r2, r3, r1
 801126e:	f1d2 0a00 	rsbs	sl, r2, #0
 8011272:	eb4a 0a02 	adc.w	sl, sl, r2
 8011276:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801127a:	4293      	cmp	r3, r2
 801127c:	d008      	beq.n	8011290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801127e:	428b      	cmp	r3, r1
 8011280:	9a01      	ldr	r2, [sp, #4]
 8011282:	bf0e      	itee	eq
 8011284:	f04f 0a01 	moveq.w	sl, #1
 8011288:	461a      	movne	r2, r3
 801128a:	f04f 0a00 	movne.w	sl, #0
 801128e:	9201      	str	r2, [sp, #4]
 8011290:	ab03      	add	r3, sp, #12
 8011292:	68e2      	ldr	r2, [r4, #12]
 8011294:	7a21      	ldrb	r1, [r4, #8]
 8011296:	6860      	ldr	r0, [r4, #4]
 8011298:	f002 fda2 	bl	8013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801129c:	8020      	strh	r0, [r4, #0]
 801129e:	b9d8      	cbnz	r0, 80112d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80112a0:	8ba2      	ldrh	r2, [r4, #28]
 80112a2:	2300      	movs	r3, #0
 80112a4:	4611      	mov	r1, r2
 80112a6:	4620      	mov	r0, r4
 80112a8:	f7ff ff91 	bl	80111ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80112ac:	e06e      	b.n	801138c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80112ae:	2500      	movs	r5, #0
 80112b0:	2701      	movs	r7, #1
 80112b2:	46a9      	mov	r9, r5
 80112b4:	462e      	mov	r6, r5
 80112b6:	e7ca      	b.n	801124e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80112b8:	42b7      	cmp	r7, r6
 80112ba:	f04f 0500 	mov.w	r5, #0
 80112be:	bfb4      	ite	lt
 80112c0:	2700      	movlt	r7, #0
 80112c2:	2701      	movge	r7, #1
 80112c4:	462e      	mov	r6, r5
 80112c6:	e7c2      	b.n	801124e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80112c8:	2500      	movs	r5, #0
 80112ca:	2601      	movs	r6, #1
 80112cc:	46a9      	mov	r9, r5
 80112ce:	e7ad      	b.n	801122c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80112d0:	9301      	str	r3, [sp, #4]
 80112d2:	f04f 0a01 	mov.w	sl, #1
 80112d6:	e7db      	b.n	8011290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80112d8:	8b63      	ldrh	r3, [r4, #26]
 80112da:	280a      	cmp	r0, #10
 80112dc:	f103 0301 	add.w	r3, r3, #1
 80112e0:	8363      	strh	r3, [r4, #26]
 80112e2:	d0dd      	beq.n	80112a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80112e4:	9a03      	ldr	r2, [sp, #12]
 80112e6:	bb62      	cbnz	r2, 8011342 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80112e8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80112ec:	4298      	cmp	r0, r3
 80112ee:	d003      	beq.n	80112f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80112f0:	f242 030b 	movw	r3, #8203	@ 0x200b
 80112f4:	4298      	cmp	r0, r3
 80112f6:	d1b2      	bne.n	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80112f8:	8823      	ldrh	r3, [r4, #0]
 80112fa:	8ba1      	ldrh	r1, [r4, #28]
 80112fc:	2b20      	cmp	r3, #32
 80112fe:	d003      	beq.n	8011308 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8011300:	f242 000b 	movw	r0, #8203	@ 0x200b
 8011304:	4283      	cmp	r3, r0
 8011306:	d131      	bne.n	801136c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8011308:	f1ba 0f00 	cmp.w	sl, #0
 801130c:	bf0a      	itet	eq
 801130e:	4688      	moveq	r8, r1
 8011310:	4650      	movne	r0, sl
 8011312:	2001      	moveq	r0, #1
 8011314:	440a      	add	r2, r1
 8011316:	8b23      	ldrh	r3, [r4, #24]
 8011318:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801131c:	b292      	uxth	r2, r2
 801131e:	83a2      	strh	r2, [r4, #28]
 8011320:	4413      	add	r3, r2
 8011322:	f1b9 0f00 	cmp.w	r9, #0
 8011326:	d102      	bne.n	801132e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8011328:	2d00      	cmp	r5, #0
 801132a:	d042      	beq.n	80113b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801132c:	b300      	cbz	r0, 8011370 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801132e:	8c21      	ldrh	r1, [r4, #32]
 8011330:	4419      	add	r1, r3
 8011332:	458c      	cmp	ip, r1
 8011334:	da37      	bge.n	80113a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011336:	8ae1      	ldrh	r1, [r4, #22]
 8011338:	2900      	cmp	r1, #0
 801133a:	d034      	beq.n	80113a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801133c:	4563      	cmp	r3, ip
 801133e:	dd8e      	ble.n	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011340:	e01d      	b.n	801137e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8011342:	8893      	ldrh	r3, [r2, #4]
 8011344:	9901      	ldr	r1, [sp, #4]
 8011346:	8023      	strh	r3, [r4, #0]
 8011348:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801134c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011350:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8011354:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8011358:	ea4b 0b00 	orr.w	fp, fp, r0
 801135c:	68e0      	ldr	r0, [r4, #12]
 801135e:	6803      	ldr	r3, [r0, #0]
 8011360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011362:	4798      	blx	r3
 8011364:	eb0b 0200 	add.w	r2, fp, r0
 8011368:	b292      	uxth	r2, r2
 801136a:	e7c5      	b.n	80112f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801136c:	2000      	movs	r0, #0
 801136e:	e7d1      	b.n	8011314 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8011370:	4563      	cmp	r3, ip
 8011372:	f77f af74 	ble.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011376:	8ae3      	ldrh	r3, [r4, #22]
 8011378:	2b00      	cmp	r3, #0
 801137a:	f43f af70 	beq.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801137e:	2301      	movs	r3, #1
 8011380:	8c22      	ldrh	r2, [r4, #32]
 8011382:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8011386:	8be3      	ldrh	r3, [r4, #30]
 8011388:	4413      	add	r3, r2
 801138a:	83e3      	strh	r3, [r4, #30]
 801138c:	68e0      	ldr	r0, [r4, #12]
 801138e:	6803      	ldr	r3, [r0, #0]
 8011390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011392:	4798      	blx	r3
 8011394:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8011398:	4418      	add	r0, r3
 801139a:	8a63      	ldrh	r3, [r4, #18]
 801139c:	1a18      	subs	r0, r3, r0
 801139e:	8260      	strh	r0, [r4, #18]
 80113a0:	b005      	add	sp, #20
 80113a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a6:	2300      	movs	r3, #0
 80113a8:	4611      	mov	r1, r2
 80113aa:	4620      	mov	r0, r4
 80113ac:	f7ff ff0f 	bl	80111ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80113b0:	e755      	b.n	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113b2:	4563      	cmp	r3, ip
 80113b4:	dd14      	ble.n	80113e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80113b6:	b117      	cbz	r7, 80113be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80113b8:	2301      	movs	r3, #1
 80113ba:	460a      	mov	r2, r1
 80113bc:	e772      	b.n	80112a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80113be:	2e00      	cmp	r6, #0
 80113c0:	f43f af4d 	beq.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	f47f af4a 	bne.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113ca:	f1ba 0f00 	cmp.w	sl, #0
 80113ce:	d002      	beq.n	80113d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80113d0:	2301      	movs	r3, #1
 80113d2:	4642      	mov	r2, r8
 80113d4:	e767      	b.n	80112a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80113d6:	8ae3      	ldrh	r3, [r4, #22]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f43f af40 	beq.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113de:	e7d5      	b.n	801138c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	f47f af3c 	bne.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113e6:	f1ba 0f00 	cmp.w	sl, #0
 80113ea:	f43f af38 	beq.w	801125e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113ee:	2301      	movs	r3, #1
 80113f0:	4642      	mov	r2, r8
 80113f2:	e7da      	b.n	80113aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080113f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80113f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113f6:	4605      	mov	r5, r0
 80113f8:	b08f      	sub	sp, #60	@ 0x3c
 80113fa:	4617      	mov	r7, r2
 80113fc:	461c      	mov	r4, r3
 80113fe:	460e      	mov	r6, r1
 8011400:	b1d1      	cbz	r1, 8011438 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4620      	mov	r0, r4
 8011406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011408:	4798      	blx	r3
 801140a:	4240      	negs	r0, r0
 801140c:	9603      	str	r6, [sp, #12]
 801140e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011412:	b200      	sxth	r0, r0
 8011414:	9700      	str	r7, [sp, #0]
 8011416:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801141a:	4629      	mov	r1, r5
 801141c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8011420:	2401      	movs	r4, #1
 8011422:	a805      	add	r0, sp, #20
 8011424:	f7ff fcaa 	bl	8010d7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8011428:	a805      	add	r0, sp, #20
 801142a:	f7ff fee0 	bl	80111ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801142e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011432:	b163      	cbz	r3, 801144e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8011434:	3401      	adds	r4, #1
 8011436:	e7f7      	b.n	8011428 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8011438:	2401      	movs	r4, #1
 801143a:	f002 fd9d 	bl	8013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801143e:	280a      	cmp	r0, #10
 8011440:	4628      	mov	r0, r5
 8011442:	bf08      	it	eq
 8011444:	3401      	addeq	r4, #1
 8011446:	f002 fd97 	bl	8013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801144a:	2800      	cmp	r0, #0
 801144c:	d1f7      	bne.n	801143e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801144e:	b2a0      	uxth	r0, r4
 8011450:	b00f      	add	sp, #60	@ 0x3c
 8011452:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011458:	b0e3      	sub	sp, #396	@ 0x18c
 801145a:	461c      	mov	r4, r3
 801145c:	4683      	mov	fp, r0
 801145e:	4688      	mov	r8, r1
 8011460:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 8112 	beq.w	801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	f000 810e 	beq.w	801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011470:	7ba3      	ldrb	r3, [r4, #14]
 8011472:	2b00      	cmp	r3, #0
 8011474:	f000 810a 	beq.w	801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011478:	ad0a      	add	r5, sp, #40	@ 0x28
 801147a:	6810      	ldr	r0, [r2, #0]
 801147c:	6851      	ldr	r1, [r2, #4]
 801147e:	462b      	mov	r3, r5
 8011480:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8011484:	c303      	stmia	r3!, {r0, r1}
 8011486:	2100      	movs	r1, #0
 8011488:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801148c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8011490:	4628      	mov	r0, r5
 8011492:	910c      	str	r1, [sp, #48]	@ 0x30
 8011494:	a90c      	add	r1, sp, #48	@ 0x30
 8011496:	79a2      	ldrb	r2, [r4, #6]
 8011498:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801149c:	f7ff fced 	bl	8010e7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80114a0:	a90c      	add	r1, sp, #48	@ 0x30
 80114a2:	79a2      	ldrb	r2, [r4, #6]
 80114a4:	4608      	mov	r0, r1
 80114a6:	f7ff fce8 	bl	8010e7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80114aa:	a817      	add	r0, sp, #92	@ 0x5c
 80114ac:	f002 f90a 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 80114b0:	6820      	ldr	r0, [r4, #0]
 80114b2:	6803      	ldr	r3, [r0, #0]
 80114b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114b6:	4798      	blx	r3
 80114b8:	4606      	mov	r6, r0
 80114ba:	6820      	ldr	r0, [r4, #0]
 80114bc:	6803      	ldr	r3, [r0, #0]
 80114be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114c0:	4798      	blx	r3
 80114c2:	4633      	mov	r3, r6
 80114c4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80114c6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80114c8:	9000      	str	r0, [sp, #0]
 80114ca:	a817      	add	r0, sp, #92	@ 0x5c
 80114cc:	f002 f955 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80114d0:	6820      	ldr	r0, [r4, #0]
 80114d2:	f894 a004 	ldrb.w	sl, [r4, #4]
 80114d6:	6803      	ldr	r3, [r0, #0]
 80114d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114da:	4798      	blx	r3
 80114dc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	4607      	mov	r7, r0
 80114e4:	4406      	add	r6, r0
 80114e6:	a830      	add	r0, sp, #192	@ 0xc0
 80114e8:	f893 9009 	ldrb.w	r9, [r3, #9]
 80114ec:	f002 f8ea 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 80114f0:	7c23      	ldrb	r3, [r4, #16]
 80114f2:	b17b      	cbz	r3, 8011514 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80114f4:	6820      	ldr	r0, [r4, #0]
 80114f6:	6803      	ldr	r3, [r0, #0]
 80114f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114fa:	4798      	blx	r3
 80114fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80114fe:	6820      	ldr	r0, [r4, #0]
 8011500:	6802      	ldr	r2, [r0, #0]
 8011502:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011504:	4790      	blx	r2
 8011506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011508:	9000      	str	r0, [sp, #0]
 801150a:	a830      	add	r0, sp, #192	@ 0xc0
 801150c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801150e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8011510:	f002 f933 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011514:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8011518:	a80e      	add	r0, sp, #56	@ 0x38
 801151a:	7be2      	ldrb	r2, [r4, #15]
 801151c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8011520:	1a8a      	subs	r2, r1, r2
 8011522:	7c21      	ldrb	r1, [r4, #16]
 8011524:	9103      	str	r1, [sp, #12]
 8011526:	b292      	uxth	r2, r2
 8011528:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801152c:	9102      	str	r1, [sp, #8]
 801152e:	6821      	ldr	r1, [r4, #0]
 8011530:	9101      	str	r1, [sp, #4]
 8011532:	7961      	ldrb	r1, [r4, #5]
 8011534:	9100      	str	r1, [sp, #0]
 8011536:	a930      	add	r1, sp, #192	@ 0xc0
 8011538:	f7ff fc20 	bl	8010d7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801153c:	2e00      	cmp	r6, #0
 801153e:	dc5b      	bgt.n	80115f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8011540:	af17      	add	r7, sp, #92	@ 0x5c
 8011542:	f04f 0900 	mov.w	r9, #0
 8011546:	7c23      	ldrb	r3, [r4, #16]
 8011548:	2b00      	cmp	r3, #0
 801154a:	f000 80b1 	beq.w	80116b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801154e:	a80e      	add	r0, sp, #56	@ 0x38
 8011550:	f7ff fe4d 	bl	80111ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011554:	f1ba 0f00 	cmp.w	sl, #0
 8011558:	f000 80a5 	beq.w	80116a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801155c:	7c23      	ldrb	r3, [r4, #16]
 801155e:	2264      	movs	r2, #100	@ 0x64
 8011560:	4639      	mov	r1, r7
 8011562:	a849      	add	r0, sp, #292	@ 0x124
 8011564:	9309      	str	r3, [sp, #36]	@ 0x24
 8011566:	f012 fe6e 	bl	8024246 <memcpy>
 801156a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801156c:	2b00      	cmp	r3, #0
 801156e:	f000 80a7 	beq.w	80116c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8011572:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8011576:	7922      	ldrb	r2, [r4, #4]
 8011578:	2a01      	cmp	r2, #1
 801157a:	f040 808a 	bne.w	8011692 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801157e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8011582:	1ac0      	subs	r0, r0, r3
 8011584:	2302      	movs	r3, #2
 8011586:	fb90 f0f3 	sdiv	r0, r0, r3
 801158a:	b200      	sxth	r0, r0
 801158c:	7c23      	ldrb	r3, [r4, #16]
 801158e:	2b00      	cmp	r3, #0
 8011590:	f000 808b 	beq.w	80116aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8011594:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8011598:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801159c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80115a0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80115a4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80115a8:	2100      	movs	r1, #0
 80115aa:	4410      	add	r0, r2
 80115ac:	4642      	mov	r2, r8
 80115ae:	b200      	sxth	r0, r0
 80115b0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80115b4:	9000      	str	r0, [sp, #0]
 80115b6:	4658      	mov	r0, fp
 80115b8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80115bc:	f7ff fc8e 	bl	8010edc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d163      	bne.n	801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80115c4:	b2b2      	uxth	r2, r6
 80115c6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80115ca:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80115ce:	4413      	add	r3, r2
 80115d0:	1a8a      	subs	r2, r1, r2
 80115d2:	b21b      	sxth	r3, r3
 80115d4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80115d8:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80115dc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80115e0:	2a00      	cmp	r2, #0
 80115e2:	d153      	bne.n	801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80115e4:	6822      	ldr	r2, [r4, #0]
 80115e6:	8869      	ldrh	r1, [r5, #2]
 80115e8:	7a12      	ldrb	r2, [r2, #8]
 80115ea:	1a9b      	subs	r3, r3, r2
 80115ec:	88ea      	ldrh	r2, [r5, #6]
 80115ee:	440a      	add	r2, r1
 80115f0:	b212      	sxth	r2, r2
 80115f2:	4293      	cmp	r3, r2
 80115f4:	dda7      	ble.n	8011546 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80115f6:	e049      	b.n	801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80115f8:	7c23      	ldrb	r3, [r4, #16]
 80115fa:	444f      	add	r7, r9
 80115fc:	b1c3      	cbz	r3, 8011630 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80115fe:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8011602:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8011606:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801160a:	443b      	add	r3, r7
 801160c:	4293      	cmp	r3, r2
 801160e:	da97      	bge.n	8011540 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011610:	a80e      	add	r0, sp, #56	@ 0x38
 8011612:	f7ff fdec 	bl	80111ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011616:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801161a:	3b01      	subs	r3, #1
 801161c:	b29b      	uxth	r3, r3
 801161e:	454b      	cmp	r3, r9
 8011620:	9309      	str	r3, [sp, #36]	@ 0x24
 8011622:	d021      	beq.n	8011668 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8011624:	7961      	ldrb	r1, [r4, #5]
 8011626:	a817      	add	r0, sp, #92	@ 0x5c
 8011628:	f7fb fe98 	bl	800d35c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801162c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801162e:	e7f4      	b.n	801161a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8011630:	fa1f f986 	uxth.w	r9, r6
 8011634:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8011638:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801163c:	443b      	add	r3, r7
 801163e:	4293      	cmp	r3, r2
 8011640:	f6bf af7e 	bge.w	8011540 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011644:	a817      	add	r0, sp, #92	@ 0x5c
 8011646:	f002 fc97 	bl	8013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801164a:	b1f8      	cbz	r0, 801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801164c:	280a      	cmp	r0, #10
 801164e:	d1f1      	bne.n	8011634 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8011650:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8011654:	444b      	add	r3, r9
 8011656:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801165a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801165e:	eba3 0309 	sub.w	r3, r3, r9
 8011662:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8011666:	e7e5      	b.n	8011634 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8011668:	b2b3      	uxth	r3, r6
 801166a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801166e:	441a      	add	r2, r3
 8011670:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8011674:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8011678:	1ad3      	subs	r3, r2, r3
 801167a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801167e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8011682:	b11b      	cbz	r3, 801168c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011684:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8011688:	2b00      	cmp	r3, #0
 801168a:	d0ba      	beq.n	8011602 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801168c:	b063      	add	sp, #396	@ 0x18c
 801168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011692:	2a02      	cmp	r2, #2
 8011694:	d105      	bne.n	80116a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8011696:	7be2      	ldrb	r2, [r4, #15]
 8011698:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801169c:	1a80      	subs	r0, r0, r2
 801169e:	1ac0      	subs	r0, r0, r3
 80116a0:	e773      	b.n	801158a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80116a2:	2000      	movs	r0, #0
 80116a4:	e772      	b.n	801158c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80116a6:	7be0      	ldrb	r0, [r4, #15]
 80116a8:	e770      	b.n	801158c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80116aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80116ae:	e773      	b.n	8011598 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80116b0:	f1ba 0f00 	cmp.w	sl, #0
 80116b4:	d0f7      	beq.n	80116a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80116b6:	2264      	movs	r2, #100	@ 0x64
 80116b8:	4639      	mov	r1, r7
 80116ba:	a849      	add	r0, sp, #292	@ 0x124
 80116bc:	f012 fdc3 	bl	8024246 <memcpy>
 80116c0:	2300      	movs	r3, #0
 80116c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80116c6:	6821      	ldr	r1, [r4, #0]
 80116c8:	a849      	add	r0, sp, #292	@ 0x124
 80116ca:	f7ff fb9a 	bl	8010e02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80116ce:	b203      	sxth	r3, r0
 80116d0:	e751      	b.n	8011576 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080116d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80116d2:	2b03      	cmp	r3, #3
 80116d4:	d818      	bhi.n	8011708 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80116d6:	e8df f003 	tbb	[pc, r3]
 80116da:	0602      	.short	0x0602
 80116dc:	130d      	.short	0x130d
 80116de:	f9b0 2000 	ldrsh.w	r2, [r0]
 80116e2:	1850      	adds	r0, r2, r1
 80116e4:	4770      	bx	lr
 80116e6:	8803      	ldrh	r3, [r0, #0]
 80116e8:	8880      	ldrh	r0, [r0, #4]
 80116ea:	4418      	add	r0, r3
 80116ec:	b200      	sxth	r0, r0
 80116ee:	1a80      	subs	r0, r0, r2
 80116f0:	3801      	subs	r0, #1
 80116f2:	4770      	bx	lr
 80116f4:	8803      	ldrh	r3, [r0, #0]
 80116f6:	8880      	ldrh	r0, [r0, #4]
 80116f8:	4418      	add	r0, r3
 80116fa:	b200      	sxth	r0, r0
 80116fc:	1a40      	subs	r0, r0, r1
 80116fe:	e7f7      	b.n	80116f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011700:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011704:	4410      	add	r0, r2
 8011706:	4770      	bx	lr
 8011708:	2000      	movs	r0, #0
 801170a:	4770      	bx	lr

0801170c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801170c:	2b03      	cmp	r3, #3
 801170e:	d817      	bhi.n	8011740 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011710:	e8df f003 	tbb	[pc, r3]
 8011714:	10090602 	.word	0x10090602
 8011718:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801171c:	1850      	adds	r0, r2, r1
 801171e:	4770      	bx	lr
 8011720:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011724:	e7fa      	b.n	801171c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8011726:	8843      	ldrh	r3, [r0, #2]
 8011728:	88c0      	ldrh	r0, [r0, #6]
 801172a:	4418      	add	r0, r3
 801172c:	b200      	sxth	r0, r0
 801172e:	1a80      	subs	r0, r0, r2
 8011730:	3801      	subs	r0, #1
 8011732:	4770      	bx	lr
 8011734:	8843      	ldrh	r3, [r0, #2]
 8011736:	88c0      	ldrh	r0, [r0, #6]
 8011738:	4418      	add	r0, r3
 801173a:	b200      	sxth	r0, r0
 801173c:	1a40      	subs	r0, r0, r1
 801173e:	e7f7      	b.n	8011730 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011740:	2000      	movs	r0, #0
 8011742:	4770      	bx	lr

08011744 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011744:	4b01      	ldr	r3, [pc, #4]	@ (801174c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011746:	2200      	movs	r2, #0
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	4770      	bx	lr
 801174c:	2400aa8c 	.word	0x2400aa8c

08011750 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011750:	4603      	mov	r3, r0
 8011752:	b1c8      	cbz	r0, 8011788 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011754:	0c02      	lsrs	r2, r0, #16
 8011756:	0412      	lsls	r2, r2, #16
 8011758:	b9a2      	cbnz	r2, 8011784 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801175a:	0403      	lsls	r3, r0, #16
 801175c:	2010      	movs	r0, #16
 801175e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8011762:	bf04      	itt	eq
 8011764:	021b      	lsleq	r3, r3, #8
 8011766:	3008      	addeq	r0, #8
 8011768:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801176c:	bf04      	itt	eq
 801176e:	011b      	lsleq	r3, r3, #4
 8011770:	3004      	addeq	r0, #4
 8011772:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8011776:	bf04      	itt	eq
 8011778:	009b      	lsleq	r3, r3, #2
 801177a:	3002      	addeq	r0, #2
 801177c:	2b00      	cmp	r3, #0
 801177e:	db04      	blt.n	801178a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011780:	3001      	adds	r0, #1
 8011782:	4770      	bx	lr
 8011784:	2000      	movs	r0, #0
 8011786:	e7ea      	b.n	801175e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011788:	2020      	movs	r0, #32
 801178a:	4770      	bx	lr

0801178c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011790:	b087      	sub	sp, #28
 8011792:	460d      	mov	r5, r1
 8011794:	4616      	mov	r6, r2
 8011796:	4698      	mov	r8, r3
 8011798:	4601      	mov	r1, r0
 801179a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801179e:	b120      	cbz	r0, 80117aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80117a0:	b11a      	cbz	r2, 80117aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80117a2:	2d1f      	cmp	r5, #31
 80117a4:	d801      	bhi.n	80117aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80117a6:	2b1f      	cmp	r3, #31
 80117a8:	d904      	bls.n	80117b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80117aa:	2000      	movs	r0, #0
 80117ac:	6038      	str	r0, [r7, #0]
 80117ae:	b007      	add	sp, #28
 80117b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b4:	b97d      	cbnz	r5, 80117d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80117b6:	b143      	cbz	r3, 80117ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80117b8:	4602      	mov	r2, r0
 80117ba:	462b      	mov	r3, r5
 80117bc:	4641      	mov	r1, r8
 80117be:	4630      	mov	r0, r6
 80117c0:	e9cd 4700 	strd	r4, r7, [sp]
 80117c4:	f7ff ffe2 	bl	801178c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80117c8:	e7f1      	b.n	80117ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80117ca:	f04f 33ff 	mov.w	r3, #4294967295
 80117ce:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80117d2:	603b      	str	r3, [r7, #0]
 80117d4:	e7eb      	b.n	80117ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80117d6:	fa32 fa05 	lsrs.w	sl, r2, r5
 80117da:	d106      	bne.n	80117ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80117dc:	4346      	muls	r6, r0
 80117de:	fbb6 f0f4 	udiv	r0, r6, r4
 80117e2:	fb04 6610 	mls	r6, r4, r0, r6
 80117e6:	603e      	str	r6, [r7, #0]
 80117e8:	e7e1      	b.n	80117ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80117ea:	2201      	movs	r2, #1
 80117ec:	fa00 fb05 	lsl.w	fp, r0, r5
 80117f0:	40aa      	lsls	r2, r5
 80117f2:	fbbb f9f4 	udiv	r9, fp, r4
 80117f6:	3a01      	subs	r2, #1
 80117f8:	fb0a f309 	mul.w	r3, sl, r9
 80117fc:	fb04 b919 	mls	r9, r4, r9, fp
 8011800:	4016      	ands	r6, r2
 8011802:	9303      	str	r3, [sp, #12]
 8011804:	4630      	mov	r0, r6
 8011806:	f7ff ffa3 	bl	8011750 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801180a:	462b      	mov	r3, r5
 801180c:	460a      	mov	r2, r1
 801180e:	4601      	mov	r1, r0
 8011810:	4630      	mov	r0, r6
 8011812:	e9cd 4700 	strd	r4, r7, [sp]
 8011816:	f7ff ffb9 	bl	801178c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801181a:	4606      	mov	r6, r0
 801181c:	4648      	mov	r0, r9
 801181e:	eb05 0108 	add.w	r1, r5, r8
 8011822:	f7ff ff95 	bl	8011750 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011826:	ab05      	add	r3, sp, #20
 8011828:	464a      	mov	r2, r9
 801182a:	e9cd 4300 	strd	r4, r3, [sp]
 801182e:	4603      	mov	r3, r0
 8011830:	4650      	mov	r0, sl
 8011832:	f7ff ffab 	bl	801178c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011836:	6839      	ldr	r1, [r7, #0]
 8011838:	9a05      	ldr	r2, [sp, #20]
 801183a:	9b03      	ldr	r3, [sp, #12]
 801183c:	4411      	add	r1, r2
 801183e:	fbb1 f2f4 	udiv	r2, r1, r4
 8011842:	18d3      	adds	r3, r2, r3
 8011844:	fb04 1412 	mls	r4, r4, r2, r1
 8011848:	441e      	add	r6, r3
 801184a:	603c      	str	r4, [r7, #0]
 801184c:	4430      	add	r0, r6
 801184e:	e7ae      	b.n	80117ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08011850 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011854:	b085      	sub	sp, #20
 8011856:	f1b0 0900 	subs.w	r9, r0, #0
 801185a:	461d      	mov	r5, r3
 801185c:	4617      	mov	r7, r2
 801185e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011860:	bfbb      	ittet	lt
 8011862:	f1c9 0900 	rsblt	r9, r9, #0
 8011866:	f04f 36ff 	movlt.w	r6, #4294967295
 801186a:	2601      	movge	r6, #1
 801186c:	6823      	ldrlt	r3, [r4, #0]
 801186e:	bfbc      	itt	lt
 8011870:	425b      	neglt	r3, r3
 8011872:	6023      	strlt	r3, [r4, #0]
 8011874:	2a00      	cmp	r2, #0
 8011876:	da04      	bge.n	8011882 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8011878:	6823      	ldr	r3, [r4, #0]
 801187a:	4257      	negs	r7, r2
 801187c:	4276      	negs	r6, r6
 801187e:	425b      	negs	r3, r3
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	2d00      	cmp	r5, #0
 8011884:	4638      	mov	r0, r7
 8011886:	bfba      	itte	lt
 8011888:	426d      	neglt	r5, r5
 801188a:	f04f 38ff 	movlt.w	r8, #4294967295
 801188e:	f04f 0801 	movge.w	r8, #1
 8011892:	f7ff ff5d 	bl	8011750 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011896:	ab03      	add	r3, sp, #12
 8011898:	463a      	mov	r2, r7
 801189a:	e9cd 5300 	strd	r5, r3, [sp]
 801189e:	4603      	mov	r3, r0
 80118a0:	4648      	mov	r0, r9
 80118a2:	f7ff ff73 	bl	801178c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80118a6:	6823      	ldr	r3, [r4, #0]
 80118a8:	9a03      	ldr	r2, [sp, #12]
 80118aa:	4546      	cmp	r6, r8
 80118ac:	441a      	add	r2, r3
 80118ae:	fb92 f3f5 	sdiv	r3, r2, r5
 80118b2:	4418      	add	r0, r3
 80118b4:	fb05 2313 	mls	r3, r5, r3, r2
 80118b8:	bf18      	it	ne
 80118ba:	4240      	negne	r0, r0
 80118bc:	1c72      	adds	r2, r6, #1
 80118be:	6023      	str	r3, [r4, #0]
 80118c0:	d105      	bne.n	80118ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f1c3 0200 	rsb	r2, r3, #0
 80118c8:	db0b      	blt.n	80118e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80118ca:	6022      	str	r2, [r4, #0]
 80118cc:	e006      	b.n	80118dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80118ce:	2e01      	cmp	r6, #1
 80118d0:	d104      	bne.n	80118dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	da02      	bge.n	80118dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80118d6:	442b      	add	r3, r5
 80118d8:	3801      	subs	r0, #1
 80118da:	6023      	str	r3, [r4, #0]
 80118dc:	b005      	add	sp, #20
 80118de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118e2:	3801      	subs	r0, #1
 80118e4:	1b52      	subs	r2, r2, r5
 80118e6:	e7f0      	b.n	80118ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080118e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80118e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80118ec:	4c1c      	ldr	r4, [pc, #112]	@ (8011960 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80118ee:	4605      	mov	r5, r0
 80118f0:	6807      	ldr	r7, [r0, #0]
 80118f2:	69a3      	ldr	r3, [r4, #24]
 80118f4:	b92b      	cbnz	r3, 8011902 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80118f6:	6840      	ldr	r0, [r0, #4]
 80118f8:	e9c5 7000 	strd	r7, r0, [r5]
 80118fc:	b004      	add	sp, #16
 80118fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011902:	f04f 0802 	mov.w	r8, #2
 8011906:	68a2      	ldr	r2, [r4, #8]
 8011908:	ae04      	add	r6, sp, #16
 801190a:	6820      	ldr	r0, [r4, #0]
 801190c:	fb93 f1f8 	sdiv	r1, r3, r8
 8011910:	440a      	add	r2, r1
 8011912:	69e1      	ldr	r1, [r4, #28]
 8011914:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011918:	463a      	mov	r2, r7
 801191a:	9600      	str	r6, [sp, #0]
 801191c:	f7ff ff98 	bl	8011850 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011920:	69a3      	ldr	r3, [r4, #24]
 8011922:	4607      	mov	r7, r0
 8011924:	686a      	ldr	r2, [r5, #4]
 8011926:	6a21      	ldr	r1, [r4, #32]
 8011928:	9600      	str	r6, [sp, #0]
 801192a:	6860      	ldr	r0, [r4, #4]
 801192c:	f7ff ff90 	bl	8011850 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011930:	69a3      	ldr	r3, [r4, #24]
 8011932:	6962      	ldr	r2, [r4, #20]
 8011934:	4407      	add	r7, r0
 8011936:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011938:	9600      	str	r6, [sp, #0]
 801193a:	68e0      	ldr	r0, [r4, #12]
 801193c:	fb93 f8f8 	sdiv	r8, r3, r8
 8011940:	4442      	add	r2, r8
 8011942:	9203      	str	r2, [sp, #12]
 8011944:	682a      	ldr	r2, [r5, #0]
 8011946:	f7ff ff83 	bl	8011850 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801194a:	4680      	mov	r8, r0
 801194c:	9600      	str	r6, [sp, #0]
 801194e:	69a3      	ldr	r3, [r4, #24]
 8011950:	686a      	ldr	r2, [r5, #4]
 8011952:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011954:	6920      	ldr	r0, [r4, #16]
 8011956:	f7ff ff7b 	bl	8011850 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801195a:	4440      	add	r0, r8
 801195c:	e7cc      	b.n	80118f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801195e:	bf00      	nop
 8011960:	2400aa90 	.word	0x2400aa90

08011964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011964:	4b07      	ldr	r3, [pc, #28]	@ (8011984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d109      	bne.n	8011980 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801196c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011970:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011974:	8003      	strh	r3, [r0, #0]
 8011976:	4b04      	ldr	r3, [pc, #16]	@ (8011988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	3b01      	subs	r3, #1
 801197c:	1a9b      	subs	r3, r3, r2
 801197e:	800b      	strh	r3, [r1, #0]
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	2400aa7c 	.word	0x2400aa7c
 8011988:	2400aa78 	.word	0x2400aa78

0801198c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801198c:	4b07      	ldr	r3, [pc, #28]	@ (80119ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801198e:	b510      	push	{r4, lr}
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	2b01      	cmp	r3, #1
 8011994:	d108      	bne.n	80119a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8011996:	4b06      	ldr	r3, [pc, #24]	@ (80119b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011998:	880c      	ldrh	r4, [r1, #0]
 801199a:	881b      	ldrh	r3, [r3, #0]
 801199c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80119a0:	3b01      	subs	r3, #1
 80119a2:	1b1b      	subs	r3, r3, r4
 80119a4:	8003      	strh	r3, [r0, #0]
 80119a6:	800a      	strh	r2, [r1, #0]
 80119a8:	bd10      	pop	{r4, pc}
 80119aa:	bf00      	nop
 80119ac:	2400aa7c 	.word	0x2400aa7c
 80119b0:	2400aa78 	.word	0x2400aa78

080119b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80119b4:	4b0a      	ldr	r3, [pc, #40]	@ (80119e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80119b6:	b510      	push	{r4, lr}
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d10e      	bne.n	80119dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80119be:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80119c2:	8843      	ldrh	r3, [r0, #2]
 80119c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80119c8:	18ca      	adds	r2, r1, r3
 80119ca:	4b06      	ldr	r3, [pc, #24]	@ (80119e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80119cc:	8044      	strh	r4, [r0, #2]
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	1a9b      	subs	r3, r3, r2
 80119d2:	8003      	strh	r3, [r0, #0]
 80119d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80119d8:	8081      	strh	r1, [r0, #4]
 80119da:	80c3      	strh	r3, [r0, #6]
 80119dc:	bd10      	pop	{r4, pc}
 80119de:	bf00      	nop
 80119e0:	2400aa7c 	.word	0x2400aa7c
 80119e4:	2400aa78 	.word	0x2400aa78

080119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80119e8:	4b08      	ldr	r3, [pc, #32]	@ (8011a0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d10c      	bne.n	8011a0a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80119f0:	8803      	ldrh	r3, [r0, #0]
 80119f2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80119f6:	8842      	ldrh	r2, [r0, #2]
 80119f8:	8002      	strh	r2, [r0, #0]
 80119fa:	185a      	adds	r2, r3, r1
 80119fc:	4b04      	ldr	r3, [pc, #16]	@ (8011a10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	1a9b      	subs	r3, r3, r2
 8011a02:	8043      	strh	r3, [r0, #2]
 8011a04:	88c3      	ldrh	r3, [r0, #6]
 8011a06:	80c1      	strh	r1, [r0, #6]
 8011a08:	8083      	strh	r3, [r0, #4]
 8011a0a:	4770      	bx	lr
 8011a0c:	2400aa7c 	.word	0x2400aa7c
 8011a10:	2400aa78 	.word	0x2400aa78

08011a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011a14:	4b07      	ldr	r3, [pc, #28]	@ (8011a34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8011a16:	b510      	push	{r4, lr}
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d108      	bne.n	8011a30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011a1e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011a22:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011a26:	8003      	strh	r3, [r0, #0]
 8011a28:	8893      	ldrh	r3, [r2, #4]
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	1b1b      	subs	r3, r3, r4
 8011a2e:	800b      	strh	r3, [r1, #0]
 8011a30:	bd10      	pop	{r4, pc}
 8011a32:	bf00      	nop
 8011a34:	2400aa7c 	.word	0x2400aa7c

08011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8011a38:	4b0a      	ldr	r3, [pc, #40]	@ (8011a64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8011a3a:	460a      	mov	r2, r1
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d10d      	bne.n	8011a60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8011a44:	8881      	ldrh	r1, [r0, #4]
 8011a46:	8803      	ldrh	r3, [r0, #0]
 8011a48:	440b      	add	r3, r1
 8011a4a:	4601      	mov	r1, r0
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	f821 3b02 	strh.w	r3, [r1], #2
 8011a52:	f7ff ffdf 	bl	8011a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8011a56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011a5a:	88c2      	ldrh	r2, [r0, #6]
 8011a5c:	80c3      	strh	r3, [r0, #6]
 8011a5e:	8082      	strh	r2, [r0, #4]
 8011a60:	bd10      	pop	{r4, pc}
 8011a62:	bf00      	nop
 8011a64:	2400aa7c 	.word	0x2400aa7c

08011a68 <_ZN8touchgfx11Application19changeToStartScreenEv>:
 8011a68:	4770      	bx	lr
	...

08011a6c <_ZN8touchgfx11Application13requestRedrawEv>:
 8011a6c:	4b06      	ldr	r3, [pc, #24]	@ (8011a88 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8011a6e:	2100      	movs	r1, #0
 8011a70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a74:	4b05      	ldr	r3, [pc, #20]	@ (8011a8c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8011a76:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8011a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a7e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8011a82:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8011a86:	4770      	bx	lr
 8011a88:	2400aa78 	.word	0x2400aa78
 8011a8c:	2400aa7a 	.word	0x2400aa7a

08011a90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8011a90:	4b03      	ldr	r3, [pc, #12]	@ (8011aa0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8011a92:	6818      	ldr	r0, [r3, #0]
 8011a94:	b110      	cbz	r0, 8011a9c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8011a96:	6803      	ldr	r3, [r0, #0]
 8011a98:	699b      	ldr	r3, [r3, #24]
 8011a9a:	4718      	bx	r3
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	2400aac0 	.word	0x2400aac0

08011aa4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8011aa4:	4770      	bx	lr
	...

08011aa8 <_ZN8touchgfx11Application4drawEv>:
 8011aa8:	4b09      	ldr	r3, [pc, #36]	@ (8011ad0 <_ZN8touchgfx11Application4drawEv+0x28>)
 8011aaa:	b507      	push	{r0, r1, r2, lr}
 8011aac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	4b08      	ldr	r3, [pc, #32]	@ (8011ad4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8011ab4:	9100      	str	r1, [sp, #0]
 8011ab6:	4669      	mov	r1, sp
 8011ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011abc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011ac0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011ac4:	6803      	ldr	r3, [r0, #0]
 8011ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011ac8:	4798      	blx	r3
 8011aca:	b003      	add	sp, #12
 8011acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ad0:	2400aa78 	.word	0x2400aa78
 8011ad4:	2400aa7a 	.word	0x2400aa7a

08011ad8 <_ZN8touchgfx11Application10invalidateEv>:
 8011ad8:	4b09      	ldr	r3, [pc, #36]	@ (8011b00 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8011ada:	b082      	sub	sp, #8
 8011adc:	2100      	movs	r1, #0
 8011ade:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ae2:	4b08      	ldr	r3, [pc, #32]	@ (8011b04 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8011ae4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011ae8:	aa02      	add	r2, sp, #8
 8011aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011aee:	9100      	str	r1, [sp, #0]
 8011af0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011af4:	6803      	ldr	r3, [r0, #0]
 8011af6:	e912 0006 	ldmdb	r2, {r1, r2}
 8011afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011afc:	b002      	add	sp, #8
 8011afe:	4718      	bx	r3
 8011b00:	2400aa78 	.word	0x2400aa78
 8011b04:	2400aa7a 	.word	0x2400aa7a

08011b08 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8011b08:	4b03      	ldr	r3, [pc, #12]	@ (8011b18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8011b0a:	6818      	ldr	r0, [r3, #0]
 8011b0c:	b110      	cbz	r0, 8011b14 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8011b0e:	6803      	ldr	r3, [r0, #0]
 8011b10:	69db      	ldr	r3, [r3, #28]
 8011b12:	4718      	bx	r3
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	2400aac0 	.word	0x2400aac0

08011b1c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8011b1c:	4b03      	ldr	r3, [pc, #12]	@ (8011b2c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8011b1e:	6818      	ldr	r0, [r3, #0]
 8011b20:	b110      	cbz	r0, 8011b28 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8011b22:	6803      	ldr	r3, [r0, #0]
 8011b24:	6a1b      	ldr	r3, [r3, #32]
 8011b26:	4718      	bx	r3
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop
 8011b2c:	2400aac0 	.word	0x2400aac0

08011b30 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8011b30:	2300      	movs	r3, #0
 8011b32:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8011b36:	4770      	bx	lr

08011b38 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8011b38:	4b03      	ldr	r3, [pc, #12]	@ (8011b48 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8011b3a:	6818      	ldr	r0, [r3, #0]
 8011b3c:	b110      	cbz	r0, 8011b44 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8011b3e:	6803      	ldr	r3, [r0, #0]
 8011b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b42:	4718      	bx	r3
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	2400aac0 	.word	0x2400aac0

08011b4c <_ZN8touchgfx11ApplicationD1Ev>:
 8011b4c:	4770      	bx	lr

08011b4e <_ZN8touchgfx11ApplicationD0Ev>:
 8011b4e:	b510      	push	{r4, lr}
 8011b50:	4604      	mov	r4, r0
 8011b52:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8011b56:	f011 f905 	bl	8022d64 <_ZdlPvj>
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	bd10      	pop	{r4, pc}

08011b5e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8011b5e:	b510      	push	{r4, lr}
 8011b60:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011b64:	888a      	ldrh	r2, [r1, #4]
 8011b66:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011b6a:	4422      	add	r2, r4
 8011b6c:	b212      	sxth	r2, r2
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	da15      	bge.n	8011b9e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011b72:	8882      	ldrh	r2, [r0, #4]
 8011b74:	4413      	add	r3, r2
 8011b76:	b21b      	sxth	r3, r3
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	da10      	bge.n	8011b9e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011b7c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011b80:	88c9      	ldrh	r1, [r1, #6]
 8011b82:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011b86:	4419      	add	r1, r3
 8011b88:	b209      	sxth	r1, r1
 8011b8a:	428a      	cmp	r2, r1
 8011b8c:	da07      	bge.n	8011b9e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011b8e:	88c0      	ldrh	r0, [r0, #6]
 8011b90:	4410      	add	r0, r2
 8011b92:	b200      	sxth	r0, r0
 8011b94:	4283      	cmp	r3, r0
 8011b96:	bfac      	ite	ge
 8011b98:	2000      	movge	r0, #0
 8011b9a:	2001      	movlt	r0, #1
 8011b9c:	bd10      	pop	{r4, pc}
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	e7fc      	b.n	8011b9c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08011ba2 <_ZN8touchgfx4Rect10restrictToEss>:
 8011ba2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	b510      	push	{r4, lr}
 8011baa:	da04      	bge.n	8011bb6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8011bac:	8884      	ldrh	r4, [r0, #4]
 8011bae:	4423      	add	r3, r4
 8011bb0:	8083      	strh	r3, [r0, #4]
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	8003      	strh	r3, [r0, #0]
 8011bb6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011bba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011bbe:	1b09      	subs	r1, r1, r4
 8011bc0:	428b      	cmp	r3, r1
 8011bc2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011bc6:	bfc8      	it	gt
 8011bc8:	8081      	strhgt	r1, [r0, #4]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	da04      	bge.n	8011bd8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8011bce:	88c1      	ldrh	r1, [r0, #6]
 8011bd0:	440b      	add	r3, r1
 8011bd2:	80c3      	strh	r3, [r0, #6]
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	8043      	strh	r3, [r0, #2]
 8011bd8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011bdc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011be0:	1a52      	subs	r2, r2, r1
 8011be2:	4293      	cmp	r3, r2
 8011be4:	bfc8      	it	gt
 8011be6:	80c2      	strhgt	r2, [r0, #6]
 8011be8:	bd10      	pop	{r4, pc}
	...

08011bec <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011bec:	4b10      	ldr	r3, [pc, #64]	@ (8011c30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8011bee:	b510      	push	{r4, lr}
 8011bf0:	460c      	mov	r4, r1
 8011bf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8011c34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011bfe:	f7ff ffd0 	bl	8011ba2 <_ZN8touchgfx4Rect10restrictToEss>
 8011c02:	4b0d      	ldr	r3, [pc, #52]	@ (8011c38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	b190      	cbz	r0, 8011c2e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011c08:	6803      	ldr	r3, [r0, #0]
 8011c0a:	4621      	mov	r1, r4
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	4798      	blx	r3
 8011c10:	4b0a      	ldr	r3, [pc, #40]	@ (8011c3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8011c12:	6818      	ldr	r0, [r3, #0]
 8011c14:	b118      	cbz	r0, 8011c1e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8011c16:	6803      	ldr	r3, [r0, #0]
 8011c18:	4621      	mov	r1, r4
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	4798      	blx	r3
 8011c1e:	4b08      	ldr	r3, [pc, #32]	@ (8011c40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8011c20:	4621      	mov	r1, r4
 8011c22:	6818      	ldr	r0, [r3, #0]
 8011c24:	6803      	ldr	r3, [r0, #0]
 8011c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c2a:	69db      	ldr	r3, [r3, #28]
 8011c2c:	4718      	bx	r3
 8011c2e:	bd10      	pop	{r4, pc}
 8011c30:	2400aa7a 	.word	0x2400aa7a
 8011c34:	2400aa78 	.word	0x2400aa78
 8011c38:	2400aac0 	.word	0x2400aac0
 8011c3c:	2400aabc 	.word	0x2400aabc
 8011c40:	2400aa84 	.word	0x2400aa84

08011c44 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c46:	4606      	mov	r6, r0
 8011c48:	4608      	mov	r0, r1
 8011c4a:	460f      	mov	r7, r1
 8011c4c:	f7fc fd21 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011c50:	b9e8      	cbnz	r0, 8011c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011c52:	f9b7 5000 	ldrsh.w	r5, [r7]
 8011c56:	f9b6 4000 	ldrsh.w	r4, [r6]
 8011c5a:	42a5      	cmp	r5, r4
 8011c5c:	db17      	blt.n	8011c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011c5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011c62:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	db11      	blt.n	8011c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011c6a:	88b9      	ldrh	r1, [r7, #4]
 8011c6c:	440d      	add	r5, r1
 8011c6e:	88b1      	ldrh	r1, [r6, #4]
 8011c70:	440c      	add	r4, r1
 8011c72:	b22d      	sxth	r5, r5
 8011c74:	b224      	sxth	r4, r4
 8011c76:	42a5      	cmp	r5, r4
 8011c78:	dc09      	bgt.n	8011c8e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011c7a:	88f8      	ldrh	r0, [r7, #6]
 8011c7c:	4410      	add	r0, r2
 8011c7e:	88f2      	ldrh	r2, [r6, #6]
 8011c80:	4413      	add	r3, r2
 8011c82:	b200      	sxth	r0, r0
 8011c84:	b21b      	sxth	r3, r3
 8011c86:	4298      	cmp	r0, r3
 8011c88:	bfcc      	ite	gt
 8011c8a:	2000      	movgt	r0, #0
 8011c8c:	2001      	movle	r0, #1
 8011c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8011c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c92:	4604      	mov	r4, r0
 8011c94:	4608      	mov	r0, r1
 8011c96:	460d      	mov	r5, r1
 8011c98:	f7fc fcfb 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011c9c:	b978      	cbnz	r0, 8011cbe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7fc fcf7 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011ca4:	f9b5 6000 	ldrsh.w	r6, [r5]
 8011ca8:	b150      	cbz	r0, 8011cc0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8011caa:	8026      	strh	r6, [r4, #0]
 8011cac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011cb0:	8063      	strh	r3, [r4, #2]
 8011cb2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011cb6:	80a3      	strh	r3, [r4, #4]
 8011cb8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011cbc:	80e3      	strh	r3, [r4, #6]
 8011cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011cc4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011cc8:	42b1      	cmp	r1, r6
 8011cca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011cce:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8011cd2:	460f      	mov	r7, r1
 8011cd4:	88ed      	ldrh	r5, [r5, #6]
 8011cd6:	bfa8      	it	ge
 8011cd8:	4637      	movge	r7, r6
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	4466      	add	r6, ip
 8011ce0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8011ce4:	bfa8      	it	ge
 8011ce6:	4610      	movge	r0, r2
 8011ce8:	442a      	add	r2, r5
 8011cea:	88e5      	ldrh	r5, [r4, #6]
 8011cec:	4461      	add	r1, ip
 8011cee:	b236      	sxth	r6, r6
 8011cf0:	8027      	strh	r7, [r4, #0]
 8011cf2:	442b      	add	r3, r5
 8011cf4:	b209      	sxth	r1, r1
 8011cf6:	b212      	sxth	r2, r2
 8011cf8:	8060      	strh	r0, [r4, #2]
 8011cfa:	b21b      	sxth	r3, r3
 8011cfc:	428e      	cmp	r6, r1
 8011cfe:	bfac      	ite	ge
 8011d00:	ebc7 0106 	rsbge	r1, r7, r6
 8011d04:	ebc7 0101 	rsblt	r1, r7, r1
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	bfac      	ite	ge
 8011d0c:	ebc0 0202 	rsbge	r2, r0, r2
 8011d10:	ebc0 0203 	rsblt	r2, r0, r3
 8011d14:	80a1      	strh	r1, [r4, #4]
 8011d16:	80e2      	strh	r2, [r4, #6]
 8011d18:	e7d1      	b.n	8011cbe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08011d1c <_ZN8touchgfx11Application11getInstanceEv>:
 8011d1c:	4b01      	ldr	r3, [pc, #4]	@ (8011d24 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8011d1e:	6818      	ldr	r0, [r3, #0]
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop
 8011d24:	2400aad0 	.word	0x2400aad0

08011d28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8011d28:	2300      	movs	r3, #0
 8011d2a:	b510      	push	{r4, lr}
 8011d2c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8011d30:	4604      	mov	r4, r0
 8011d32:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8011d36:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8011d3a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8011d3e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d90e      	bls.n	8011d64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8011d46:	18e2      	adds	r2, r4, r3
 8011d48:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8011d4c:	b122      	cbz	r2, 8011d58 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8011d4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8011d52:	6803      	ldr	r3, [r0, #0]
 8011d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d56:	4798      	blx	r3
 8011d58:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8011d62:	e7ea      	b.n	8011d3a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8011d64:	bd10      	pop	{r4, pc}

08011d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8011d66:	2300      	movs	r3, #0
 8011d68:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8011d6c:	30a4      	adds	r0, #164	@ 0xa4
 8011d6e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8011d72:	f802 3b01 	strb.w	r3, [r2], #1
 8011d76:	4282      	cmp	r2, r0
 8011d78:	d1fb      	bne.n	8011d72 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8011d7a:	4770      	bx	lr

08011d7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8011d7c:	b570      	push	{r4, r5, r6, lr}
 8011d7e:	4c0b      	ldr	r4, [pc, #44]	@ (8011dac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8011d80:	4605      	mov	r5, r0
 8011d82:	460e      	mov	r6, r1
 8011d84:	6820      	ldr	r0, [r4, #0]
 8011d86:	b110      	cbz	r0, 8011d8e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8011d88:	6803      	ldr	r3, [r0, #0]
 8011d8a:	695b      	ldr	r3, [r3, #20]
 8011d8c:	4798      	blx	r3
 8011d8e:	1d28      	adds	r0, r5, #4
 8011d90:	f7ff ffe9 	bl	8011d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8011d94:	6026      	str	r6, [r4, #0]
 8011d96:	6833      	ldr	r3, [r6, #0]
 8011d98:	4630      	mov	r0, r6
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	4798      	blx	r3
 8011d9e:	682b      	ldr	r3, [r5, #0]
 8011da0:	4628      	mov	r0, r5
 8011da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011da8:	4718      	bx	r3
 8011daa:	bf00      	nop
 8011dac:	2400aac0 	.word	0x2400aac0

08011db0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8011db0:	2300      	movs	r3, #0
 8011db2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8011db6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8011dba:	461a      	mov	r2, r3
 8011dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dbe:	461c      	mov	r4, r3
 8011dc0:	461d      	mov	r5, r3
 8011dc2:	459c      	cmp	ip, r3
 8011dc4:	dd1a      	ble.n	8011dfc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8011dc6:	18c6      	adds	r6, r0, r3
 8011dc8:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8011dcc:	b16e      	cbz	r6, 8011dea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d008      	beq.n	8011de4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8011dd2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8011dd6:	fa1f fe82 	uxth.w	lr, r2
 8011dda:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8011dde:	1887      	adds	r7, r0, r2
 8011de0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8011de4:	3201      	adds	r2, #1
 8011de6:	3301      	adds	r3, #1
 8011de8:	e7eb      	b.n	8011dc2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8011dea:	4299      	cmp	r1, r3
 8011dec:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8011df0:	bfa8      	it	ge
 8011df2:	3501      	addge	r5, #1
 8011df4:	429e      	cmp	r6, r3
 8011df6:	bfc8      	it	gt
 8011df8:	3401      	addgt	r4, #1
 8011dfa:	e7f4      	b.n	8011de6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8011dfc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8011e00:	1b49      	subs	r1, r1, r5
 8011e02:	1b1b      	subs	r3, r3, r4
 8011e04:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8011e08:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8011e0c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8011e10:	4293      	cmp	r3, r2
 8011e12:	dd03      	ble.n	8011e1c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8011e14:	3b01      	subs	r3, #1
 8011e16:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8011e1a:	e7f7      	b.n	8011e0c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8011e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011e20 <_ZN8touchgfx11Application15handleTickEventEv>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	4d16      	ldr	r5, [pc, #88]	@ (8011e7c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8011e24:	4604      	mov	r4, r0
 8011e26:	6828      	ldr	r0, [r5, #0]
 8011e28:	b140      	cbz	r0, 8011e3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8011e2a:	7a03      	ldrb	r3, [r0, #8]
 8011e2c:	b933      	cbnz	r3, 8011e3c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8011e2e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8011e32:	6803      	ldr	r3, [r0, #0]
 8011e34:	689b      	ldr	r3, [r3, #8]
 8011e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e3a:	4718      	bx	r3
 8011e3c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8011e40:	4e0f      	ldr	r6, [pc, #60]	@ (8011e80 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8011e42:	b973      	cbnz	r3, 8011e62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011e44:	b168      	cbz	r0, 8011e62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011e46:	7a03      	ldrb	r3, [r0, #8]
 8011e48:	b15b      	cbz	r3, 8011e62 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011e4a:	6830      	ldr	r0, [r6, #0]
 8011e4c:	b110      	cbz	r0, 8011e54 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8011e4e:	6803      	ldr	r3, [r0, #0]
 8011e50:	691b      	ldr	r3, [r3, #16]
 8011e52:	4798      	blx	r3
 8011e54:	6828      	ldr	r0, [r5, #0]
 8011e56:	6803      	ldr	r3, [r0, #0]
 8011e58:	68db      	ldr	r3, [r3, #12]
 8011e5a:	4798      	blx	r3
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8011e62:	3404      	adds	r4, #4
 8011e64:	4620      	mov	r0, r4
 8011e66:	f7ff ff5f 	bl	8011d28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f7ff ffa0 	bl	8011db0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8011e70:	6830      	ldr	r0, [r6, #0]
 8011e72:	b110      	cbz	r0, 8011e7a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8011e74:	6803      	ldr	r3, [r0, #0]
 8011e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e78:	e7dd      	b.n	8011e36 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8011e7a:	bd70      	pop	{r4, r5, r6, pc}
 8011e7c:	2400aac4 	.word	0x2400aac4
 8011e80:	2400aac0 	.word	0x2400aac0

08011e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8011e84:	4603      	mov	r3, r0
 8011e86:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	801a      	strh	r2, [r3, #0]
 8011e8e:	3308      	adds	r3, #8
 8011e90:	f823 2c06 	strh.w	r2, [r3, #-6]
 8011e94:	f823 2c04 	strh.w	r2, [r3, #-4]
 8011e98:	f823 2c02 	strh.w	r2, [r3, #-2]
 8011e9c:	428b      	cmp	r3, r1
 8011e9e:	d1f5      	bne.n	8011e8c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8011ea0:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8011ea4:	4770      	bx	lr
	...

08011ea8 <_ZN8touchgfx11ApplicationC1Ev>:
 8011ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8011f20 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8011eac:	4606      	mov	r6, r0
 8011eae:	4604      	mov	r4, r0
 8011eb0:	2500      	movs	r5, #0
 8011eb2:	f846 3b04 	str.w	r3, [r6], #4
 8011eb6:	22a8      	movs	r2, #168	@ 0xa8
 8011eb8:	2100      	movs	r1, #0
 8011eba:	4630      	mov	r0, r6
 8011ebc:	f012 f8f0 	bl	80240a0 <memset>
 8011ec0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8011ec4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8011ec8:	4f16      	ldr	r7, [pc, #88]	@ (8011f24 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8011eca:	f7ff ffdb 	bl	8011e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011ece:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8011ed2:	f7ff ffd7 	bl	8011e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011ed6:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8011eda:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8011ede:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8011ee2:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8011ee6:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8011eea:	490f      	ldr	r1, [pc, #60]	@ (8011f28 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8011eec:	480f      	ldr	r0, [pc, #60]	@ (8011f2c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8011eee:	f010 fdf1 	bl	8022ad4 <CRC_Lock>
 8011ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8011f30 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8011ef4:	b158      	cbz	r0, 8011f0e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8011ef6:	801d      	strh	r5, [r3, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	4a0e      	ldr	r2, [pc, #56]	@ (8011f34 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8011efc:	4630      	mov	r0, r6
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	4a0d      	ldr	r2, [pc, #52]	@ (8011f38 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8011f02:	603b      	str	r3, [r7, #0]
 8011f04:	6013      	str	r3, [r2, #0]
 8011f06:	f7ff ff2e 	bl	8011d66 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011f12:	2002      	movs	r0, #2
 8011f14:	801a      	strh	r2, [r3, #0]
 8011f16:	6038      	str	r0, [r7, #0]
 8011f18:	f001 fa5a 	bl	80133d0 <_ZN8touchgfx6Screen4drawEv>
 8011f1c:	e7ec      	b.n	8011ef8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8011f1e:	bf00      	nop
 8011f20:	08029934 	.word	0x08029934
 8011f24:	2400aac0 	.word	0x2400aac0
 8011f28:	b5e8b5cd 	.word	0xb5e8b5cd
 8011f2c:	f407a5c2 	.word	0xf407a5c2
 8011f30:	24000030 	.word	0x24000030
 8011f34:	2400aad0 	.word	0x2400aad0
 8011f38:	2400aac4 	.word	0x2400aac4

08011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8011f3c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8011f40:	3b01      	subs	r3, #1
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	428b      	cmp	r3, r1
 8011f46:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8011f4a:	b510      	push	{r4, lr}
 8011f4c:	d908      	bls.n	8011f60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8011f4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011f52:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8011f5c:	685a      	ldr	r2, [r3, #4]
 8011f5e:	6062      	str	r2, [r4, #4]
 8011f60:	bd10      	pop	{r4, pc}
	...

08011f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f68:	b08f      	sub	sp, #60	@ 0x3c
 8011f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80121a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8011f6c:	4683      	mov	fp, r0
 8011f6e:	ac0a      	add	r4, sp, #40	@ 0x28
 8011f70:	e884 0006 	stmia.w	r4, {r1, r2}
 8011f74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f78:	4620      	mov	r0, r4
 8011f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80121ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8011f7c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011f80:	f7ff fe0f 	bl	8011ba2 <_ZN8touchgfx4Rect10restrictToEss>
 8011f84:	4620      	mov	r0, r4
 8011f86:	f7fc fb84 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d16a      	bne.n	8012064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011f8e:	9403      	str	r4, [sp, #12]
 8011f90:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8011f94:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8011f98:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8011f9c:	9301      	str	r3, [sp, #4]
 8011f9e:	35a4      	adds	r5, #164	@ 0xa4
 8011fa0:	b15c      	cbz	r4, 8011fba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	9803      	ldr	r0, [sp, #12]
 8011fa6:	f7ff fe4d 	bl	8011c44 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011faa:	3c01      	subs	r4, #1
 8011fac:	b118      	cbz	r0, 8011fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8011fae:	b2a1      	uxth	r1, r4
 8011fb0:	9801      	ldr	r0, [sp, #4]
 8011fb2:	f7ff ffc3 	bl	8011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011fb6:	3d08      	subs	r5, #8
 8011fb8:	e7f2      	b.n	8011fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8011fba:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8011fbe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011fc2:	f8cd a010 	str.w	sl, [sp, #16]
 8011fc6:	9302      	str	r3, [sp, #8]
 8011fc8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011fcc:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8011fd0:	9306      	str	r3, [sp, #24]
 8011fd2:	445c      	add	r4, fp
 8011fd4:	2500      	movs	r5, #0
 8011fd6:	4626      	mov	r6, r4
 8011fd8:	f8cd a014 	str.w	sl, [sp, #20]
 8011fdc:	462f      	mov	r7, r5
 8011fde:	9b05      	ldr	r3, [sp, #20]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d073      	beq.n	80120cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011fe4:	9903      	ldr	r1, [sp, #12]
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7ff fdb9 	bl	8011b5e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011fec:	b350      	cbz	r0, 8012044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011fee:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8011ff2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8011ff6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8011ffa:	45e6      	cmp	lr, ip
 8011ffc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012000:	db33      	blt.n	801206a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012002:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012006:	88b3      	ldrh	r3, [r6, #4]
 8012008:	4472      	add	r2, lr
 801200a:	4463      	add	r3, ip
 801200c:	b212      	sxth	r2, r2
 801200e:	b21b      	sxth	r3, r3
 8012010:	429a      	cmp	r2, r3
 8012012:	dc2a      	bgt.n	801206a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012014:	fa1f f289 	uxth.w	r2, r9
 8012018:	88f3      	ldrh	r3, [r6, #6]
 801201a:	45c8      	cmp	r8, r9
 801201c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012020:	4413      	add	r3, r2
 8012022:	fa1f fc88 	uxth.w	ip, r8
 8012026:	b29b      	uxth	r3, r3
 8012028:	fa0f fe83 	sxth.w	lr, r3
 801202c:	db0f      	blt.n	801204e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801202e:	eba3 030c 	sub.w	r3, r3, ip
 8012032:	1ac9      	subs	r1, r1, r3
 8012034:	b209      	sxth	r1, r1
 8012036:	2900      	cmp	r1, #0
 8012038:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801203c:	dd12      	ble.n	8012064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801203e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8012042:	4605      	mov	r5, r0
 8012044:	9b05      	ldr	r3, [sp, #20]
 8012046:	3e08      	subs	r6, #8
 8012048:	3b01      	subs	r3, #1
 801204a:	9305      	str	r3, [sp, #20]
 801204c:	e7c7      	b.n	8011fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801204e:	4461      	add	r1, ip
 8012050:	b209      	sxth	r1, r1
 8012052:	4571      	cmp	r1, lr
 8012054:	dc38      	bgt.n	80120c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012056:	eba2 020c 	sub.w	r2, r2, ip
 801205a:	b212      	sxth	r2, r2
 801205c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8012060:	2a00      	cmp	r2, #0
 8012062:	dcee      	bgt.n	8012042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012064:	b00f      	add	sp, #60	@ 0x3c
 8012066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206a:	45c8      	cmp	r8, r9
 801206c:	db2c      	blt.n	80120c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801206e:	88f3      	ldrh	r3, [r6, #6]
 8012070:	4499      	add	r9, r3
 8012072:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012076:	4498      	add	r8, r3
 8012078:	fa0f f989 	sxth.w	r9, r9
 801207c:	fa0f f888 	sxth.w	r8, r8
 8012080:	45c1      	cmp	r9, r8
 8012082:	db21      	blt.n	80120c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012084:	fa1f f28c 	uxth.w	r2, ip
 8012088:	88b3      	ldrh	r3, [r6, #4]
 801208a:	45e6      	cmp	lr, ip
 801208c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8012090:	4413      	add	r3, r2
 8012092:	fa1f f88e 	uxth.w	r8, lr
 8012096:	b29b      	uxth	r3, r3
 8012098:	fa0f f983 	sxth.w	r9, r3
 801209c:	db0a      	blt.n	80120b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801209e:	eba3 0308 	sub.w	r3, r3, r8
 80120a2:	1ac9      	subs	r1, r1, r3
 80120a4:	b209      	sxth	r1, r1
 80120a6:	2900      	cmp	r1, #0
 80120a8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80120ac:	ddda      	ble.n	8012064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80120ae:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80120b2:	e7c6      	b.n	8012042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80120b4:	4441      	add	r1, r8
 80120b6:	b209      	sxth	r1, r1
 80120b8:	4549      	cmp	r1, r9
 80120ba:	dc05      	bgt.n	80120c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80120bc:	eba2 0208 	sub.w	r2, r2, r8
 80120c0:	b212      	sxth	r2, r2
 80120c2:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80120c6:	e7cb      	b.n	8012060 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80120c8:	4607      	mov	r7, r0
 80120ca:	e7bb      	b.n	8012044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80120cc:	2d00      	cmp	r5, #0
 80120ce:	d181      	bne.n	8011fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80120d0:	2f00      	cmp	r7, #0
 80120d2:	f000 81dd 	beq.w	8012490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80120d6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80120da:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80120de:	b2b3      	uxth	r3, r6
 80120e0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80120e4:	9305      	str	r3, [sp, #20]
 80120e6:	9a05      	ldr	r2, [sp, #20]
 80120e8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80120ec:	4413      	add	r3, r2
 80120ee:	b2ba      	uxth	r2, r7
 80120f0:	4492      	add	sl, r2
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	fa1f fa8a 	uxth.w	sl, sl
 80120f8:	fa0f f883 	sxth.w	r8, r3
 80120fc:	fa0f f98a 	sxth.w	r9, sl
 8012100:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012104:	9b04      	ldr	r3, [sp, #16]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d052      	beq.n	80121b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801210a:	9903      	ldr	r1, [sp, #12]
 801210c:	4620      	mov	r0, r4
 801210e:	f7ff fd26 	bl	8011b5e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012112:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012116:	b1c0      	cbz	r0, 801214a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012118:	f9b4 e000 	ldrsh.w	lr, [r4]
 801211c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012120:	4576      	cmp	r6, lr
 8012122:	dc22      	bgt.n	801216a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012124:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012128:	44f4      	add	ip, lr
 801212a:	fa0f fc8c 	sxth.w	ip, ip
 801212e:	45e0      	cmp	r8, ip
 8012130:	db1b      	blt.n	801216a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012132:	428f      	cmp	r7, r1
 8012134:	fa1f fc81 	uxth.w	ip, r1
 8012138:	88e1      	ldrh	r1, [r4, #6]
 801213a:	dc0d      	bgt.n	8012158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801213c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012140:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012144:	eba1 010c 	sub.w	r1, r1, ip
 8012148:	80e1      	strh	r1, [r4, #6]
 801214a:	4628      	mov	r0, r5
 801214c:	9904      	ldr	r1, [sp, #16]
 801214e:	3c08      	subs	r4, #8
 8012150:	4605      	mov	r5, r0
 8012152:	3901      	subs	r1, #1
 8012154:	9104      	str	r1, [sp, #16]
 8012156:	e7d3      	b.n	8012100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8012158:	4461      	add	r1, ip
 801215a:	b209      	sxth	r1, r1
 801215c:	4549      	cmp	r1, r9
 801215e:	dcf5      	bgt.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012160:	eba2 0c0c 	sub.w	ip, r2, ip
 8012164:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012168:	e7ef      	b.n	801214a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801216a:	428f      	cmp	r7, r1
 801216c:	dcee      	bgt.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801216e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012172:	4461      	add	r1, ip
 8012174:	b209      	sxth	r1, r1
 8012176:	4589      	cmp	r9, r1
 8012178:	dbe8      	blt.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801217a:	4576      	cmp	r6, lr
 801217c:	fa1f fc8e 	uxth.w	ip, lr
 8012180:	88a1      	ldrh	r1, [r4, #4]
 8012182:	dc07      	bgt.n	8012194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012184:	eba3 0c0c 	sub.w	ip, r3, ip
 8012188:	f8a4 8000 	strh.w	r8, [r4]
 801218c:	eba1 010c 	sub.w	r1, r1, ip
 8012190:	80a1      	strh	r1, [r4, #4]
 8012192:	e7da      	b.n	801214a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012194:	4461      	add	r1, ip
 8012196:	b209      	sxth	r1, r1
 8012198:	4588      	cmp	r8, r1
 801219a:	dbd7      	blt.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801219c:	9905      	ldr	r1, [sp, #20]
 801219e:	eba1 0c0c 	sub.w	ip, r1, ip
 80121a2:	f8a4 c004 	strh.w	ip, [r4, #4]
 80121a6:	e7d0      	b.n	801214a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80121a8:	2400aa7a 	.word	0x2400aa7a
 80121ac:	2400aa78 	.word	0x2400aa78
 80121b0:	2d00      	cmp	r5, #0
 80121b2:	f000 816d 	beq.w	8012490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80121b6:	9b06      	ldr	r3, [sp, #24]
 80121b8:	445b      	add	r3, fp
 80121ba:	461c      	mov	r4, r3
 80121bc:	9b02      	ldr	r3, [sp, #8]
 80121be:	3301      	adds	r3, #1
 80121c0:	f000 8166 	beq.w	8012490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80121c4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80121c8:	9803      	ldr	r0, [sp, #12]
 80121ca:	4629      	mov	r1, r5
 80121cc:	f7ff fd3a 	bl	8011c44 <_ZNK8touchgfx4Rect8includesERKS0_>
 80121d0:	b120      	cbz	r0, 80121dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80121d2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80121d6:	9801      	ldr	r0, [sp, #4]
 80121d8:	f7ff feb0 	bl	8011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80121dc:	9903      	ldr	r1, [sp, #12]
 80121de:	4628      	mov	r0, r5
 80121e0:	f7ff fcbd 	bl	8011b5e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80121e4:	2800      	cmp	r0, #0
 80121e6:	f000 809c 	beq.w	8012322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80121ea:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80121ee:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80121f2:	fa1f f189 	uxth.w	r1, r9
 80121f6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80121fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80121fc:	eb01 0c03 	add.w	ip, r1, r3
 8012200:	b283      	uxth	r3, r0
 8012202:	4548      	cmp	r0, r9
 8012204:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8012208:	fa1f fa8c 	uxth.w	sl, ip
 801220c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8012210:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8012214:	eb03 050c 	add.w	r5, r3, ip
 8012218:	b2ad      	uxth	r5, r5
 801221a:	9505      	str	r5, [sp, #20]
 801221c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012220:	9504      	str	r5, [sp, #16]
 8012222:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012226:	f340 8099 	ble.w	801235c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801222a:	1a5b      	subs	r3, r3, r1
 801222c:	4596      	cmp	lr, r2
 801222e:	fa0f f08a 	sxth.w	r0, sl
 8012232:	b29b      	uxth	r3, r3
 8012234:	b21e      	sxth	r6, r3
 8012236:	dd2e      	ble.n	8012296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012238:	9f02      	ldr	r7, [sp, #8]
 801223a:	fa1f fe8e 	uxth.w	lr, lr
 801223e:	b292      	uxth	r2, r2
 8012240:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012244:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012248:	9f04      	ldr	r7, [sp, #16]
 801224a:	ebae 0102 	sub.w	r1, lr, r2
 801224e:	44a6      	add	lr, r4
 8012250:	1a3f      	subs	r7, r7, r0
 8012252:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012256:	b289      	uxth	r1, r1
 8012258:	4402      	add	r2, r0
 801225a:	fa0f fe8e 	sxth.w	lr, lr
 801225e:	b20d      	sxth	r5, r1
 8012260:	b212      	sxth	r2, r2
 8012262:	436f      	muls	r7, r5
 8012264:	ebae 0202 	sub.w	r2, lr, r2
 8012268:	4372      	muls	r2, r6
 801226a:	4297      	cmp	r7, r2
 801226c:	db09      	blt.n	8012282 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801226e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8012272:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8012276:	449c      	add	ip, r3
 8012278:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801227c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012280:	e686      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012282:	4421      	add	r1, r4
 8012284:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8012288:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801228c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012290:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012294:	e67c      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012296:	9f04      	ldr	r7, [sp, #16]
 8012298:	42b8      	cmp	r0, r7
 801229a:	da27      	bge.n	80122ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801229c:	9902      	ldr	r1, [sp, #8]
 801229e:	1a3f      	subs	r7, r7, r0
 80122a0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 80122a4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80122a8:	eb05 010e 	add.w	r1, r5, lr
 80122ac:	fa1f f881 	uxth.w	r8, r1
 80122b0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80122b4:	4411      	add	r1, r2
 80122b6:	fa0f f988 	sxth.w	r9, r8
 80122ba:	eba2 020e 	sub.w	r2, r2, lr
 80122be:	eba1 0108 	sub.w	r1, r1, r8
 80122c2:	4372      	muls	r2, r6
 80122c4:	b289      	uxth	r1, r1
 80122c6:	fa0f f881 	sxth.w	r8, r1
 80122ca:	fb08 f707 	mul.w	r7, r8, r7
 80122ce:	42ba      	cmp	r2, r7
 80122d0:	dc06      	bgt.n	80122e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80122d2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80122d6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80122da:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80122de:	e7ca      	b.n	8012276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80122e0:	4429      	add	r1, r5
 80122e2:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80122e6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80122ea:	e651      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80122ec:	9805      	ldr	r0, [sp, #20]
 80122ee:	2d06      	cmp	r5, #6
 80122f0:	ebaa 0000 	sub.w	r0, sl, r0
 80122f4:	b280      	uxth	r0, r0
 80122f6:	fa0f fe80 	sxth.w	lr, r0
 80122fa:	d817      	bhi.n	801232c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80122fc:	9b04      	ldr	r3, [sp, #16]
 80122fe:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8012302:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012306:	1c6b      	adds	r3, r5, #1
 8012308:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801230c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012310:	9b01      	ldr	r3, [sp, #4]
 8012312:	9801      	ldr	r0, [sp, #4]
 8012314:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012318:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801231c:	805a      	strh	r2, [r3, #2]
 801231e:	809e      	strh	r6, [r3, #4]
 8012320:	80d9      	strh	r1, [r3, #6]
 8012322:	9b02      	ldr	r3, [sp, #8]
 8012324:	3c08      	subs	r4, #8
 8012326:	3b01      	subs	r3, #1
 8012328:	9302      	str	r3, [sp, #8]
 801232a:	e747      	b.n	80121bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801232c:	9a02      	ldr	r2, [sp, #8]
 801232e:	45b6      	cmp	lr, r6
 8012330:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012334:	db0d      	blt.n	8012352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012336:	449c      	add	ip, r3
 8012338:	445a      	add	r2, fp
 801233a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801233e:	fa1f fc8c 	uxth.w	ip, ip
 8012342:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012346:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801234a:	448c      	add	ip, r1
 801234c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8012350:	e61e      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012352:	445a      	add	r2, fp
 8012354:	4484      	add	ip, r0
 8012356:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801235a:	e78f      	b.n	801227c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801235c:	fa1f f18e 	uxth.w	r1, lr
 8012360:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8012364:	b293      	uxth	r3, r2
 8012366:	4596      	cmp	lr, r2
 8012368:	eb01 0806 	add.w	r8, r1, r6
 801236c:	9306      	str	r3, [sp, #24]
 801236e:	fa1f f888 	uxth.w	r8, r8
 8012372:	9f06      	ldr	r7, [sp, #24]
 8012374:	fa0f f388 	sxth.w	r3, r8
 8012378:	9307      	str	r3, [sp, #28]
 801237a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801237e:	443b      	add	r3, r7
 8012380:	b29b      	uxth	r3, r3
 8012382:	9308      	str	r3, [sp, #32]
 8012384:	da24      	bge.n	80123d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8012386:	9905      	ldr	r1, [sp, #20]
 8012388:	eba3 0308 	sub.w	r3, r3, r8
 801238c:	eba2 020e 	sub.w	r2, r2, lr
 8012390:	eba9 0000 	sub.w	r0, r9, r0
 8012394:	ebaa 0401 	sub.w	r4, sl, r1
 8012398:	b29b      	uxth	r3, r3
 801239a:	b2a4      	uxth	r4, r4
 801239c:	b219      	sxth	r1, r3
 801239e:	b225      	sxth	r5, r4
 80123a0:	4348      	muls	r0, r1
 80123a2:	436a      	muls	r2, r5
 80123a4:	4282      	cmp	r2, r0
 80123a6:	9a02      	ldr	r2, [sp, #8]
 80123a8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80123ac:	445a      	add	r2, fp
 80123ae:	dc06      	bgt.n	80123be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80123b0:	9b07      	ldr	r3, [sp, #28]
 80123b2:	44a4      	add	ip, r4
 80123b4:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80123b8:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80123bc:	e75e      	b.n	801227c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80123be:	9904      	ldr	r1, [sp, #16]
 80123c0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80123c4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80123c8:	4433      	add	r3, r6
 80123ca:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80123ce:	e5df      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80123d0:	9f06      	ldr	r7, [sp, #24]
 80123d2:	9b04      	ldr	r3, [sp, #16]
 80123d4:	1bc9      	subs	r1, r1, r7
 80123d6:	fa0f f78a 	sxth.w	r7, sl
 80123da:	b289      	uxth	r1, r1
 80123dc:	429f      	cmp	r7, r3
 80123de:	fa0f fe81 	sxth.w	lr, r1
 80123e2:	dd23      	ble.n	801242c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80123e4:	9a05      	ldr	r2, [sp, #20]
 80123e6:	eba9 0000 	sub.w	r0, r9, r0
 80123ea:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80123ee:	ebaa 0202 	sub.w	r2, sl, r2
 80123f2:	9d07      	ldr	r5, [sp, #28]
 80123f4:	fb0e f000 	mul.w	r0, lr, r0
 80123f8:	b292      	uxth	r2, r2
 80123fa:	eba5 0a03 	sub.w	sl, r5, r3
 80123fe:	9b02      	ldr	r3, [sp, #8]
 8012400:	b214      	sxth	r4, r2
 8012402:	00db      	lsls	r3, r3, #3
 8012404:	fb04 fa0a 	mul.w	sl, r4, sl
 8012408:	445b      	add	r3, fp
 801240a:	4550      	cmp	r0, sl
 801240c:	db03      	blt.n	8012416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801240e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8012412:	4494      	add	ip, r2
 8012414:	e732      	b.n	801227c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012416:	9a04      	ldr	r2, [sp, #16]
 8012418:	4431      	add	r1, r6
 801241a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801241e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8012422:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8012426:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801242a:	e75c      	b.n	80122e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801242c:	9b08      	ldr	r3, [sp, #32]
 801242e:	2d06      	cmp	r5, #6
 8012430:	eba3 0308 	sub.w	r3, r3, r8
 8012434:	b29b      	uxth	r3, r3
 8012436:	b218      	sxth	r0, r3
 8012438:	d813      	bhi.n	8012462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801243a:	9b07      	ldr	r3, [sp, #28]
 801243c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8012440:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8012444:	1c6b      	adds	r3, r5, #1
 8012446:	9901      	ldr	r1, [sp, #4]
 8012448:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801244c:	9b01      	ldr	r3, [sp, #4]
 801244e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012452:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012456:	805a      	strh	r2, [r3, #2]
 8012458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801245a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801245e:	809a      	strh	r2, [r3, #4]
 8012460:	e75f      	b.n	8012322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012462:	9c02      	ldr	r4, [sp, #8]
 8012464:	4570      	cmp	r0, lr
 8012466:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801246a:	db0d      	blt.n	8012488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801246c:	4431      	add	r1, r6
 801246e:	9b06      	ldr	r3, [sp, #24]
 8012470:	445c      	add	r4, fp
 8012472:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8012476:	b289      	uxth	r1, r1
 8012478:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801247c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012480:	4419      	add	r1, r3
 8012482:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8012486:	e583      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012488:	445c      	add	r4, fp
 801248a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801248e:	e79b      	b.n	80123c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8012490:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012494:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8012498:	1e65      	subs	r5, r4, #1
 801249a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801249e:	b2ad      	uxth	r5, r5
 80124a0:	42b5      	cmp	r5, r6
 80124a2:	d044      	beq.n	801252e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 80124a4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80124a8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 80124ac:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80124b0:	4282      	cmp	r2, r0
 80124b2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80124b6:	d11f      	bne.n	80124f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80124b8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80124bc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80124c0:	459c      	cmp	ip, r3
 80124c2:	d119      	bne.n	80124f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80124c4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80124c8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80124cc:	19d8      	adds	r0, r3, r7
 80124ce:	b200      	sxth	r0, r0
 80124d0:	4288      	cmp	r0, r1
 80124d2:	d109      	bne.n	80124e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80124d4:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80124d8:	4413      	add	r3, r2
 80124da:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80124de:	4629      	mov	r1, r5
 80124e0:	9801      	ldr	r0, [sp, #4]
 80124e2:	f7ff fd2b 	bl	8011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80124e6:	e003      	b.n	80124f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80124e8:	4411      	add	r1, r2
 80124ea:	b209      	sxth	r1, r1
 80124ec:	42b9      	cmp	r1, r7
 80124ee:	d0f3      	beq.n	80124d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80124f0:	3d01      	subs	r5, #1
 80124f2:	3c08      	subs	r4, #8
 80124f4:	b2ad      	uxth	r5, r5
 80124f6:	e7d3      	b.n	80124a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80124f8:	42b9      	cmp	r1, r7
 80124fa:	d1f9      	bne.n	80124f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80124fc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8012500:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012504:	4299      	cmp	r1, r3
 8012506:	d1f3      	bne.n	80124f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012508:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801250c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012510:	181f      	adds	r7, r3, r0
 8012512:	b23f      	sxth	r7, r7
 8012514:	42ba      	cmp	r2, r7
 8012516:	d105      	bne.n	8012524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8012518:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801251c:	440b      	add	r3, r1
 801251e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012522:	e7dc      	b.n	80124de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8012524:	440a      	add	r2, r1
 8012526:	b212      	sxth	r2, r2
 8012528:	4290      	cmp	r0, r2
 801252a:	d1e1      	bne.n	80124f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801252c:	e7f6      	b.n	801251c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801252e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8012532:	2e07      	cmp	r6, #7
 8012534:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8012538:	d812      	bhi.n	8012560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801253a:	1c75      	adds	r5, r6, #1
 801253c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012540:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012544:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8012548:	9d01      	ldr	r5, [sp, #4]
 801254a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801254e:	442c      	add	r4, r5
 8012550:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8012554:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8012558:	8061      	strh	r1, [r4, #2]
 801255a:	80a2      	strh	r2, [r4, #4]
 801255c:	80e3      	strh	r3, [r4, #6]
 801255e:	e581      	b.n	8012064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012560:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8012564:	3e01      	subs	r6, #1
 8012566:	445c      	add	r4, fp
 8012568:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801256c:	f04f 37ff 	mov.w	r7, #4294967295
 8012570:	2500      	movs	r5, #0
 8012572:	9305      	str	r3, [sp, #20]
 8012574:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012578:	1e72      	subs	r2, r6, #1
 801257a:	9302      	str	r3, [sp, #8]
 801257c:	4691      	mov	r9, r2
 801257e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8012582:	9304      	str	r3, [sp, #16]
 8012584:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8012588:	f1b9 3fff 	cmp.w	r9, #4294967295
 801258c:	6818      	ldr	r0, [r3, #0]
 801258e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012592:	9207      	str	r2, [sp, #28]
 8012594:	bf16      	itet	ne
 8012596:	9905      	ldrne	r1, [sp, #20]
 8012598:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801259c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80125a0:	9306      	str	r3, [sp, #24]
 80125a2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80125a6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80125aa:	fb18 f801 	smulbb	r8, r8, r1
 80125ae:	6859      	ldr	r1, [r3, #4]
 80125b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80125b4:	4671      	mov	r1, lr
 80125b6:	a80c      	add	r0, sp, #48	@ 0x30
 80125b8:	f7ff fb6a 	bl	8011c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80125bc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80125c0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80125c4:	f04f 0c08 	mov.w	ip, #8
 80125c8:	9b04      	ldr	r3, [sp, #16]
 80125ca:	9a02      	ldr	r2, [sp, #8]
 80125cc:	fb10 f001 	smulbb	r0, r0, r1
 80125d0:	fb02 8803 	mla	r8, r2, r3, r8
 80125d4:	eba0 0108 	sub.w	r1, r0, r8
 80125d8:	fb90 f0fc 	sdiv	r0, r0, ip
 80125dc:	4288      	cmp	r0, r1
 80125de:	dc20      	bgt.n	8012622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80125e0:	4551      	cmp	r1, sl
 80125e2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80125e6:	da03      	bge.n	80125f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80125e8:	b1d9      	cbz	r1, 8012622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80125ea:	468a      	mov	sl, r1
 80125ec:	464f      	mov	r7, r9
 80125ee:	4635      	mov	r5, r6
 80125f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80125f4:	f119 0f02 	cmn.w	r9, #2
 80125f8:	d1c6      	bne.n	8012588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80125fa:	4616      	mov	r6, r2
 80125fc:	3201      	adds	r2, #1
 80125fe:	f1a4 0408 	sub.w	r4, r4, #8
 8012602:	d1b7      	bne.n	8012574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8012604:	9b01      	ldr	r3, [sp, #4]
 8012606:	b2ac      	uxth	r4, r5
 8012608:	00ed      	lsls	r5, r5, #3
 801260a:	1958      	adds	r0, r3, r5
 801260c:	1c7b      	adds	r3, r7, #1
 801260e:	d10b      	bne.n	8012628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8012610:	4601      	mov	r1, r0
 8012612:	9803      	ldr	r0, [sp, #12]
 8012614:	f7ff fb3c 	bl	8011c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012618:	4621      	mov	r1, r4
 801261a:	9801      	ldr	r0, [sp, #4]
 801261c:	f7ff fc8e 	bl	8011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012620:	e4b6      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012622:	464f      	mov	r7, r9
 8012624:	4635      	mov	r5, r6
 8012626:	e7ed      	b.n	8012604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8012628:	9b01      	ldr	r3, [sp, #4]
 801262a:	00ff      	lsls	r7, r7, #3
 801262c:	445d      	add	r5, fp
 801262e:	19d9      	adds	r1, r3, r7
 8012630:	445f      	add	r7, fp
 8012632:	f7ff fb2d 	bl	8011c90 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012636:	9b03      	ldr	r3, [sp, #12]
 8012638:	cb03      	ldmia	r3!, {r0, r1}
 801263a:	9b03      	ldr	r3, [sp, #12]
 801263c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8012640:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8012644:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8012648:	6869      	ldr	r1, [r5, #4]
 801264a:	c303      	stmia	r3!, {r0, r1}
 801264c:	e7e4      	b.n	8012618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801264e:	bf00      	nop

08012650 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012654:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8012658:	b09b      	sub	sp, #108	@ 0x6c
 801265a:	4604      	mov	r4, r0
 801265c:	4630      	mov	r0, r6
 801265e:	f7fc f818 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012662:	4605      	mov	r5, r0
 8012664:	b948      	cbnz	r0, 801267a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8012666:	6823      	ldr	r3, [r4, #0]
 8012668:	4620      	mov	r0, r4
 801266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801266c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012670:	4798      	blx	r3
 8012672:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8012676:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801267a:	4bc5      	ldr	r3, [pc, #788]	@ (8012990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d03f      	beq.n	8012702 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012682:	4dc4      	ldr	r5, [pc, #784]	@ (8012994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8012684:	4628      	mov	r0, r5
 8012686:	f7fc f804 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 801268a:	4606      	mov	r6, r0
 801268c:	2800      	cmp	r0, #0
 801268e:	d138      	bne.n	8012702 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012690:	4628      	mov	r0, r5
 8012692:	f7ff f98f 	bl	80119b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	6829      	ldr	r1, [r5, #0]
 801269a:	4620      	mov	r0, r4
 801269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801269e:	686a      	ldr	r2, [r5, #4]
 80126a0:	4798      	blx	r3
 80126a2:	802e      	strh	r6, [r5, #0]
 80126a4:	806e      	strh	r6, [r5, #2]
 80126a6:	80ae      	strh	r6, [r5, #4]
 80126a8:	80ee      	strh	r6, [r5, #6]
 80126aa:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 80126ae:	4dba      	ldr	r5, [pc, #744]	@ (8012998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80126b0:	4640      	mov	r0, r8
 80126b2:	f7ff fbe7 	bl	8011e84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80126b6:	882e      	ldrh	r6, [r5, #0]
 80126b8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80126bc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80126c0:	4633      	mov	r3, r6
 80126c2:	42bb      	cmp	r3, r7
 80126c4:	d224      	bcs.n	8012710 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80126c6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80126ca:	2907      	cmp	r1, #7
 80126cc:	d816      	bhi.n	80126fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80126ce:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80126d2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80126d6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80126da:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80126de:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80126e2:	1c4a      	adds	r2, r1, #1
 80126e4:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80126e8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80126ec:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80126f0:	f8a2 a002 	strh.w	sl, [r2, #2]
 80126f4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80126f8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80126fc:	3301      	adds	r3, #1
 80126fe:	b29b      	uxth	r3, r3
 8012700:	e7df      	b.n	80126c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8012702:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1cf      	bne.n	80126aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801270a:	b01b      	add	sp, #108	@ 0x6c
 801270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012710:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8012714:	42b3      	cmp	r3, r6
 8012716:	d90c      	bls.n	8012732 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8012718:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801271c:	6822      	ldr	r2, [r4, #0]
 801271e:	3601      	adds	r6, #1
 8012720:	4620      	mov	r0, r4
 8012722:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8012724:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8012728:	b2b6      	uxth	r6, r6
 801272a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801272e:	47b8      	blx	r7
 8012730:	e7ee      	b.n	8012710 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012732:	4a9a      	ldr	r2, [pc, #616]	@ (801299c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012734:	6813      	ldr	r3, [r2, #0]
 8012736:	4691      	mov	r9, r2
 8012738:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801273c:	2b01      	cmp	r3, #1
 801273e:	f040 80e0 	bne.w	8012902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8012742:	8829      	ldrh	r1, [r5, #0]
 8012744:	2600      	movs	r6, #0
 8012746:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801274a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801274e:	33ae      	adds	r3, #174	@ 0xae
 8012750:	428f      	cmp	r7, r1
 8012752:	f103 0308 	add.w	r3, r3, #8
 8012756:	dd0a      	ble.n	801276e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8012758:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801275c:	3101      	adds	r1, #1
 801275e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8012762:	4402      	add	r2, r0
 8012764:	b212      	sxth	r2, r2
 8012766:	4296      	cmp	r6, r2
 8012768:	bfb8      	it	lt
 801276a:	4616      	movlt	r6, r2
 801276c:	e7f0      	b.n	8012750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801276e:	4b8c      	ldr	r3, [pc, #560]	@ (80129a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012770:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801299c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8012774:	881b      	ldrh	r3, [r3, #0]
 8012776:	2b0f      	cmp	r3, #15
 8012778:	bf8c      	ite	hi
 801277a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801277e:	f04f 0b01 	movls.w	fp, #1
 8012782:	2300      	movs	r3, #0
 8012784:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012788:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801278c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8012790:	4b82      	ldr	r3, [pc, #520]	@ (801299c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012792:	4438      	add	r0, r7
 8012794:	b207      	sxth	r7, r0
 8012796:	6818      	ldr	r0, [r3, #0]
 8012798:	42b7      	cmp	r7, r6
 801279a:	6803      	ldr	r3, [r0, #0]
 801279c:	f280 8083 	bge.w	80128a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80127a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80127a4:	4798      	blx	r3
 80127a6:	eb07 030b 	add.w	r3, r7, fp
 80127aa:	4298      	cmp	r0, r3
 80127ac:	da07      	bge.n	80127be <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80127ae:	42b0      	cmp	r0, r6
 80127b0:	da05      	bge.n	80127be <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80127b2:	4287      	cmp	r7, r0
 80127b4:	dd6c      	ble.n	8012890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80127b6:	2f00      	cmp	r7, #0
 80127b8:	dd6a      	ble.n	8012890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80127ba:	4630      	mov	r0, r6
 80127bc:	e004      	b.n	80127c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80127be:	4287      	cmp	r7, r0
 80127c0:	dcfb      	bgt.n	80127ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80127c2:	42b0      	cmp	r0, r6
 80127c4:	bfa8      	it	ge
 80127c6:	4630      	movge	r0, r6
 80127c8:	4b76      	ldr	r3, [pc, #472]	@ (80129a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80127ca:	1bc0      	subs	r0, r0, r7
 80127cc:	2200      	movs	r2, #0
 80127ce:	f8ad 7016 	strh.w	r7, [sp, #22]
 80127d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127d6:	882f      	ldrh	r7, [r5, #0]
 80127d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80127dc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80127e0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80127e4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80127e8:	42bb      	cmp	r3, r7
 80127ea:	d9cd      	bls.n	8012788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80127ec:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80127f0:	ab07      	add	r3, sp, #28
 80127f2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80127f6:	6851      	ldr	r1, [r2, #4]
 80127f8:	c303      	stmia	r3!, {r0, r1}
 80127fa:	a905      	add	r1, sp, #20
 80127fc:	a807      	add	r0, sp, #28
 80127fe:	f7ff f9ae 	bl	8011b5e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012802:	2800      	cmp	r0, #0
 8012804:	d04c      	beq.n	80128a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8012806:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801280a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801280e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8012812:	4686      	mov	lr, r0
 8012814:	4290      	cmp	r0, r2
 8012816:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801281a:	4450      	add	r0, sl
 801281c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012820:	bfb8      	it	lt
 8012822:	4696      	movlt	lr, r2
 8012824:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012828:	4452      	add	r2, sl
 801282a:	b280      	uxth	r0, r0
 801282c:	4299      	cmp	r1, r3
 801282e:	468c      	mov	ip, r1
 8012830:	b292      	uxth	r2, r2
 8012832:	9302      	str	r3, [sp, #8]
 8012834:	bfb8      	it	lt
 8012836:	469c      	movlt	ip, r3
 8012838:	b203      	sxth	r3, r0
 801283a:	fa0f fa82 	sxth.w	sl, r2
 801283e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8012842:	f8ad c01e 	strh.w	ip, [sp, #30]
 8012846:	4553      	cmp	r3, sl
 8012848:	bfb8      	it	lt
 801284a:	4602      	movlt	r2, r0
 801284c:	9b02      	ldr	r3, [sp, #8]
 801284e:	eba2 020e 	sub.w	r2, r2, lr
 8012852:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012856:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801285a:	4411      	add	r1, r2
 801285c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012860:	4413      	add	r3, r2
 8012862:	b289      	uxth	r1, r1
 8012864:	b29b      	uxth	r3, r3
 8012866:	b208      	sxth	r0, r1
 8012868:	b21a      	sxth	r2, r3
 801286a:	4290      	cmp	r0, r2
 801286c:	bfb8      	it	lt
 801286e:	460b      	movlt	r3, r1
 8012870:	eba3 030c 	sub.w	r3, r3, ip
 8012874:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8012878:	a807      	add	r0, sp, #28
 801287a:	f7fb ff0a 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 801287e:	b920      	cbnz	r0, 801288a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8012880:	6823      	ldr	r3, [r4, #0]
 8012882:	a907      	add	r1, sp, #28
 8012884:	4620      	mov	r0, r4
 8012886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012888:	4798      	blx	r3
 801288a:	3701      	adds	r7, #1
 801288c:	b2bf      	uxth	r7, r7
 801288e:	e7a9      	b.n	80127e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012890:	f8d9 0000 	ldr.w	r0, [r9]
 8012894:	2101      	movs	r1, #1
 8012896:	6803      	ldr	r3, [r0, #0]
 8012898:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801289c:	4798      	blx	r3
 801289e:	e773      	b.n	8012788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80128a0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80128a4:	e7e8      	b.n	8012878 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80128a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128a8:	4798      	blx	r3
 80128aa:	4b3f      	ldr	r3, [pc, #252]	@ (80129a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f43f af2b 	beq.w	801270a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80128b4:	2300      	movs	r3, #0
 80128b6:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80128ba:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80128be:	882b      	ldrh	r3, [r5, #0]
 80128c0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80128c4:	42ab      	cmp	r3, r5
 80128c6:	f4bf af20 	bcs.w	801270a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80128ca:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80128ce:	2907      	cmp	r1, #7
 80128d0:	d814      	bhi.n	80128fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80128d2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80128d6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80128da:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80128de:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80128e2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80128e6:	1c4a      	adds	r2, r1, #1
 80128e8:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80128ec:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80128f0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80128f4:	f8a2 c002 	strh.w	ip, [r2, #2]
 80128f8:	8097      	strh	r7, [r2, #4]
 80128fa:	80d6      	strh	r6, [r2, #6]
 80128fc:	3301      	adds	r3, #1
 80128fe:	b29b      	uxth	r3, r3
 8012900:	e7e0      	b.n	80128c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8012902:	2b02      	cmp	r3, #2
 8012904:	f040 8133 	bne.w	8012b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8012908:	4b28      	ldr	r3, [pc, #160]	@ (80129ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801290a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b01      	cmp	r3, #1
 8012912:	f000 8098 	beq.w	8012a46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8012916:	882a      	ldrh	r2, [r5, #0]
 8012918:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801291c:	3201      	adds	r2, #1
 801291e:	b292      	uxth	r2, r2
 8012920:	2900      	cmp	r1, #0
 8012922:	d0c2      	beq.n	80128aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012924:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8012928:	4694      	mov	ip, r2
 801292a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801292e:	f04f 0900 	mov.w	r9, #0
 8012932:	441e      	add	r6, r3
 8012934:	b236      	sxth	r6, r6
 8012936:	fa1f f38c 	uxth.w	r3, ip
 801293a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801293e:	4299      	cmp	r1, r3
 8012940:	f240 80be 	bls.w	8012ac0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8012944:	4427      	add	r7, r4
 8012946:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801294a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801294e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8012952:	4283      	cmp	r3, r0
 8012954:	f340 80a0 	ble.w	8012a98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8012958:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801295c:	46e1      	mov	r9, ip
 801295e:	4406      	add	r6, r0
 8012960:	b236      	sxth	r6, r6
 8012962:	429e      	cmp	r6, r3
 8012964:	bfa8      	it	ge
 8012966:	461e      	movge	r6, r3
 8012968:	f10c 0c01 	add.w	ip, ip, #1
 801296c:	e7e3      	b.n	8012936 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801296e:	d10a      	bne.n	8012986 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8012970:	4562      	cmp	r2, ip
 8012972:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8012976:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801297a:	bfb8      	it	lt
 801297c:	4662      	movlt	r2, ip
 801297e:	4288      	cmp	r0, r1
 8012980:	bfb8      	it	lt
 8012982:	461f      	movlt	r7, r3
 8012984:	e086      	b.n	8012a94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8012986:	428a      	cmp	r2, r1
 8012988:	bfb8      	it	lt
 801298a:	460a      	movlt	r2, r1
 801298c:	e082      	b.n	8012a94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801298e:	bf00      	nop
 8012990:	2400aabc 	.word	0x2400aabc
 8012994:	2400aac8 	.word	0x2400aac8
 8012998:	24000030 	.word	0x24000030
 801299c:	2400aa84 	.word	0x2400aa84
 80129a0:	2400aa7a 	.word	0x2400aa7a
 80129a4:	2400aa78 	.word	0x2400aa78
 80129a8:	2400aa82 	.word	0x2400aa82
 80129ac:	2400aa7c 	.word	0x2400aa7c
 80129b0:	19a1      	adds	r1, r4, r6
 80129b2:	ab07      	add	r3, sp, #28
 80129b4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80129b8:	6849      	ldr	r1, [r1, #4]
 80129ba:	c303      	stmia	r3!, {r0, r1}
 80129bc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80129c0:	a807      	add	r0, sp, #28
 80129c2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80129c6:	2b13      	cmp	r3, #19
 80129c8:	440b      	add	r3, r1
 80129ca:	bfd8      	it	le
 80129cc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80129d0:	1a9b      	subs	r3, r3, r2
 80129d2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80129d6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80129da:	f7ff f805 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80129de:	a807      	add	r0, sp, #28
 80129e0:	f7fb fe57 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 80129e4:	bb78      	cbnz	r0, 8012a46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80129e6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80129ea:	4426      	add	r6, r4
 80129ec:	f8d9 0000 	ldr.w	r0, [r9]
 80129f0:	f1bc 0f14 	cmp.w	ip, #20
 80129f4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80129f8:	f8d0 e000 	ldr.w	lr, [r0]
 80129fc:	bfa8      	it	ge
 80129fe:	f04f 0c14 	movge.w	ip, #20
 8012a02:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012a06:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012a0a:	fa1f fc8c 	uxth.w	ip, ip
 8012a0e:	f8cd c000 	str.w	ip, [sp]
 8012a12:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8012a16:	47d8      	blx	fp
 8012a18:	4683      	mov	fp, r0
 8012a1a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8012a1e:	a807      	add	r0, sp, #28
 8012a20:	f7fe ffc8 	bl	80119b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	4620      	mov	r0, r4
 8012a28:	a907      	add	r1, sp, #28
 8012a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a2c:	4798      	blx	r3
 8012a2e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8012a32:	eba0 000b 	sub.w	r0, r0, fp
 8012a36:	b200      	sxth	r0, r0
 8012a38:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8012a3c:	b918      	cbnz	r0, 8012a46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8012a3e:	b2b9      	uxth	r1, r7
 8012a40:	4650      	mov	r0, sl
 8012a42:	f7ff fa7b 	bl	8011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012a46:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8012a4a:	f1bb 0f00 	cmp.w	fp, #0
 8012a4e:	f43f af2c 	beq.w	80128aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012a52:	882b      	ldrh	r3, [r5, #0]
 8012a54:	2700      	movs	r7, #0
 8012a56:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	b299      	uxth	r1, r3
 8012a60:	00fe      	lsls	r6, r7, #3
 8012a62:	458b      	cmp	fp, r1
 8012a64:	d9a4      	bls.n	80129b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8012a66:	4426      	add	r6, r4
 8012a68:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8012a6c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8012a70:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8012a74:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8012a78:	4408      	add	r0, r1
 8012a7a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8012a7e:	4461      	add	r1, ip
 8012a80:	b200      	sxth	r0, r0
 8012a82:	b209      	sxth	r1, r1
 8012a84:	4288      	cmp	r0, r1
 8012a86:	f6bf af72 	bge.w	801296e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8012a8a:	4584      	cmp	ip, r0
 8012a8c:	4662      	mov	r2, ip
 8012a8e:	461f      	mov	r7, r3
 8012a90:	bfb8      	it	lt
 8012a92:	4602      	movlt	r2, r0
 8012a94:	3301      	adds	r3, #1
 8012a96:	e7e2      	b.n	8012a5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8012a98:	d10e      	bne.n	8012ab8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8012a9a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8012a9e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8012aa2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8012aa6:	4473      	add	r3, lr
 8012aa8:	b21b      	sxth	r3, r3
 8012aaa:	429e      	cmp	r6, r3
 8012aac:	bfa8      	it	ge
 8012aae:	461e      	movge	r6, r3
 8012ab0:	4287      	cmp	r7, r0
 8012ab2:	bfb8      	it	lt
 8012ab4:	46e1      	movlt	r9, ip
 8012ab6:	e757      	b.n	8012968 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8012ab8:	4286      	cmp	r6, r0
 8012aba:	bfa8      	it	ge
 8012abc:	4606      	movge	r6, r0
 8012abe:	e753      	b.n	8012968 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8012ac0:	eb0a 0007 	add.w	r0, sl, r7
 8012ac4:	4427      	add	r7, r4
 8012ac6:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8012aca:	f1bb 0f13 	cmp.w	fp, #19
 8012ace:	bfdc      	itt	le
 8012ad0:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8012ad4:	445e      	addle	r6, fp
 8012ad6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012ada:	bfd8      	it	le
 8012adc:	b236      	sxthle	r6, r6
 8012ade:	f7fb fdd8 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ae2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	f47f af1a 	bne.w	8012920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8012aec:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8012af0:	fa1f fb8b 	uxth.w	fp, fp
 8012af4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8012af8:	1ab6      	subs	r6, r6, r2
 8012afa:	4829      	ldr	r0, [pc, #164]	@ (8012ba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8012afc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8012b00:	2e14      	cmp	r6, #20
 8012b02:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8012b06:	6800      	ldr	r0, [r0, #0]
 8012b08:	bfa8      	it	ge
 8012b0a:	2614      	movge	r6, #20
 8012b0c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012b10:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012b14:	b289      	uxth	r1, r1
 8012b16:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012b1a:	b2b6      	uxth	r6, r6
 8012b1c:	f8d0 c000 	ldr.w	ip, [r0]
 8012b20:	b292      	uxth	r2, r2
 8012b22:	455e      	cmp	r6, fp
 8012b24:	bf94      	ite	ls
 8012b26:	9600      	strls	r6, [sp, #0]
 8012b28:	f8cd b000 	strhi.w	fp, [sp]
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8012b32:	47b0      	blx	r6
 8012b34:	6823      	ldr	r3, [r4, #0]
 8012b36:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8012b3a:	a907      	add	r1, sp, #28
 8012b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b3e:	4620      	mov	r0, r4
 8012b40:	4798      	blx	r3
 8012b42:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8012b46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012b4a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8012b4e:	1a5b      	subs	r3, r3, r1
 8012b50:	440a      	add	r2, r1
 8012b52:	b21b      	sxth	r3, r3
 8012b54:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8012b58:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f47f aeda 	bne.w	8012916 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8012b62:	fa1f f189 	uxth.w	r1, r9
 8012b66:	4650      	mov	r0, sl
 8012b68:	f7ff f9e8 	bl	8011f3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012b6c:	e6d3      	b.n	8012916 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8012b6e:	882e      	ldrh	r6, [r5, #0]
 8012b70:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012b74:	42b3      	cmp	r3, r6
 8012b76:	f67f ae98 	bls.w	80128aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012b7a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8012b7e:	ab07      	add	r3, sp, #28
 8012b80:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012b84:	6851      	ldr	r1, [r2, #4]
 8012b86:	c303      	stmia	r3!, {r0, r1}
 8012b88:	a807      	add	r0, sp, #28
 8012b8a:	f7fb fd82 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b8e:	b920      	cbnz	r0, 8012b9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8012b90:	6823      	ldr	r3, [r4, #0]
 8012b92:	a907      	add	r1, sp, #28
 8012b94:	4620      	mov	r0, r4
 8012b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b98:	4798      	blx	r3
 8012b9a:	3601      	adds	r6, #1
 8012b9c:	b2b6      	uxth	r6, r6
 8012b9e:	e7e7      	b.n	8012b70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8012ba0:	2400aa84 	.word	0x2400aa84

08012ba4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012ba4:	4b03      	ldr	r3, [pc, #12]	@ (8012bb4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	801a      	strh	r2, [r3, #0]
 8012baa:	805a      	strh	r2, [r3, #2]
 8012bac:	809a      	strh	r2, [r3, #4]
 8012bae:	80da      	strh	r2, [r3, #6]
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	2400aac8 	.word	0x2400aac8

08012bb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bbc:	b09d      	sub	sp, #116	@ 0x74
 8012bbe:	4606      	mov	r6, r0
 8012bc0:	4614      	mov	r4, r2
 8012bc2:	468a      	mov	sl, r1
 8012bc4:	a803      	add	r0, sp, #12
 8012bc6:	461d      	mov	r5, r3
 8012bc8:	f000 fd7c 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 8012bcc:	6833      	ldr	r3, [r6, #0]
 8012bce:	4630      	mov	r0, r6
 8012bd0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8012bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bd6:	4798      	blx	r3
 8012bd8:	6833      	ldr	r3, [r6, #0]
 8012bda:	4607      	mov	r7, r0
 8012bdc:	4630      	mov	r0, r6
 8012bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012be0:	4798      	blx	r3
 8012be2:	462a      	mov	r2, r5
 8012be4:	2500      	movs	r5, #0
 8012be6:	4621      	mov	r1, r4
 8012be8:	9000      	str	r0, [sp, #0]
 8012bea:	463b      	mov	r3, r7
 8012bec:	462c      	mov	r4, r5
 8012bee:	46a9      	mov	r9, r5
 8012bf0:	46a8      	mov	r8, r5
 8012bf2:	a803      	add	r0, sp, #12
 8012bf4:	f000 fdc1 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	9302      	str	r3, [sp, #8]
 8012bfc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012c00:	429c      	cmp	r4, r3
 8012c02:	d002      	beq.n	8012c0a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8012c04:	455c      	cmp	r4, fp
 8012c06:	bf18      	it	ne
 8012c08:	4625      	movne	r5, r4
 8012c0a:	ab02      	add	r3, sp, #8
 8012c0c:	4632      	mov	r2, r6
 8012c0e:	4651      	mov	r1, sl
 8012c10:	a803      	add	r0, sp, #12
 8012c12:	f001 f8e5 	bl	8013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012c16:	4604      	mov	r4, r0
 8012c18:	b108      	cbz	r0, 8012c1e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8012c1a:	280a      	cmp	r0, #10
 8012c1c:	d10a      	bne.n	8012c34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8012c1e:	45c1      	cmp	r9, r8
 8012c20:	bf38      	it	cc
 8012c22:	46c1      	movcc	r9, r8
 8012c24:	f04f 0800 	mov.w	r8, #0
 8012c28:	2c00      	cmp	r4, #0
 8012c2a:	d1e5      	bne.n	8012bf8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8012c2c:	4648      	mov	r0, r9
 8012c2e:	b01d      	add	sp, #116	@ 0x74
 8012c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c34:	9a02      	ldr	r2, [sp, #8]
 8012c36:	2a00      	cmp	r2, #0
 8012c38:	d0de      	beq.n	8012bf8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8012c3a:	7b57      	ldrb	r7, [r2, #13]
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	6833      	ldr	r3, [r6, #0]
 8012c40:	007f      	lsls	r7, r7, #1
 8012c42:	8894      	ldrh	r4, [r2, #4]
 8012c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c46:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8012c4a:	7a97      	ldrb	r7, [r2, #10]
 8012c4c:	4307      	orrs	r7, r0
 8012c4e:	4630      	mov	r0, r6
 8012c50:	4798      	blx	r3
 8012c52:	4438      	add	r0, r7
 8012c54:	4480      	add	r8, r0
 8012c56:	fa1f f888 	uxth.w	r8, r8
 8012c5a:	e7e5      	b.n	8012c28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08012c5c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8012c5c:	b508      	push	{r3, lr}
 8012c5e:	6803      	ldr	r3, [r0, #0]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	4798      	blx	r3
 8012c64:	b128      	cbz	r0, 8012c72 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012c66:	7b43      	ldrb	r3, [r0, #13]
 8012c68:	7a80      	ldrb	r0, [r0, #10]
 8012c6a:	005b      	lsls	r3, r3, #1
 8012c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c70:	4318      	orrs	r0, r3
 8012c72:	bd08      	pop	{r3, pc}

08012c74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8012c74:	b40e      	push	{r1, r2, r3}
 8012c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c78:	b09e      	sub	sp, #120	@ 0x78
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	ab23      	add	r3, sp, #140	@ 0x8c
 8012c7e:	a805      	add	r0, sp, #20
 8012c80:	f853 4b04 	ldr.w	r4, [r3], #4
 8012c84:	9303      	str	r3, [sp, #12]
 8012c86:	f000 fd1d 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 8012c8a:	682b      	ldr	r3, [r5, #0]
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c90:	4798      	blx	r3
 8012c92:	682b      	ldr	r3, [r5, #0]
 8012c94:	4606      	mov	r6, r0
 8012c96:	4628      	mov	r0, r5
 8012c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012c9a:	4798      	blx	r3
 8012c9c:	4633      	mov	r3, r6
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	ae1e      	add	r6, sp, #120	@ 0x78
 8012ca2:	2400      	movs	r4, #0
 8012ca4:	9000      	str	r0, [sp, #0]
 8012ca6:	9a03      	ldr	r2, [sp, #12]
 8012ca8:	a805      	add	r0, sp, #20
 8012caa:	f000 fd66 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012cae:	f846 4d68 	str.w	r4, [r6, #-104]!
 8012cb2:	462a      	mov	r2, r5
 8012cb4:	4633      	mov	r3, r6
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	a805      	add	r0, sp, #20
 8012cba:	f001 f891 	bl	8013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012cbe:	b300      	cbz	r0, 8012d02 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8012cc0:	280a      	cmp	r0, #10
 8012cc2:	d01a      	beq.n	8012cfa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012cc4:	9f04      	ldr	r7, [sp, #16]
 8012cc6:	b1c7      	cbz	r7, 8012cfa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012cc8:	7b78      	ldrb	r0, [r7, #13]
 8012cca:	7a3b      	ldrb	r3, [r7, #8]
 8012ccc:	00c1      	lsls	r1, r0, #3
 8012cce:	88ea      	ldrh	r2, [r5, #6]
 8012cd0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8012cd4:	4319      	orrs	r1, r3
 8012cd6:	0643      	lsls	r3, r0, #25
 8012cd8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8012cdc:	bf48      	it	mi
 8012cde:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8012ce2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8012ce6:	bf48      	it	mi
 8012ce8:	b219      	sxthmi	r1, r3
 8012cea:	79fb      	ldrb	r3, [r7, #7]
 8012cec:	4303      	orrs	r3, r0
 8012cee:	4413      	add	r3, r2
 8012cf0:	1a5b      	subs	r3, r3, r1
 8012cf2:	b21b      	sxth	r3, r3
 8012cf4:	429c      	cmp	r4, r3
 8012cf6:	bfb8      	it	lt
 8012cf8:	461c      	movlt	r4, r3
 8012cfa:	4633      	mov	r3, r6
 8012cfc:	462a      	mov	r2, r5
 8012cfe:	2100      	movs	r1, #0
 8012d00:	e7da      	b.n	8012cb8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8012d02:	b2a0      	uxth	r0, r4
 8012d04:	b01e      	add	sp, #120	@ 0x78
 8012d06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d0a:	b003      	add	sp, #12
 8012d0c:	4770      	bx	lr

08012d0e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8012d0e:	7a43      	ldrb	r3, [r0, #9]
 8012d10:	8880      	ldrh	r0, [r0, #4]
 8012d12:	4418      	add	r0, r3
 8012d14:	b280      	uxth	r0, r0
 8012d16:	4770      	bx	lr

08012d18 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8012d18:	6803      	ldr	r3, [r0, #0]
 8012d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d1c:	4718      	bx	r3

08012d1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8012d1e:	b40e      	push	{r1, r2, r3}
 8012d20:	b570      	push	{r4, r5, r6, lr}
 8012d22:	b09d      	sub	sp, #116	@ 0x74
 8012d24:	4604      	mov	r4, r0
 8012d26:	ab21      	add	r3, sp, #132	@ 0x84
 8012d28:	a803      	add	r0, sp, #12
 8012d2a:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d2e:	9302      	str	r3, [sp, #8]
 8012d30:	f000 fcc8 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	4620      	mov	r0, r4
 8012d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d3a:	4798      	blx	r3
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	4606      	mov	r6, r0
 8012d40:	4620      	mov	r0, r4
 8012d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d44:	2401      	movs	r4, #1
 8012d46:	4798      	blx	r3
 8012d48:	4633      	mov	r3, r6
 8012d4a:	9000      	str	r0, [sp, #0]
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	9a02      	ldr	r2, [sp, #8]
 8012d50:	a803      	add	r0, sp, #12
 8012d52:	f000 fd12 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012d56:	a803      	add	r0, sp, #12
 8012d58:	f001 f90e 	bl	8013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d5c:	b2a3      	uxth	r3, r4
 8012d5e:	b138      	cbz	r0, 8012d70 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8012d60:	280a      	cmp	r0, #10
 8012d62:	a803      	add	r0, sp, #12
 8012d64:	bf04      	itt	eq
 8012d66:	3301      	addeq	r3, #1
 8012d68:	b21c      	sxtheq	r4, r3
 8012d6a:	f001 f905 	bl	8013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d6e:	e7f5      	b.n	8012d5c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8012d70:	4618      	mov	r0, r3
 8012d72:	b01d      	add	sp, #116	@ 0x74
 8012d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d78:	b003      	add	sp, #12
 8012d7a:	4770      	bx	lr

08012d7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8012d7c:	b40e      	push	{r1, r2, r3}
 8012d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d80:	b09e      	sub	sp, #120	@ 0x78
 8012d82:	4604      	mov	r4, r0
 8012d84:	ab23      	add	r3, sp, #140	@ 0x8c
 8012d86:	a805      	add	r0, sp, #20
 8012d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d8c:	9303      	str	r3, [sp, #12]
 8012d8e:	f000 fc99 	bl	80136c4 <_ZN8touchgfx12TextProviderC1Ev>
 8012d92:	6823      	ldr	r3, [r4, #0]
 8012d94:	4620      	mov	r0, r4
 8012d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d98:	4798      	blx	r3
 8012d9a:	6823      	ldr	r3, [r4, #0]
 8012d9c:	4606      	mov	r6, r0
 8012d9e:	4620      	mov	r0, r4
 8012da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012da2:	4798      	blx	r3
 8012da4:	4633      	mov	r3, r6
 8012da6:	4629      	mov	r1, r5
 8012da8:	9000      	str	r0, [sp, #0]
 8012daa:	9a03      	ldr	r2, [sp, #12]
 8012dac:	a805      	add	r0, sp, #20
 8012dae:	f000 fce4 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012db2:	ad1e      	add	r5, sp, #120	@ 0x78
 8012db4:	2100      	movs	r1, #0
 8012db6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8012dba:	4622      	mov	r2, r4
 8012dbc:	a805      	add	r0, sp, #20
 8012dbe:	f845 1d68 	str.w	r1, [r5, #-104]!
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	f001 f80c 	bl	8013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012dc8:	b1d8      	cbz	r0, 8012e02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8012dca:	280a      	cmp	r0, #10
 8012dcc:	d012      	beq.n	8012df4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8012dce:	9804      	ldr	r0, [sp, #16]
 8012dd0:	b180      	cbz	r0, 8012df4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8012dd2:	7b47      	ldrb	r7, [r0, #13]
 8012dd4:	88e2      	ldrh	r2, [r4, #6]
 8012dd6:	00fb      	lsls	r3, r7, #3
 8012dd8:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8012ddc:	7a03      	ldrb	r3, [r0, #8]
 8012dde:	430b      	orrs	r3, r1
 8012de0:	0679      	lsls	r1, r7, #25
 8012de2:	bf44      	itt	mi
 8012de4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8012de8:	b21b      	sxthmi	r3, r3
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	b21b      	sxth	r3, r3
 8012dee:	429e      	cmp	r6, r3
 8012df0:	bfa8      	it	ge
 8012df2:	461e      	movge	r6, r3
 8012df4:	462b      	mov	r3, r5
 8012df6:	4622      	mov	r2, r4
 8012df8:	2100      	movs	r1, #0
 8012dfa:	a805      	add	r0, sp, #20
 8012dfc:	f000 fff0 	bl	8013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012e00:	e7e2      	b.n	8012dc8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8012e02:	4630      	mov	r0, r6
 8012e04:	b01e      	add	sp, #120	@ 0x78
 8012e06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012e0a:	b003      	add	sp, #12
 8012e0c:	4770      	bx	lr

08012e0e <_ZNK8touchgfx8Drawable10invalidateEv>:
 8012e0e:	b513      	push	{r0, r1, r4, lr}
 8012e10:	6803      	ldr	r3, [r0, #0]
 8012e12:	2400      	movs	r4, #0
 8012e14:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012e18:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012e1c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012e20:	4669      	mov	r1, sp
 8012e22:	691b      	ldr	r3, [r3, #16]
 8012e24:	9400      	str	r4, [sp, #0]
 8012e26:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012e2a:	4798      	blx	r3
 8012e2c:	b002      	add	sp, #8
 8012e2e:	bd10      	pop	{r4, pc}

08012e30 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8012e30:	b538      	push	{r3, r4, r5, lr}
 8012e32:	680b      	ldr	r3, [r1, #0]
 8012e34:	460c      	mov	r4, r1
 8012e36:	4605      	mov	r5, r0
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	4798      	blx	r3
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e44:	4798      	blx	r3
 8012e46:	4628      	mov	r0, r5
 8012e48:	bd38      	pop	{r3, r4, r5, pc}

08012e4a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8012e4a:	b410      	push	{r4}
 8012e4c:	880a      	ldrh	r2, [r1, #0]
 8012e4e:	8884      	ldrh	r4, [r0, #4]
 8012e50:	4422      	add	r2, r4
 8012e52:	800a      	strh	r2, [r1, #0]
 8012e54:	884a      	ldrh	r2, [r1, #2]
 8012e56:	88c4      	ldrh	r4, [r0, #6]
 8012e58:	4422      	add	r2, r4
 8012e5a:	804a      	strh	r2, [r1, #2]
 8012e5c:	6940      	ldr	r0, [r0, #20]
 8012e5e:	b120      	cbz	r0, 8012e6a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8012e60:	6803      	ldr	r3, [r0, #0]
 8012e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e68:	4718      	bx	r3
 8012e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e6e:	4770      	bx	lr

08012e70 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8012e70:	b570      	push	{r4, r5, r6, lr}
 8012e72:	8882      	ldrh	r2, [r0, #4]
 8012e74:	460c      	mov	r4, r1
 8012e76:	880b      	ldrh	r3, [r1, #0]
 8012e78:	4605      	mov	r5, r0
 8012e7a:	4413      	add	r3, r2
 8012e7c:	800b      	strh	r3, [r1, #0]
 8012e7e:	884b      	ldrh	r3, [r1, #2]
 8012e80:	88c2      	ldrh	r2, [r0, #6]
 8012e82:	4413      	add	r3, r2
 8012e84:	804b      	strh	r3, [r1, #2]
 8012e86:	1d01      	adds	r1, r0, #4
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f7fb fbbf 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 8012e8e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	dd0b      	ble.n	8012eae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012e96:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	dd07      	ble.n	8012eae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012e9e:	6968      	ldr	r0, [r5, #20]
 8012ea0:	b128      	cbz	r0, 8012eae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012ea2:	6803      	ldr	r3, [r0, #0]
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eac:	4718      	bx	r3
 8012eae:	bd70      	pop	{r4, r5, r6, pc}

08012eb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	8882      	ldrh	r2, [r0, #4]
 8012eb4:	460c      	mov	r4, r1
 8012eb6:	880b      	ldrh	r3, [r1, #0]
 8012eb8:	4605      	mov	r5, r0
 8012eba:	4413      	add	r3, r2
 8012ebc:	800b      	strh	r3, [r1, #0]
 8012ebe:	884b      	ldrh	r3, [r1, #2]
 8012ec0:	88c2      	ldrh	r2, [r0, #6]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	804b      	strh	r3, [r1, #2]
 8012ec6:	1d01      	adds	r1, r0, #4
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f7fb fb9f 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 8012ece:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	dd19      	ble.n	8012f0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012ed6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	dd15      	ble.n	8012f0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012ede:	6968      	ldr	r0, [r5, #20]
 8012ee0:	b128      	cbz	r0, 8012eee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8012ee2:	6803      	ldr	r3, [r0, #0]
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	691b      	ldr	r3, [r3, #16]
 8012ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eec:	4718      	bx	r3
 8012eee:	4b07      	ldr	r3, [pc, #28]	@ (8012f0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3304      	adds	r3, #4
 8012ef4:	429d      	cmp	r5, r3
 8012ef6:	d108      	bne.n	8012f0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012ef8:	f7fe ff10 	bl	8011d1c <_ZN8touchgfx11Application11getInstanceEv>
 8012efc:	6803      	ldr	r3, [r0, #0]
 8012efe:	6821      	ldr	r1, [r4, #0]
 8012f00:	6862      	ldr	r2, [r4, #4]
 8012f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f08:	4718      	bx	r3
 8012f0a:	bd70      	pop	{r4, r5, r6, pc}
 8012f0c:	2400aac0 	.word	0x2400aac0

08012f10 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	4604      	mov	r4, r0
 8012f14:	4616      	mov	r6, r2
 8012f16:	460d      	mov	r5, r1
 8012f18:	b901      	cbnz	r1, 8012f1c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8012f1a:	b192      	cbz	r2, 8012f42 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	4620      	mov	r0, r4
 8012f20:	699b      	ldr	r3, [r3, #24]
 8012f22:	4798      	blx	r3
 8012f24:	88e2      	ldrh	r2, [r4, #6]
 8012f26:	88a1      	ldrh	r1, [r4, #4]
 8012f28:	4620      	mov	r0, r4
 8012f2a:	4432      	add	r2, r6
 8012f2c:	4429      	add	r1, r5
 8012f2e:	b212      	sxth	r2, r2
 8012f30:	b209      	sxth	r1, r1
 8012f32:	f7fb fe4f 	bl	800ebd4 <_ZN8touchgfx8Drawable5setXYEss>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	4620      	mov	r0, r4
 8012f3a:	699b      	ldr	r3, [r3, #24]
 8012f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f40:	4718      	bx	r3
 8012f42:	bd70      	pop	{r4, r5, r6, pc}

08012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8012f44:	b510      	push	{r4, lr}
 8012f46:	2300      	movs	r3, #0
 8012f48:	4604      	mov	r4, r0
 8012f4a:	4608      	mov	r0, r1
 8012f4c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8012f50:	8023      	strh	r3, [r4, #0]
 8012f52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012f56:	8063      	strh	r3, [r4, #2]
 8012f58:	6803      	ldr	r3, [r0, #0]
 8012f5a:	80a1      	strh	r1, [r4, #4]
 8012f5c:	4621      	mov	r1, r4
 8012f5e:	80e2      	strh	r2, [r4, #6]
 8012f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f62:	4798      	blx	r3
 8012f64:	4620      	mov	r0, r4
 8012f66:	bd10      	pop	{r4, pc}

08012f68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8012f68:	b530      	push	{r4, r5, lr}
 8012f6a:	8083      	strh	r3, [r0, #4]
 8012f6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012f70:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012f74:	80c3      	strh	r3, [r0, #6]
 8012f76:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012f7a:	6141      	str	r1, [r0, #20]
 8012f7c:	7203      	strb	r3, [r0, #8]
 8012f7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012f82:	8302      	strh	r2, [r0, #24]
 8012f84:	7243      	strb	r3, [r0, #9]
 8012f86:	7a83      	ldrb	r3, [r0, #10]
 8012f88:	f365 0306 	bfi	r3, r5, #0, #7
 8012f8c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8012f90:	f365 13c7 	bfi	r3, r5, #7, #1
 8012f94:	7283      	strb	r3, [r0, #10]
 8012f96:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012f9a:	72c3      	strb	r3, [r0, #11]
 8012f9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012fa0:	7303      	strb	r3, [r0, #12]
 8012fa2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8012fa6:	81c3      	strh	r3, [r0, #14]
 8012fa8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8012fac:	8203      	strh	r3, [r0, #16]
 8012fae:	4b01      	ldr	r3, [pc, #4]	@ (8012fb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8012fb0:	6003      	str	r3, [r0, #0]
 8012fb2:	bd30      	pop	{r4, r5, pc}
 8012fb4:	08029988 	.word	0x08029988

08012fb8 <_ZNK8touchgfx9ConstFont4findEt>:
 8012fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fba:	6944      	ldr	r4, [r0, #20]
 8012fbc:	b3bc      	cbz	r4, 801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012fbe:	88a3      	ldrh	r3, [r4, #4]
 8012fc0:	8b02      	ldrh	r2, [r0, #24]
 8012fc2:	1acb      	subs	r3, r1, r3
 8012fc4:	f102 32ff 	add.w	r2, r2, #4294967295
 8012fc8:	d431      	bmi.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	dd0c      	ble.n	8012fe8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8012fce:	230e      	movs	r3, #14
 8012fd0:	fb03 4302 	mla	r3, r3, r2, r4
 8012fd4:	889b      	ldrh	r3, [r3, #4]
 8012fd6:	1a5b      	subs	r3, r3, r1
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	db27      	blt.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	bfbc      	itt	lt
 8012fe2:	2302      	movlt	r3, #2
 8012fe4:	fb92 f3f3 	sdivlt	r3, r2, r3
 8012fe8:	2500      	movs	r5, #0
 8012fea:	260e      	movs	r6, #14
 8012fec:	4295      	cmp	r5, r2
 8012fee:	dc1e      	bgt.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012ff0:	fb06 4003 	mla	r0, r6, r3, r4
 8012ff4:	8887      	ldrh	r7, [r0, #4]
 8012ff6:	42b9      	cmp	r1, r7
 8012ff8:	d01a      	beq.n	8013030 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8012ffa:	d20d      	bcs.n	8013018 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8012ffc:	1e5a      	subs	r2, r3, #1
 8012ffe:	4295      	cmp	r5, r2
 8013000:	dc15      	bgt.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013002:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013006:	1a5b      	subs	r3, r3, r1
 8013008:	1ad3      	subs	r3, r2, r3
 801300a:	429a      	cmp	r2, r3
 801300c:	db0f      	blt.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801300e:	429d      	cmp	r5, r3
 8013010:	ddec      	ble.n	8012fec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013012:	1953      	adds	r3, r2, r5
 8013014:	105b      	asrs	r3, r3, #1
 8013016:	e7e9      	b.n	8012fec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013018:	1c5d      	adds	r5, r3, #1
 801301a:	42aa      	cmp	r2, r5
 801301c:	db07      	blt.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801301e:	8a43      	ldrh	r3, [r0, #18]
 8013020:	1acb      	subs	r3, r1, r3
 8013022:	442b      	add	r3, r5
 8013024:	429d      	cmp	r5, r3
 8013026:	dc02      	bgt.n	801302e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013028:	429a      	cmp	r2, r3
 801302a:	dadf      	bge.n	8012fec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801302c:	e7f1      	b.n	8013012 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801302e:	2000      	movs	r0, #0
 8013030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013032 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013034:	4604      	mov	r4, r0
 8013036:	4617      	mov	r7, r2
 8013038:	461e      	mov	r6, r3
 801303a:	b911      	cbnz	r1, 8013042 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801303c:	2500      	movs	r5, #0
 801303e:	4628      	mov	r0, r5
 8013040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013042:	290a      	cmp	r1, #10
 8013044:	d0fa      	beq.n	801303c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013046:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801304a:	4291      	cmp	r1, r2
 801304c:	d0f6      	beq.n	801303c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801304e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013052:	4291      	cmp	r1, r2
 8013054:	d0f2      	beq.n	801303c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013056:	f7ff ffaf 	bl	8012fb8 <_ZNK8touchgfx9ConstFont4findEt>
 801305a:	4605      	mov	r5, r0
 801305c:	b950      	cbnz	r0, 8013074 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	4620      	mov	r0, r4
 8013062:	691b      	ldr	r3, [r3, #16]
 8013064:	4798      	blx	r3
 8013066:	4601      	mov	r1, r0
 8013068:	4620      	mov	r0, r4
 801306a:	f7ff ffa5 	bl	8012fb8 <_ZNK8touchgfx9ConstFont4findEt>
 801306e:	4605      	mov	r5, r0
 8013070:	2800      	cmp	r0, #0
 8013072:	d0e3      	beq.n	801303c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013074:	6823      	ldr	r3, [r4, #0]
 8013076:	4629      	mov	r1, r5
 8013078:	4620      	mov	r0, r4
 801307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801307c:	4798      	blx	r3
 801307e:	6038      	str	r0, [r7, #0]
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	4620      	mov	r0, r4
 8013084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013086:	4798      	blx	r3
 8013088:	7030      	strb	r0, [r6, #0]
 801308a:	e7d8      	b.n	801303e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801308c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801308c:	2000      	movs	r0, #0
 801308e:	4770      	bx	lr

08013090 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013090:	2001      	movs	r0, #1
 8013092:	4770      	bx	lr

08013094 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013094:	2002      	movs	r0, #2
 8013096:	4770      	bx	lr

08013098 <_ZN8touchgfx6ScreenD1Ev>:
 8013098:	4770      	bx	lr

0801309a <_ZN8touchgfx6Screen11setupScreenEv>:
 801309a:	4770      	bx	lr

0801309c <_ZN8touchgfx12GestureEventD1Ev>:
 801309c:	4770      	bx	lr

0801309e <_ZN8touchgfx9DragEventD1Ev>:
 801309e:	4770      	bx	lr

080130a0 <_ZN8touchgfx10ClickEventD1Ev>:
 80130a0:	4770      	bx	lr

080130a2 <_ZN8touchgfx10ClickEventD0Ev>:
 80130a2:	b510      	push	{r4, lr}
 80130a4:	4604      	mov	r4, r0
 80130a6:	210c      	movs	r1, #12
 80130a8:	f00f fe5c 	bl	8022d64 <_ZdlPvj>
 80130ac:	4620      	mov	r0, r4
 80130ae:	bd10      	pop	{r4, pc}

080130b0 <_ZN8touchgfx9DragEventD0Ev>:
 80130b0:	b510      	push	{r4, lr}
 80130b2:	4604      	mov	r4, r0
 80130b4:	2110      	movs	r1, #16
 80130b6:	f00f fe55 	bl	8022d64 <_ZdlPvj>
 80130ba:	4620      	mov	r0, r4
 80130bc:	bd10      	pop	{r4, pc}

080130be <_ZN8touchgfx12GestureEventD0Ev>:
 80130be:	b510      	push	{r4, lr}
 80130c0:	4604      	mov	r4, r0
 80130c2:	210c      	movs	r1, #12
 80130c4:	f00f fe4e 	bl	8022d64 <_ZdlPvj>
 80130c8:	4620      	mov	r0, r4
 80130ca:	bd10      	pop	{r4, pc}

080130cc <_ZN8touchgfx6ScreenD0Ev>:
 80130cc:	b510      	push	{r4, lr}
 80130ce:	4604      	mov	r4, r0
 80130d0:	213c      	movs	r1, #60	@ 0x3c
 80130d2:	f00f fe47 	bl	8022d64 <_ZdlPvj>
 80130d6:	4620      	mov	r0, r4
 80130d8:	bd10      	pop	{r4, pc}
	...

080130dc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80130dc:	b530      	push	{r4, r5, lr}
 80130de:	460d      	mov	r5, r1
 80130e0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80130e2:	b087      	sub	sp, #28
 80130e4:	4604      	mov	r4, r0
 80130e6:	b301      	cbz	r1, 801312a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80130e8:	a801      	add	r0, sp, #4
 80130ea:	f7ff ff2b 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80130ee:	892a      	ldrh	r2, [r5, #8]
 80130f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80130f4:	7928      	ldrb	r0, [r5, #4]
 80130f6:	1ad2      	subs	r2, r2, r3
 80130f8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80130fa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80130fe:	441a      	add	r2, r3
 8013100:	896b      	ldrh	r3, [r5, #10]
 8013102:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013106:	f88d 0010 	strb.w	r0, [sp, #16]
 801310a:	1b5b      	subs	r3, r3, r5
 801310c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801310e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013110:	442b      	add	r3, r5
 8013112:	4d07      	ldr	r5, [pc, #28]	@ (8013130 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013114:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013118:	a903      	add	r1, sp, #12
 801311a:	9503      	str	r5, [sp, #12]
 801311c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013120:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013124:	6803      	ldr	r3, [r0, #0]
 8013126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013128:	4798      	blx	r3
 801312a:	b007      	add	sp, #28
 801312c:	bd30      	pop	{r4, r5, pc}
 801312e:	bf00      	nop
 8013130:	08029a18 	.word	0x08029a18

08013134 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013138:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801313a:	b08a      	sub	sp, #40	@ 0x28
 801313c:	4604      	mov	r4, r0
 801313e:	460d      	mov	r5, r1
 8013140:	b113      	cbz	r3, 8013148 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013142:	790b      	ldrb	r3, [r1, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d044      	beq.n	80131d2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013148:	f104 0804 	add.w	r8, r4, #4
 801314c:	a803      	add	r0, sp, #12
 801314e:	4641      	mov	r1, r8
 8013150:	f7ff fef8 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013154:	792b      	ldrb	r3, [r5, #4]
 8013156:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801315a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801315e:	b983      	cbnz	r3, 8013182 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013160:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8013164:	892a      	ldrh	r2, [r5, #8]
 8013166:	88e9      	ldrh	r1, [r5, #6]
 8013168:	4640      	mov	r0, r8
 801316a:	1b92      	subs	r2, r2, r6
 801316c:	9301      	str	r3, [sp, #4]
 801316e:	1bc9      	subs	r1, r1, r7
 8013170:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8013174:	b212      	sxth	r2, r2
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	b209      	sxth	r1, r1
 801317a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801317e:	f7fb f963 	bl	800e448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013182:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013184:	b329      	cbz	r1, 80131d2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013186:	a805      	add	r0, sp, #20
 8013188:	f7ff fedc 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801318c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013190:	792b      	ldrb	r3, [r5, #4]
 8013192:	a907      	add	r1, sp, #28
 8013194:	1abf      	subs	r7, r7, r2
 8013196:	88ea      	ldrh	r2, [r5, #6]
 8013198:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801319a:	4417      	add	r7, r2
 801319c:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801319e:	f88d 3020 	strb.w	r3, [sp, #32]
 80131a2:	4417      	add	r7, r2
 80131a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80131a8:	1ab6      	subs	r6, r6, r2
 80131aa:	892a      	ldrh	r2, [r5, #8]
 80131ac:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80131b0:	4416      	add	r6, r2
 80131b2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80131b4:	4416      	add	r6, r2
 80131b6:	4a08      	ldr	r2, [pc, #32]	@ (80131d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80131b8:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80131bc:	2600      	movs	r6, #0
 80131be:	9207      	str	r2, [sp, #28]
 80131c0:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80131c4:	6803      	ldr	r3, [r0, #0]
 80131c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131c8:	4798      	blx	r3
 80131ca:	792b      	ldrb	r3, [r5, #4]
 80131cc:	b10b      	cbz	r3, 80131d2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80131ce:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80131d2:	b00a      	add	sp, #40	@ 0x28
 80131d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d8:	080299f0 	.word	0x080299f0

080131dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80131dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e0:	460c      	mov	r4, r1
 80131e2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80131e4:	b088      	sub	sp, #32
 80131e6:	4605      	mov	r5, r0
 80131e8:	2900      	cmp	r1, #0
 80131ea:	d06d      	beq.n	80132c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80131ec:	4668      	mov	r0, sp
 80131ee:	f7ff fea9 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80131f2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80131f4:	88e3      	ldrh	r3, [r4, #6]
 80131f6:	f9bd 8000 	ldrsh.w	r8, [sp]
 80131fa:	440b      	add	r3, r1
 80131fc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013200:	b21b      	sxth	r3, r3
 8013202:	4543      	cmp	r3, r8
 8013204:	db31      	blt.n	801326a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013206:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801320a:	44c4      	add	ip, r8
 801320c:	fa0f fc8c 	sxth.w	ip, ip
 8013210:	4563      	cmp	r3, ip
 8013212:	da2a      	bge.n	801326a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013214:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8013216:	8926      	ldrh	r6, [r4, #8]
 8013218:	4416      	add	r6, r2
 801321a:	b236      	sxth	r6, r6
 801321c:	42be      	cmp	r6, r7
 801321e:	db24      	blt.n	801326a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013220:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013224:	4438      	add	r0, r7
 8013226:	b200      	sxth	r0, r0
 8013228:	4286      	cmp	r6, r0
 801322a:	da1e      	bge.n	801326a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801322c:	8963      	ldrh	r3, [r4, #10]
 801322e:	4419      	add	r1, r3
 8013230:	b209      	sxth	r1, r1
 8013232:	4541      	cmp	r1, r8
 8013234:	db08      	blt.n	8013248 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013236:	4561      	cmp	r1, ip
 8013238:	da06      	bge.n	8013248 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801323a:	89a3      	ldrh	r3, [r4, #12]
 801323c:	441a      	add	r2, r3
 801323e:	b212      	sxth	r2, r2
 8013240:	42ba      	cmp	r2, r7
 8013242:	db01      	blt.n	8013248 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013244:	4282      	cmp	r2, r0
 8013246:	db10      	blt.n	801326a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013248:	4b21      	ldr	r3, [pc, #132]	@ (80132d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801324a:	a904      	add	r1, sp, #16
 801324c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801324e:	9304      	str	r3, [sp, #16]
 8013250:	2302      	movs	r3, #2
 8013252:	f88d 3014 	strb.w	r3, [sp, #20]
 8013256:	2300      	movs	r3, #0
 8013258:	f8ad 3016 	strh.w	r3, [sp, #22]
 801325c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013260:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013264:	6803      	ldr	r3, [r0, #0]
 8013266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013268:	4798      	blx	r3
 801326a:	1d29      	adds	r1, r5, #4
 801326c:	a802      	add	r0, sp, #8
 801326e:	f7ff fe69 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013272:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013276:	88e0      	ldrh	r0, [r4, #6]
 8013278:	eba3 0808 	sub.w	r8, r3, r8
 801327c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013280:	7921      	ldrb	r1, [r4, #4]
 8013282:	fa1f f888 	uxth.w	r8, r8
 8013286:	1bdf      	subs	r7, r3, r7
 8013288:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801328c:	b2bb      	uxth	r3, r7
 801328e:	4440      	add	r0, r8
 8013290:	8922      	ldrh	r2, [r4, #8]
 8013292:	8967      	ldrh	r7, [r4, #10]
 8013294:	4460      	add	r0, ip
 8013296:	89a4      	ldrh	r4, [r4, #12]
 8013298:	441a      	add	r2, r3
 801329a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801329c:	44b8      	add	r8, r7
 801329e:	4423      	add	r3, r4
 80132a0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80132a4:	4432      	add	r2, r6
 80132a6:	44e0      	add	r8, ip
 80132a8:	4433      	add	r3, r6
 80132aa:	4c0a      	ldr	r4, [pc, #40]	@ (80132d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80132ac:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80132ae:	f88d 1014 	strb.w	r1, [sp, #20]
 80132b2:	a904      	add	r1, sp, #16
 80132b4:	9404      	str	r4, [sp, #16]
 80132b6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80132ba:	f8ad 801a 	strh.w	r8, [sp, #26]
 80132be:	f8ad 301c 	strh.w	r3, [sp, #28]
 80132c2:	6803      	ldr	r3, [r0, #0]
 80132c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132c6:	4798      	blx	r3
 80132c8:	b008      	add	sp, #32
 80132ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ce:	bf00      	nop
 80132d0:	080299f0 	.word	0x080299f0
 80132d4:	08029a04 	.word	0x08029a04

080132d8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80132d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132da:	4604      	mov	r4, r0
 80132dc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80132e0:	3201      	adds	r2, #1
 80132e2:	d112      	bne.n	801330a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80132e4:	2500      	movs	r5, #0
 80132e6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80132ea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80132ee:	6803      	ldr	r3, [r0, #0]
 80132f0:	9500      	str	r5, [sp, #0]
 80132f2:	466d      	mov	r5, sp
 80132f4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80132f8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80132fc:	4629      	mov	r1, r5
 80132fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013300:	4798      	blx	r3
 8013302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013306:	e884 0003 	stmia.w	r4, {r0, r1}
 801330a:	4620      	mov	r0, r4
 801330c:	b003      	add	sp, #12
 801330e:	bd30      	pop	{r4, r5, pc}

08013310 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8013310:	b513      	push	{r0, r1, r4, lr}
 8013312:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8013316:	4604      	mov	r4, r0
 8013318:	3301      	adds	r3, #1
 801331a:	d109      	bne.n	8013330 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801331c:	4601      	mov	r1, r0
 801331e:	4668      	mov	r0, sp
 8013320:	f7ff fe10 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013324:	f8bd 3000 	ldrh.w	r3, [sp]
 8013328:	8423      	strh	r3, [r4, #32]
 801332a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801332e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8013330:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013334:	b002      	add	sp, #8
 8013336:	bd10      	pop	{r4, pc}

08013338 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013338:	b513      	push	{r0, r1, r4, lr}
 801333a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801333e:	4604      	mov	r4, r0
 8013340:	3301      	adds	r3, #1
 8013342:	d109      	bne.n	8013358 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013344:	4601      	mov	r1, r0
 8013346:	4668      	mov	r0, sp
 8013348:	f7ff fdfc 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801334c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013350:	8423      	strh	r3, [r4, #32]
 8013352:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013356:	8463      	strh	r3, [r4, #34]	@ 0x22
 8013358:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801335c:	b002      	add	sp, #8
 801335e:	bd10      	pop	{r4, pc}

08013360 <_ZN8touchgfx6ScreenC1Ev>:
 8013360:	b570      	push	{r4, r5, r6, lr}
 8013362:	4b17      	ldr	r3, [pc, #92]	@ (80133c0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8013364:	4605      	mov	r5, r0
 8013366:	4a17      	ldr	r2, [pc, #92]	@ (80133c4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013368:	2101      	movs	r1, #1
 801336a:	f845 3b04 	str.w	r3, [r5], #4
 801336e:	2300      	movs	r3, #0
 8013370:	6042      	str	r2, [r0, #4]
 8013372:	4604      	mov	r4, r0
 8013374:	8103      	strh	r3, [r0, #8]
 8013376:	8143      	strh	r3, [r0, #10]
 8013378:	8183      	strh	r3, [r0, #12]
 801337a:	81c3      	strh	r3, [r0, #14]
 801337c:	8203      	strh	r3, [r0, #16]
 801337e:	8243      	strh	r3, [r0, #18]
 8013380:	8283      	strh	r3, [r0, #20]
 8013382:	82c3      	strh	r3, [r0, #22]
 8013384:	6203      	str	r3, [r0, #32]
 8013386:	8483      	strh	r3, [r0, #36]	@ 0x24
 8013388:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801338a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801338e:	6343      	str	r3, [r0, #52]	@ 0x34
 8013390:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8013394:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013398:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801339c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80133a0:	4b09      	ldr	r3, [pc, #36]	@ (80133c8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80133a2:	4628      	mov	r0, r5
 80133a4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80133a8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80133aa:	4a08      	ldr	r2, [pc, #32]	@ (80133cc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80133ac:	f9b2 1000 	ldrsh.w	r1, [r2]
 80133b0:	4798      	blx	r3
 80133b2:	6863      	ldr	r3, [r4, #4]
 80133b4:	4628      	mov	r0, r5
 80133b6:	4631      	mov	r1, r6
 80133b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133ba:	4798      	blx	r3
 80133bc:	4620      	mov	r0, r4
 80133be:	bd70      	pop	{r4, r5, r6, pc}
 80133c0:	08029a2c 	.word	0x08029a2c
 80133c4:	0802969c 	.word	0x0802969c
 80133c8:	2400aa7a 	.word	0x2400aa7a
 80133cc:	2400aa78 	.word	0x2400aa78

080133d0 <_ZN8touchgfx6Screen4drawEv>:
 80133d0:	4b09      	ldr	r3, [pc, #36]	@ (80133f8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80133d2:	b507      	push	{r0, r1, r2, lr}
 80133d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133d8:	2100      	movs	r1, #0
 80133da:	4b08      	ldr	r3, [pc, #32]	@ (80133fc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80133dc:	9100      	str	r1, [sp, #0]
 80133de:	4669      	mov	r1, sp
 80133e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80133e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80133ec:	6803      	ldr	r3, [r0, #0]
 80133ee:	689b      	ldr	r3, [r3, #8]
 80133f0:	4798      	blx	r3
 80133f2:	b003      	add	sp, #12
 80133f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80133f8:	2400aa78 	.word	0x2400aa78
 80133fc:	2400aa7a 	.word	0x2400aa7a

08013400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8013400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013404:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013408:	b089      	sub	sp, #36	@ 0x24
 801340a:	4680      	mov	r8, r0
 801340c:	460c      	mov	r4, r1
 801340e:	2b00      	cmp	r3, #0
 8013410:	4615      	mov	r5, r2
 8013412:	dd0e      	ble.n	8013432 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013414:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013418:	2b00      	cmp	r3, #0
 801341a:	dd0a      	ble.n	8013432 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801341c:	4628      	mov	r0, r5
 801341e:	f7ff ff5b 	bl	80132d8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013422:	4621      	mov	r1, r4
 8013424:	f7fe fb9b 	bl	8011b5e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013428:	69eb      	ldr	r3, [r5, #28]
 801342a:	b928      	cbnz	r0, 8013438 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801342c:	461d      	mov	r5, r3
 801342e:	2b00      	cmp	r3, #0
 8013430:	d1f4      	bne.n	801341c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8013432:	b009      	add	sp, #36	@ 0x24
 8013434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013438:	ae04      	add	r6, sp, #16
 801343a:	2b00      	cmp	r3, #0
 801343c:	f000 80b5 	beq.w	80135aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013440:	682b      	ldr	r3, [r5, #0]
 8013442:	4629      	mov	r1, r5
 8013444:	a802      	add	r0, sp, #8
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	4798      	blx	r3
 801344a:	4628      	mov	r0, r5
 801344c:	f7ff ff60 	bl	8013310 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013450:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013454:	4407      	add	r7, r0
 8013456:	4628      	mov	r0, r5
 8013458:	f7ff ff6e 	bl	8013338 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801345c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013460:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013464:	b23f      	sxth	r7, r7
 8013466:	4418      	add	r0, r3
 8013468:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801346c:	4621      	mov	r1, r4
 801346e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013472:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013476:	4630      	mov	r0, r6
 8013478:	f8ad 3016 	strh.w	r3, [sp, #22]
 801347c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8013480:	f7fb f8c4 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 8013484:	4628      	mov	r0, r5
 8013486:	f7ff ff27 	bl	80132d8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801348a:	ab06      	add	r3, sp, #24
 801348c:	4602      	mov	r2, r0
 801348e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013492:	e883 0003 	stmia.w	r3, {r0, r1}
 8013496:	4611      	mov	r1, r2
 8013498:	4618      	mov	r0, r3
 801349a:	f7fb f8b7 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 801349e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80134a2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80134a6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80134aa:	4299      	cmp	r1, r3
 80134ac:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80134b0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80134b4:	d10b      	bne.n	80134ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80134b6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80134ba:	4552      	cmp	r2, sl
 80134bc:	d107      	bne.n	80134ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80134be:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80134c2:	455a      	cmp	r2, fp
 80134c4:	d103      	bne.n	80134ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80134c6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80134ca:	454a      	cmp	r2, r9
 80134cc:	d06d      	beq.n	80135aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80134ce:	f1bb 0f00 	cmp.w	fp, #0
 80134d2:	dd65      	ble.n	80135a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80134d4:	f1b9 0f00 	cmp.w	r9, #0
 80134d8:	dd62      	ble.n	80135a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80134da:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80134de:	fa1f f08a 	uxth.w	r0, sl
 80134e2:	4552      	cmp	r2, sl
 80134e4:	9000      	str	r0, [sp, #0]
 80134e6:	da12      	bge.n	801350e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	9b00      	ldr	r3, [sp, #0]
 80134ec:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80134f0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80134f4:	1a9a      	subs	r2, r3, r2
 80134f6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80134fa:	4631      	mov	r1, r6
 80134fc:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013500:	4640      	mov	r0, r8
 8013502:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013506:	69ea      	ldr	r2, [r5, #28]
 8013508:	f7ff ff7a 	bl	8013400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801350c:	9b01      	ldr	r3, [sp, #4]
 801350e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013512:	b29f      	uxth	r7, r3
 8013514:	429a      	cmp	r2, r3
 8013516:	da0d      	bge.n	8013534 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8013518:	f8ad 2010 	strh.w	r2, [sp, #16]
 801351c:	1aba      	subs	r2, r7, r2
 801351e:	f8ad a012 	strh.w	sl, [sp, #18]
 8013522:	4631      	mov	r1, r6
 8013524:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013528:	4640      	mov	r0, r8
 801352a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801352e:	69ea      	ldr	r2, [r5, #28]
 8013530:	f7ff ff66 	bl	8013400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013534:	8822      	ldrh	r2, [r4, #0]
 8013536:	445f      	add	r7, fp
 8013538:	88a3      	ldrh	r3, [r4, #4]
 801353a:	b2bf      	uxth	r7, r7
 801353c:	4413      	add	r3, r2
 801353e:	b23a      	sxth	r2, r7
 8013540:	b29b      	uxth	r3, r3
 8013542:	b219      	sxth	r1, r3
 8013544:	4291      	cmp	r1, r2
 8013546:	dd0d      	ble.n	8013564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8013548:	1bdb      	subs	r3, r3, r7
 801354a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801354e:	f8ad a012 	strh.w	sl, [sp, #18]
 8013552:	4631      	mov	r1, r6
 8013554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013558:	4640      	mov	r0, r8
 801355a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801355e:	69ea      	ldr	r2, [r5, #28]
 8013560:	f7ff ff4e 	bl	8013400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013564:	88e2      	ldrh	r2, [r4, #6]
 8013566:	8863      	ldrh	r3, [r4, #2]
 8013568:	4413      	add	r3, r2
 801356a:	9a00      	ldr	r2, [sp, #0]
 801356c:	444a      	add	r2, r9
 801356e:	b29b      	uxth	r3, r3
 8013570:	fa1f f982 	uxth.w	r9, r2
 8013574:	b219      	sxth	r1, r3
 8013576:	fa0f f289 	sxth.w	r2, r9
 801357a:	428a      	cmp	r2, r1
 801357c:	da15      	bge.n	80135aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801357e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013582:	eba3 0309 	sub.w	r3, r3, r9
 8013586:	f9b4 0000 	ldrsh.w	r0, [r4]
 801358a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801358e:	4631      	mov	r1, r6
 8013590:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013594:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013598:	f8ad 3016 	strh.w	r3, [sp, #22]
 801359c:	69ea      	ldr	r2, [r5, #28]
 801359e:	e001      	b.n	80135a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80135a0:	69ea      	ldr	r2, [r5, #28]
 80135a2:	4621      	mov	r1, r4
 80135a4:	4640      	mov	r0, r8
 80135a6:	f7ff ff2b 	bl	8013400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80135aa:	4628      	mov	r0, r5
 80135ac:	f7ff fe94 	bl	80132d8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80135b0:	6861      	ldr	r1, [r4, #4]
 80135b2:	4602      	mov	r2, r0
 80135b4:	4633      	mov	r3, r6
 80135b6:	6820      	ldr	r0, [r4, #0]
 80135b8:	c303      	stmia	r3!, {r0, r1}
 80135ba:	4611      	mov	r1, r2
 80135bc:	4630      	mov	r0, r6
 80135be:	f7fb f825 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 80135c2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f77f af33 	ble.w	8013432 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80135cc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f77f af2e 	ble.w	8013432 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80135d6:	4628      	mov	r0, r5
 80135d8:	f7ff fe9a 	bl	8013310 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80135dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80135e0:	1a18      	subs	r0, r3, r0
 80135e2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80135e6:	4628      	mov	r0, r5
 80135e8:	f7ff fea6 	bl	8013338 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80135ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80135f0:	4631      	mov	r1, r6
 80135f2:	1a18      	subs	r0, r3, r0
 80135f4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80135f8:	4628      	mov	r0, r5
 80135fa:	682b      	ldr	r3, [r5, #0]
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	4798      	blx	r3
 8013600:	e717      	b.n	8013432 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08013602 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8013602:	b570      	push	{r4, r5, r6, lr}
 8013604:	1d06      	adds	r6, r0, #4
 8013606:	b086      	sub	sp, #24
 8013608:	460c      	mov	r4, r1
 801360a:	2300      	movs	r3, #0
 801360c:	4631      	mov	r1, r6
 801360e:	4605      	mov	r5, r0
 8013610:	a802      	add	r0, sp, #8
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	f7ff fc96 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013618:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801361c:	8822      	ldrh	r2, [r4, #0]
 801361e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8013622:	1ad2      	subs	r2, r2, r3
 8013624:	8863      	ldrh	r3, [r4, #2]
 8013626:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801362a:	1a5b      	subs	r3, r3, r1
 801362c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013630:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013634:	aa01      	add	r2, sp, #4
 8013636:	f8ad 0014 	strh.w	r0, [sp, #20]
 801363a:	4630      	mov	r0, r6
 801363c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013640:	a904      	add	r1, sp, #16
 8013642:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013646:	f7fb f8b9 	bl	800e7bc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801364a:	9a01      	ldr	r2, [sp, #4]
 801364c:	b11a      	cbz	r2, 8013656 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801364e:	4621      	mov	r1, r4
 8013650:	4628      	mov	r0, r5
 8013652:	f7ff fed5 	bl	8013400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013656:	b006      	add	sp, #24
 8013658:	bd70      	pop	{r4, r5, r6, pc}

0801365a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801365a:	4602      	mov	r2, r0
 801365c:	b530      	push	{r4, r5, lr}
 801365e:	4604      	mov	r4, r0
 8013660:	b085      	sub	sp, #20
 8013662:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8013666:	460d      	mov	r5, r1
 8013668:	466b      	mov	r3, sp
 801366a:	6851      	ldr	r1, [r2, #4]
 801366c:	c303      	stmia	r3!, {r0, r1}
 801366e:	4629      	mov	r1, r5
 8013670:	4668      	mov	r0, sp
 8013672:	f7fa ffcb 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 8013676:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801367a:	b12b      	cbz	r3, 8013688 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801367c:	4669      	mov	r1, sp
 801367e:	4620      	mov	r0, r4
 8013680:	f7ff ffbf 	bl	8013602 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8013684:	b005      	add	sp, #20
 8013686:	bd30      	pop	{r4, r5, pc}
 8013688:	3404      	adds	r4, #4
 801368a:	a802      	add	r0, sp, #8
 801368c:	4621      	mov	r1, r4
 801368e:	f7ff fc59 	bl	8012f44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013692:	f8bd 3000 	ldrh.w	r3, [sp]
 8013696:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801369a:	4669      	mov	r1, sp
 801369c:	4620      	mov	r0, r4
 801369e:	1a9b      	subs	r3, r3, r2
 80136a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80136a4:	f8ad 3000 	strh.w	r3, [sp]
 80136a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80136ac:	1a9b      	subs	r3, r3, r2
 80136ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 80136b2:	f7fb f84a 	bl	800e74a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80136b6:	e7e5      	b.n	8013684 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080136b8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80136b8:	460b      	mov	r3, r1
 80136ba:	680a      	ldr	r2, [r1, #0]
 80136bc:	1d01      	adds	r1, r0, #4
 80136be:	6992      	ldr	r2, [r2, #24]
 80136c0:	4618      	mov	r0, r3
 80136c2:	4710      	bx	r2

080136c4 <_ZN8touchgfx12TextProviderC1Ev>:
 80136c4:	b538      	push	{r3, r4, r5, lr}
 80136c6:	2500      	movs	r5, #0
 80136c8:	2302      	movs	r3, #2
 80136ca:	4604      	mov	r4, r0
 80136cc:	220e      	movs	r2, #14
 80136ce:	7403      	strb	r3, [r0, #16]
 80136d0:	4629      	mov	r1, r5
 80136d2:	6145      	str	r5, [r0, #20]
 80136d4:	7605      	strb	r5, [r0, #24]
 80136d6:	83c5      	strh	r5, [r0, #30]
 80136d8:	8405      	strh	r5, [r0, #32]
 80136da:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80136dc:	8705      	strh	r5, [r0, #56]	@ 0x38
 80136de:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80136e0:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80136e4:	e9c0 5500 	strd	r5, r5, [r0]
 80136e8:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80136ec:	304c      	adds	r0, #76	@ 0x4c
 80136ee:	f010 fcd7 	bl	80240a0 <memset>
 80136f2:	2301      	movs	r3, #1
 80136f4:	4620      	mov	r0, r4
 80136f6:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80136fa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80136fe:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8013702:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8013706:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801370a:	f7f9 fe77 	bl	800d3fc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801370e:	4620      	mov	r0, r4
 8013710:	bd38      	pop	{r3, r4, r5, pc}

08013712 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8013712:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8013714:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013718:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801371a:	fab0 f080 	clz	r0, r0
 801371e:	0940      	lsrs	r0, r0, #5
 8013720:	4770      	bx	lr

08013722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8013722:	b530      	push	{r4, r5, lr}
 8013724:	2500      	movs	r5, #0
 8013726:	2401      	movs	r4, #1
 8013728:	6843      	ldr	r3, [r0, #4]
 801372a:	b913      	cbnz	r3, 8013732 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801372c:	6803      	ldr	r3, [r0, #0]
 801372e:	b313      	cbz	r3, 8013776 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8013730:	6043      	str	r3, [r0, #4]
 8013732:	7e03      	ldrb	r3, [r0, #24]
 8013734:	b143      	cbz	r3, 8013748 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8013736:	6943      	ldr	r3, [r0, #20]
 8013738:	b12b      	cbz	r3, 8013746 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801373a:	881a      	ldrh	r2, [r3, #0]
 801373c:	b11a      	cbz	r2, 8013746 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801373e:	1c9a      	adds	r2, r3, #2
 8013740:	6142      	str	r2, [r0, #20]
 8013742:	8818      	ldrh	r0, [r3, #0]
 8013744:	bd30      	pop	{r4, r5, pc}
 8013746:	7605      	strb	r5, [r0, #24]
 8013748:	6843      	ldr	r3, [r0, #4]
 801374a:	8819      	ldrh	r1, [r3, #0]
 801374c:	b199      	cbz	r1, 8013776 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801374e:	1c9a      	adds	r2, r3, #2
 8013750:	2902      	cmp	r1, #2
 8013752:	6042      	str	r2, [r0, #4]
 8013754:	d1f5      	bne.n	8013742 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8013756:	7c03      	ldrb	r3, [r0, #16]
 8013758:	2b01      	cmp	r3, #1
 801375a:	d8e5      	bhi.n	8013728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801375c:	1c5a      	adds	r2, r3, #1
 801375e:	3302      	adds	r3, #2
 8013760:	7402      	strb	r2, [r0, #16]
 8013762:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013766:	6143      	str	r3, [r0, #20]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d0dd      	beq.n	8013728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801376c:	881b      	ldrh	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d0da      	beq.n	8013728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013772:	7604      	strb	r4, [r0, #24]
 8013774:	e7d8      	b.n	8013728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013776:	2000      	movs	r0, #0
 8013778:	e7e4      	b.n	8013744 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801377a:	6001      	str	r1, [r0, #0]
 801377c:	2100      	movs	r1, #0
 801377e:	b430      	push	{r4, r5}
 8013780:	6041      	str	r1, [r0, #4]
 8013782:	6815      	ldr	r5, [r2, #0]
 8013784:	6085      	str	r5, [r0, #8]
 8013786:	6852      	ldr	r2, [r2, #4]
 8013788:	6443      	str	r3, [r0, #68]	@ 0x44
 801378a:	9b02      	ldr	r3, [sp, #8]
 801378c:	60c2      	str	r2, [r0, #12]
 801378e:	7401      	strb	r1, [r0, #16]
 8013790:	6141      	str	r1, [r0, #20]
 8013792:	7601      	strb	r1, [r0, #24]
 8013794:	8701      	strh	r1, [r0, #56]	@ 0x38
 8013796:	8401      	strh	r1, [r0, #32]
 8013798:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801379c:	6483      	str	r3, [r0, #72]	@ 0x48
 801379e:	bc30      	pop	{r4, r5}
 80137a0:	f7f9 be2c 	b.w	800d3fc <_ZN8touchgfx12TextProvider18initializeInternalEv>

080137a4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80137a4:	b408      	push	{r3}
 80137a6:	b510      	push	{r4, lr}
 80137a8:	b085      	sub	sp, #20
 80137aa:	ac07      	add	r4, sp, #28
 80137ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80137b0:	9300      	str	r3, [sp, #0]
 80137b2:	4613      	mov	r3, r2
 80137b4:	4622      	mov	r2, r4
 80137b6:	9403      	str	r4, [sp, #12]
 80137b8:	f7ff ffdf 	bl	801377a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80137bc:	b005      	add	sp, #20
 80137be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137c2:	b001      	add	sp, #4
 80137c4:	4770      	bx	lr

080137c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80137c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137c8:	4605      	mov	r5, r0
 80137ca:	4608      	mov	r0, r1
 80137cc:	b1f1      	cbz	r1, 801380c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80137ce:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80137d2:	460b      	mov	r3, r1
 80137d4:	f101 0708 	add.w	r7, r1, #8
 80137d8:	4622      	mov	r2, r4
 80137da:	6818      	ldr	r0, [r3, #0]
 80137dc:	3308      	adds	r3, #8
 80137de:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80137e2:	4626      	mov	r6, r4
 80137e4:	42bb      	cmp	r3, r7
 80137e6:	c603      	stmia	r6!, {r0, r1}
 80137e8:	4634      	mov	r4, r6
 80137ea:	d1f6      	bne.n	80137da <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80137ec:	6818      	ldr	r0, [r3, #0]
 80137ee:	6030      	str	r0, [r6, #0]
 80137f0:	4610      	mov	r0, r2
 80137f2:	889b      	ldrh	r3, [r3, #4]
 80137f4:	80b3      	strh	r3, [r6, #4]
 80137f6:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80137fa:	015b      	lsls	r3, r3, #5
 80137fc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8013800:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8013804:	430b      	orrs	r3, r1
 8013806:	425b      	negs	r3, r3
 8013808:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801380c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801380e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801380e:	b538      	push	{r3, r4, r5, lr}
 8013810:	460c      	mov	r4, r1
 8013812:	6811      	ldr	r1, [r2, #0]
 8013814:	4610      	mov	r0, r2
 8013816:	68cd      	ldr	r5, [r1, #12]
 8013818:	4619      	mov	r1, r3
 801381a:	47a8      	blx	r5
 801381c:	2800      	cmp	r0, #0
 801381e:	bf08      	it	eq
 8013820:	4620      	moveq	r0, r4
 8013822:	bd38      	pop	{r3, r4, r5, pc}

08013824 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8013824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013828:	468c      	mov	ip, r1
 801382a:	4605      	mov	r5, r0
 801382c:	4614      	mov	r4, r2
 801382e:	b942      	cbnz	r2, 8013842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8013830:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8013834:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8013838:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801383c:	4620      	mov	r0, r4
 801383e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013842:	7b50      	ldrb	r0, [r2, #13]
 8013844:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8013848:	8893      	ldrh	r3, [r2, #4]
 801384a:	0106      	lsls	r6, r0, #4
 801384c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8013850:	79e6      	ldrb	r6, [r4, #7]
 8013852:	4316      	orrs	r6, r2
 8013854:	185a      	adds	r2, r3, r1
 8013856:	b291      	uxth	r1, r2
 8013858:	b2b7      	uxth	r7, r6
 801385a:	291d      	cmp	r1, #29
 801385c:	d87f      	bhi.n	801395e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801385e:	2201      	movs	r2, #1
 8013860:	10f6      	asrs	r6, r6, #3
 8013862:	408a      	lsls	r2, r1
 8013864:	498b      	ldr	r1, [pc, #556]	@ (8013a94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8013866:	420a      	tst	r2, r1
 8013868:	d12e      	bne.n	80138c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801386a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801386e:	d076      	beq.n	801395e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8013870:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8013874:	4623      	mov	r3, r4
 8013876:	f104 0e08 	add.w	lr, r4, #8
 801387a:	4614      	mov	r4, r2
 801387c:	6818      	ldr	r0, [r3, #0]
 801387e:	3308      	adds	r3, #8
 8013880:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013884:	4694      	mov	ip, r2
 8013886:	4573      	cmp	r3, lr
 8013888:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801388c:	4662      	mov	r2, ip
 801388e:	d1f5      	bne.n	801387c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8013890:	6818      	ldr	r0, [r3, #0]
 8013892:	f8cc 0000 	str.w	r0, [ip]
 8013896:	889b      	ldrh	r3, [r3, #4]
 8013898:	f8ac 3004 	strh.w	r3, [ip, #4]
 801389c:	b2b3      	uxth	r3, r6
 801389e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80138a2:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80138a6:	1aca      	subs	r2, r1, r3
 80138a8:	1bcf      	subs	r7, r1, r7
 80138aa:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80138ae:	b292      	uxth	r2, r2
 80138b0:	1afb      	subs	r3, r7, r3
 80138b2:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80138b6:	10d2      	asrs	r2, r2, #3
 80138b8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80138bc:	4302      	orrs	r2, r0
 80138be:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80138c2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80138c6:	e7b9      	b.n	801383c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80138c8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80138cc:	4623      	mov	r3, r4
 80138ce:	f104 0808 	add.w	r8, r4, #8
 80138d2:	4614      	mov	r4, r2
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	3308      	adds	r3, #8
 80138d8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80138dc:	4696      	mov	lr, r2
 80138de:	4543      	cmp	r3, r8
 80138e0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80138e4:	4672      	mov	r2, lr
 80138e6:	d1f5      	bne.n	80138d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80138e8:	6818      	ldr	r0, [r3, #0]
 80138ea:	f8ce 0000 	str.w	r0, [lr]
 80138ee:	889b      	ldrh	r3, [r3, #4]
 80138f0:	f8ae 3004 	strh.w	r3, [lr, #4]
 80138f4:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80138f6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80138fa:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80138fc:	f640 6333 	movw	r3, #3635	@ 0xe33
 8013900:	4299      	cmp	r1, r3
 8013902:	d111      	bne.n	8013928 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8013904:	f8dc 3000 	ldr.w	r3, [ip]
 8013908:	4660      	mov	r0, ip
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	4798      	blx	r3
 801390e:	7b41      	ldrb	r1, [r0, #13]
 8013910:	00cb      	lsls	r3, r1, #3
 8013912:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013916:	7a03      	ldrb	r3, [r0, #8]
 8013918:	4313      	orrs	r3, r2
 801391a:	064a      	lsls	r2, r1, #25
 801391c:	bf44      	itt	mi
 801391e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013922:	b21b      	sxthmi	r3, r3
 8013924:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8013928:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801392c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8013930:	443b      	add	r3, r7
 8013932:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013936:	4433      	add	r3, r6
 8013938:	b29b      	uxth	r3, r3
 801393a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801393e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8013942:	10db      	asrs	r3, r3, #3
 8013944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013948:	4313      	orrs	r3, r2
 801394a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801394e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8013952:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8013956:	1a9b      	subs	r3, r3, r2
 8013958:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801395c:	e76e      	b.n	801383c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801395e:	f023 0204 	bic.w	r2, r3, #4
 8013962:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8013966:	428a      	cmp	r2, r1
 8013968:	d003      	beq.n	8013972 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801396a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801396e:	4293      	cmp	r3, r2
 8013970:	d138      	bne.n	80139e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8013972:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8013976:	4622      	mov	r2, r4
 8013978:	f104 0808 	add.w	r8, r4, #8
 801397c:	4634      	mov	r4, r6
 801397e:	6810      	ldr	r0, [r2, #0]
 8013980:	3208      	adds	r2, #8
 8013982:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8013986:	46b6      	mov	lr, r6
 8013988:	4542      	cmp	r2, r8
 801398a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801398e:	4676      	mov	r6, lr
 8013990:	d1f5      	bne.n	801397e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8013992:	6810      	ldr	r0, [r2, #0]
 8013994:	3b01      	subs	r3, #1
 8013996:	4621      	mov	r1, r4
 8013998:	f8ce 0000 	str.w	r0, [lr]
 801399c:	b29b      	uxth	r3, r3
 801399e:	8892      	ldrh	r2, [r2, #4]
 80139a0:	4628      	mov	r0, r5
 80139a2:	f8ae 2004 	strh.w	r2, [lr, #4]
 80139a6:	4662      	mov	r2, ip
 80139a8:	f7ff ff31 	bl	801380e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80139ac:	7b41      	ldrb	r1, [r0, #13]
 80139ae:	00cb      	lsls	r3, r1, #3
 80139b0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80139b4:	7a03      	ldrb	r3, [r0, #8]
 80139b6:	0648      	lsls	r0, r1, #25
 80139b8:	ea43 0302 	orr.w	r3, r3, r2
 80139bc:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80139c0:	bf44      	itt	mi
 80139c2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80139c6:	b21b      	sxthmi	r3, r3
 80139c8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80139cc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80139d6:	4313      	orrs	r3, r2
 80139d8:	115a      	asrs	r2, r3, #5
 80139da:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80139de:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80139e2:	e047      	b.n	8013a74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80139e4:	00c2      	lsls	r2, r0, #3
 80139e6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80139ea:	7a22      	ldrb	r2, [r4, #8]
 80139ec:	430a      	orrs	r2, r1
 80139ee:	0641      	lsls	r1, r0, #25
 80139f0:	f640 6109 	movw	r1, #3593	@ 0xe09
 80139f4:	bf44      	itt	mi
 80139f6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80139fa:	b212      	sxthmi	r2, r2
 80139fc:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8013a00:	f023 0210 	bic.w	r2, r3, #16
 8013a04:	428a      	cmp	r2, r1
 8013a06:	d003      	beq.n	8013a10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8013a08:	f640 6213 	movw	r2, #3603	@ 0xe13
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	d13e      	bne.n	8013a8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8013a10:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8013a14:	f104 0808 	add.w	r8, r4, #8
 8013a18:	4696      	mov	lr, r2
 8013a1a:	6820      	ldr	r0, [r4, #0]
 8013a1c:	3408      	adds	r4, #8
 8013a1e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8013a22:	4616      	mov	r6, r2
 8013a24:	4544      	cmp	r4, r8
 8013a26:	c603      	stmia	r6!, {r0, r1}
 8013a28:	4632      	mov	r2, r6
 8013a2a:	d1f6      	bne.n	8013a1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8013a2c:	6820      	ldr	r0, [r4, #0]
 8013a2e:	6030      	str	r0, [r6, #0]
 8013a30:	4628      	mov	r0, r5
 8013a32:	88a1      	ldrh	r1, [r4, #4]
 8013a34:	4674      	mov	r4, lr
 8013a36:	80b1      	strh	r1, [r6, #4]
 8013a38:	4671      	mov	r1, lr
 8013a3a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8013a3e:	0076      	lsls	r6, r6, #1
 8013a40:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8013a44:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8013a48:	4316      	orrs	r6, r2
 8013a4a:	f640 6213 	movw	r2, #3603	@ 0xe13
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	4662      	mov	r2, ip
 8013a52:	bf16      	itet	ne
 8013a54:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013a58:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8013a5c:	b29b      	uxthne	r3, r3
 8013a5e:	f7ff fed6 	bl	801380e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013a62:	7b43      	ldrb	r3, [r0, #13]
 8013a64:	7a82      	ldrb	r2, [r0, #10]
 8013a66:	005b      	lsls	r3, r3, #1
 8013a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a6c:	4313      	orrs	r3, r2
 8013a6e:	1af6      	subs	r6, r6, r3
 8013a70:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8013a74:	7b61      	ldrb	r1, [r4, #13]
 8013a76:	00cb      	lsls	r3, r1, #3
 8013a78:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013a7c:	7a23      	ldrb	r3, [r4, #8]
 8013a7e:	4313      	orrs	r3, r2
 8013a80:	064a      	lsls	r2, r1, #25
 8013a82:	bf44      	itt	mi
 8013a84:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013a88:	b21b      	sxthmi	r3, r3
 8013a8a:	1bdb      	subs	r3, r3, r7
 8013a8c:	e719      	b.n	80138c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	e7a5      	b.n	80139de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8013a92:	bf00      	nop
 8013a94:	3fc00079 	.word	0x3fc00079

08013a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8013a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a9c:	4604      	mov	r4, r0
 8013a9e:	b942      	cbnz	r2, 8013ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8013aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013aa4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8013aa8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8013aac:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8013ab0:	e047      	b.n	8013b42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8013ab2:	7b51      	ldrb	r1, [r2, #13]
 8013ab4:	8893      	ldrh	r3, [r2, #4]
 8013ab6:	010d      	lsls	r5, r1, #4
 8013ab8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8013abc:	79d5      	ldrb	r5, [r2, #7]
 8013abe:	4305      	orrs	r5, r0
 8013ac0:	2d04      	cmp	r5, #4
 8013ac2:	bfcc      	ite	gt
 8013ac4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8013ac8:	f04f 0e01 	movle.w	lr, #1
 8013acc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8013ad0:	f200 80ab 	bhi.w	8013c2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8013ad4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8013ad8:	4283      	cmp	r3, r0
 8013ada:	d216      	bcs.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013adc:	f240 605b 	movw	r0, #1627	@ 0x65b
 8013ae0:	4283      	cmp	r3, r0
 8013ae2:	d859      	bhi.n	8013b98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8013ae4:	f240 6057 	movw	r0, #1623	@ 0x657
 8013ae8:	4283      	cmp	r3, r0
 8013aea:	d20e      	bcs.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013aec:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8013af0:	d24a      	bcs.n	8013b88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8013af2:	f240 604e 	movw	r0, #1614	@ 0x64e
 8013af6:	4283      	cmp	r3, r0
 8013af8:	d207      	bcs.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013afa:	f240 601a 	movw	r0, #1562	@ 0x61a
 8013afe:	4283      	cmp	r3, r0
 8013b00:	d02a      	beq.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013b02:	d821      	bhi.n	8013b48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8013b04:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8013b08:	d35b      	bcc.n	8013bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013b0a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8013b0e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8013b12:	f040 80d0 	bne.w	8013cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013b16:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8013b1a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8013b1e:	f040 80ca 	bne.w	8013cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013b22:	00cb      	lsls	r3, r1, #3
 8013b24:	0649      	lsls	r1, r1, #25
 8013b26:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8013b2a:	7a13      	ldrb	r3, [r2, #8]
 8013b2c:	ea43 0300 	orr.w	r3, r3, r0
 8013b30:	bf44      	itt	mi
 8013b32:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013b36:	b21b      	sxthmi	r3, r3
 8013b38:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8013b3c:	1b5d      	subs	r5, r3, r5
 8013b3e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8013b42:	4610      	mov	r0, r2
 8013b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b48:	f240 604b 	movw	r0, #1611	@ 0x64b
 8013b4c:	4283      	cmp	r3, r0
 8013b4e:	d338      	bcc.n	8013bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013b50:	f240 604c 	movw	r0, #1612	@ 0x64c
 8013b54:	4283      	cmp	r3, r0
 8013b56:	d9d8      	bls.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013b58:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8013b5c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8013b60:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8013b64:	f040 80f3 	bne.w	8013d4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013b68:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8013b6c:	f040 80ef 	bne.w	8013d4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013b70:	00cb      	lsls	r3, r1, #3
 8013b72:	064e      	lsls	r6, r1, #25
 8013b74:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8013b78:	7a13      	ldrb	r3, [r2, #8]
 8013b7a:	ea43 0300 	orr.w	r3, r3, r0
 8013b7e:	bf44      	itt	mi
 8013b80:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013b84:	b21b      	sxthmi	r3, r3
 8013b86:	e7d9      	b.n	8013b3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8013b88:	f240 6054 	movw	r0, #1620	@ 0x654
 8013b8c:	4283      	cmp	r3, r0
 8013b8e:	d8e3      	bhi.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013b90:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8013b94:	d9e0      	bls.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013b96:	e7b8      	b.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013b98:	f240 6074 	movw	r0, #1652	@ 0x674
 8013b9c:	4283      	cmp	r3, r0
 8013b9e:	d0b4      	beq.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013ba0:	d82d      	bhi.n	8013bfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8013ba2:	f240 605e 	movw	r0, #1630	@ 0x65e
 8013ba6:	4283      	cmp	r3, r0
 8013ba8:	d804      	bhi.n	8013bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8013baa:	f240 605d 	movw	r0, #1629	@ 0x65d
 8013bae:	4283      	cmp	r3, r0
 8013bb0:	d3d2      	bcc.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013bb2:	e7aa      	b.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013bb4:	f240 605f 	movw	r0, #1631	@ 0x65f
 8013bb8:	4283      	cmp	r3, r0
 8013bba:	d0cd      	beq.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013bbc:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8013bc0:	d0a3      	beq.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013bc2:	00cb      	lsls	r3, r1, #3
 8013bc4:	0649      	lsls	r1, r1, #25
 8013bc6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8013bca:	7a13      	ldrb	r3, [r2, #8]
 8013bcc:	ea43 0300 	orr.w	r3, r3, r0
 8013bd0:	bf44      	itt	mi
 8013bd2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013bd6:	b21b      	sxthmi	r3, r3
 8013bd8:	1b5d      	subs	r5, r3, r5
 8013bda:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8013bde:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8013be2:	7b53      	ldrb	r3, [r2, #13]
 8013be4:	015b      	lsls	r3, r3, #5
 8013be6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8013bea:	7993      	ldrb	r3, [r2, #6]
 8013bec:	430b      	orrs	r3, r1
 8013bee:	2105      	movs	r1, #5
 8013bf0:	005b      	lsls	r3, r3, #1
 8013bf2:	fb93 f3f1 	sdiv	r3, r3, r1
 8013bf6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8013bfa:	440b      	add	r3, r1
 8013bfc:	e756      	b.n	8013aac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8013bfe:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8013c02:	4283      	cmp	r3, r0
 8013c04:	d809      	bhi.n	8013c1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8013c06:	f240 60df 	movw	r0, #1759	@ 0x6df
 8013c0a:	4283      	cmp	r3, r0
 8013c0c:	f4bf af7d 	bcs.w	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c10:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8013c14:	2b05      	cmp	r3, #5
 8013c16:	d8d4      	bhi.n	8013bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013c18:	e777      	b.n	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c1a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8013c1e:	4283      	cmp	r3, r0
 8013c20:	d09a      	beq.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c22:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8013c26:	4283      	cmp	r3, r0
 8013c28:	e7ca      	b.n	8013bc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8013c2a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8013c2e:	d22b      	bcs.n	8013c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8013c30:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8013c34:	4283      	cmp	r3, r0
 8013c36:	d28f      	bcs.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c38:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8013c3c:	4283      	cmp	r3, r0
 8013c3e:	d816      	bhi.n	8013c6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8013c40:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8013c44:	4283      	cmp	r3, r0
 8013c46:	f4bf af60 	bcs.w	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c4a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8013c4e:	4283      	cmp	r3, r0
 8013c50:	d80a      	bhi.n	8013c68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8013c52:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8013c56:	4283      	cmp	r3, r0
 8013c58:	f4bf af57 	bcs.w	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c5c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8013c60:	4283      	cmp	r3, r0
 8013c62:	f43f af79 	beq.w	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c66:	e7ac      	b.n	8013bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013c68:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8013c6c:	e7f8      	b.n	8013c60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8013c6e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8013c72:	4283      	cmp	r3, r0
 8013c74:	d802      	bhi.n	8013c7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8013c76:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8013c7a:	e798      	b.n	8013bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8013c7c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8013c80:	4283      	cmp	r3, r0
 8013c82:	f47f af42 	bne.w	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c86:	e767      	b.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c88:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8013c8c:	4283      	cmp	r3, r0
 8013c8e:	f43f af63 	beq.w	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c92:	d802      	bhi.n	8013c9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8013c94:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8013c98:	e7f2      	b.n	8013c80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8013c9a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8013c9e:	4283      	cmp	r3, r0
 8013ca0:	d805      	bhi.n	8013cae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8013ca2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8013ca6:	4283      	cmp	r3, r0
 8013ca8:	f4ff af2f 	bcc.w	8013b0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013cac:	e754      	b.n	8013b58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013cae:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8013cb2:	4283      	cmp	r3, r0
 8013cb4:	e7af      	b.n	8013c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8013cb6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8013cba:	4617      	mov	r7, r2
 8013cbc:	f102 0808 	add.w	r8, r2, #8
 8013cc0:	4666      	mov	r6, ip
 8013cc2:	6838      	ldr	r0, [r7, #0]
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013cca:	46e6      	mov	lr, ip
 8013ccc:	4547      	cmp	r7, r8
 8013cce:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8013cd2:	46f4      	mov	ip, lr
 8013cd4:	d1f5      	bne.n	8013cc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8013cd6:	6838      	ldr	r0, [r7, #0]
 8013cd8:	f8ce 0000 	str.w	r0, [lr]
 8013cdc:	88b9      	ldrh	r1, [r7, #4]
 8013cde:	f8ae 1004 	strh.w	r1, [lr, #4]
 8013ce2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8013ce6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8013cea:	d009      	beq.n	8013d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8013cec:	7b51      	ldrb	r1, [r2, #13]
 8013cee:	7992      	ldrb	r2, [r2, #6]
 8013cf0:	0149      	lsls	r1, r1, #5
 8013cf2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8013cf6:	4311      	orrs	r1, r2
 8013cf8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8013cfc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8013d00:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8013d04:	b2ad      	uxth	r5, r5
 8013d06:	d00d      	beq.n	8013d24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8013d08:	442b      	add	r3, r5
 8013d0a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013d14:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8013d18:	10db      	asrs	r3, r3, #3
 8013d1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8013d24:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8013d28:	00cb      	lsls	r3, r1, #3
 8013d2a:	064f      	lsls	r7, r1, #25
 8013d2c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013d30:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8013d34:	ea43 0302 	orr.w	r3, r3, r2
 8013d38:	bf44      	itt	mi
 8013d3a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013d3e:	b21b      	sxthmi	r3, r3
 8013d40:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8013d44:	1b5b      	subs	r3, r3, r5
 8013d46:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	e6f9      	b.n	8013b42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8013d4e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8013d52:	4617      	mov	r7, r2
 8013d54:	f102 0908 	add.w	r9, r2, #8
 8013d58:	4666      	mov	r6, ip
 8013d5a:	6838      	ldr	r0, [r7, #0]
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013d62:	46e0      	mov	r8, ip
 8013d64:	454f      	cmp	r7, r9
 8013d66:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8013d6a:	46c4      	mov	ip, r8
 8013d6c:	d1f5      	bne.n	8013d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8013d6e:	6838      	ldr	r0, [r7, #0]
 8013d70:	f8c8 0000 	str.w	r0, [r8]
 8013d74:	88b9      	ldrh	r1, [r7, #4]
 8013d76:	f8a8 1004 	strh.w	r1, [r8, #4]
 8013d7a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8013d7e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8013d82:	d009      	beq.n	8013d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8013d84:	7b51      	ldrb	r1, [r2, #13]
 8013d86:	7992      	ldrb	r2, [r2, #6]
 8013d88:	0149      	lsls	r1, r1, #5
 8013d8a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8013d8e:	4311      	orrs	r1, r2
 8013d90:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8013d94:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8013d98:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8013d9c:	d00e      	beq.n	8013dbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8013d9e:	eba3 030e 	sub.w	r3, r3, lr
 8013da2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013dac:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8013db0:	10db      	asrs	r3, r3, #3
 8013db2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013db6:	4313      	orrs	r3, r2
 8013db8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8013dbc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8013dc0:	00cb      	lsls	r3, r1, #3
 8013dc2:	0648      	lsls	r0, r1, #25
 8013dc4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013dc8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8013dcc:	ea43 0302 	orr.w	r3, r3, r2
 8013dd0:	bf44      	itt	mi
 8013dd2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013dd6:	b21b      	sxthmi	r3, r3
 8013dd8:	1b5d      	subs	r5, r3, r5
 8013dda:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8013dde:	e7b4      	b.n	8013d4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08013de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8013de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de4:	461e      	mov	r6, r3
 8013de6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8013de8:	4604      	mov	r4, r0
 8013dea:	4617      	mov	r7, r2
 8013dec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013df0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8013df4:	f7f9 fab2 	bl	800d35c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013df8:	4605      	mov	r5, r0
 8013dfa:	b918      	cbnz	r0, 8013e04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8013dfc:	6030      	str	r0, [r6, #0]
 8013dfe:	4628      	mov	r0, r5
 8013e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	4601      	mov	r1, r0
 8013e08:	4638      	mov	r0, r7
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	4798      	blx	r3
 8013e0e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8013e12:	4602      	mov	r2, r0
 8013e14:	6030      	str	r0, [r6, #0]
 8013e16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013e1a:	d213      	bcs.n	8013e44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8013e1c:	4643      	mov	r3, r8
 8013e1e:	4639      	mov	r1, r7
 8013e20:	4620      	mov	r0, r4
 8013e22:	f7ff fe39 	bl	8013a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013e26:	6030      	str	r0, [r6, #0]
 8013e28:	6833      	ldr	r3, [r6, #0]
 8013e2a:	b143      	cbz	r3, 8013e3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8013e2c:	7b5a      	ldrb	r2, [r3, #13]
 8013e2e:	7a9b      	ldrb	r3, [r3, #10]
 8013e30:	0052      	lsls	r2, r2, #1
 8013e32:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8013e36:	4313      	orrs	r3, r2
 8013e38:	bf0c      	ite	eq
 8013e3a:	2301      	moveq	r3, #1
 8013e3c:	2300      	movne	r3, #0
 8013e3e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8013e42:	e7dc      	b.n	8013dfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8013e44:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8013e4c:	d804      	bhi.n	8013e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8013e4e:	4639      	mov	r1, r7
 8013e50:	4620      	mov	r0, r4
 8013e52:	f7ff fce7 	bl	8013824 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013e56:	e7e6      	b.n	8013e26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013e58:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d0e3      	beq.n	8013e28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013e60:	f640 1302 	movw	r3, #2306	@ 0x902
 8013e64:	429d      	cmp	r5, r3
 8013e66:	d1df      	bne.n	8013e28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013e68:	4601      	mov	r1, r0
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f7ff fcab 	bl	80137c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013e70:	e7d9      	b.n	8013e26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08013e72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8013e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e76:	461e      	mov	r6, r3
 8013e78:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	4617      	mov	r7, r2
 8013e7e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013e82:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8013e86:	f7f9 fa69 	bl	800d35c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013e8a:	4605      	mov	r5, r0
 8013e8c:	b918      	cbnz	r0, 8013e96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8013e8e:	6030      	str	r0, [r6, #0]
 8013e90:	4628      	mov	r0, r5
 8013e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	4601      	mov	r1, r0
 8013e9a:	4638      	mov	r0, r7
 8013e9c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8013ea0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ea4:	47c8      	blx	r9
 8013ea6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8013eaa:	4602      	mov	r2, r0
 8013eac:	6030      	str	r0, [r6, #0]
 8013eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013eb2:	d213      	bcs.n	8013edc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8013eb4:	4643      	mov	r3, r8
 8013eb6:	4639      	mov	r1, r7
 8013eb8:	4620      	mov	r0, r4
 8013eba:	f7ff fded 	bl	8013a98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013ebe:	6030      	str	r0, [r6, #0]
 8013ec0:	6833      	ldr	r3, [r6, #0]
 8013ec2:	b143      	cbz	r3, 8013ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8013ec4:	7b5a      	ldrb	r2, [r3, #13]
 8013ec6:	7a9b      	ldrb	r3, [r3, #10]
 8013ec8:	0052      	lsls	r2, r2, #1
 8013eca:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	bf0c      	ite	eq
 8013ed2:	2301      	moveq	r3, #1
 8013ed4:	2300      	movne	r3, #0
 8013ed6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8013eda:	e7d9      	b.n	8013e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8013edc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ee4:	d804      	bhi.n	8013ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8013ee6:	4639      	mov	r1, r7
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f7ff fc9b 	bl	8013824 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013eee:	e7e6      	b.n	8013ebe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8013ef0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d0e3      	beq.n	8013ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013ef8:	f640 1302 	movw	r3, #2306	@ 0x902
 8013efc:	429d      	cmp	r5, r3
 8013efe:	d1df      	bne.n	8013ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013f00:	4601      	mov	r1, r0
 8013f02:	4620      	mov	r0, r4
 8013f04:	f7ff fc5f 	bl	80137c6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013f08:	e7d9      	b.n	8013ebe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08013f0a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8013f0a:	b510      	push	{r4, lr}
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8013f12:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8013f14:	b1e1      	cbz	r1, 8013f50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8013f16:	2b0a      	cmp	r3, #10
 8013f18:	d02d      	beq.n	8013f76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013f1a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8013f1c:	3901      	subs	r1, #1
 8013f1e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8013f22:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8013f24:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8013f28:	1c51      	adds	r1, r2, #1
 8013f2a:	b289      	uxth	r1, r1
 8013f2c:	2901      	cmp	r1, #1
 8013f2e:	bf8a      	itet	hi
 8013f30:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013f34:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8013f36:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8013f38:	1c5a      	adds	r2, r3, #1
 8013f3a:	8722      	strh	r2, [r4, #56]	@ 0x38
 8013f3c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013f3e:	4413      	add	r3, r2
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	2b09      	cmp	r3, #9
 8013f44:	bf88      	it	hi
 8013f46:	3b0a      	subhi	r3, #10
 8013f48:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013f4c:	8458      	strh	r0, [r3, #34]	@ 0x22
 8013f4e:	e7de      	b.n	8013f0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8013f50:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8013f52:	2b0a      	cmp	r3, #10
 8013f54:	d00f      	beq.n	8013f76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013f56:	4620      	mov	r0, r4
 8013f58:	f7ff fbe3 	bl	8013722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8013f5c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8013f5e:	1c5a      	adds	r2, r3, #1
 8013f60:	8722      	strh	r2, [r4, #56]	@ 0x38
 8013f62:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013f64:	4413      	add	r3, r2
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	2b09      	cmp	r3, #9
 8013f6a:	bf88      	it	hi
 8013f6c:	3b0a      	subhi	r3, #10
 8013f6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013f72:	8458      	strh	r0, [r3, #34]	@ 0x22
 8013f74:	e7ec      	b.n	8013f50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8013f76:	bd10      	pop	{r4, pc}

08013f78 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8013f78:	b538      	push	{r3, r4, r5, lr}
 8013f7a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8013f82:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8013f84:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8013f86:	3a01      	subs	r2, #1
 8013f88:	8702      	strh	r2, [r0, #56]	@ 0x38
 8013f8a:	1c5a      	adds	r2, r3, #1
 8013f8c:	b292      	uxth	r2, r2
 8013f8e:	2a09      	cmp	r2, #9
 8013f90:	bf8a      	itet	hi
 8013f92:	3b09      	subhi	r3, #9
 8013f94:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8013f96:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8013f98:	f7ff ffb7 	bl	8013f0a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013f9c:	8c23      	ldrh	r3, [r4, #32]
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	bf9c      	itt	ls
 8013fa2:	3301      	addls	r3, #1
 8013fa4:	8423      	strhls	r3, [r4, #32]
 8013fa6:	8be3      	ldrh	r3, [r4, #30]
 8013fa8:	b90b      	cbnz	r3, 8013fae <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8013faa:	2302      	movs	r3, #2
 8013fac:	83e3      	strh	r3, [r4, #30]
 8013fae:	8be3      	ldrh	r3, [r4, #30]
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	3b01      	subs	r3, #1
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	83e3      	strh	r3, [r4, #30]
 8013fb8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013fbc:	8365      	strh	r5, [r4, #26]
 8013fbe:	bd38      	pop	{r3, r4, r5, pc}

08013fc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8013fc0:	428a      	cmp	r2, r1
 8013fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fc6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8013fc8:	d932      	bls.n	8014030 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8013fca:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8013fcc:	1a54      	subs	r4, r2, r1
 8013fce:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8013fd2:	19ee      	adds	r6, r5, r7
 8013fd4:	fa1f fe84 	uxth.w	lr, r4
 8013fd8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8013fdc:	3e01      	subs	r6, #1
 8013fde:	b2b4      	uxth	r4, r6
 8013fe0:	eba4 090e 	sub.w	r9, r4, lr
 8013fe4:	fa1f f989 	uxth.w	r9, r9
 8013fe8:	2c09      	cmp	r4, #9
 8013fea:	4626      	mov	r6, r4
 8013fec:	bf88      	it	hi
 8013fee:	f1a4 060a 	subhi.w	r6, r4, #10
 8013ff2:	f1bc 0f00 	cmp.w	ip, #0
 8013ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8013ffa:	bf08      	it	eq
 8013ffc:	f04f 0c02 	moveq.w	ip, #2
 8014000:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014004:	b2a4      	uxth	r4, r4
 8014006:	f10c 3cff 	add.w	ip, ip, #4294967295
 801400a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801400e:	454c      	cmp	r4, r9
 8014010:	fa1f fc8c 	uxth.w	ip, ip
 8014014:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014018:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801401c:	d1e4      	bne.n	8013fe8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801401e:	eba5 050e 	sub.w	r5, r5, lr
 8014022:	eb0e 0408 	add.w	r4, lr, r8
 8014026:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801402a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801402c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8014030:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8014032:	250a      	movs	r5, #10
 8014034:	1a64      	subs	r4, r4, r1
 8014036:	4439      	add	r1, r7
 8014038:	b289      	uxth	r1, r1
 801403a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801403c:	2909      	cmp	r1, #9
 801403e:	bf88      	it	hi
 8014040:	390a      	subhi	r1, #10
 8014042:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014044:	b18a      	cbz	r2, 801406a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8014046:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8014048:	3a01      	subs	r2, #1
 801404a:	3101      	adds	r1, #1
 801404c:	b292      	uxth	r2, r2
 801404e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014052:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014054:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014056:	b901      	cbnz	r1, 801405a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8014058:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801405a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801405c:	3901      	subs	r1, #1
 801405e:	b289      	uxth	r1, r1
 8014060:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014062:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014066:	844c      	strh	r4, [r1, #34]	@ 0x22
 8014068:	e7ec      	b.n	8014044 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801406a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801406e:	f7ff bf4c 	b.w	8013f0a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014072 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014072:	b570      	push	{r4, r5, r6, lr}
 8014074:	2500      	movs	r5, #0
 8014076:	4295      	cmp	r5, r2
 8014078:	d011      	beq.n	801409e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801407a:	8bc4      	ldrh	r4, [r0, #30]
 801407c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014080:	4414      	add	r4, r2
 8014082:	3c01      	subs	r4, #1
 8014084:	1b64      	subs	r4, r4, r5
 8014086:	b2a4      	uxth	r4, r4
 8014088:	2c01      	cmp	r4, #1
 801408a:	bf88      	it	hi
 801408c:	3c02      	subhi	r4, #2
 801408e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014092:	8b64      	ldrh	r4, [r4, #26]
 8014094:	42b4      	cmp	r4, r6
 8014096:	d117      	bne.n	80140c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014098:	3501      	adds	r5, #1
 801409a:	b2ad      	uxth	r5, r5
 801409c:	e7eb      	b.n	8014076 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801409e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80140a2:	2400      	movs	r4, #0
 80140a4:	4413      	add	r3, r2
 80140a6:	b2a2      	uxth	r2, r4
 80140a8:	429a      	cmp	r2, r3
 80140aa:	da0f      	bge.n	80140cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80140ac:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80140ae:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80140b2:	3401      	adds	r4, #1
 80140b4:	4432      	add	r2, r6
 80140b6:	b292      	uxth	r2, r2
 80140b8:	2a09      	cmp	r2, #9
 80140ba:	bf88      	it	hi
 80140bc:	3a0a      	subhi	r2, #10
 80140be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80140c2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80140c4:	42aa      	cmp	r2, r5
 80140c6:	d0ee      	beq.n	80140a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80140c8:	2000      	movs	r0, #0
 80140ca:	bd70      	pop	{r4, r5, r6, pc}
 80140cc:	2001      	movs	r0, #1
 80140ce:	e7fc      	b.n	80140ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080140d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80140d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	4605      	mov	r5, r0
 80140d6:	4616      	mov	r6, r2
 80140d8:	1c8c      	adds	r4, r1, #2
 80140da:	8809      	ldrh	r1, [r1, #0]
 80140dc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80140e0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80140e4:	42b3      	cmp	r3, r6
 80140e6:	d124      	bne.n	8014132 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80140e8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80140ec:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80140f0:	f001 070f 	and.w	r7, r1, #15
 80140f4:	4652      	mov	r2, sl
 80140f6:	f8cd 8000 	str.w	r8, [sp]
 80140fa:	464b      	mov	r3, r9
 80140fc:	4621      	mov	r1, r4
 80140fe:	4628      	mov	r0, r5
 8014100:	f7ff ffb7 	bl	8014072 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014104:	4683      	mov	fp, r0
 8014106:	b168      	cbz	r0, 8014124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014108:	eb0a 0109 	add.w	r1, sl, r9
 801410c:	463a      	mov	r2, r7
 801410e:	4628      	mov	r0, r5
 8014110:	4441      	add	r1, r8
 8014112:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014116:	4649      	mov	r1, r9
 8014118:	f7ff ff52 	bl	8013fc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801411c:	4658      	mov	r0, fp
 801411e:	b003      	add	sp, #12
 8014120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014124:	eb07 010a 	add.w	r1, r7, sl
 8014128:	4449      	add	r1, r9
 801412a:	4441      	add	r1, r8
 801412c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014130:	e7d2      	b.n	80140d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014132:	f04f 0b00 	mov.w	fp, #0
 8014136:	e7f1      	b.n	801411c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014138 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014138:	b570      	push	{r4, r5, r6, lr}
 801413a:	8810      	ldrh	r0, [r2, #0]
 801413c:	4298      	cmp	r0, r3
 801413e:	d817      	bhi.n	8014170 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014140:	1e48      	subs	r0, r1, #1
 8014142:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014146:	4298      	cmp	r0, r3
 8014148:	d312      	bcc.n	8014170 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801414a:	2400      	movs	r4, #0
 801414c:	428c      	cmp	r4, r1
 801414e:	d20f      	bcs.n	8014170 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014150:	1860      	adds	r0, r4, r1
 8014152:	1040      	asrs	r0, r0, #1
 8014154:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014158:	0085      	lsls	r5, r0, #2
 801415a:	42b3      	cmp	r3, r6
 801415c:	d902      	bls.n	8014164 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801415e:	3001      	adds	r0, #1
 8014160:	b284      	uxth	r4, r0
 8014162:	e7f3      	b.n	801414c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014164:	d201      	bcs.n	801416a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014166:	b281      	uxth	r1, r0
 8014168:	e7f0      	b.n	801414c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801416a:	442a      	add	r2, r5
 801416c:	8850      	ldrh	r0, [r2, #2]
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	2000      	movs	r0, #0
 8014172:	e7fc      	b.n	801416e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014174 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014178:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801417a:	4604      	mov	r4, r0
 801417c:	260b      	movs	r6, #11
 801417e:	886f      	ldrh	r7, [r5, #2]
 8014180:	087f      	lsrs	r7, r7, #1
 8014182:	3e01      	subs	r6, #1
 8014184:	d013      	beq.n	80141ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014186:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014188:	462a      	mov	r2, r5
 801418a:	4639      	mov	r1, r7
 801418c:	4620      	mov	r0, r4
 801418e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014192:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014196:	4643      	mov	r3, r8
 8014198:	f7ff ffce 	bl	8014138 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801419c:	b138      	cbz	r0, 80141ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801419e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80141a2:	4642      	mov	r2, r8
 80141a4:	4620      	mov	r0, r4
 80141a6:	f7ff ff93 	bl	80140d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d1e9      	bne.n	8014182 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80141ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080141b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80141b4:	b570      	push	{r4, r5, r6, lr}
 80141b6:	694a      	ldr	r2, [r1, #20]
 80141b8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80141ba:	684b      	ldr	r3, [r1, #4]
 80141bc:	1b54      	subs	r4, r2, r5
 80141be:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80141c0:	f000 8106 	beq.w	80143d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80141c4:	1b9b      	subs	r3, r3, r6
 80141c6:	d003      	beq.n	80141d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80141c8:	4363      	muls	r3, r4
 80141ca:	2210      	movs	r2, #16
 80141cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80141d0:	680c      	ldr	r4, [r1, #0]
 80141d2:	698a      	ldr	r2, [r1, #24]
 80141d4:	1b65      	subs	r5, r4, r5
 80141d6:	f000 80fd 	beq.w	80143d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80141da:	1b92      	subs	r2, r2, r6
 80141dc:	d003      	beq.n	80141e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80141de:	436a      	muls	r2, r5
 80141e0:	2410      	movs	r4, #16
 80141e2:	fb92 f2f4 	sdiv	r2, r2, r4
 80141e6:	1a9b      	subs	r3, r3, r2
 80141e8:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8014410 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80141ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141f0:	460a      	mov	r2, r1
 80141f2:	ee07 3a90 	vmov	s15, r3
 80141f6:	f100 040c 	add.w	r4, r0, #12
 80141fa:	4603      	mov	r3, r0
 80141fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014200:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014204:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014208:	eeb1 6a43 	vneg.f32	s12, s6
 801420c:	edd2 7a02 	vldr	s15, [r2, #8]
 8014210:	3214      	adds	r2, #20
 8014212:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014216:	ece3 6a01 	vstmia	r3!, {s13}
 801421a:	429c      	cmp	r4, r3
 801421c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014220:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014224:	edc3 7a02 	vstr	s15, [r3, #8]
 8014228:	ed52 7a01 	vldr	s15, [r2, #-4]
 801422c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014230:	edc3 7a05 	vstr	s15, [r3, #20]
 8014234:	d1ea      	bne.n	801420c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014236:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014238:	698b      	ldr	r3, [r1, #24]
 801423a:	edd0 4a02 	vldr	s9, [r0, #8]
 801423e:	1a9b      	subs	r3, r3, r2
 8014240:	edd0 3a00 	vldr	s7, [r0]
 8014244:	edd0 6a01 	vldr	s13, [r0, #4]
 8014248:	ee07 3a90 	vmov	s15, r3
 801424c:	684b      	ldr	r3, [r1, #4]
 801424e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014252:	ed90 5a05 	vldr	s10, [r0, #20]
 8014256:	1a9b      	subs	r3, r3, r2
 8014258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801425c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014260:	ed90 2a03 	vldr	s4, [r0, #12]
 8014264:	ee07 3a10 	vmov	s14, r3
 8014268:	edd0 5a04 	vldr	s11, [r0, #16]
 801426c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014270:	ed90 1a07 	vldr	s2, [r0, #28]
 8014274:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014278:	edd0 2a06 	vldr	s5, [r0, #24]
 801427c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014280:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014284:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014288:	ee32 5a45 	vsub.f32	s10, s4, s10
 801428c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014290:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014294:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8014298:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801429a:	694a      	ldr	r2, [r1, #20]
 801429c:	1b13      	subs	r3, r2, r4
 801429e:	ee07 3a10 	vmov	s14, r3
 80142a2:	680b      	ldr	r3, [r1, #0]
 80142a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142a8:	1b1b      	subs	r3, r3, r4
 80142aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80142ae:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80142b2:	ee07 3a10 	vmov	s14, r3
 80142b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80142be:	eee6 4a87 	vfma.f32	s9, s13, s14
 80142c2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80142c6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80142ca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80142cc:	698b      	ldr	r3, [r1, #24]
 80142ce:	1a9b      	subs	r3, r3, r2
 80142d0:	ee06 3a90 	vmov	s13, r3
 80142d4:	684b      	ldr	r3, [r1, #4]
 80142d6:	1a9b      	subs	r3, r3, r2
 80142d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80142dc:	ee07 3a10 	vmov	s14, r3
 80142e0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80142e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142e8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80142ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80142f0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80142f4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80142f8:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80142fc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80142fe:	694a      	ldr	r2, [r1, #20]
 8014300:	1b13      	subs	r3, r2, r4
 8014302:	ee07 3a10 	vmov	s14, r3
 8014306:	680b      	ldr	r3, [r1, #0]
 8014308:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801430c:	1b1b      	subs	r3, r3, r4
 801430e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014312:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014316:	ee07 3a10 	vmov	s14, r3
 801431a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801431e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014322:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014326:	edd0 5a08 	vldr	s11, [r0, #32]
 801432a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801432e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8014332:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014336:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801433a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801433c:	698b      	ldr	r3, [r1, #24]
 801433e:	1a9b      	subs	r3, r3, r2
 8014340:	ee07 3a10 	vmov	s14, r3
 8014344:	684b      	ldr	r3, [r1, #4]
 8014346:	1a9b      	subs	r3, r3, r2
 8014348:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801434c:	ee01 3a90 	vmov	s3, r3
 8014350:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014354:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014358:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801435c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014360:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014364:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014368:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801436c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801436e:	694a      	ldr	r2, [r1, #20]
 8014370:	1b13      	subs	r3, r2, r4
 8014372:	ee03 3a10 	vmov	s6, r3
 8014376:	680b      	ldr	r3, [r1, #0]
 8014378:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801437c:	1b1b      	subs	r3, r3, r4
 801437e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014382:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014386:	ee03 3a10 	vmov	s6, r3
 801438a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801438e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014392:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014396:	ee25 6a86 	vmul.f32	s12, s11, s12
 801439a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801439e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80143a2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80143a6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80143aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ae:	dd13      	ble.n	80143d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80143b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80143b4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80143b8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80143ba:	eee3 7a87 	vfma.f32	s15, s7, s14
 80143be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c6:	dd15      	ble.n	80143f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80143c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80143cc:	6403      	str	r3, [r0, #64]	@ 0x40
 80143ce:	bd70      	pop	{r4, r5, r6, pc}
 80143d0:	4623      	mov	r3, r4
 80143d2:	e6fd      	b.n	80141d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80143d4:	462a      	mov	r2, r5
 80143d6:	e706      	b.n	80141e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80143d8:	d502      	bpl.n	80143e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80143da:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80143de:	e7e9      	b.n	80143b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80143e0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80143e4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80143e8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80143ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f0:	dade      	bge.n	80143b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80143f2:	e7f2      	b.n	80143da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80143f4:	d502      	bpl.n	80143fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80143f6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80143fa:	e7e7      	b.n	80143cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80143fc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8014400:	eee3 4a86 	vfma.f32	s9, s7, s12
 8014404:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440c:	dadc      	bge.n	80143c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801440e:	e7f2      	b.n	80143f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8014410:	3d800000 	.word	0x3d800000

08014414 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8014414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014418:	2714      	movs	r7, #20
 801441a:	435f      	muls	r7, r3
 801441c:	eb02 0c07 	add.w	ip, r2, r7
 8014420:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8014424:	f115 0e0f 	adds.w	lr, r5, #15
 8014428:	f100 80a2 	bmi.w	8014570 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801442c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8014430:	9c08      	ldr	r4, [sp, #32]
 8014432:	2614      	movs	r6, #20
 8014434:	f8c0 e014 	str.w	lr, [r0, #20]
 8014438:	4366      	muls	r6, r4
 801443a:	eb02 0806 	add.w	r8, r2, r6
 801443e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014442:	f115 040f 	adds.w	r4, r5, #15
 8014446:	f100 809f 	bmi.w	8014588 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801444a:	1124      	asrs	r4, r4, #4
 801444c:	eba4 040e 	sub.w	r4, r4, lr
 8014450:	6184      	str	r4, [r0, #24]
 8014452:	2c00      	cmp	r4, #0
 8014454:	f000 808a 	beq.w	801456c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8014458:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801445c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014460:	5995      	ldr	r5, [r2, r6]
 8014462:	eba4 0809 	sub.w	r8, r4, r9
 8014466:	59d4      	ldr	r4, [r2, r7]
 8014468:	eba5 0a04 	sub.w	sl, r5, r4
 801446c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8014470:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8014474:	fb0e fe05 	mul.w	lr, lr, r5
 8014478:	fb0a ee19 	mls	lr, sl, r9, lr
 801447c:	fb08 e404 	mla	r4, r8, r4, lr
 8014480:	3c01      	subs	r4, #1
 8014482:	19a4      	adds	r4, r4, r6
 8014484:	f100 808c 	bmi.w	80145a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8014488:	fb94 fef6 	sdiv	lr, r4, r6
 801448c:	fb06 441e 	mls	r4, r6, lr, r4
 8014490:	f8c0 e000 	str.w	lr, [r0]
 8014494:	6104      	str	r4, [r0, #16]
 8014496:	2d00      	cmp	r5, #0
 8014498:	f2c0 8095 	blt.w	80145c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801449c:	fb95 f4f6 	sdiv	r4, r5, r6
 80144a0:	fb06 5514 	mls	r5, r6, r4, r5
 80144a4:	6044      	str	r4, [r0, #4]
 80144a6:	6085      	str	r5, [r0, #8]
 80144a8:	60c6      	str	r6, [r0, #12]
 80144aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80144ae:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80144b2:	6945      	ldr	r5, [r0, #20]
 80144b4:	59d2      	ldr	r2, [r2, r7]
 80144b6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80144ba:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80145e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80144be:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80144c2:	ee07 4a10 	vmov	s14, r4
 80144c6:	6804      	ldr	r4, [r0, #0]
 80144c8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80144cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80144d0:	ee07 2a90 	vmov	s15, r2
 80144d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80144d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80144e0:	edd3 6a00 	vldr	s13, [r3]
 80144e4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80144e8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80144ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80144f0:	edc0 6a07 	vstr	s13, [r0, #28]
 80144f4:	edd0 6a01 	vldr	s13, [r0, #4]
 80144f8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80144fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014500:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8014504:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014508:	ed80 6a08 	vstr	s12, [r0, #32]
 801450c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801450e:	6242      	str	r2, [r0, #36]	@ 0x24
 8014510:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8014514:	ed93 6a03 	vldr	s12, [r3, #12]
 8014518:	eea5 6a87 	vfma.f32	s12, s11, s14
 801451c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8014520:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014524:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8014528:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801452c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8014530:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014534:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8014538:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801453a:	6302      	str	r2, [r0, #48]	@ 0x30
 801453c:	ed93 6a06 	vldr	s12, [r3, #24]
 8014540:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8014544:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014548:	eeb0 7a46 	vmov.f32	s14, s12
 801454c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8014550:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014554:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8014558:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801455c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8014560:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014564:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8014568:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801456a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014570:	2410      	movs	r4, #16
 8014572:	f1c5 0501 	rsb	r5, r5, #1
 8014576:	fb9e fef4 	sdiv	lr, lr, r4
 801457a:	f015 050f 	ands.w	r5, r5, #15
 801457e:	bf18      	it	ne
 8014580:	2501      	movne	r5, #1
 8014582:	ebae 0e05 	sub.w	lr, lr, r5
 8014586:	e753      	b.n	8014430 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8014588:	f04f 0910 	mov.w	r9, #16
 801458c:	f1c5 0501 	rsb	r5, r5, #1
 8014590:	fb94 f4f9 	sdiv	r4, r4, r9
 8014594:	f015 050f 	ands.w	r5, r5, #15
 8014598:	bf18      	it	ne
 801459a:	2501      	movne	r5, #1
 801459c:	1b64      	subs	r4, r4, r5
 801459e:	e755      	b.n	801444c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80145a0:	4264      	negs	r4, r4
 80145a2:	fb94 fef6 	sdiv	lr, r4, r6
 80145a6:	f1ce 0800 	rsb	r8, lr, #0
 80145aa:	fb06 441e 	mls	r4, r6, lr, r4
 80145ae:	f8c0 8000 	str.w	r8, [r0]
 80145b2:	6104      	str	r4, [r0, #16]
 80145b4:	2c00      	cmp	r4, #0
 80145b6:	f43f af6e 	beq.w	8014496 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80145ba:	ea6f 0e0e 	mvn.w	lr, lr
 80145be:	1b34      	subs	r4, r6, r4
 80145c0:	f8c0 e000 	str.w	lr, [r0]
 80145c4:	e766      	b.n	8014494 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80145c6:	426d      	negs	r5, r5
 80145c8:	fb95 f4f6 	sdiv	r4, r5, r6
 80145cc:	f1c4 0e00 	rsb	lr, r4, #0
 80145d0:	fb06 5514 	mls	r5, r6, r4, r5
 80145d4:	f8c0 e004 	str.w	lr, [r0, #4]
 80145d8:	6085      	str	r5, [r0, #8]
 80145da:	2d00      	cmp	r5, #0
 80145dc:	f43f af64 	beq.w	80144a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80145e0:	43e4      	mvns	r4, r4
 80145e2:	1b75      	subs	r5, r6, r5
 80145e4:	6044      	str	r4, [r0, #4]
 80145e6:	e75e      	b.n	80144a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80145e8:	3d800000 	.word	0x3d800000

080145ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80145ec:	4b01      	ldr	r3, [pc, #4]	@ (80145f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80145ee:	6018      	str	r0, [r3, #0]
 80145f0:	4770      	bx	lr
 80145f2:	bf00      	nop
 80145f4:	2400aae4 	.word	0x2400aae4

080145f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80145f8:	4b06      	ldr	r3, [pc, #24]	@ (8014614 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80145fa:	881a      	ldrh	r2, [r3, #0]
 80145fc:	4282      	cmp	r2, r0
 80145fe:	d807      	bhi.n	8014610 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8014600:	4b05      	ldr	r3, [pc, #20]	@ (8014618 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	4413      	add	r3, r2
 8014606:	4298      	cmp	r0, r3
 8014608:	bfac      	ite	ge
 801460a:	2000      	movge	r0, #0
 801460c:	2001      	movlt	r0, #1
 801460e:	4770      	bx	lr
 8014610:	2000      	movs	r0, #0
 8014612:	4770      	bx	lr
 8014614:	2400ab04 	.word	0x2400ab04
 8014618:	2400ab08 	.word	0x2400ab08

0801461c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801461c:	b508      	push	{r3, lr}
 801461e:	4601      	mov	r1, r0
 8014620:	f7ff ffea 	bl	80145f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8014624:	b118      	cbz	r0, 801462e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8014626:	4b02      	ldr	r3, [pc, #8]	@ (8014630 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801462e:	bd08      	pop	{r3, pc}
 8014630:	2400aae8 	.word	0x2400aae8

08014634 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8014634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014636:	4c24      	ldr	r4, [pc, #144]	@ (80146c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8014638:	6823      	ldr	r3, [r4, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d042      	beq.n	80146c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801463e:	4a23      	ldr	r2, [pc, #140]	@ (80146cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8014640:	4d23      	ldr	r5, [pc, #140]	@ (80146d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8014642:	8811      	ldrh	r1, [r2, #0]
 8014644:	f8b5 c000 	ldrh.w	ip, [r5]
 8014648:	4822      	ldr	r0, [pc, #136]	@ (80146d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801464a:	4461      	add	r1, ip
 801464c:	1c4a      	adds	r2, r1, #1
 801464e:	008f      	lsls	r7, r1, #2
 8014650:	f022 0201 	bic.w	r2, r2, #1
 8014654:	19de      	adds	r6, r3, r7
 8014656:	0412      	lsls	r2, r2, #16
 8014658:	6006      	str	r6, [r0, #0]
 801465a:	4e1f      	ldr	r6, [pc, #124]	@ (80146d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801465c:	0c12      	lsrs	r2, r2, #16
 801465e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8014662:	19da      	adds	r2, r3, r7
 8014664:	6032      	str	r2, [r6, #0]
 8014666:	220e      	movs	r2, #14
 8014668:	fb02 f20c 	mul.w	r2, r2, ip
 801466c:	3203      	adds	r2, #3
 801466e:	f022 0203 	bic.w	r2, r2, #3
 8014672:	443a      	add	r2, r7
 8014674:	4f19      	ldr	r7, [pc, #100]	@ (80146dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8014676:	4413      	add	r3, r2
 8014678:	603b      	str	r3, [r7, #0]
 801467a:	2300      	movs	r3, #0
 801467c:	4f18      	ldr	r7, [pc, #96]	@ (80146e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801467e:	469c      	mov	ip, r3
 8014680:	803b      	strh	r3, [r7, #0]
 8014682:	4f18      	ldr	r7, [pc, #96]	@ (80146e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8014684:	683f      	ldr	r7, [r7, #0]
 8014686:	1aba      	subs	r2, r7, r2
 8014688:	4f17      	ldr	r7, [pc, #92]	@ (80146e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801468a:	603a      	str	r2, [r7, #0]
 801468c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8014690:	4a16      	ldr	r2, [pc, #88]	@ (80146ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8014692:	8013      	strh	r3, [r2, #0]
 8014694:	428b      	cmp	r3, r1
 8014696:	d10d      	bne.n	80146b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8014698:	882d      	ldrh	r5, [r5, #0]
 801469a:	2300      	movs	r3, #0
 801469c:	6830      	ldr	r0, [r6, #0]
 801469e:	240e      	movs	r4, #14
 80146a0:	429d      	cmp	r5, r3
 80146a2:	d90f      	bls.n	80146c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80146a4:	fb04 0203 	mla	r2, r4, r3, r0
 80146a8:	3301      	adds	r3, #1
 80146aa:	7b11      	ldrb	r1, [r2, #12]
 80146ac:	f36f 1145 	bfc	r1, #5, #1
 80146b0:	7311      	strb	r1, [r2, #12]
 80146b2:	e7f5      	b.n	80146a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80146b4:	6822      	ldr	r2, [r4, #0]
 80146b6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80146ba:	6802      	ldr	r2, [r0, #0]
 80146bc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80146c0:	3301      	adds	r3, #1
 80146c2:	e7e7      	b.n	8014694 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80146c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146c6:	bf00      	nop
 80146c8:	2400aae8 	.word	0x2400aae8
 80146cc:	2400ab04 	.word	0x2400ab04
 80146d0:	2400ab08 	.word	0x2400ab08
 80146d4:	2400aafc 	.word	0x2400aafc
 80146d8:	2400aaec 	.word	0x2400aaec
 80146dc:	2400aaf4 	.word	0x2400aaf4
 80146e0:	2400ab06 	.word	0x2400ab06
 80146e4:	2400aaf0 	.word	0x2400aaf0
 80146e8:	2400ab00 	.word	0x2400ab00
 80146ec:	2400aaf8 	.word	0x2400aaf8

080146f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80146f0:	4b06      	ldr	r3, [pc, #24]	@ (801470c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	b943      	cbnz	r3, 8014708 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80146f6:	b139      	cbz	r1, 8014708 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80146f8:	4b05      	ldr	r3, [pc, #20]	@ (8014710 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80146fa:	801a      	strh	r2, [r3, #0]
 80146fc:	4b05      	ldr	r3, [pc, #20]	@ (8014714 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80146fe:	6019      	str	r1, [r3, #0]
 8014700:	4b05      	ldr	r3, [pc, #20]	@ (8014718 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8014702:	6018      	str	r0, [r3, #0]
 8014704:	f7ff bf96 	b.w	8014634 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8014708:	4770      	bx	lr
 801470a:	bf00      	nop
 801470c:	2400aaf4 	.word	0x2400aaf4
 8014710:	2400ab08 	.word	0x2400ab08
 8014714:	2400aaf0 	.word	0x2400aaf0
 8014718:	2400aae8 	.word	0x2400aae8

0801471c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801471c:	b470      	push	{r4, r5, r6}
 801471e:	4c07      	ldr	r4, [pc, #28]	@ (801473c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8014720:	4605      	mov	r5, r0
 8014722:	4610      	mov	r0, r2
 8014724:	9a03      	ldr	r2, [sp, #12]
 8014726:	6826      	ldr	r6, [r4, #0]
 8014728:	b936      	cbnz	r6, 8014738 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801472a:	6025      	str	r5, [r4, #0]
 801472c:	4c04      	ldr	r4, [pc, #16]	@ (8014740 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801472e:	8021      	strh	r1, [r4, #0]
 8014730:	4619      	mov	r1, r3
 8014732:	bc70      	pop	{r4, r5, r6}
 8014734:	f7ff bfdc 	b.w	80146f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8014738:	bc70      	pop	{r4, r5, r6}
 801473a:	4770      	bx	lr
 801473c:	2400ab0c 	.word	0x2400ab0c
 8014740:	2400ab04 	.word	0x2400ab04

08014744 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8014744:	4a12      	ldr	r2, [pc, #72]	@ (8014790 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8014746:	8803      	ldrh	r3, [r0, #0]
 8014748:	8812      	ldrh	r2, [r2, #0]
 801474a:	4293      	cmp	r3, r2
 801474c:	d207      	bcs.n	801475e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801474e:	4a11      	ldr	r2, [pc, #68]	@ (8014794 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8014750:	2114      	movs	r1, #20
 8014752:	6812      	ldr	r2, [r2, #0]
 8014754:	fb01 2303 	mla	r3, r1, r3, r2
 8014758:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801475c:	4770      	bx	lr
 801475e:	490e      	ldr	r1, [pc, #56]	@ (8014798 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8014760:	8809      	ldrh	r1, [r1, #0]
 8014762:	4411      	add	r1, r2
 8014764:	428b      	cmp	r3, r1
 8014766:	da04      	bge.n	8014772 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8014768:	1a9b      	subs	r3, r3, r2
 801476a:	4a0c      	ldr	r2, [pc, #48]	@ (801479c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801476c:	210e      	movs	r1, #14
 801476e:	6812      	ldr	r2, [r2, #0]
 8014770:	e7f0      	b.n	8014754 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8014772:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014776:	4293      	cmp	r3, r2
 8014778:	d108      	bne.n	801478c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801477a:	4b09      	ldr	r3, [pc, #36]	@ (80147a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801477c:	781b      	ldrb	r3, [r3, #0]
 801477e:	b91b      	cbnz	r3, 8014788 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8014780:	4b08      	ldr	r3, [pc, #32]	@ (80147a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8014782:	f9b3 0000 	ldrsh.w	r0, [r3]
 8014786:	4770      	bx	lr
 8014788:	4b07      	ldr	r3, [pc, #28]	@ (80147a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801478a:	e7fa      	b.n	8014782 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801478c:	2000      	movs	r0, #0
 801478e:	4770      	bx	lr
 8014790:	2400ab04 	.word	0x2400ab04
 8014794:	2400ab0c 	.word	0x2400ab0c
 8014798:	2400ab08 	.word	0x2400ab08
 801479c:	2400aaec 	.word	0x2400aaec
 80147a0:	2400aa7c 	.word	0x2400aa7c
 80147a4:	2400aa7e 	.word	0x2400aa7e
 80147a8:	2400aa80 	.word	0x2400aa80

080147ac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80147ac:	4a12      	ldr	r2, [pc, #72]	@ (80147f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80147ae:	8803      	ldrh	r3, [r0, #0]
 80147b0:	8812      	ldrh	r2, [r2, #0]
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d207      	bcs.n	80147c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80147b6:	4a11      	ldr	r2, [pc, #68]	@ (80147fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80147b8:	2114      	movs	r1, #20
 80147ba:	6812      	ldr	r2, [r2, #0]
 80147bc:	fb01 2303 	mla	r3, r1, r3, r2
 80147c0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80147c4:	4770      	bx	lr
 80147c6:	490e      	ldr	r1, [pc, #56]	@ (8014800 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80147c8:	8809      	ldrh	r1, [r1, #0]
 80147ca:	4411      	add	r1, r2
 80147cc:	428b      	cmp	r3, r1
 80147ce:	da04      	bge.n	80147da <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80147d0:	1a9b      	subs	r3, r3, r2
 80147d2:	4a0c      	ldr	r2, [pc, #48]	@ (8014804 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80147d4:	210e      	movs	r1, #14
 80147d6:	6812      	ldr	r2, [r2, #0]
 80147d8:	e7f0      	b.n	80147bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80147da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80147de:	4293      	cmp	r3, r2
 80147e0:	d108      	bne.n	80147f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80147e2:	4b09      	ldr	r3, [pc, #36]	@ (8014808 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	b91b      	cbnz	r3, 80147f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80147e8:	4b08      	ldr	r3, [pc, #32]	@ (801480c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80147ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80147ee:	4770      	bx	lr
 80147f0:	4b07      	ldr	r3, [pc, #28]	@ (8014810 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80147f2:	e7fa      	b.n	80147ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80147f4:	2000      	movs	r0, #0
 80147f6:	4770      	bx	lr
 80147f8:	2400ab04 	.word	0x2400ab04
 80147fc:	2400ab0c 	.word	0x2400ab0c
 8014800:	2400ab08 	.word	0x2400ab08
 8014804:	2400aaec 	.word	0x2400aaec
 8014808:	2400aa7c 	.word	0x2400aa7c
 801480c:	2400aa80 	.word	0x2400aa80
 8014810:	2400aa7e 	.word	0x2400aa7e

08014814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8014814:	4a22      	ldr	r2, [pc, #136]	@ (80148a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8014816:	b530      	push	{r4, r5, lr}
 8014818:	880b      	ldrh	r3, [r1, #0]
 801481a:	8812      	ldrh	r2, [r2, #0]
 801481c:	4293      	cmp	r3, r2
 801481e:	d213      	bcs.n	8014848 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8014820:	4a20      	ldr	r2, [pc, #128]	@ (80148a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8014822:	2114      	movs	r1, #20
 8014824:	6812      	ldr	r2, [r2, #0]
 8014826:	fb01 2303 	mla	r3, r1, r3, r2
 801482a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801482e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8014832:	8a1a      	ldrh	r2, [r3, #16]
 8014834:	8a5b      	ldrh	r3, [r3, #18]
 8014836:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801483a:	8004      	strh	r4, [r0, #0]
 801483c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014840:	8041      	strh	r1, [r0, #2]
 8014842:	8082      	strh	r2, [r0, #4]
 8014844:	80c3      	strh	r3, [r0, #6]
 8014846:	e024      	b.n	8014892 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8014848:	4917      	ldr	r1, [pc, #92]	@ (80148a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801484a:	8809      	ldrh	r1, [r1, #0]
 801484c:	4411      	add	r1, r2
 801484e:	428b      	cmp	r3, r1
 8014850:	da10      	bge.n	8014874 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8014852:	1a9b      	subs	r3, r3, r2
 8014854:	220e      	movs	r2, #14
 8014856:	4353      	muls	r3, r2
 8014858:	4a14      	ldr	r2, [pc, #80]	@ (80148ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801485a:	6811      	ldr	r1, [r2, #0]
 801485c:	18ca      	adds	r2, r1, r3
 801485e:	5ecd      	ldrsh	r5, [r1, r3]
 8014860:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8014864:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8014868:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801486c:	8005      	strh	r5, [r0, #0]
 801486e:	8044      	strh	r4, [r0, #2]
 8014870:	8081      	strh	r1, [r0, #4]
 8014872:	e7e7      	b.n	8014844 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8014874:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014878:	4293      	cmp	r3, r2
 801487a:	d10b      	bne.n	8014894 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801487c:	4b0c      	ldr	r3, [pc, #48]	@ (80148b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801487e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014882:	4b0c      	ldr	r3, [pc, #48]	@ (80148b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8014884:	8081      	strh	r1, [r0, #4]
 8014886:	f9b3 2000 	ldrsh.w	r2, [r3]
 801488a:	2300      	movs	r3, #0
 801488c:	80c2      	strh	r2, [r0, #6]
 801488e:	8003      	strh	r3, [r0, #0]
 8014890:	8043      	strh	r3, [r0, #2]
 8014892:	bd30      	pop	{r4, r5, pc}
 8014894:	2300      	movs	r3, #0
 8014896:	8003      	strh	r3, [r0, #0]
 8014898:	8043      	strh	r3, [r0, #2]
 801489a:	8083      	strh	r3, [r0, #4]
 801489c:	e7d2      	b.n	8014844 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801489e:	bf00      	nop
 80148a0:	2400ab04 	.word	0x2400ab04
 80148a4:	2400ab0c 	.word	0x2400ab0c
 80148a8:	2400ab08 	.word	0x2400ab08
 80148ac:	2400aaec 	.word	0x2400aaec
 80148b0:	2400aa78 	.word	0x2400aa78
 80148b4:	2400aa7a 	.word	0x2400aa7a

080148b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80148b8:	4a17      	ldr	r2, [pc, #92]	@ (8014918 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80148ba:	8803      	ldrh	r3, [r0, #0]
 80148bc:	8812      	ldrh	r2, [r2, #0]
 80148be:	4293      	cmp	r3, r2
 80148c0:	d213      	bcs.n	80148ea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80148c2:	4a16      	ldr	r2, [pc, #88]	@ (801491c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80148c4:	2114      	movs	r1, #20
 80148c6:	6812      	ldr	r2, [r2, #0]
 80148c8:	fb01 2303 	mla	r3, r1, r3, r2
 80148cc:	8a1a      	ldrh	r2, [r3, #16]
 80148ce:	8919      	ldrh	r1, [r3, #8]
 80148d0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80148d4:	428a      	cmp	r2, r1
 80148d6:	db1d      	blt.n	8014914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80148d8:	8a58      	ldrh	r0, [r3, #18]
 80148da:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80148de:	895b      	ldrh	r3, [r3, #10]
 80148e0:	4298      	cmp	r0, r3
 80148e2:	bfac      	ite	ge
 80148e4:	2000      	movge	r0, #0
 80148e6:	2001      	movlt	r0, #1
 80148e8:	4770      	bx	lr
 80148ea:	490d      	ldr	r1, [pc, #52]	@ (8014920 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80148ec:	8809      	ldrh	r1, [r1, #0]
 80148ee:	4411      	add	r1, r2
 80148f0:	428b      	cmp	r3, r1
 80148f2:	da0d      	bge.n	8014910 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80148f4:	1a9b      	subs	r3, r3, r2
 80148f6:	4a0b      	ldr	r2, [pc, #44]	@ (8014924 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80148f8:	210e      	movs	r1, #14
 80148fa:	6812      	ldr	r2, [r2, #0]
 80148fc:	fb01 2303 	mla	r3, r1, r3, r2
 8014900:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8014904:	891a      	ldrh	r2, [r3, #8]
 8014906:	4291      	cmp	r1, r2
 8014908:	db04      	blt.n	8014914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801490a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801490e:	e7e6      	b.n	80148de <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8014910:	2000      	movs	r0, #0
 8014912:	4770      	bx	lr
 8014914:	2001      	movs	r0, #1
 8014916:	4770      	bx	lr
 8014918:	2400ab04 	.word	0x2400ab04
 801491c:	2400ab0c 	.word	0x2400ab0c
 8014920:	2400ab08 	.word	0x2400ab08
 8014924:	2400aaec 	.word	0x2400aaec

08014928 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8014928:	4a12      	ldr	r2, [pc, #72]	@ (8014974 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801492a:	8803      	ldrh	r3, [r0, #0]
 801492c:	8811      	ldrh	r1, [r2, #0]
 801492e:	428b      	cmp	r3, r1
 8014930:	d20b      	bcs.n	801494a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8014932:	4a11      	ldr	r2, [pc, #68]	@ (8014978 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014934:	6812      	ldr	r2, [r2, #0]
 8014936:	b112      	cbz	r2, 801493e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8014938:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801493c:	b9c0      	cbnz	r0, 8014970 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801493e:	4a0f      	ldr	r2, [pc, #60]	@ (801497c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8014940:	6811      	ldr	r1, [r2, #0]
 8014942:	2214      	movs	r2, #20
 8014944:	4353      	muls	r3, r2
 8014946:	58c8      	ldr	r0, [r1, r3]
 8014948:	4770      	bx	lr
 801494a:	4a0d      	ldr	r2, [pc, #52]	@ (8014980 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801494c:	8812      	ldrh	r2, [r2, #0]
 801494e:	440a      	add	r2, r1
 8014950:	4293      	cmp	r3, r2
 8014952:	da04      	bge.n	801495e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8014954:	4a08      	ldr	r2, [pc, #32]	@ (8014978 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014956:	6812      	ldr	r2, [r2, #0]
 8014958:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801495c:	4770      	bx	lr
 801495e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014962:	4293      	cmp	r3, r2
 8014964:	d103      	bne.n	801496e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8014966:	4b07      	ldr	r3, [pc, #28]	@ (8014984 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801496c:	4770      	bx	lr
 801496e:	2000      	movs	r0, #0
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop
 8014974:	2400ab04 	.word	0x2400ab04
 8014978:	2400aae8 	.word	0x2400aae8
 801497c:	2400ab0c 	.word	0x2400ab0c
 8014980:	2400ab08 	.word	0x2400ab08
 8014984:	2400aa84 	.word	0x2400aa84

08014988 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8014988:	4b24      	ldr	r3, [pc, #144]	@ (8014a1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801498a:	8802      	ldrh	r2, [r0, #0]
 801498c:	8818      	ldrh	r0, [r3, #0]
 801498e:	4282      	cmp	r2, r0
 8014990:	d221      	bcs.n	80149d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8014992:	4b23      	ldr	r3, [pc, #140]	@ (8014a20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8014994:	6819      	ldr	r1, [r3, #0]
 8014996:	2314      	movs	r3, #20
 8014998:	fb03 1302 	mla	r3, r3, r2, r1
 801499c:	6858      	ldr	r0, [r3, #4]
 801499e:	2800      	cmp	r0, #0
 80149a0:	d03a      	beq.n	8014a18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80149a2:	4920      	ldr	r1, [pc, #128]	@ (8014a24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80149a4:	6809      	ldr	r1, [r1, #0]
 80149a6:	2900      	cmp	r1, #0
 80149a8:	d036      	beq.n	8014a18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80149aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80149ae:	2900      	cmp	r1, #0
 80149b0:	d032      	beq.n	8014a18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80149b2:	891a      	ldrh	r2, [r3, #8]
 80149b4:	8958      	ldrh	r0, [r3, #10]
 80149b6:	4350      	muls	r0, r2
 80149b8:	7c5a      	ldrb	r2, [r3, #17]
 80149ba:	7cdb      	ldrb	r3, [r3, #19]
 80149bc:	0952      	lsrs	r2, r2, #5
 80149be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80149c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80149c6:	2b0b      	cmp	r3, #11
 80149c8:	bf18      	it	ne
 80149ca:	0040      	lslne	r0, r0, #1
 80149cc:	3003      	adds	r0, #3
 80149ce:	f020 0003 	bic.w	r0, r0, #3
 80149d2:	4408      	add	r0, r1
 80149d4:	4770      	bx	lr
 80149d6:	4b14      	ldr	r3, [pc, #80]	@ (8014a28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	4403      	add	r3, r0
 80149dc:	429a      	cmp	r2, r3
 80149de:	da1a      	bge.n	8014a16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80149e0:	4b12      	ldr	r3, [pc, #72]	@ (8014a2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80149e2:	1a10      	subs	r0, r2, r0
 80149e4:	210e      	movs	r1, #14
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	fb01 3000 	mla	r0, r1, r0, r3
 80149ec:	7b03      	ldrb	r3, [r0, #12]
 80149ee:	f003 031f 	and.w	r3, r3, #31
 80149f2:	2b0b      	cmp	r3, #11
 80149f4:	d10b      	bne.n	8014a0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80149f6:	8903      	ldrh	r3, [r0, #8]
 80149f8:	8940      	ldrh	r0, [r0, #10]
 80149fa:	4358      	muls	r0, r3
 80149fc:	4b09      	ldr	r3, [pc, #36]	@ (8014a24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80149fe:	3003      	adds	r0, #3
 8014a00:	6819      	ldr	r1, [r3, #0]
 8014a02:	f020 0303 	bic.w	r3, r0, #3
 8014a06:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8014a0a:	4418      	add	r0, r3
 8014a0c:	4770      	bx	lr
 8014a0e:	2b0d      	cmp	r3, #13
 8014a10:	d101      	bne.n	8014a16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8014a12:	300d      	adds	r0, #13
 8014a14:	4770      	bx	lr
 8014a16:	2000      	movs	r0, #0
 8014a18:	4770      	bx	lr
 8014a1a:	bf00      	nop
 8014a1c:	2400ab04 	.word	0x2400ab04
 8014a20:	2400ab0c 	.word	0x2400ab0c
 8014a24:	2400aae8 	.word	0x2400aae8
 8014a28:	2400ab08 	.word	0x2400ab08
 8014a2c:	2400aaec 	.word	0x2400aaec

08014a30 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8014a30:	4b1f      	ldr	r3, [pc, #124]	@ (8014ab0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8014a32:	b510      	push	{r4, lr}
 8014a34:	8802      	ldrh	r2, [r0, #0]
 8014a36:	881b      	ldrh	r3, [r3, #0]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d21a      	bcs.n	8014a72 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8014a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8014ab4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8014a3e:	2114      	movs	r1, #20
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	fb01 3102 	mla	r1, r1, r2, r3
 8014a46:	7c4b      	ldrb	r3, [r1, #17]
 8014a48:	0958      	lsrs	r0, r3, #5
 8014a4a:	7ccb      	ldrb	r3, [r1, #19]
 8014a4c:	491a      	ldr	r1, [pc, #104]	@ (8014ab8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8014a4e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8014a52:	6809      	ldr	r1, [r1, #0]
 8014a54:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8014a58:	b2d8      	uxtb	r0, r3
 8014a5a:	b149      	cbz	r1, 8014a70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8014a5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014a60:	b132      	cbz	r2, 8014a70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8014a62:	2b0e      	cmp	r3, #14
 8014a64:	d021      	beq.n	8014aaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8014a66:	280f      	cmp	r0, #15
 8014a68:	d01d      	beq.n	8014aa6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8014a6a:	2810      	cmp	r0, #16
 8014a6c:	bf08      	it	eq
 8014a6e:	2002      	moveq	r0, #2
 8014a70:	bd10      	pop	{r4, pc}
 8014a72:	4912      	ldr	r1, [pc, #72]	@ (8014abc <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8014a74:	8809      	ldrh	r1, [r1, #0]
 8014a76:	4419      	add	r1, r3
 8014a78:	428a      	cmp	r2, r1
 8014a7a:	da09      	bge.n	8014a90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8014a7c:	1ad3      	subs	r3, r2, r3
 8014a7e:	4a10      	ldr	r2, [pc, #64]	@ (8014ac0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8014a80:	210e      	movs	r1, #14
 8014a82:	6812      	ldr	r2, [r2, #0]
 8014a84:	fb01 2303 	mla	r3, r1, r3, r2
 8014a88:	7b18      	ldrb	r0, [r3, #12]
 8014a8a:	f000 001f 	and.w	r0, r0, #31
 8014a8e:	e7ef      	b.n	8014a70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8014a90:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d108      	bne.n	8014aaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8014a98:	f7fa f8aa 	bl	800ebf0 <_ZN8touchgfx3HAL3lcdEv>
 8014a9c:	6803      	ldr	r3, [r0, #0]
 8014a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014aa4:	4718      	bx	r3
 8014aa6:	2001      	movs	r0, #1
 8014aa8:	e7e2      	b.n	8014a70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8014aaa:	2000      	movs	r0, #0
 8014aac:	e7e0      	b.n	8014a70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8014aae:	bf00      	nop
 8014ab0:	2400ab04 	.word	0x2400ab04
 8014ab4:	2400ab0c 	.word	0x2400ab0c
 8014ab8:	2400aae8 	.word	0x2400aae8
 8014abc:	2400ab08 	.word	0x2400ab08
 8014ac0:	2400aaec 	.word	0x2400aaec

08014ac4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8014ac4:	2010      	movs	r0, #16
 8014ac6:	4770      	bx	lr

08014ac8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8014ac8:	2000      	movs	r0, #0
 8014aca:	4770      	bx	lr

08014acc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8014acc:	4b02      	ldr	r3, [pc, #8]	@ (8014ad8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8014ace:	8818      	ldrh	r0, [r3, #0]
 8014ad0:	0040      	lsls	r0, r0, #1
 8014ad2:	b280      	uxth	r0, r0
 8014ad4:	4770      	bx	lr
 8014ad6:	bf00      	nop
 8014ad8:	2400aa7e 	.word	0x2400aa7e

08014adc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014adc:	2bff      	cmp	r3, #255	@ 0xff
 8014ade:	d05e      	beq.n	8014b9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8014ae0:	2a0b      	cmp	r2, #11
 8014ae2:	d058      	beq.n	8014b96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8014ae4:	d80e      	bhi.n	8014b04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8014ae6:	2a03      	cmp	r2, #3
 8014ae8:	d04d      	beq.n	8014b86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 8014aea:	d804      	bhi.n	8014af6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014aec:	2a01      	cmp	r2, #1
 8014aee:	d04c      	beq.n	8014b8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 8014af0:	d94d      	bls.n	8014b8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8014af2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8014af4:	e031      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014af6:	2a09      	cmp	r2, #9
 8014af8:	d04d      	beq.n	8014b96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8014afa:	d84a      	bhi.n	8014b92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8014afc:	2a08      	cmp	r2, #8
 8014afe:	d048      	beq.n	8014b92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8014b00:	2300      	movs	r3, #0
 8014b02:	e02a      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b04:	2a2f      	cmp	r2, #47	@ 0x2f
 8014b06:	d02c      	beq.n	8014b62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8014b08:	d811      	bhi.n	8014b2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8014b0a:	2a2d      	cmp	r2, #45	@ 0x2d
 8014b0c:	d018      	beq.n	8014b40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8014b0e:	d831      	bhi.n	8014b74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 8014b10:	2a2c      	cmp	r2, #44	@ 0x2c
 8014b12:	d1f5      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b14:	684a      	ldr	r2, [r1, #4]
 8014b16:	7813      	ldrb	r3, [r2, #0]
 8014b18:	7852      	ldrb	r2, [r2, #1]
 8014b1a:	2a00      	cmp	r2, #0
 8014b1c:	d1f0      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b1e:	2b01      	cmp	r3, #1
 8014b20:	d01d      	beq.n	8014b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d02d      	beq.n	8014b82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8014b26:	2b02      	cmp	r3, #2
 8014b28:	d1ea      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b2a:	68c3      	ldr	r3, [r0, #12]
 8014b2c:	e015      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b2e:	2a31      	cmp	r2, #49	@ 0x31
 8014b30:	d004      	beq.n	8014b3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8014b32:	d332      	bcc.n	8014b9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8014b34:	2a32      	cmp	r2, #50	@ 0x32
 8014b36:	d030      	beq.n	8014b9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8014b38:	2a33      	cmp	r2, #51	@ 0x33
 8014b3a:	d1e1      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b3c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8014b3e:	e00c      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b40:	684a      	ldr	r2, [r1, #4]
 8014b42:	7813      	ldrb	r3, [r2, #0]
 8014b44:	7852      	ldrb	r2, [r2, #1]
 8014b46:	2a00      	cmp	r2, #0
 8014b48:	d1da      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d004      	beq.n	8014b58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8014b4e:	d30f      	bcc.n	8014b70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d1d5      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b54:	6943      	ldr	r3, [r0, #20]
 8014b56:	e000      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b58:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	4770      	bx	lr
 8014b5e:	69c3      	ldr	r3, [r0, #28]
 8014b60:	e7fb      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b62:	684b      	ldr	r3, [r1, #4]
 8014b64:	781a      	ldrb	r2, [r3, #0]
 8014b66:	785b      	ldrb	r3, [r3, #1]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d1c9      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b6c:	2a00      	cmp	r2, #0
 8014b6e:	d1f4      	bne.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014b72:	e7f2      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b74:	684b      	ldr	r3, [r1, #4]
 8014b76:	781a      	ldrb	r2, [r3, #0]
 8014b78:	785b      	ldrb	r3, [r3, #1]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d1c0      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b7e:	2a00      	cmp	r2, #0
 8014b80:	d1eb      	bne.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b82:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014b84:	e7e9      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b86:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014b88:	e7e7      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b8a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8014b8c:	e7e5      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b8e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8014b90:	e7e3      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b92:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8014b94:	e7e1      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b96:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8014b98:	e7df      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b9a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8014b9c:	e7dd      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014b9e:	2a0b      	cmp	r2, #11
 8014ba0:	d059      	beq.n	8014c56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8014ba2:	d80e      	bhi.n	8014bc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8014ba4:	2a03      	cmp	r2, #3
 8014ba6:	d050      	beq.n	8014c4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8014ba8:	d804      	bhi.n	8014bb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8014baa:	2a01      	cmp	r2, #1
 8014bac:	d04f      	beq.n	8014c4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8014bae:	d950      	bls.n	8014c52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8014bb0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8014bb2:	e7d2      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014bb4:	2a09      	cmp	r2, #9
 8014bb6:	d04e      	beq.n	8014c56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8014bb8:	d801      	bhi.n	8014bbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8014bba:	2a08      	cmp	r2, #8
 8014bbc:	d1a0      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014bbe:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8014bc0:	e7cb      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014bc2:	2a2f      	cmp	r2, #47	@ 0x2f
 8014bc4:	d02d      	beq.n	8014c22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8014bc6:	d811      	bhi.n	8014bec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8014bc8:	2a2d      	cmp	r2, #45	@ 0x2d
 8014bca:	d018      	beq.n	8014bfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8014bcc:	d833      	bhi.n	8014c36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8014bce:	2a2c      	cmp	r2, #44	@ 0x2c
 8014bd0:	d196      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014bd2:	684a      	ldr	r2, [r1, #4]
 8014bd4:	7813      	ldrb	r3, [r2, #0]
 8014bd6:	7852      	ldrb	r2, [r2, #1]
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	d191      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d01e      	beq.n	8014c1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d030      	beq.n	8014c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8014be4:	2b02      	cmp	r3, #2
 8014be6:	d18b      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014be8:	6903      	ldr	r3, [r0, #16]
 8014bea:	e7b6      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014bec:	2a31      	cmp	r2, #49	@ 0x31
 8014bee:	d004      	beq.n	8014bfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8014bf0:	d333      	bcc.n	8014c5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8014bf2:	2a32      	cmp	r2, #50	@ 0x32
 8014bf4:	d031      	beq.n	8014c5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8014bf6:	2a33      	cmp	r2, #51	@ 0x33
 8014bf8:	d182      	bne.n	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014bfa:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8014bfc:	e7ad      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014bfe:	684a      	ldr	r2, [r1, #4]
 8014c00:	7813      	ldrb	r3, [r2, #0]
 8014c02:	7852      	ldrb	r2, [r2, #1]
 8014c04:	2a00      	cmp	r2, #0
 8014c06:	f47f af7b 	bne.w	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d005      	beq.n	8014c1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014c0e:	d310      	bcc.n	8014c32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8014c10:	2b02      	cmp	r3, #2
 8014c12:	f47f af75 	bne.w	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014c16:	6983      	ldr	r3, [r0, #24]
 8014c18:	e79f      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c1a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014c1c:	e79d      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c1e:	6a03      	ldr	r3, [r0, #32]
 8014c20:	e79b      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c22:	684b      	ldr	r3, [r1, #4]
 8014c24:	781a      	ldrb	r2, [r3, #0]
 8014c26:	785b      	ldrb	r3, [r3, #1]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f47f af69 	bne.w	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014c2e:	2a00      	cmp	r2, #0
 8014c30:	d193      	bne.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c32:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014c34:	e791      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c36:	684b      	ldr	r3, [r1, #4]
 8014c38:	781a      	ldrb	r2, [r3, #0]
 8014c3a:	785b      	ldrb	r3, [r3, #1]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	f47f af5f 	bne.w	8014b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014c42:	2a00      	cmp	r2, #0
 8014c44:	d189      	bne.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014c48:	e787      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c4a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8014c4c:	e785      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c4e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8014c50:	e783      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c52:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8014c54:	e781      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c56:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014c58:	e77f      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014c5a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8014c5c:	e77d      	b.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

08014c5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c62:	b087      	sub	sp, #28
 8014c64:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8014c66:	9205      	str	r2, [sp, #20]
 8014c68:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8014c6c:	9101      	str	r1, [sp, #4]
 8014c6e:	9202      	str	r2, [sp, #8]
 8014c70:	6841      	ldr	r1, [r0, #4]
 8014c72:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8014c76:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8014c7a:	fb01 2404 	mla	r4, r1, r4, r2
 8014c7e:	6802      	ldr	r2, [r0, #0]
 8014c80:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014c84:	f8de 2000 	ldr.w	r2, [lr]
 8014c88:	9203      	str	r2, [sp, #12]
 8014c8a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8014c8e:	3204      	adds	r2, #4
 8014c90:	9204      	str	r2, [sp, #16]
 8014c92:	9a02      	ldr	r2, [sp, #8]
 8014c94:	43d6      	mvns	r6, r2
 8014c96:	b2f6      	uxtb	r6, r6
 8014c98:	9a01      	ldr	r2, [sp, #4]
 8014c9a:	2a00      	cmp	r2, #0
 8014c9c:	dc03      	bgt.n	8014ca6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014c9e:	9a05      	ldr	r2, [sp, #20]
 8014ca0:	2a00      	cmp	r2, #0
 8014ca2:	f340 8129 	ble.w	8014ef8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014ca6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014ca8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8014cac:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8014cb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014cb2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8014cb6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	dd0e      	ble.n	8014cdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014cbe:	1408      	asrs	r0, r1, #16
 8014cc0:	d405      	bmi.n	8014cce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014cc2:	4560      	cmp	r0, ip
 8014cc4:	da03      	bge.n	8014cce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014cc6:	1410      	asrs	r0, r2, #16
 8014cc8:	d401      	bmi.n	8014cce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014cca:	42b8      	cmp	r0, r7
 8014ccc:	db07      	blt.n	8014cde <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8014cce:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	3402      	adds	r4, #2
 8014cd4:	4401      	add	r1, r0
 8014cd6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014cd8:	4402      	add	r2, r0
 8014cda:	e7ee      	b.n	8014cba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014cdc:	d071      	beq.n	8014dc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8014cde:	1e58      	subs	r0, r3, #1
 8014ce0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8014ce2:	fb05 1500 	mla	r5, r5, r0, r1
 8014ce6:	142d      	asrs	r5, r5, #16
 8014ce8:	d45f      	bmi.n	8014daa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014cea:	4565      	cmp	r5, ip
 8014cec:	da5d      	bge.n	8014daa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014cee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8014cf0:	fb05 2000 	mla	r0, r5, r0, r2
 8014cf4:	1400      	asrs	r0, r0, #16
 8014cf6:	d458      	bmi.n	8014daa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014cf8:	42b8      	cmp	r0, r7
 8014cfa:	da56      	bge.n	8014daa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8014cfc:	4699      	mov	r9, r3
 8014cfe:	46a2      	mov	sl, r4
 8014d00:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8014d04:	f1b9 0f00 	cmp.w	r9, #0
 8014d08:	dd57      	ble.n	8014dba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8014d0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014d0e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8014d12:	9803      	ldr	r0, [sp, #12]
 8014d14:	140d      	asrs	r5, r1, #16
 8014d16:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d1a:	fb07 000c 	mla	r0, r7, ip, r0
 8014d1e:	5d40      	ldrb	r0, [r0, r5]
 8014d20:	9d04      	ldr	r5, [sp, #16]
 8014d22:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8014d26:	f8ba 5000 	ldrh.w	r5, [sl]
 8014d2a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8014d2e:	122f      	asrs	r7, r5, #8
 8014d30:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8014d34:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8014d38:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8014d3c:	00ed      	lsls	r5, r5, #3
 8014d3e:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8014d42:	fb17 f706 	smulbb	r7, r7, r6
 8014d46:	b2ed      	uxtb	r5, r5
 8014d48:	fb18 f806 	smulbb	r8, r8, r6
 8014d4c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8014d50:	10c7      	asrs	r7, r0, #3
 8014d52:	fb15 f506 	smulbb	r5, r5, r6
 8014d56:	00c0      	lsls	r0, r0, #3
 8014d58:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8014d5c:	fa1f fc8c 	uxth.w	ip, ip
 8014d60:	b2c0      	uxtb	r0, r0
 8014d62:	fb07 870b 	mla	r7, r7, fp, r8
 8014d66:	fb00 500b 	mla	r0, r0, fp, r5
 8014d6a:	f10c 0501 	add.w	r5, ip, #1
 8014d6e:	b2bf      	uxth	r7, r7
 8014d70:	b280      	uxth	r0, r0
 8014d72:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014d76:	f107 0801 	add.w	r8, r7, #1
 8014d7a:	1c45      	adds	r5, r0, #1
 8014d7c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8014d80:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014d84:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8014d88:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014d8a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8014d8e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8014d92:	4401      	add	r1, r0
 8014d94:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8014d98:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014d9a:	ea45 0c0c 	orr.w	ip, r5, ip
 8014d9e:	4402      	add	r2, r0
 8014da0:	ea4c 0c08 	orr.w	ip, ip, r8
 8014da4:	f82a cb02 	strh.w	ip, [sl], #2
 8014da8:	e7ac      	b.n	8014d04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8014daa:	f04f 0800 	mov.w	r8, #0
 8014dae:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8014db2:	eb03 0008 	add.w	r0, r3, r8
 8014db6:	2800      	cmp	r0, #0
 8014db8:	dc41      	bgt.n	8014e3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8014dba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014dbe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014dc2:	9b01      	ldr	r3, [sp, #4]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f340 8097 	ble.w	8014ef8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014dce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014dd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014dd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014dd8:	eef0 6a62 	vmov.f32	s13, s5
 8014ddc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014de0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014de4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014de8:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8014dec:	eef0 6a43 	vmov.f32	s13, s6
 8014df0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014df4:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8014df8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014dfc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014e00:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014e04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014e08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014e0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014e10:	ee12 2a90 	vmov	r2, s5
 8014e14:	eef0 2a47 	vmov.f32	s5, s14
 8014e18:	fb92 f3f3 	sdiv	r3, r2, r3
 8014e1c:	ee13 2a10 	vmov	r2, s6
 8014e20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014e22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014e24:	eeb0 3a67 	vmov.f32	s6, s15
 8014e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8014e2c:	9314      	str	r3, [sp, #80]	@ 0x50
 8014e2e:	9b01      	ldr	r3, [sp, #4]
 8014e30:	9a05      	ldr	r2, [sp, #20]
 8014e32:	3b01      	subs	r3, #1
 8014e34:	9301      	str	r3, [sp, #4]
 8014e36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014e38:	bf08      	it	eq
 8014e3a:	4613      	moveq	r3, r2
 8014e3c:	e72c      	b.n	8014c98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8014e3e:	140f      	asrs	r7, r1, #16
 8014e40:	d453      	bmi.n	8014eea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8014e42:	f8de 5008 	ldr.w	r5, [lr, #8]
 8014e46:	42bd      	cmp	r5, r7
 8014e48:	dd4f      	ble.n	8014eea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8014e4a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8014e4e:	d44c      	bmi.n	8014eea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8014e50:	f8de 000c 	ldr.w	r0, [lr, #12]
 8014e54:	4560      	cmp	r0, ip
 8014e56:	dd48      	ble.n	8014eea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8014e58:	9803      	ldr	r0, [sp, #12]
 8014e5a:	b22d      	sxth	r5, r5
 8014e5c:	fb0c 0505 	mla	r5, ip, r5, r0
 8014e60:	5de8      	ldrb	r0, [r5, r7]
 8014e62:	9d04      	ldr	r5, [sp, #16]
 8014e64:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8014e68:	f06f 0501 	mvn.w	r5, #1
 8014e6c:	fb05 fb08 	mul.w	fp, r5, r8
 8014e70:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8014e74:	f834 500b 	ldrh.w	r5, [r4, fp]
 8014e78:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8014e7c:	122f      	asrs	r7, r5, #8
 8014e7e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8014e82:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8014e86:	00ed      	lsls	r5, r5, #3
 8014e88:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8014e8c:	fb17 f706 	smulbb	r7, r7, r6
 8014e90:	b2ed      	uxtb	r5, r5
 8014e92:	fb19 f906 	smulbb	r9, r9, r6
 8014e96:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8014e9a:	10c7      	asrs	r7, r0, #3
 8014e9c:	fb15 f506 	smulbb	r5, r5, r6
 8014ea0:	00c0      	lsls	r0, r0, #3
 8014ea2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8014ea6:	fa1f fc8c 	uxth.w	ip, ip
 8014eaa:	b2c0      	uxtb	r0, r0
 8014eac:	fb07 970a 	mla	r7, r7, sl, r9
 8014eb0:	fb00 500a 	mla	r0, r0, sl, r5
 8014eb4:	f10c 0501 	add.w	r5, ip, #1
 8014eb8:	b2bf      	uxth	r7, r7
 8014eba:	b280      	uxth	r0, r0
 8014ebc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014ec0:	f107 0901 	add.w	r9, r7, #1
 8014ec4:	1c45      	adds	r5, r0, #1
 8014ec6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8014eca:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8014ece:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8014ed2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8014ed6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8014eda:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8014ede:	ea45 0c0c 	orr.w	ip, r5, ip
 8014ee2:	ea4c 0c09 	orr.w	ip, ip, r9
 8014ee6:	f824 c00b 	strh.w	ip, [r4, fp]
 8014eea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014eec:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ef0:	4401      	add	r1, r0
 8014ef2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014ef4:	4402      	add	r2, r0
 8014ef6:	e75c      	b.n	8014db2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014ef8:	b007      	add	sp, #28
 8014efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014efe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f02:	b085      	sub	sp, #20
 8014f04:	4693      	mov	fp, r2
 8014f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014f0a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014f0c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8014f0e:	6870      	ldr	r0, [r6, #4]
 8014f10:	9100      	str	r1, [sp, #0]
 8014f12:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8014f16:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8014f1a:	fb00 2404 	mla	r4, r0, r4, r2
 8014f1e:	6832      	ldr	r2, [r6, #0]
 8014f20:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014f24:	682a      	ldr	r2, [r5, #0]
 8014f26:	9201      	str	r2, [sp, #4]
 8014f28:	686a      	ldr	r2, [r5, #4]
 8014f2a:	3204      	adds	r2, #4
 8014f2c:	9202      	str	r2, [sp, #8]
 8014f2e:	9a00      	ldr	r2, [sp, #0]
 8014f30:	2a00      	cmp	r2, #0
 8014f32:	dc03      	bgt.n	8014f3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8014f34:	f1bb 0f00 	cmp.w	fp, #0
 8014f38:	f340 80a0 	ble.w	801507c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8014f3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014f3e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8014f42:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8014f46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014f48:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8014f4c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	dd0c      	ble.n	8014f6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014f54:	1406      	asrs	r6, r0, #16
 8014f56:	d405      	bmi.n	8014f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014f58:	454e      	cmp	r6, r9
 8014f5a:	da03      	bge.n	8014f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014f5c:	1416      	asrs	r6, r2, #16
 8014f5e:	d401      	bmi.n	8014f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014f60:	4546      	cmp	r6, r8
 8014f62:	db05      	blt.n	8014f70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014f64:	4470      	add	r0, lr
 8014f66:	4462      	add	r2, ip
 8014f68:	3b01      	subs	r3, #1
 8014f6a:	3402      	adds	r4, #2
 8014f6c:	e7f0      	b.n	8014f50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014f6e:	d00f      	beq.n	8014f90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014f70:	1e5e      	subs	r6, r3, #1
 8014f72:	fb0e 0706 	mla	r7, lr, r6, r0
 8014f76:	143f      	asrs	r7, r7, #16
 8014f78:	d541      	bpl.n	8014ffe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8014f7a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8014f7e:	4698      	mov	r8, r3
 8014f80:	9603      	str	r6, [sp, #12]
 8014f82:	f1b8 0f00 	cmp.w	r8, #0
 8014f86:	dc59      	bgt.n	801503c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8014f88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014f8c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014f90:	9b00      	ldr	r3, [sp, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	dd72      	ble.n	801507c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8014f96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014fa0:	eeb0 6a62 	vmov.f32	s12, s5
 8014fa4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014fa8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014fac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014fb0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8014fb4:	eeb0 6a43 	vmov.f32	s12, s6
 8014fb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014fbc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8014fc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014fc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014fc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014fcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014fd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014fd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014fd8:	ee12 2a90 	vmov	r2, s5
 8014fdc:	eef0 2a47 	vmov.f32	s5, s14
 8014fe0:	fb92 fef3 	sdiv	lr, r2, r3
 8014fe4:	ee13 2a10 	vmov	r2, s6
 8014fe8:	eeb0 3a67 	vmov.f32	s6, s15
 8014fec:	fb92 fcf3 	sdiv	ip, r2, r3
 8014ff0:	9b00      	ldr	r3, [sp, #0]
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	9300      	str	r3, [sp, #0]
 8014ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ff8:	bf08      	it	eq
 8014ffa:	465b      	moveq	r3, fp
 8014ffc:	e797      	b.n	8014f2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8014ffe:	454f      	cmp	r7, r9
 8015000:	dabb      	bge.n	8014f7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015002:	fb0c 2606 	mla	r6, ip, r6, r2
 8015006:	1436      	asrs	r6, r6, #16
 8015008:	d4b7      	bmi.n	8014f7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801500a:	4546      	cmp	r6, r8
 801500c:	dab5      	bge.n	8014f7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801500e:	461e      	mov	r6, r3
 8015010:	46a0      	mov	r8, r4
 8015012:	2e00      	cmp	r6, #0
 8015014:	ddb8      	ble.n	8014f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8015016:	1417      	asrs	r7, r2, #16
 8015018:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801501c:	9901      	ldr	r1, [sp, #4]
 801501e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8015022:	4462      	add	r2, ip
 8015024:	4470      	add	r0, lr
 8015026:	fb0a 1707 	mla	r7, sl, r7, r1
 801502a:	9902      	ldr	r1, [sp, #8]
 801502c:	3e01      	subs	r6, #1
 801502e:	f817 7009 	ldrb.w	r7, [r7, r9]
 8015032:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8015036:	f828 7b02 	strh.w	r7, [r8], #2
 801503a:	e7ea      	b.n	8015012 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801503c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015040:	d417      	bmi.n	8015072 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015042:	68ae      	ldr	r6, [r5, #8]
 8015044:	454e      	cmp	r6, r9
 8015046:	dd14      	ble.n	8015072 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015048:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801504c:	d411      	bmi.n	8015072 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801504e:	68ef      	ldr	r7, [r5, #12]
 8015050:	4557      	cmp	r7, sl
 8015052:	dd0e      	ble.n	8015072 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8015054:	9f01      	ldr	r7, [sp, #4]
 8015056:	b236      	sxth	r6, r6
 8015058:	f06f 0101 	mvn.w	r1, #1
 801505c:	fb0a 7606 	mla	r6, sl, r6, r7
 8015060:	9f02      	ldr	r7, [sp, #8]
 8015062:	f816 6009 	ldrb.w	r6, [r6, r9]
 8015066:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801506a:	fb01 f608 	mul.w	r6, r1, r8
 801506e:	9903      	ldr	r1, [sp, #12]
 8015070:	538f      	strh	r7, [r1, r6]
 8015072:	4470      	add	r0, lr
 8015074:	4462      	add	r2, ip
 8015076:	f108 38ff 	add.w	r8, r8, #4294967295
 801507a:	e782      	b.n	8014f82 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801507c:	b005      	add	sp, #20
 801507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015082 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015086:	b087      	sub	sp, #28
 8015088:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801508a:	9205      	str	r2, [sp, #20]
 801508c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015090:	9102      	str	r1, [sp, #8]
 8015092:	9203      	str	r2, [sp, #12]
 8015094:	6861      	ldr	r1, [r4, #4]
 8015096:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801509a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801509e:	fb01 2000 	mla	r0, r1, r0, r2
 80150a2:	6822      	ldr	r2, [r4, #0]
 80150a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80150a8:	9200      	str	r2, [sp, #0]
 80150aa:	f8dc 2000 	ldr.w	r2, [ip]
 80150ae:	9204      	str	r2, [sp, #16]
 80150b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80150b4:	3204      	adds	r2, #4
 80150b6:	9201      	str	r2, [sp, #4]
 80150b8:	9a03      	ldr	r2, [sp, #12]
 80150ba:	43d5      	mvns	r5, r2
 80150bc:	b2ed      	uxtb	r5, r5
 80150be:	9a02      	ldr	r2, [sp, #8]
 80150c0:	2a00      	cmp	r2, #0
 80150c2:	dc03      	bgt.n	80150cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80150c4:	9a05      	ldr	r2, [sp, #20]
 80150c6:	2a00      	cmp	r2, #0
 80150c8:	f340 812c 	ble.w	8015324 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80150cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80150ce:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80150d2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80150d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80150d8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80150dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	dd10      	ble.n	8015106 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80150e4:	140c      	asrs	r4, r1, #16
 80150e6:	d405      	bmi.n	80150f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80150e8:	4574      	cmp	r4, lr
 80150ea:	da03      	bge.n	80150f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80150ec:	1414      	asrs	r4, r2, #16
 80150ee:	d401      	bmi.n	80150f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80150f0:	42bc      	cmp	r4, r7
 80150f2:	db09      	blt.n	8015108 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80150f4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80150f6:	3b01      	subs	r3, #1
 80150f8:	9800      	ldr	r0, [sp, #0]
 80150fa:	4421      	add	r1, r4
 80150fc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80150fe:	3002      	adds	r0, #2
 8015100:	4422      	add	r2, r4
 8015102:	9000      	str	r0, [sp, #0]
 8015104:	e7ec      	b.n	80150e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015106:	d071      	beq.n	80151ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015108:	1e5c      	subs	r4, r3, #1
 801510a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801510c:	fb06 1604 	mla	r6, r6, r4, r1
 8015110:	1436      	asrs	r6, r6, #16
 8015112:	d45d      	bmi.n	80151d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015114:	4576      	cmp	r6, lr
 8015116:	da5b      	bge.n	80151d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015118:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801511a:	fb06 2404 	mla	r4, r6, r4, r2
 801511e:	1424      	asrs	r4, r4, #16
 8015120:	d456      	bmi.n	80151d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015122:	42bc      	cmp	r4, r7
 8015124:	da54      	bge.n	80151d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8015126:	4698      	mov	r8, r3
 8015128:	f8dd 9000 	ldr.w	r9, [sp]
 801512c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8015130:	f1b8 0f00 	cmp.w	r8, #0
 8015134:	dd54      	ble.n	80151e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015136:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801513a:	1414      	asrs	r4, r2, #16
 801513c:	9804      	ldr	r0, [sp, #16]
 801513e:	140e      	asrs	r6, r1, #16
 8015140:	f108 38ff 	add.w	r8, r8, #4294967295
 8015144:	fb07 0404 	mla	r4, r7, r4, r0
 8015148:	9801      	ldr	r0, [sp, #4]
 801514a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801514e:	f8b9 4000 	ldrh.w	r4, [r9]
 8015152:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015156:	1227      	asrs	r7, r4, #8
 8015158:	eb00 0b0e 	add.w	fp, r0, lr
 801515c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8015160:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8015164:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015166:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801516a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801516e:	4401      	add	r1, r0
 8015170:	fb16 f60a 	smulbb	r6, r6, sl
 8015174:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015176:	fb1b fb0a 	smulbb	fp, fp, sl
 801517a:	fb07 6705 	mla	r7, r7, r5, r6
 801517e:	10e6      	asrs	r6, r4, #3
 8015180:	00e4      	lsls	r4, r4, #3
 8015182:	4402      	add	r2, r0
 8015184:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015188:	b2bf      	uxth	r7, r7
 801518a:	b2e4      	uxtb	r4, r4
 801518c:	fb06 b605 	mla	r6, r6, r5, fp
 8015190:	fb14 f405 	smulbb	r4, r4, r5
 8015194:	b2b6      	uxth	r6, r6
 8015196:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801519a:	1c7c      	adds	r4, r7, #1
 801519c:	f106 0b01 	add.w	fp, r6, #1
 80151a0:	fa1f fe8e 	uxth.w	lr, lr
 80151a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80151a8:	f10e 0401 	add.w	r4, lr, #1
 80151ac:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80151b0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80151b4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80151b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80151bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80151c0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80151c4:	4327      	orrs	r7, r4
 80151c6:	ea47 070b 	orr.w	r7, r7, fp
 80151ca:	f829 7b02 	strh.w	r7, [r9], #2
 80151ce:	e7af      	b.n	8015130 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80151d0:	f04f 0e00 	mov.w	lr, #0
 80151d4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80151d8:	eb03 040e 	add.w	r4, r3, lr
 80151dc:	2c00      	cmp	r4, #0
 80151de:	dc43      	bgt.n	8015268 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80151e0:	9a00      	ldr	r2, [sp, #0]
 80151e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80151e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80151ea:	9300      	str	r3, [sp, #0]
 80151ec:	9b02      	ldr	r3, [sp, #8]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f340 8098 	ble.w	8015324 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80151f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80151f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80151fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80151fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015202:	eef0 6a62 	vmov.f32	s13, s5
 8015206:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801520a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801520e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015212:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 8015216:	eef0 6a43 	vmov.f32	s13, s6
 801521a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801521e:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 8015222:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015226:	ee61 7a27 	vmul.f32	s15, s2, s15
 801522a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801522e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015232:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015236:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801523a:	ee12 2a90 	vmov	r2, s5
 801523e:	eef0 2a47 	vmov.f32	s5, s14
 8015242:	fb92 f3f3 	sdiv	r3, r2, r3
 8015246:	ee13 2a10 	vmov	r2, s6
 801524a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801524c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801524e:	eeb0 3a67 	vmov.f32	s6, s15
 8015252:	fb92 f3f3 	sdiv	r3, r2, r3
 8015256:	9314      	str	r3, [sp, #80]	@ 0x50
 8015258:	9b02      	ldr	r3, [sp, #8]
 801525a:	9a05      	ldr	r2, [sp, #20]
 801525c:	3b01      	subs	r3, #1
 801525e:	9302      	str	r3, [sp, #8]
 8015260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015262:	bf08      	it	eq
 8015264:	4613      	moveq	r3, r2
 8015266:	e72a      	b.n	80150be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015268:	140f      	asrs	r7, r1, #16
 801526a:	d454      	bmi.n	8015316 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801526c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015270:	42be      	cmp	r6, r7
 8015272:	dd50      	ble.n	8015316 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015274:	ea5f 4822 	movs.w	r8, r2, asr #16
 8015278:	d44d      	bmi.n	8015316 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801527a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801527e:	4544      	cmp	r4, r8
 8015280:	dd49      	ble.n	8015316 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8015282:	9c04      	ldr	r4, [sp, #16]
 8015284:	b236      	sxth	r6, r6
 8015286:	f06f 0001 	mvn.w	r0, #1
 801528a:	fb08 4606 	mla	r6, r8, r6, r4
 801528e:	9c01      	ldr	r4, [sp, #4]
 8015290:	fb00 fa0e 	mul.w	sl, r0, lr
 8015294:	9800      	ldr	r0, [sp, #0]
 8015296:	f816 8007 	ldrb.w	r8, [r6, r7]
 801529a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801529e:	eb04 0b08 	add.w	fp, r4, r8
 80152a2:	f830 400a 	ldrh.w	r4, [r0, sl]
 80152a6:	9801      	ldr	r0, [sp, #4]
 80152a8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80152ac:	1227      	asrs	r7, r4, #8
 80152ae:	f89b b001 	ldrb.w	fp, [fp, #1]
 80152b2:	fb16 f609 	smulbb	r6, r6, r9
 80152b6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80152ba:	f810 8008 	ldrb.w	r8, [r0, r8]
 80152be:	fb1b fb09 	smulbb	fp, fp, r9
 80152c2:	fb07 6705 	mla	r7, r7, r5, r6
 80152c6:	10e6      	asrs	r6, r4, #3
 80152c8:	00e4      	lsls	r4, r4, #3
 80152ca:	9800      	ldr	r0, [sp, #0]
 80152cc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80152d0:	b2bf      	uxth	r7, r7
 80152d2:	b2e4      	uxtb	r4, r4
 80152d4:	fb06 b605 	mla	r6, r6, r5, fp
 80152d8:	fb14 f405 	smulbb	r4, r4, r5
 80152dc:	b2b6      	uxth	r6, r6
 80152de:	fb08 4809 	mla	r8, r8, r9, r4
 80152e2:	1c7c      	adds	r4, r7, #1
 80152e4:	f106 0b01 	add.w	fp, r6, #1
 80152e8:	fa1f f888 	uxth.w	r8, r8
 80152ec:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80152f0:	f108 0401 	add.w	r4, r8, #1
 80152f4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80152f8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80152fc:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8015300:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015304:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8015308:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801530c:	4327      	orrs	r7, r4
 801530e:	ea47 070b 	orr.w	r7, r7, fp
 8015312:	f820 700a 	strh.w	r7, [r0, sl]
 8015316:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8015318:	f10e 3eff 	add.w	lr, lr, #4294967295
 801531c:	4401      	add	r1, r0
 801531e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8015320:	4402      	add	r2, r0
 8015322:	e759      	b.n	80151d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015324:	b007      	add	sp, #28
 8015326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801532c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015330:	b085      	sub	sp, #20
 8015332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015336:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015338:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801533a:	9203      	str	r2, [sp, #12]
 801533c:	6870      	ldr	r0, [r6, #4]
 801533e:	686f      	ldr	r7, [r5, #4]
 8015340:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8015344:	3704      	adds	r7, #4
 8015346:	9101      	str	r1, [sp, #4]
 8015348:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801534c:	fb00 2404 	mla	r4, r0, r4, r2
 8015350:	6832      	ldr	r2, [r6, #0]
 8015352:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015356:	682a      	ldr	r2, [r5, #0]
 8015358:	9202      	str	r2, [sp, #8]
 801535a:	9a01      	ldr	r2, [sp, #4]
 801535c:	2a00      	cmp	r2, #0
 801535e:	dc03      	bgt.n	8015368 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015360:	9a03      	ldr	r2, [sp, #12]
 8015362:	2a00      	cmp	r2, #0
 8015364:	f340 80cc 	ble.w	8015500 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8015368:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801536a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801536e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015372:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015374:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8015378:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801537c:	2b00      	cmp	r3, #0
 801537e:	dd0d      	ble.n	801539c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015380:	1406      	asrs	r6, r0, #16
 8015382:	d405      	bmi.n	8015390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015384:	454e      	cmp	r6, r9
 8015386:	da03      	bge.n	8015390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015388:	1416      	asrs	r6, r2, #16
 801538a:	d401      	bmi.n	8015390 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801538c:	4546      	cmp	r6, r8
 801538e:	db06      	blt.n	801539e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015390:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015392:	4460      	add	r0, ip
 8015394:	3b01      	subs	r3, #1
 8015396:	3402      	adds	r4, #2
 8015398:	4432      	add	r2, r6
 801539a:	e7ef      	b.n	801537c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801539c:	d00f      	beq.n	80153be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801539e:	1e5e      	subs	r6, r3, #1
 80153a0:	fb0c 0e06 	mla	lr, ip, r6, r0
 80153a4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80153a8:	d543      	bpl.n	8015432 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80153aa:	4698      	mov	r8, r3
 80153ac:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80153b0:	f1b8 0f00 	cmp.w	r8, #0
 80153b4:	dc71      	bgt.n	801549a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80153b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80153ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80153be:	9b01      	ldr	r3, [sp, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	f340 809d 	ble.w	8015500 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80153c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80153ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80153d0:	eeb0 6a62 	vmov.f32	s12, s5
 80153d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80153d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80153dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80153e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80153e4:	eeb0 6a43 	vmov.f32	s12, s6
 80153e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80153ec:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80153f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80153f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80153f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80153fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015400:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015404:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015408:	ee12 2a90 	vmov	r2, s5
 801540c:	eef0 2a47 	vmov.f32	s5, s14
 8015410:	fb92 fcf3 	sdiv	ip, r2, r3
 8015414:	ee13 2a10 	vmov	r2, s6
 8015418:	eeb0 3a67 	vmov.f32	s6, s15
 801541c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015420:	9312      	str	r3, [sp, #72]	@ 0x48
 8015422:	9b01      	ldr	r3, [sp, #4]
 8015424:	9a03      	ldr	r2, [sp, #12]
 8015426:	3b01      	subs	r3, #1
 8015428:	9301      	str	r3, [sp, #4]
 801542a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801542c:	bf08      	it	eq
 801542e:	4613      	moveq	r3, r2
 8015430:	e793      	b.n	801535a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015432:	45ce      	cmp	lr, r9
 8015434:	dab9      	bge.n	80153aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015436:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015438:	fb01 2606 	mla	r6, r1, r6, r2
 801543c:	1436      	asrs	r6, r6, #16
 801543e:	d4b4      	bmi.n	80153aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015440:	4546      	cmp	r6, r8
 8015442:	dab2      	bge.n	80153aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015444:	4698      	mov	r8, r3
 8015446:	46a2      	mov	sl, r4
 8015448:	f1b8 0f00 	cmp.w	r8, #0
 801544c:	ddb3      	ble.n	80153b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801544e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8015452:	1416      	asrs	r6, r2, #16
 8015454:	9902      	ldr	r1, [sp, #8]
 8015456:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801545a:	f108 38ff 	add.w	r8, r8, #4294967295
 801545e:	4460      	add	r0, ip
 8015460:	fb09 1606 	mla	r6, r9, r6, r1
 8015464:	4928      	ldr	r1, [pc, #160]	@ (8015508 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8015466:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801546a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801546e:	eb07 0b0e 	add.w	fp, r7, lr
 8015472:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8015476:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801547a:	00f6      	lsls	r6, r6, #3
 801547c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8015480:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015482:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8015486:	440a      	add	r2, r1
 8015488:	ea49 0606 	orr.w	r6, r9, r6
 801548c:	f817 900e 	ldrb.w	r9, [r7, lr]
 8015490:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8015494:	f82a 6b02 	strh.w	r6, [sl], #2
 8015498:	e7d6      	b.n	8015448 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801549a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801549e:	d429      	bmi.n	80154f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80154a0:	68ae      	ldr	r6, [r5, #8]
 80154a2:	454e      	cmp	r6, r9
 80154a4:	dd26      	ble.n	80154f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80154a6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80154aa:	d423      	bmi.n	80154f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80154ac:	68e9      	ldr	r1, [r5, #12]
 80154ae:	4559      	cmp	r1, fp
 80154b0:	dd20      	ble.n	80154f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80154b2:	fa0f fe86 	sxth.w	lr, r6
 80154b6:	9902      	ldr	r1, [sp, #8]
 80154b8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 80154bc:	f06f 0101 	mvn.w	r1, #1
 80154c0:	f81e e009 	ldrb.w	lr, [lr, r9]
 80154c4:	fb01 f908 	mul.w	r9, r1, r8
 80154c8:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 80154cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80154d0:	eb07 060e 	add.w	r6, r7, lr
 80154d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80154d8:	7876      	ldrb	r6, [r6, #1]
 80154da:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80154de:	00f6      	lsls	r6, r6, #3
 80154e0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80154e4:	ea4b 0606 	orr.w	r6, fp, r6
 80154e8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80154ec:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80154f0:	f82a 6009 	strh.w	r6, [sl, r9]
 80154f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80154f6:	4460      	add	r0, ip
 80154f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80154fc:	440a      	add	r2, r1
 80154fe:	e757      	b.n	80153b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8015500:	b005      	add	sp, #20
 8015502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015506:	bf00      	nop
 8015508:	fffff800 	.word	0xfffff800

0801550c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015510:	b087      	sub	sp, #28
 8015512:	468b      	mov	fp, r1
 8015514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015518:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801551a:	9204      	str	r2, [sp, #16]
 801551c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015520:	6841      	ldr	r1, [r0, #4]
 8015522:	9205      	str	r2, [sp, #20]
 8015524:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8015528:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801552c:	fb01 2404 	mla	r4, r1, r4, r2
 8015530:	6802      	ldr	r2, [r0, #0]
 8015532:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015536:	f8dc 2000 	ldr.w	r2, [ip]
 801553a:	9201      	str	r2, [sp, #4]
 801553c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015540:	3204      	adds	r2, #4
 8015542:	9202      	str	r2, [sp, #8]
 8015544:	f1bb 0f00 	cmp.w	fp, #0
 8015548:	dc03      	bgt.n	8015552 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801554a:	9a04      	ldr	r2, [sp, #16]
 801554c:	2a00      	cmp	r2, #0
 801554e:	f340 8138 	ble.w	80157c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8015552:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015554:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8015558:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801555c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801555e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8015562:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015566:	2b00      	cmp	r3, #0
 8015568:	dd0e      	ble.n	8015588 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801556a:	1402      	asrs	r2, r0, #16
 801556c:	d405      	bmi.n	801557a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801556e:	42ba      	cmp	r2, r7
 8015570:	da03      	bge.n	801557a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015572:	140a      	asrs	r2, r1, #16
 8015574:	d401      	bmi.n	801557a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015576:	42b2      	cmp	r2, r6
 8015578:	db07      	blt.n	801558a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801557a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801557c:	3b01      	subs	r3, #1
 801557e:	3402      	adds	r4, #2
 8015580:	4410      	add	r0, r2
 8015582:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015584:	4411      	add	r1, r2
 8015586:	e7ee      	b.n	8015566 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015588:	d019      	beq.n	80155be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801558a:	1e5a      	subs	r2, r3, #1
 801558c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801558e:	fb05 0502 	mla	r5, r5, r2, r0
 8015592:	142d      	asrs	r5, r5, #16
 8015594:	d409      	bmi.n	80155aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015596:	42bd      	cmp	r5, r7
 8015598:	da07      	bge.n	80155aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801559a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801559c:	fb05 1202 	mla	r2, r5, r2, r1
 80155a0:	1412      	asrs	r2, r2, #16
 80155a2:	d402      	bmi.n	80155aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80155a4:	42b2      	cmp	r2, r6
 80155a6:	f2c0 80ac 	blt.w	8015702 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80155aa:	f04f 0e00 	mov.w	lr, #0
 80155ae:	eb03 020e 	add.w	r2, r3, lr
 80155b2:	2a00      	cmp	r2, #0
 80155b4:	dc3e      	bgt.n	8015634 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80155b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80155ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80155be:	f1bb 0f00 	cmp.w	fp, #0
 80155c2:	f340 80fe 	ble.w	80157c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80155c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80155ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80155cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80155d0:	f1bb 0b01 	subs.w	fp, fp, #1
 80155d4:	eeb0 6a62 	vmov.f32	s12, s5
 80155d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80155dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80155e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80155e4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80155e8:	eeb0 6a43 	vmov.f32	s12, s6
 80155ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80155f0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80155f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80155f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80155fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015600:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015604:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015608:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801560c:	ee12 2a90 	vmov	r2, s5
 8015610:	eef0 2a47 	vmov.f32	s5, s14
 8015614:	fb92 f3f3 	sdiv	r3, r2, r3
 8015618:	ee13 2a10 	vmov	r2, s6
 801561c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801561e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015620:	eeb0 3a67 	vmov.f32	s6, s15
 8015624:	fb92 f3f3 	sdiv	r3, r2, r3
 8015628:	9a04      	ldr	r2, [sp, #16]
 801562a:	9314      	str	r3, [sp, #80]	@ 0x50
 801562c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801562e:	bf08      	it	eq
 8015630:	4613      	moveq	r3, r2
 8015632:	e787      	b.n	8015544 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015634:	1406      	asrs	r6, r0, #16
 8015636:	d45d      	bmi.n	80156f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015638:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801563c:	42b5      	cmp	r5, r6
 801563e:	dd59      	ble.n	80156f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015640:	140f      	asrs	r7, r1, #16
 8015642:	d457      	bmi.n	80156f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015644:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015648:	42ba      	cmp	r2, r7
 801564a:	dd53      	ble.n	80156f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801564c:	9a01      	ldr	r2, [sp, #4]
 801564e:	b22d      	sxth	r5, r5
 8015650:	fb07 2505 	mla	r5, r7, r5, r2
 8015654:	5daa      	ldrb	r2, [r5, r6]
 8015656:	9d02      	ldr	r5, [sp, #8]
 8015658:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801565c:	0e2e      	lsrs	r6, r5, #24
 801565e:	d049      	beq.n	80156f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015660:	f06f 0201 	mvn.w	r2, #1
 8015664:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015668:	fb02 f20e 	mul.w	r2, r2, lr
 801566c:	f834 8002 	ldrh.w	r8, [r4, r2]
 8015670:	9203      	str	r2, [sp, #12]
 8015672:	9a05      	ldr	r2, [sp, #20]
 8015674:	ea4f 2728 	mov.w	r7, r8, asr #8
 8015678:	4356      	muls	r6, r2
 801567a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801567e:	1c72      	adds	r2, r6, #1
 8015680:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8015684:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015688:	b2ed      	uxtb	r5, r5
 801568a:	1212      	asrs	r2, r2, #8
 801568c:	fa1f f982 	uxth.w	r9, r2
 8015690:	43d2      	mvns	r2, r2
 8015692:	fb16 f609 	smulbb	r6, r6, r9
 8015696:	b2d2      	uxtb	r2, r2
 8015698:	fb15 f509 	smulbb	r5, r5, r9
 801569c:	fb07 6702 	mla	r7, r7, r2, r6
 80156a0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80156a4:	fb1a fa09 	smulbb	sl, sl, r9
 80156a8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80156ac:	b2bf      	uxth	r7, r7
 80156ae:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80156b2:	fa5f f888 	uxtb.w	r8, r8
 80156b6:	fb06 a602 	mla	r6, r6, r2, sl
 80156ba:	fb08 5502 	mla	r5, r8, r2, r5
 80156be:	1c7a      	adds	r2, r7, #1
 80156c0:	b2b6      	uxth	r6, r6
 80156c2:	b2ad      	uxth	r5, r5
 80156c4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80156c8:	9a03      	ldr	r2, [sp, #12]
 80156ca:	f105 0a01 	add.w	sl, r5, #1
 80156ce:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80156d2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80156d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80156da:	ea4a 0707 	orr.w	r7, sl, r7
 80156de:	f106 0a01 	add.w	sl, r6, #1
 80156e2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80156e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80156ea:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80156ee:	ea47 070a 	orr.w	r7, r7, sl
 80156f2:	52a7      	strh	r7, [r4, r2]
 80156f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80156f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80156fa:	4410      	add	r0, r2
 80156fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80156fe:	4411      	add	r1, r2
 8015700:	e755      	b.n	80155ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8015702:	f04f 0800 	mov.w	r8, #0
 8015706:	eba3 0208 	sub.w	r2, r3, r8
 801570a:	2a00      	cmp	r2, #0
 801570c:	f77f af53 	ble.w	80155b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8015710:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8015714:	140a      	asrs	r2, r1, #16
 8015716:	9f01      	ldr	r7, [sp, #4]
 8015718:	1405      	asrs	r5, r0, #16
 801571a:	fb06 7202 	mla	r2, r6, r2, r7
 801571e:	5d52      	ldrb	r2, [r2, r5]
 8015720:	9d02      	ldr	r5, [sp, #8]
 8015722:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8015726:	0e2e      	lsrs	r6, r5, #24
 8015728:	d044      	beq.n	80157b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801572a:	9a05      	ldr	r2, [sp, #20]
 801572c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015730:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8015734:	4356      	muls	r6, r2
 8015736:	ea4f 272e 	mov.w	r7, lr, asr #8
 801573a:	1c72      	adds	r2, r6, #1
 801573c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8015740:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8015744:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015748:	b2ed      	uxtb	r5, r5
 801574a:	1212      	asrs	r2, r2, #8
 801574c:	fa1f f982 	uxth.w	r9, r2
 8015750:	43d2      	mvns	r2, r2
 8015752:	fb16 f609 	smulbb	r6, r6, r9
 8015756:	b2d2      	uxtb	r2, r2
 8015758:	fb15 f509 	smulbb	r5, r5, r9
 801575c:	fb07 6702 	mla	r7, r7, r2, r6
 8015760:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015764:	fb1a fa09 	smulbb	sl, sl, r9
 8015768:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801576c:	b2bf      	uxth	r7, r7
 801576e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015772:	fa5f fe8e 	uxtb.w	lr, lr
 8015776:	fb06 a602 	mla	r6, r6, r2, sl
 801577a:	fb0e 5502 	mla	r5, lr, r2, r5
 801577e:	1c7a      	adds	r2, r7, #1
 8015780:	b2b6      	uxth	r6, r6
 8015782:	b2ad      	uxth	r5, r5
 8015784:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8015788:	f105 0a01 	add.w	sl, r5, #1
 801578c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8015790:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015794:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015798:	ea4a 0707 	orr.w	r7, sl, r7
 801579c:	f106 0a01 	add.w	sl, r6, #1
 80157a0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80157a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80157a8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80157ac:	ea47 070a 	orr.w	r7, r7, sl
 80157b0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80157b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80157b6:	f108 0801 	add.w	r8, r8, #1
 80157ba:	4410      	add	r0, r2
 80157bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80157be:	4411      	add	r1, r2
 80157c0:	e7a1      	b.n	8015706 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80157c2:	b007      	add	sp, #28
 80157c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80157c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157cc:	b085      	sub	sp, #20
 80157ce:	468b      	mov	fp, r1
 80157d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80157d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80157d6:	9203      	str	r2, [sp, #12]
 80157d8:	6841      	ldr	r1, [r0, #4]
 80157da:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 80157de:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80157e2:	fb01 2404 	mla	r4, r1, r4, r2
 80157e6:	6802      	ldr	r2, [r0, #0]
 80157e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80157ec:	f8de 2000 	ldr.w	r2, [lr]
 80157f0:	9200      	str	r2, [sp, #0]
 80157f2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80157f6:	3204      	adds	r2, #4
 80157f8:	9201      	str	r2, [sp, #4]
 80157fa:	f1bb 0f00 	cmp.w	fp, #0
 80157fe:	dc03      	bgt.n	8015808 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8015800:	9a03      	ldr	r2, [sp, #12]
 8015802:	2a00      	cmp	r2, #0
 8015804:	f340 8153 	ble.w	8015aae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8015808:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801580a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801580e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015812:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015814:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8015818:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801581c:	2b00      	cmp	r3, #0
 801581e:	dd0e      	ble.n	801583e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015820:	1408      	asrs	r0, r1, #16
 8015822:	d405      	bmi.n	8015830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015824:	42b8      	cmp	r0, r7
 8015826:	da03      	bge.n	8015830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015828:	1410      	asrs	r0, r2, #16
 801582a:	d401      	bmi.n	8015830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801582c:	42b0      	cmp	r0, r6
 801582e:	db07      	blt.n	8015840 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015830:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015832:	3b01      	subs	r3, #1
 8015834:	3402      	adds	r4, #2
 8015836:	4401      	add	r1, r0
 8015838:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801583a:	4402      	add	r2, r0
 801583c:	e7ee      	b.n	801581c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801583e:	d017      	beq.n	8015870 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8015840:	1e58      	subs	r0, r3, #1
 8015842:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015844:	fb05 1500 	mla	r5, r5, r0, r1
 8015848:	142d      	asrs	r5, r5, #16
 801584a:	d409      	bmi.n	8015860 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801584c:	42bd      	cmp	r5, r7
 801584e:	da07      	bge.n	8015860 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015850:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8015852:	fb05 2000 	mla	r0, r5, r0, r2
 8015856:	1400      	asrs	r0, r0, #16
 8015858:	d402      	bmi.n	8015860 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801585a:	42b0      	cmp	r0, r6
 801585c:	f2c0 80bc 	blt.w	80159d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8015860:	2600      	movs	r6, #0
 8015862:	1998      	adds	r0, r3, r6
 8015864:	2800      	cmp	r0, #0
 8015866:	dc3e      	bgt.n	80158e6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8015868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801586c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015870:	f1bb 0f00 	cmp.w	fp, #0
 8015874:	f340 811b 	ble.w	8015aae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8015878:	ee30 0a04 	vadd.f32	s0, s0, s8
 801587c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801587e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015882:	f1bb 0b01 	subs.w	fp, fp, #1
 8015886:	eeb0 6a62 	vmov.f32	s12, s5
 801588a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801588e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015892:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015896:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801589a:	eeb0 6a43 	vmov.f32	s12, s6
 801589e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80158a2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80158a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80158aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80158ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80158b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80158b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80158ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80158be:	ee12 2a90 	vmov	r2, s5
 80158c2:	eef0 2a47 	vmov.f32	s5, s14
 80158c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80158ca:	ee13 2a10 	vmov	r2, s6
 80158ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80158d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158d2:	eeb0 3a67 	vmov.f32	s6, s15
 80158d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80158da:	9a03      	ldr	r2, [sp, #12]
 80158dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80158de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158e0:	bf08      	it	eq
 80158e2:	4613      	moveq	r3, r2
 80158e4:	e789      	b.n	80157fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80158e6:	140f      	asrs	r7, r1, #16
 80158e8:	d426      	bmi.n	8015938 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80158ea:	f8de 5008 	ldr.w	r5, [lr, #8]
 80158ee:	42bd      	cmp	r5, r7
 80158f0:	dd22      	ble.n	8015938 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80158f2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80158f6:	d41f      	bmi.n	8015938 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80158f8:	f8de 000c 	ldr.w	r0, [lr, #12]
 80158fc:	4560      	cmp	r0, ip
 80158fe:	dd1b      	ble.n	8015938 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8015900:	9800      	ldr	r0, [sp, #0]
 8015902:	b22d      	sxth	r5, r5
 8015904:	fb0c 0505 	mla	r5, ip, r5, r0
 8015908:	5de8      	ldrb	r0, [r5, r7]
 801590a:	9d01      	ldr	r5, [sp, #4]
 801590c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8015910:	0e07      	lsrs	r7, r0, #24
 8015912:	2fff      	cmp	r7, #255	@ 0xff
 8015914:	d116      	bne.n	8015944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8015916:	f06f 0501 	mvn.w	r5, #1
 801591a:	fb05 f706 	mul.w	r7, r5, r6
 801591e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8015922:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8015926:	0945      	lsrs	r5, r0, #5
 8015928:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801592c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8015930:	ea4c 0505 	orr.w	r5, ip, r5
 8015934:	4305      	orrs	r5, r0
 8015936:	53e5      	strh	r5, [r4, r7]
 8015938:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801593a:	3e01      	subs	r6, #1
 801593c:	4401      	add	r1, r0
 801593e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8015940:	4402      	add	r2, r0
 8015942:	e78e      	b.n	8015862 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8015944:	b2fd      	uxtb	r5, r7
 8015946:	2f00      	cmp	r7, #0
 8015948:	d0f6      	beq.n	8015938 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801594a:	f06f 0701 	mvn.w	r7, #1
 801594e:	fa1f f985 	uxth.w	r9, r5
 8015952:	43ed      	mvns	r5, r5
 8015954:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015958:	4377      	muls	r7, r6
 801595a:	fb1a fa09 	smulbb	sl, sl, r9
 801595e:	b2ed      	uxtb	r5, r5
 8015960:	f834 8007 	ldrh.w	r8, [r4, r7]
 8015964:	9702      	str	r7, [sp, #8]
 8015966:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801596a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801596e:	fb17 f709 	smulbb	r7, r7, r9
 8015972:	b2c0      	uxtb	r0, r0
 8015974:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8015978:	fb10 f009 	smulbb	r0, r0, r9
 801597c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8015980:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8015984:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8015988:	fa1f fc8c 	uxth.w	ip, ip
 801598c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8015990:	fa5f f888 	uxtb.w	r8, r8
 8015994:	fb07 a705 	mla	r7, r7, r5, sl
 8015998:	fb08 0005 	mla	r0, r8, r5, r0
 801599c:	f10c 0501 	add.w	r5, ip, #1
 80159a0:	b2bf      	uxth	r7, r7
 80159a2:	b280      	uxth	r0, r0
 80159a4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80159a8:	f100 0a01 	add.w	sl, r0, #1
 80159ac:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80159b0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80159b4:	9802      	ldr	r0, [sp, #8]
 80159b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80159ba:	ea4a 0c0c 	orr.w	ip, sl, ip
 80159be:	f107 0a01 	add.w	sl, r7, #1
 80159c2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80159c6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80159ca:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80159ce:	ea4c 0c0a 	orr.w	ip, ip, sl
 80159d2:	f824 c000 	strh.w	ip, [r4, r0]
 80159d6:	e7af      	b.n	8015938 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80159d8:	f04f 0800 	mov.w	r8, #0
 80159dc:	eba3 0008 	sub.w	r0, r3, r8
 80159e0:	2800      	cmp	r0, #0
 80159e2:	f77f af41 	ble.w	8015868 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80159e6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80159ea:	1410      	asrs	r0, r2, #16
 80159ec:	9f00      	ldr	r7, [sp, #0]
 80159ee:	140d      	asrs	r5, r1, #16
 80159f0:	fb06 7000 	mla	r0, r6, r0, r7
 80159f4:	5d40      	ldrb	r0, [r0, r5]
 80159f6:	9d01      	ldr	r5, [sp, #4]
 80159f8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80159fc:	0e2e      	lsrs	r6, r5, #24
 80159fe:	2eff      	cmp	r6, #255	@ 0xff
 8015a00:	d112      	bne.n	8015a28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8015a02:	482c      	ldr	r0, [pc, #176]	@ (8015ab4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8015a04:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8015a08:	0968      	lsrs	r0, r5, #5
 8015a0a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8015a0e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015a12:	4330      	orrs	r0, r6
 8015a14:	4328      	orrs	r0, r5
 8015a16:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8015a1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015a1c:	f108 0801 	add.w	r8, r8, #1
 8015a20:	4401      	add	r1, r0
 8015a22:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8015a24:	4402      	add	r2, r0
 8015a26:	e7d9      	b.n	80159dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8015a28:	b2f0      	uxtb	r0, r6
 8015a2a:	2e00      	cmp	r6, #0
 8015a2c:	d0f5      	beq.n	8015a1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8015a2e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8015a32:	fa1f f980 	uxth.w	r9, r0
 8015a36:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015a3a:	43c0      	mvns	r0, r0
 8015a3c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8015a40:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015a44:	fb16 f609 	smulbb	r6, r6, r9
 8015a48:	b2c0      	uxtb	r0, r0
 8015a4a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8015a4e:	b2ed      	uxtb	r5, r5
 8015a50:	fb1a fa09 	smulbb	sl, sl, r9
 8015a54:	fb07 6700 	mla	r7, r7, r0, r6
 8015a58:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8015a5c:	fb15 f509 	smulbb	r5, r5, r9
 8015a60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015a64:	b2bf      	uxth	r7, r7
 8015a66:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015a6a:	fa5f fc8c 	uxtb.w	ip, ip
 8015a6e:	fb06 a600 	mla	r6, r6, r0, sl
 8015a72:	fb0c 5500 	mla	r5, ip, r0, r5
 8015a76:	1c78      	adds	r0, r7, #1
 8015a78:	b2b6      	uxth	r6, r6
 8015a7a:	b2ad      	uxth	r5, r5
 8015a7c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8015a80:	f105 0a01 	add.w	sl, r5, #1
 8015a84:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8015a88:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015a8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015a90:	ea4a 0707 	orr.w	r7, sl, r7
 8015a94:	f106 0a01 	add.w	sl, r6, #1
 8015a98:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015a9c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015aa0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8015aa4:	ea47 070a 	orr.w	r7, r7, sl
 8015aa8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8015aac:	e7b5      	b.n	8015a1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8015aae:	b005      	add	sp, #20
 8015ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab4:	fffff800 	.word	0xfffff800

08015ab8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015abc:	b087      	sub	sp, #28
 8015abe:	468b      	mov	fp, r1
 8015ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015ac4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8015ac6:	9204      	str	r2, [sp, #16]
 8015ac8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015acc:	6861      	ldr	r1, [r4, #4]
 8015ace:	9205      	str	r2, [sp, #20]
 8015ad0:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8015ad4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8015ad8:	fb01 2000 	mla	r0, r1, r0, r2
 8015adc:	6822      	ldr	r2, [r4, #0]
 8015ade:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8015ae2:	f8de 2000 	ldr.w	r2, [lr]
 8015ae6:	9201      	str	r2, [sp, #4]
 8015ae8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8015aec:	9202      	str	r2, [sp, #8]
 8015aee:	f1bb 0f00 	cmp.w	fp, #0
 8015af2:	dc03      	bgt.n	8015afc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8015af4:	9a04      	ldr	r2, [sp, #16]
 8015af6:	2a00      	cmp	r2, #0
 8015af8:	f340 8142 	ble.w	8015d80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8015afc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015afe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8015b02:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015b06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015b08:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8015b0c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dd0e      	ble.n	8015b32 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8015b14:	140c      	asrs	r4, r1, #16
 8015b16:	d405      	bmi.n	8015b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8015b18:	42bc      	cmp	r4, r7
 8015b1a:	da03      	bge.n	8015b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8015b1c:	1414      	asrs	r4, r2, #16
 8015b1e:	d401      	bmi.n	8015b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8015b20:	42b4      	cmp	r4, r6
 8015b22:	db07      	blt.n	8015b34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015b24:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015b26:	3b01      	subs	r3, #1
 8015b28:	3002      	adds	r0, #2
 8015b2a:	4421      	add	r1, r4
 8015b2c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8015b2e:	4422      	add	r2, r4
 8015b30:	e7ee      	b.n	8015b10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8015b32:	d019      	beq.n	8015b68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015b34:	1e5c      	subs	r4, r3, #1
 8015b36:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8015b38:	fb05 1504 	mla	r5, r5, r4, r1
 8015b3c:	142d      	asrs	r5, r5, #16
 8015b3e:	d409      	bmi.n	8015b54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015b40:	42bd      	cmp	r5, r7
 8015b42:	da07      	bge.n	8015b54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015b44:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015b46:	fb05 2404 	mla	r4, r5, r4, r2
 8015b4a:	1424      	asrs	r4, r4, #16
 8015b4c:	d402      	bmi.n	8015b54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015b4e:	42b4      	cmp	r4, r6
 8015b50:	f2c0 80b1 	blt.w	8015cb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8015b54:	f04f 0800 	mov.w	r8, #0
 8015b58:	eb03 0408 	add.w	r4, r3, r8
 8015b5c:	2c00      	cmp	r4, #0
 8015b5e:	dc3e      	bgt.n	8015bde <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8015b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015b68:	f1bb 0f00 	cmp.w	fp, #0
 8015b6c:	f340 8108 	ble.w	8015d80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8015b70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015b74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015b76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015b7a:	f1bb 0b01 	subs.w	fp, fp, #1
 8015b7e:	eeb0 6a62 	vmov.f32	s12, s5
 8015b82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015b86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015b8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015b8e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8015b92:	eeb0 6a43 	vmov.f32	s12, s6
 8015b96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015b9a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8015b9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015ba2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ba6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015baa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015bae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015bb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015bb6:	ee12 2a90 	vmov	r2, s5
 8015bba:	eef0 2a47 	vmov.f32	s5, s14
 8015bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bc2:	ee13 2a10 	vmov	r2, s6
 8015bc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015bc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015bca:	eeb0 3a67 	vmov.f32	s6, s15
 8015bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bd2:	9a04      	ldr	r2, [sp, #16]
 8015bd4:	9314      	str	r3, [sp, #80]	@ 0x50
 8015bd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015bd8:	bf08      	it	eq
 8015bda:	4613      	moveq	r3, r2
 8015bdc:	e787      	b.n	8015aee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8015bde:	140e      	asrs	r6, r1, #16
 8015be0:	d462      	bmi.n	8015ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015be2:	f8de 5008 	ldr.w	r5, [lr, #8]
 8015be6:	42b5      	cmp	r5, r6
 8015be8:	dd5e      	ble.n	8015ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015bea:	1417      	asrs	r7, r2, #16
 8015bec:	d45c      	bmi.n	8015ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015bee:	f8de 400c 	ldr.w	r4, [lr, #12]
 8015bf2:	42bc      	cmp	r4, r7
 8015bf4:	dd58      	ble.n	8015ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015bf6:	b22d      	sxth	r5, r5
 8015bf8:	9c02      	ldr	r4, [sp, #8]
 8015bfa:	fb07 6505 	mla	r5, r7, r5, r6
 8015bfe:	5d66      	ldrb	r6, [r4, r5]
 8015c00:	2e00      	cmp	r6, #0
 8015c02:	d051      	beq.n	8015ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015c04:	9c01      	ldr	r4, [sp, #4]
 8015c06:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8015c0a:	f06f 0401 	mvn.w	r4, #1
 8015c0e:	fb04 f408 	mul.w	r4, r4, r8
 8015c12:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8015c16:	5b05      	ldrh	r5, [r0, r4]
 8015c18:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8015c1c:	9403      	str	r4, [sp, #12]
 8015c1e:	9c05      	ldr	r4, [sp, #20]
 8015c20:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015c24:	4366      	muls	r6, r4
 8015c26:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8015c2a:	1c74      	adds	r4, r6, #1
 8015c2c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8015c30:	122e      	asrs	r6, r5, #8
 8015c32:	1224      	asrs	r4, r4, #8
 8015c34:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8015c38:	00ed      	lsls	r5, r5, #3
 8015c3a:	b2a7      	uxth	r7, r4
 8015c3c:	43e4      	mvns	r4, r4
 8015c3e:	b2ed      	uxtb	r5, r5
 8015c40:	b2e4      	uxtb	r4, r4
 8015c42:	fb16 f604 	smulbb	r6, r6, r4
 8015c46:	fb15 f504 	smulbb	r5, r5, r4
 8015c4a:	fb0c 6c07 	mla	ip, ip, r7, r6
 8015c4e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8015c52:	fb1a fa04 	smulbb	sl, sl, r4
 8015c56:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8015c5a:	fa1f fc8c 	uxth.w	ip, ip
 8015c5e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015c62:	fa5f f989 	uxtb.w	r9, r9
 8015c66:	fb06 a607 	mla	r6, r6, r7, sl
 8015c6a:	f10c 0401 	add.w	r4, ip, #1
 8015c6e:	fb09 5507 	mla	r5, r9, r7, r5
 8015c72:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8015c76:	9c03      	ldr	r4, [sp, #12]
 8015c78:	b2ad      	uxth	r5, r5
 8015c7a:	b2b6      	uxth	r6, r6
 8015c7c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8015c80:	f105 0a01 	add.w	sl, r5, #1
 8015c84:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015c88:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015c8c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8015c90:	f106 0a01 	add.w	sl, r6, #1
 8015c94:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015c98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015c9c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8015ca0:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015ca4:	f820 c004 	strh.w	ip, [r0, r4]
 8015ca8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015caa:	f108 38ff 	add.w	r8, r8, #4294967295
 8015cae:	4421      	add	r1, r4
 8015cb0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8015cb2:	4422      	add	r2, r4
 8015cb4:	e750      	b.n	8015b58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015cb6:	f04f 0900 	mov.w	r9, #0
 8015cba:	eba3 0409 	sub.w	r4, r3, r9
 8015cbe:	2c00      	cmp	r4, #0
 8015cc0:	f77f af4e 	ble.w	8015b60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8015cc4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8015cc8:	140d      	asrs	r5, r1, #16
 8015cca:	1414      	asrs	r4, r2, #16
 8015ccc:	fb06 5404 	mla	r4, r6, r4, r5
 8015cd0:	9d02      	ldr	r5, [sp, #8]
 8015cd2:	5d2e      	ldrb	r6, [r5, r4]
 8015cd4:	2e00      	cmp	r6, #0
 8015cd6:	d04c      	beq.n	8015d72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015cd8:	9d01      	ldr	r5, [sp, #4]
 8015cda:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8015cde:	9c05      	ldr	r4, [sp, #20]
 8015ce0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8015ce4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8015ce8:	4366      	muls	r6, r4
 8015cea:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015cee:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8015cf2:	1c74      	adds	r4, r6, #1
 8015cf4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8015cf8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8015cfc:	122e      	asrs	r6, r5, #8
 8015cfe:	1224      	asrs	r4, r4, #8
 8015d00:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8015d04:	00ed      	lsls	r5, r5, #3
 8015d06:	b2a7      	uxth	r7, r4
 8015d08:	43e4      	mvns	r4, r4
 8015d0a:	b2ed      	uxtb	r5, r5
 8015d0c:	b2e4      	uxtb	r4, r4
 8015d0e:	fb16 f604 	smulbb	r6, r6, r4
 8015d12:	fb15 f504 	smulbb	r5, r5, r4
 8015d16:	fb0c 6c07 	mla	ip, ip, r7, r6
 8015d1a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8015d1e:	fb1a fa04 	smulbb	sl, sl, r4
 8015d22:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8015d26:	fa1f fc8c 	uxth.w	ip, ip
 8015d2a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8015d2e:	fa5f f888 	uxtb.w	r8, r8
 8015d32:	fb06 a607 	mla	r6, r6, r7, sl
 8015d36:	f10c 0401 	add.w	r4, ip, #1
 8015d3a:	fb08 5507 	mla	r5, r8, r7, r5
 8015d3e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8015d42:	b2ad      	uxth	r5, r5
 8015d44:	b2b6      	uxth	r6, r6
 8015d46:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8015d4a:	f105 0a01 	add.w	sl, r5, #1
 8015d4e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015d52:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015d56:	ea4a 0c0c 	orr.w	ip, sl, ip
 8015d5a:	f106 0a01 	add.w	sl, r6, #1
 8015d5e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015d62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015d66:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8015d6a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015d6e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8015d72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015d74:	f109 0901 	add.w	r9, r9, #1
 8015d78:	4421      	add	r1, r4
 8015d7a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8015d7c:	4422      	add	r2, r4
 8015d7e:	e79c      	b.n	8015cba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8015d80:	b007      	add	sp, #28
 8015d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015d86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8a:	b085      	sub	sp, #20
 8015d8c:	468b      	mov	fp, r1
 8015d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015d94:	9203      	str	r2, [sp, #12]
 8015d96:	6861      	ldr	r1, [r4, #4]
 8015d98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015d9c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 8015da0:	fb01 2000 	mla	r0, r1, r0, r2
 8015da4:	6822      	ldr	r2, [r4, #0]
 8015da6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8015daa:	f8d8 2000 	ldr.w	r2, [r8]
 8015dae:	9200      	str	r2, [sp, #0]
 8015db0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015db4:	9201      	str	r2, [sp, #4]
 8015db6:	f1bb 0f00 	cmp.w	fp, #0
 8015dba:	dc03      	bgt.n	8015dc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8015dbc:	9a03      	ldr	r2, [sp, #12]
 8015dbe:	2a00      	cmp	r2, #0
 8015dc0:	f340 8146 	ble.w	8016050 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8015dc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015dc6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8015dca:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8015dce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015dd0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8015dd4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	dd0e      	ble.n	8015dfa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8015ddc:	140c      	asrs	r4, r1, #16
 8015dde:	d405      	bmi.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015de0:	42bc      	cmp	r4, r7
 8015de2:	da03      	bge.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015de4:	1414      	asrs	r4, r2, #16
 8015de6:	d401      	bmi.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015de8:	42b4      	cmp	r4, r6
 8015dea:	db07      	blt.n	8015dfc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015dec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8015dee:	3b01      	subs	r3, #1
 8015df0:	3002      	adds	r0, #2
 8015df2:	4421      	add	r1, r4
 8015df4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015df6:	4422      	add	r2, r4
 8015df8:	e7ee      	b.n	8015dd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8015dfa:	d017      	beq.n	8015e2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8015dfc:	1e5c      	subs	r4, r3, #1
 8015dfe:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015e00:	fb05 1504 	mla	r5, r5, r4, r1
 8015e04:	142d      	asrs	r5, r5, #16
 8015e06:	d409      	bmi.n	8015e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015e08:	42bd      	cmp	r5, r7
 8015e0a:	da07      	bge.n	8015e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015e0c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8015e0e:	fb05 2404 	mla	r4, r5, r4, r2
 8015e12:	1424      	asrs	r4, r4, #16
 8015e14:	d402      	bmi.n	8015e1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015e16:	42b4      	cmp	r4, r6
 8015e18:	f2c0 80b3 	blt.w	8015f82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8015e1c:	2600      	movs	r6, #0
 8015e1e:	199c      	adds	r4, r3, r6
 8015e20:	2c00      	cmp	r4, #0
 8015e22:	dc3e      	bgt.n	8015ea2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8015e24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015e2c:	f1bb 0f00 	cmp.w	fp, #0
 8015e30:	f340 810e 	ble.w	8016050 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8015e34:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015e38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015e3e:	f1bb 0b01 	subs.w	fp, fp, #1
 8015e42:	eeb0 6a62 	vmov.f32	s12, s5
 8015e46:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015e4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015e4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e52:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8015e56:	eeb0 6a43 	vmov.f32	s12, s6
 8015e5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e5e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8015e62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015e66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015e6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015e6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015e72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015e76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015e7a:	ee12 2a90 	vmov	r2, s5
 8015e7e:	eef0 2a47 	vmov.f32	s5, s14
 8015e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e86:	ee13 2a10 	vmov	r2, s6
 8015e8a:	9311      	str	r3, [sp, #68]	@ 0x44
 8015e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e8e:	eeb0 3a67 	vmov.f32	s6, s15
 8015e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e96:	9a03      	ldr	r2, [sp, #12]
 8015e98:	9312      	str	r3, [sp, #72]	@ 0x48
 8015e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e9c:	bf08      	it	eq
 8015e9e:	4613      	moveq	r3, r2
 8015ea0:	e789      	b.n	8015db6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8015ea2:	140f      	asrs	r7, r1, #16
 8015ea4:	d418      	bmi.n	8015ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015ea6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015eaa:	42bd      	cmp	r5, r7
 8015eac:	dd14      	ble.n	8015ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015eae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8015eb2:	d411      	bmi.n	8015ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015eb4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8015eb8:	4564      	cmp	r4, ip
 8015eba:	dd0d      	ble.n	8015ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015ebc:	b22d      	sxth	r5, r5
 8015ebe:	9c01      	ldr	r4, [sp, #4]
 8015ec0:	fb0c 7505 	mla	r5, ip, r5, r7
 8015ec4:	5d64      	ldrb	r4, [r4, r5]
 8015ec6:	2cff      	cmp	r4, #255	@ 0xff
 8015ec8:	d10c      	bne.n	8015ee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015eca:	9c00      	ldr	r4, [sp, #0]
 8015ecc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8015ed0:	f06f 0401 	mvn.w	r4, #1
 8015ed4:	4374      	muls	r4, r6
 8015ed6:	5305      	strh	r5, [r0, r4]
 8015ed8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8015eda:	3e01      	subs	r6, #1
 8015edc:	4421      	add	r1, r4
 8015ede:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015ee0:	4422      	add	r2, r4
 8015ee2:	e79c      	b.n	8015e1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015ee4:	2c00      	cmp	r4, #0
 8015ee6:	d0f7      	beq.n	8015ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015ee8:	9f00      	ldr	r7, [sp, #0]
 8015eea:	fa1f fc84 	uxth.w	ip, r4
 8015eee:	43e4      	mvns	r4, r4
 8015ef0:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8015ef4:	f06f 0501 	mvn.w	r5, #1
 8015ef8:	b2e4      	uxtb	r4, r4
 8015efa:	4375      	muls	r5, r6
 8015efc:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8015f00:	9502      	str	r5, [sp, #8]
 8015f02:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8015f06:	5b45      	ldrh	r5, [r0, r5]
 8015f08:	122f      	asrs	r7, r5, #8
 8015f0a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015f0e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8015f12:	00ed      	lsls	r5, r5, #3
 8015f14:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8015f18:	fb17 f704 	smulbb	r7, r7, r4
 8015f1c:	b2ed      	uxtb	r5, r5
 8015f1e:	fb1a fa04 	smulbb	sl, sl, r4
 8015f22:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8015f26:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8015f2a:	fb15 f504 	smulbb	r5, r5, r4
 8015f2e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8015f32:	fa1f fe8e 	uxth.w	lr, lr
 8015f36:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8015f3a:	fa5f f989 	uxtb.w	r9, r9
 8015f3e:	fb07 a70c 	mla	r7, r7, ip, sl
 8015f42:	f10e 0401 	add.w	r4, lr, #1
 8015f46:	fb09 550c 	mla	r5, r9, ip, r5
 8015f4a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8015f4e:	9c02      	ldr	r4, [sp, #8]
 8015f50:	b2ad      	uxth	r5, r5
 8015f52:	b2bf      	uxth	r7, r7
 8015f54:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8015f58:	f105 0a01 	add.w	sl, r5, #1
 8015f5c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015f60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015f64:	ea4a 0e0e 	orr.w	lr, sl, lr
 8015f68:	f107 0a01 	add.w	sl, r7, #1
 8015f6c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8015f70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015f74:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8015f78:	ea4e 0e0a 	orr.w	lr, lr, sl
 8015f7c:	f820 e004 	strh.w	lr, [r0, r4]
 8015f80:	e7aa      	b.n	8015ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015f82:	f04f 0900 	mov.w	r9, #0
 8015f86:	eba3 0409 	sub.w	r4, r3, r9
 8015f8a:	2c00      	cmp	r4, #0
 8015f8c:	f77f af4a 	ble.w	8015e24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015f90:	1414      	asrs	r4, r2, #16
 8015f92:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8015f96:	140d      	asrs	r5, r1, #16
 8015f98:	fb06 5504 	mla	r5, r6, r4, r5
 8015f9c:	9c01      	ldr	r4, [sp, #4]
 8015f9e:	5d64      	ldrb	r4, [r4, r5]
 8015fa0:	2cff      	cmp	r4, #255	@ 0xff
 8015fa2:	d10b      	bne.n	8015fbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8015fa4:	9c00      	ldr	r4, [sp, #0]
 8015fa6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8015faa:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8015fae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8015fb0:	f109 0901 	add.w	r9, r9, #1
 8015fb4:	4421      	add	r1, r4
 8015fb6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015fb8:	4422      	add	r2, r4
 8015fba:	e7e4      	b.n	8015f86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8015fbc:	2c00      	cmp	r4, #0
 8015fbe:	d0f6      	beq.n	8015fae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8015fc0:	9e00      	ldr	r6, [sp, #0]
 8015fc2:	b2a7      	uxth	r7, r4
 8015fc4:	43e4      	mvns	r4, r4
 8015fc6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8015fca:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8015fce:	b2e4      	uxtb	r4, r4
 8015fd0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015fd4:	122e      	asrs	r6, r5, #8
 8015fd6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015fda:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8015fde:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8015fe2:	00ed      	lsls	r5, r5, #3
 8015fe4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8015fe8:	fb16 f604 	smulbb	r6, r6, r4
 8015fec:	b2ed      	uxtb	r5, r5
 8015fee:	fb1a fa04 	smulbb	sl, sl, r4
 8015ff2:	fb0c 6c07 	mla	ip, ip, r7, r6
 8015ff6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015ffa:	fb15 f504 	smulbb	r5, r5, r4
 8015ffe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016002:	fa1f fc8c 	uxth.w	ip, ip
 8016006:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801600a:	fa5f fe8e 	uxtb.w	lr, lr
 801600e:	fb06 a607 	mla	r6, r6, r7, sl
 8016012:	f10c 0401 	add.w	r4, ip, #1
 8016016:	fb0e 5507 	mla	r5, lr, r7, r5
 801601a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801601e:	b2ad      	uxth	r5, r5
 8016020:	b2b6      	uxth	r6, r6
 8016022:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016026:	f105 0a01 	add.w	sl, r5, #1
 801602a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801602e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016032:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016036:	f106 0a01 	add.w	sl, r6, #1
 801603a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801603e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016042:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016046:	ea4c 0c0a 	orr.w	ip, ip, sl
 801604a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801604e:	e7ae      	b.n	8015fae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8016050:	b005      	add	sp, #20
 8016052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016056 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605a:	b085      	sub	sp, #20
 801605c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801605e:	9203      	str	r2, [sp, #12]
 8016060:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016064:	9100      	str	r1, [sp, #0]
 8016066:	9201      	str	r2, [sp, #4]
 8016068:	6841      	ldr	r1, [r0, #4]
 801606a:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801606e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8016072:	fb01 2404 	mla	r4, r1, r4, r2
 8016076:	6802      	ldr	r2, [r0, #0]
 8016078:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801607c:	f8de 2000 	ldr.w	r2, [lr]
 8016080:	9202      	str	r2, [sp, #8]
 8016082:	9a01      	ldr	r2, [sp, #4]
 8016084:	43d6      	mvns	r6, r2
 8016086:	b2f6      	uxtb	r6, r6
 8016088:	9a00      	ldr	r2, [sp, #0]
 801608a:	2a00      	cmp	r2, #0
 801608c:	dc03      	bgt.n	8016096 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801608e:	9a03      	ldr	r2, [sp, #12]
 8016090:	2a00      	cmp	r2, #0
 8016092:	f340 8124 	ble.w	80162de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016096:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016098:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801609c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80160a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80160a2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80160a6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	dd0e      	ble.n	80160cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80160ae:	1408      	asrs	r0, r1, #16
 80160b0:	d405      	bmi.n	80160be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80160b2:	4560      	cmp	r0, ip
 80160b4:	da03      	bge.n	80160be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80160b6:	1410      	asrs	r0, r2, #16
 80160b8:	d401      	bmi.n	80160be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80160ba:	42b8      	cmp	r0, r7
 80160bc:	db07      	blt.n	80160ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80160be:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80160c0:	3b01      	subs	r3, #1
 80160c2:	3402      	adds	r4, #2
 80160c4:	4401      	add	r1, r0
 80160c6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80160c8:	4402      	add	r2, r0
 80160ca:	e7ee      	b.n	80160aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80160cc:	d06e      	beq.n	80161ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80160ce:	1e58      	subs	r0, r3, #1
 80160d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80160d2:	fb05 1500 	mla	r5, r5, r0, r1
 80160d6:	142d      	asrs	r5, r5, #16
 80160d8:	d45c      	bmi.n	8016194 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80160da:	4565      	cmp	r5, ip
 80160dc:	da5a      	bge.n	8016194 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80160de:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80160e0:	fb05 2000 	mla	r0, r5, r0, r2
 80160e4:	1400      	asrs	r0, r0, #16
 80160e6:	d455      	bmi.n	8016194 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80160e8:	42b8      	cmp	r0, r7
 80160ea:	da53      	bge.n	8016194 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80160ec:	4699      	mov	r9, r3
 80160ee:	46a2      	mov	sl, r4
 80160f0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80160f4:	f1b9 0f00 	cmp.w	r9, #0
 80160f8:	dd54      	ble.n	80161a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80160fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80160fe:	140d      	asrs	r5, r1, #16
 8016100:	1410      	asrs	r0, r2, #16
 8016102:	f109 39ff 	add.w	r9, r9, #4294967295
 8016106:	fb07 5000 	mla	r0, r7, r0, r5
 801610a:	9d02      	ldr	r5, [sp, #8]
 801610c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016110:	f8ba 5000 	ldrh.w	r5, [sl]
 8016114:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016118:	122f      	asrs	r7, r5, #8
 801611a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801611e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016122:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8016126:	00ed      	lsls	r5, r5, #3
 8016128:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801612c:	fb17 f706 	smulbb	r7, r7, r6
 8016130:	b2ed      	uxtb	r5, r5
 8016132:	fb18 f806 	smulbb	r8, r8, r6
 8016136:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801613a:	10c7      	asrs	r7, r0, #3
 801613c:	fb15 f506 	smulbb	r5, r5, r6
 8016140:	00c0      	lsls	r0, r0, #3
 8016142:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016146:	fa1f fc8c 	uxth.w	ip, ip
 801614a:	b2c0      	uxtb	r0, r0
 801614c:	fb07 870b 	mla	r7, r7, fp, r8
 8016150:	fb00 500b 	mla	r0, r0, fp, r5
 8016154:	f10c 0501 	add.w	r5, ip, #1
 8016158:	b2bf      	uxth	r7, r7
 801615a:	b280      	uxth	r0, r0
 801615c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016160:	f107 0801 	add.w	r8, r7, #1
 8016164:	1c45      	adds	r5, r0, #1
 8016166:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801616a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801616e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016172:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016174:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016178:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801617c:	4401      	add	r1, r0
 801617e:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8016182:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016184:	ea45 0c0c 	orr.w	ip, r5, ip
 8016188:	4402      	add	r2, r0
 801618a:	ea4c 0c08 	orr.w	ip, ip, r8
 801618e:	f82a cb02 	strh.w	ip, [sl], #2
 8016192:	e7af      	b.n	80160f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016194:	f04f 0800 	mov.w	r8, #0
 8016198:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801619c:	eb03 0008 	add.w	r0, r3, r8
 80161a0:	2800      	cmp	r0, #0
 80161a2:	dc41      	bgt.n	8016228 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80161a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80161ac:	9b00      	ldr	r3, [sp, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	f340 8095 	ble.w	80162de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80161b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80161b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80161be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80161c2:	eef0 6a62 	vmov.f32	s13, s5
 80161c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80161ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80161ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80161d2:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80161d6:	eef0 6a43 	vmov.f32	s13, s6
 80161da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80161de:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80161e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80161e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80161ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80161ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80161f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80161f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80161fa:	ee12 2a90 	vmov	r2, s5
 80161fe:	eef0 2a47 	vmov.f32	s5, s14
 8016202:	fb92 f3f3 	sdiv	r3, r2, r3
 8016206:	ee13 2a10 	vmov	r2, s6
 801620a:	9311      	str	r3, [sp, #68]	@ 0x44
 801620c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801620e:	eeb0 3a67 	vmov.f32	s6, s15
 8016212:	fb92 f3f3 	sdiv	r3, r2, r3
 8016216:	9312      	str	r3, [sp, #72]	@ 0x48
 8016218:	9b00      	ldr	r3, [sp, #0]
 801621a:	9a03      	ldr	r2, [sp, #12]
 801621c:	3b01      	subs	r3, #1
 801621e:	9300      	str	r3, [sp, #0]
 8016220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016222:	bf08      	it	eq
 8016224:	4613      	moveq	r3, r2
 8016226:	e72f      	b.n	8016088 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8016228:	140f      	asrs	r7, r1, #16
 801622a:	d451      	bmi.n	80162d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801622c:	f8de 5008 	ldr.w	r5, [lr, #8]
 8016230:	42bd      	cmp	r5, r7
 8016232:	dd4d      	ble.n	80162d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016234:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8016238:	d44a      	bmi.n	80162d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801623a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801623e:	4560      	cmp	r0, ip
 8016240:	dd46      	ble.n	80162d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8016242:	b22d      	sxth	r5, r5
 8016244:	9802      	ldr	r0, [sp, #8]
 8016246:	fb0c 7505 	mla	r5, ip, r5, r7
 801624a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801624e:	f06f 0501 	mvn.w	r5, #1
 8016252:	fb05 fb08 	mul.w	fp, r5, r8
 8016256:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801625a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801625e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016262:	122f      	asrs	r7, r5, #8
 8016264:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016268:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801626c:	00ed      	lsls	r5, r5, #3
 801626e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8016272:	fb17 f706 	smulbb	r7, r7, r6
 8016276:	b2ed      	uxtb	r5, r5
 8016278:	fb19 f906 	smulbb	r9, r9, r6
 801627c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8016280:	10c7      	asrs	r7, r0, #3
 8016282:	fb15 f506 	smulbb	r5, r5, r6
 8016286:	00c0      	lsls	r0, r0, #3
 8016288:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801628c:	fa1f fc8c 	uxth.w	ip, ip
 8016290:	b2c0      	uxtb	r0, r0
 8016292:	fb07 970a 	mla	r7, r7, sl, r9
 8016296:	fb00 500a 	mla	r0, r0, sl, r5
 801629a:	f10c 0501 	add.w	r5, ip, #1
 801629e:	b2bf      	uxth	r7, r7
 80162a0:	b280      	uxth	r0, r0
 80162a2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80162a6:	f107 0901 	add.w	r9, r7, #1
 80162aa:	1c45      	adds	r5, r0, #1
 80162ac:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80162b0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80162b4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80162b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80162bc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80162c0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80162c4:	ea45 0c0c 	orr.w	ip, r5, ip
 80162c8:	ea4c 0c09 	orr.w	ip, ip, r9
 80162cc:	f824 c00b 	strh.w	ip, [r4, fp]
 80162d0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80162d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80162d6:	4401      	add	r1, r0
 80162d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80162da:	4402      	add	r2, r0
 80162dc:	e75e      	b.n	801619c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80162de:	b005      	add	sp, #20
 80162e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80162e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e8:	b085      	sub	sp, #20
 80162ea:	4693      	mov	fp, r2
 80162ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80162f0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80162f2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80162f4:	6870      	ldr	r0, [r6, #4]
 80162f6:	9101      	str	r1, [sp, #4]
 80162f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80162fc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8016300:	fb00 2404 	mla	r4, r0, r4, r2
 8016304:	6832      	ldr	r2, [r6, #0]
 8016306:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801630a:	682a      	ldr	r2, [r5, #0]
 801630c:	9202      	str	r2, [sp, #8]
 801630e:	9a01      	ldr	r2, [sp, #4]
 8016310:	2a00      	cmp	r2, #0
 8016312:	dc03      	bgt.n	801631c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8016314:	f1bb 0f00 	cmp.w	fp, #0
 8016318:	f340 809a 	ble.w	8016450 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801631c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801631e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016322:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016326:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016328:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801632c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016330:	2b00      	cmp	r3, #0
 8016332:	dd0c      	ble.n	801634e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016334:	1406      	asrs	r6, r0, #16
 8016336:	d405      	bmi.n	8016344 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016338:	454e      	cmp	r6, r9
 801633a:	da03      	bge.n	8016344 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801633c:	1416      	asrs	r6, r2, #16
 801633e:	d401      	bmi.n	8016344 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016340:	4546      	cmp	r6, r8
 8016342:	db05      	blt.n	8016350 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016344:	4470      	add	r0, lr
 8016346:	4462      	add	r2, ip
 8016348:	3b01      	subs	r3, #1
 801634a:	3402      	adds	r4, #2
 801634c:	e7f0      	b.n	8016330 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801634e:	d00f      	beq.n	8016370 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8016350:	1e5e      	subs	r6, r3, #1
 8016352:	fb0e 0706 	mla	r7, lr, r6, r0
 8016356:	143f      	asrs	r7, r7, #16
 8016358:	d541      	bpl.n	80163de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801635a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801635e:	4698      	mov	r8, r3
 8016360:	9603      	str	r6, [sp, #12]
 8016362:	f1b8 0f00 	cmp.w	r8, #0
 8016366:	dc56      	bgt.n	8016416 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8016368:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801636c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016370:	9b01      	ldr	r3, [sp, #4]
 8016372:	2b00      	cmp	r3, #0
 8016374:	dd6c      	ble.n	8016450 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016376:	ee30 0a04 	vadd.f32	s0, s0, s8
 801637a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801637c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016380:	eeb0 6a62 	vmov.f32	s12, s5
 8016384:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016388:	ee31 1a05 	vadd.f32	s2, s2, s10
 801638c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016390:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016394:	eeb0 6a43 	vmov.f32	s12, s6
 8016398:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801639c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80163a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80163a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80163a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80163ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80163b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80163b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80163b8:	ee12 2a90 	vmov	r2, s5
 80163bc:	eef0 2a47 	vmov.f32	s5, s14
 80163c0:	fb92 fef3 	sdiv	lr, r2, r3
 80163c4:	ee13 2a10 	vmov	r2, s6
 80163c8:	eeb0 3a67 	vmov.f32	s6, s15
 80163cc:	fb92 fcf3 	sdiv	ip, r2, r3
 80163d0:	9b01      	ldr	r3, [sp, #4]
 80163d2:	3b01      	subs	r3, #1
 80163d4:	9301      	str	r3, [sp, #4]
 80163d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163d8:	bf08      	it	eq
 80163da:	465b      	moveq	r3, fp
 80163dc:	e797      	b.n	801630e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80163de:	454f      	cmp	r7, r9
 80163e0:	dabb      	bge.n	801635a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80163e2:	fb0c 2606 	mla	r6, ip, r6, r2
 80163e6:	1436      	asrs	r6, r6, #16
 80163e8:	d4b7      	bmi.n	801635a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80163ea:	4546      	cmp	r6, r8
 80163ec:	dab5      	bge.n	801635a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80163ee:	461e      	mov	r6, r3
 80163f0:	46a0      	mov	r8, r4
 80163f2:	2e00      	cmp	r6, #0
 80163f4:	ddb8      	ble.n	8016368 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80163f6:	1417      	asrs	r7, r2, #16
 80163f8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80163fc:	ea4f 4920 	mov.w	r9, r0, asr #16
 8016400:	9902      	ldr	r1, [sp, #8]
 8016402:	4470      	add	r0, lr
 8016404:	4462      	add	r2, ip
 8016406:	fb0a 9707 	mla	r7, sl, r7, r9
 801640a:	3e01      	subs	r6, #1
 801640c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8016410:	f828 7b02 	strh.w	r7, [r8], #2
 8016414:	e7ed      	b.n	80163f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8016416:	ea5f 4920 	movs.w	r9, r0, asr #16
 801641a:	d414      	bmi.n	8016446 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801641c:	68ae      	ldr	r6, [r5, #8]
 801641e:	454e      	cmp	r6, r9
 8016420:	dd11      	ble.n	8016446 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8016422:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016426:	d40e      	bmi.n	8016446 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8016428:	68ef      	ldr	r7, [r5, #12]
 801642a:	4557      	cmp	r7, sl
 801642c:	dd0b      	ble.n	8016446 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801642e:	b236      	sxth	r6, r6
 8016430:	f06f 0101 	mvn.w	r1, #1
 8016434:	9f02      	ldr	r7, [sp, #8]
 8016436:	fb0a 9606 	mla	r6, sl, r6, r9
 801643a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801643e:	fb01 f608 	mul.w	r6, r1, r8
 8016442:	9903      	ldr	r1, [sp, #12]
 8016444:	538f      	strh	r7, [r1, r6]
 8016446:	4470      	add	r0, lr
 8016448:	4462      	add	r2, ip
 801644a:	f108 38ff 	add.w	r8, r8, #4294967295
 801644e:	e788      	b.n	8016362 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016450:	b005      	add	sp, #20
 8016452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016456 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645a:	b087      	sub	sp, #28
 801645c:	468b      	mov	fp, r1
 801645e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016462:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8016464:	9203      	str	r2, [sp, #12]
 8016466:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801646a:	6841      	ldr	r1, [r0, #4]
 801646c:	9204      	str	r2, [sp, #16]
 801646e:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8016472:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8016476:	fb01 2505 	mla	r5, r1, r5, r2
 801647a:	6802      	ldr	r2, [r0, #0]
 801647c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8016480:	f8d9 2000 	ldr.w	r2, [r9]
 8016484:	9201      	str	r2, [sp, #4]
 8016486:	f1bb 0f00 	cmp.w	fp, #0
 801648a:	dc03      	bgt.n	8016494 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801648c:	9a03      	ldr	r2, [sp, #12]
 801648e:	2a00      	cmp	r2, #0
 8016490:	f340 8158 	ble.w	8016744 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8016494:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016496:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801649a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801649e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80164a0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80164a4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	dd0e      	ble.n	80164ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80164ac:	1402      	asrs	r2, r0, #16
 80164ae:	d405      	bmi.n	80164bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80164b0:	42ba      	cmp	r2, r7
 80164b2:	da03      	bge.n	80164bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80164b4:	140a      	asrs	r2, r1, #16
 80164b6:	d401      	bmi.n	80164bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80164b8:	42b2      	cmp	r2, r6
 80164ba:	db07      	blt.n	80164cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80164bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80164be:	3b01      	subs	r3, #1
 80164c0:	3502      	adds	r5, #2
 80164c2:	4410      	add	r0, r2
 80164c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80164c6:	4411      	add	r1, r2
 80164c8:	e7ee      	b.n	80164a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80164ca:	d017      	beq.n	80164fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80164cc:	1e5a      	subs	r2, r3, #1
 80164ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80164d0:	fb04 0402 	mla	r4, r4, r2, r0
 80164d4:	1424      	asrs	r4, r4, #16
 80164d6:	d409      	bmi.n	80164ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80164d8:	42bc      	cmp	r4, r7
 80164da:	da07      	bge.n	80164ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80164dc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80164de:	fb04 1202 	mla	r2, r4, r2, r1
 80164e2:	1412      	asrs	r2, r2, #16
 80164e4:	d402      	bmi.n	80164ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80164e6:	42b2      	cmp	r2, r6
 80164e8:	f2c0 80bf 	blt.w	801666a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80164ec:	2700      	movs	r7, #0
 80164ee:	19da      	adds	r2, r3, r7
 80164f0:	2a00      	cmp	r2, #0
 80164f2:	dc3e      	bgt.n	8016572 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80164f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80164f8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80164fc:	f1bb 0f00 	cmp.w	fp, #0
 8016500:	f340 8120 	ble.w	8016744 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8016504:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801650a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801650e:	f1bb 0b01 	subs.w	fp, fp, #1
 8016512:	eeb0 6a62 	vmov.f32	s12, s5
 8016516:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801651a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801651e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016522:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016526:	eeb0 6a43 	vmov.f32	s12, s6
 801652a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801652e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016532:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016536:	ee61 7a27 	vmul.f32	s15, s2, s15
 801653a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801653e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016542:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016546:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801654a:	ee12 2a90 	vmov	r2, s5
 801654e:	eef0 2a47 	vmov.f32	s5, s14
 8016552:	fb92 f3f3 	sdiv	r3, r2, r3
 8016556:	ee13 2a10 	vmov	r2, s6
 801655a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801655c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801655e:	eeb0 3a67 	vmov.f32	s6, s15
 8016562:	fb92 f3f3 	sdiv	r3, r2, r3
 8016566:	9a03      	ldr	r2, [sp, #12]
 8016568:	9314      	str	r3, [sp, #80]	@ 0x50
 801656a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801656c:	bf08      	it	eq
 801656e:	4613      	moveq	r3, r2
 8016570:	e789      	b.n	8016486 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8016572:	1406      	asrs	r6, r0, #16
 8016574:	d42d      	bmi.n	80165d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8016576:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801657a:	42b4      	cmp	r4, r6
 801657c:	dd29      	ble.n	80165d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801657e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8016582:	d426      	bmi.n	80165d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8016584:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8016588:	4562      	cmp	r2, ip
 801658a:	dd22      	ble.n	80165d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801658c:	b224      	sxth	r4, r4
 801658e:	9a01      	ldr	r2, [sp, #4]
 8016590:	fb0c 6404 	mla	r4, ip, r4, r6
 8016594:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8016598:	0e22      	lsrs	r2, r4, #24
 801659a:	d01a      	beq.n	80165d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801659c:	9e04      	ldr	r6, [sp, #16]
 801659e:	4372      	muls	r2, r6
 80165a0:	1c56      	adds	r6, r2, #1
 80165a2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80165a6:	0a26      	lsrs	r6, r4, #8
 80165a8:	1212      	asrs	r2, r2, #8
 80165aa:	9605      	str	r6, [sp, #20]
 80165ac:	2aff      	cmp	r2, #255	@ 0xff
 80165ae:	d116      	bne.n	80165de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80165b0:	f06f 0201 	mvn.w	r2, #1
 80165b4:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80165b8:	fb02 fc07 	mul.w	ip, r2, r7
 80165bc:	0962      	lsrs	r2, r4, #5
 80165be:	f026 0607 	bic.w	r6, r6, #7
 80165c2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80165c6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80165ca:	4316      	orrs	r6, r2
 80165cc:	4326      	orrs	r6, r4
 80165ce:	f825 600c 	strh.w	r6, [r5, ip]
 80165d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80165d4:	3f01      	subs	r7, #1
 80165d6:	4410      	add	r0, r2
 80165d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80165da:	4411      	add	r1, r2
 80165dc:	e787      	b.n	80164ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80165de:	f06f 0601 	mvn.w	r6, #1
 80165e2:	fa1f fa82 	uxth.w	sl, r2
 80165e6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80165ea:	43d2      	mvns	r2, r2
 80165ec:	437e      	muls	r6, r7
 80165ee:	b2e4      	uxtb	r4, r4
 80165f0:	fb1c fc0a 	smulbb	ip, ip, sl
 80165f4:	b2d2      	uxtb	r2, r2
 80165f6:	f835 8006 	ldrh.w	r8, [r5, r6]
 80165fa:	fb14 f40a 	smulbb	r4, r4, sl
 80165fe:	9602      	str	r6, [sp, #8]
 8016600:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8016604:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8016608:	fb16 f60a 	smulbb	r6, r6, sl
 801660c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8016610:	fb0e ce02 	mla	lr, lr, r2, ip
 8016614:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8016618:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801661c:	fa1f fe8e 	uxth.w	lr, lr
 8016620:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8016624:	fa5f f888 	uxtb.w	r8, r8
 8016628:	fb0c 6c02 	mla	ip, ip, r2, r6
 801662c:	fb08 4402 	mla	r4, r8, r2, r4
 8016630:	f10e 0201 	add.w	r2, lr, #1
 8016634:	fa1f fc8c 	uxth.w	ip, ip
 8016638:	b2a4      	uxth	r4, r4
 801663a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801663e:	9a02      	ldr	r2, [sp, #8]
 8016640:	1c66      	adds	r6, r4, #1
 8016642:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8016646:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801664a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801664e:	ea46 0e0e 	orr.w	lr, r6, lr
 8016652:	f10c 0601 	add.w	r6, ip, #1
 8016656:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801665a:	0976      	lsrs	r6, r6, #5
 801665c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8016660:	ea4e 0e06 	orr.w	lr, lr, r6
 8016664:	f825 e002 	strh.w	lr, [r5, r2]
 8016668:	e7b3      	b.n	80165d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801666a:	f04f 0800 	mov.w	r8, #0
 801666e:	eba3 0208 	sub.w	r2, r3, r8
 8016672:	2a00      	cmp	r2, #0
 8016674:	f77f af3e 	ble.w	80164f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016678:	1404      	asrs	r4, r0, #16
 801667a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801667e:	140a      	asrs	r2, r1, #16
 8016680:	fb06 4202 	mla	r2, r6, r2, r4
 8016684:	9c01      	ldr	r4, [sp, #4]
 8016686:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801668a:	0e22      	lsrs	r2, r4, #24
 801668c:	d015      	beq.n	80166ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801668e:	9e04      	ldr	r6, [sp, #16]
 8016690:	4372      	muls	r2, r6
 8016692:	1c56      	adds	r6, r2, #1
 8016694:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016698:	0a26      	lsrs	r6, r4, #8
 801669a:	1212      	asrs	r2, r2, #8
 801669c:	2aff      	cmp	r2, #255	@ 0xff
 801669e:	d113      	bne.n	80166c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80166a0:	0962      	lsrs	r2, r4, #5
 80166a2:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80166a6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80166aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80166ae:	f026 0607 	bic.w	r6, r6, #7
 80166b2:	4316      	orrs	r6, r2
 80166b4:	4326      	orrs	r6, r4
 80166b6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80166ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80166bc:	f108 0801 	add.w	r8, r8, #1
 80166c0:	4410      	add	r0, r2
 80166c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80166c4:	4411      	add	r1, r2
 80166c6:	e7d2      	b.n	801666e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80166c8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80166cc:	fa1f fa82 	uxth.w	sl, r2
 80166d0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80166d4:	43d2      	mvns	r2, r2
 80166d6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80166da:	fb17 f70a 	smulbb	r7, r7, sl
 80166de:	b2d2      	uxtb	r2, r2
 80166e0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80166e4:	b2e4      	uxtb	r4, r4
 80166e6:	b2f6      	uxtb	r6, r6
 80166e8:	fb0c 7c02 	mla	ip, ip, r2, r7
 80166ec:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80166f0:	fb14 f40a 	smulbb	r4, r4, sl
 80166f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80166f8:	fa1f fc8c 	uxth.w	ip, ip
 80166fc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016700:	fb16 f60a 	smulbb	r6, r6, sl
 8016704:	fa5f fe8e 	uxtb.w	lr, lr
 8016708:	fb0e 4402 	mla	r4, lr, r2, r4
 801670c:	fb07 6702 	mla	r7, r7, r2, r6
 8016710:	f10c 0201 	add.w	r2, ip, #1
 8016714:	b2a4      	uxth	r4, r4
 8016716:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801671a:	1c66      	adds	r6, r4, #1
 801671c:	b2bf      	uxth	r7, r7
 801671e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016722:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8016726:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801672a:	ea46 0c0c 	orr.w	ip, r6, ip
 801672e:	1c7e      	adds	r6, r7, #1
 8016730:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8016734:	0976      	lsrs	r6, r6, #5
 8016736:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801673a:	ea4c 0c06 	orr.w	ip, ip, r6
 801673e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8016742:	e7ba      	b.n	80166ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8016744:	b007      	add	sp, #28
 8016746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801674c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016750:	b085      	sub	sp, #20
 8016752:	468b      	mov	fp, r1
 8016754:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016758:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801675a:	9203      	str	r2, [sp, #12]
 801675c:	6841      	ldr	r1, [r0, #4]
 801675e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016762:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8016766:	fb01 2404 	mla	r4, r1, r4, r2
 801676a:	6802      	ldr	r2, [r0, #0]
 801676c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016770:	f8d8 2000 	ldr.w	r2, [r8]
 8016774:	9201      	str	r2, [sp, #4]
 8016776:	f1bb 0f00 	cmp.w	fp, #0
 801677a:	dc03      	bgt.n	8016784 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801677c:	9a03      	ldr	r2, [sp, #12]
 801677e:	2a00      	cmp	r2, #0
 8016780:	f340 814f 	ble.w	8016a22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8016784:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016786:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801678a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801678e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016790:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8016794:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016798:	2b00      	cmp	r3, #0
 801679a:	dd0e      	ble.n	80167ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801679c:	1408      	asrs	r0, r1, #16
 801679e:	d405      	bmi.n	80167ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80167a0:	42b8      	cmp	r0, r7
 80167a2:	da03      	bge.n	80167ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80167a4:	1410      	asrs	r0, r2, #16
 80167a6:	d401      	bmi.n	80167ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80167a8:	42b0      	cmp	r0, r6
 80167aa:	db07      	blt.n	80167bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80167ac:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80167ae:	3b01      	subs	r3, #1
 80167b0:	3402      	adds	r4, #2
 80167b2:	4401      	add	r1, r0
 80167b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80167b6:	4402      	add	r2, r0
 80167b8:	e7ee      	b.n	8016798 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80167ba:	d017      	beq.n	80167ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80167bc:	1e58      	subs	r0, r3, #1
 80167be:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80167c0:	fb05 1500 	mla	r5, r5, r0, r1
 80167c4:	142d      	asrs	r5, r5, #16
 80167c6:	d409      	bmi.n	80167dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80167c8:	42bd      	cmp	r5, r7
 80167ca:	da07      	bge.n	80167dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80167cc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80167ce:	fb05 2000 	mla	r0, r5, r0, r2
 80167d2:	1400      	asrs	r0, r0, #16
 80167d4:	d402      	bmi.n	80167dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80167d6:	42b0      	cmp	r0, r6
 80167d8:	f2c0 80ba 	blt.w	8016950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80167dc:	2600      	movs	r6, #0
 80167de:	1998      	adds	r0, r3, r6
 80167e0:	2800      	cmp	r0, #0
 80167e2:	dc3e      	bgt.n	8016862 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80167e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80167e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80167ec:	f1bb 0f00 	cmp.w	fp, #0
 80167f0:	f340 8117 	ble.w	8016a22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80167f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80167f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80167fe:	f1bb 0b01 	subs.w	fp, fp, #1
 8016802:	eeb0 6a62 	vmov.f32	s12, s5
 8016806:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801680a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801680e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016812:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016816:	eeb0 6a43 	vmov.f32	s12, s6
 801681a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801681e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016822:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016826:	ee61 7a27 	vmul.f32	s15, s2, s15
 801682a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801682e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016832:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016836:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801683a:	ee12 2a90 	vmov	r2, s5
 801683e:	eef0 2a47 	vmov.f32	s5, s14
 8016842:	fb92 f3f3 	sdiv	r3, r2, r3
 8016846:	ee13 2a10 	vmov	r2, s6
 801684a:	9311      	str	r3, [sp, #68]	@ 0x44
 801684c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801684e:	eeb0 3a67 	vmov.f32	s6, s15
 8016852:	fb92 f3f3 	sdiv	r3, r2, r3
 8016856:	9a03      	ldr	r2, [sp, #12]
 8016858:	9312      	str	r3, [sp, #72]	@ 0x48
 801685a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801685c:	bf08      	it	eq
 801685e:	4613      	moveq	r3, r2
 8016860:	e789      	b.n	8016776 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8016862:	140f      	asrs	r7, r1, #16
 8016864:	d424      	bmi.n	80168b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016866:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801686a:	42bd      	cmp	r5, r7
 801686c:	dd20      	ble.n	80168b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801686e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8016872:	d41d      	bmi.n	80168b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016874:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8016878:	4560      	cmp	r0, ip
 801687a:	dd19      	ble.n	80168b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801687c:	b22d      	sxth	r5, r5
 801687e:	9801      	ldr	r0, [sp, #4]
 8016880:	fb0c 7505 	mla	r5, ip, r5, r7
 8016884:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016888:	0e07      	lsrs	r7, r0, #24
 801688a:	2fff      	cmp	r7, #255	@ 0xff
 801688c:	d116      	bne.n	80168bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801688e:	f06f 0501 	mvn.w	r5, #1
 8016892:	fb05 f706 	mul.w	r7, r5, r6
 8016896:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801689a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801689e:	0945      	lsrs	r5, r0, #5
 80168a0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80168a4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80168a8:	ea4c 0505 	orr.w	r5, ip, r5
 80168ac:	4305      	orrs	r5, r0
 80168ae:	53e5      	strh	r5, [r4, r7]
 80168b0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80168b2:	3e01      	subs	r6, #1
 80168b4:	4401      	add	r1, r0
 80168b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80168b8:	4402      	add	r2, r0
 80168ba:	e790      	b.n	80167de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80168bc:	b2fd      	uxtb	r5, r7
 80168be:	2f00      	cmp	r7, #0
 80168c0:	d0f6      	beq.n	80168b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80168c2:	f06f 0701 	mvn.w	r7, #1
 80168c6:	fa1f f985 	uxth.w	r9, r5
 80168ca:	43ed      	mvns	r5, r5
 80168cc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80168d0:	4377      	muls	r7, r6
 80168d2:	fb1a fa09 	smulbb	sl, sl, r9
 80168d6:	b2ed      	uxtb	r5, r5
 80168d8:	f834 e007 	ldrh.w	lr, [r4, r7]
 80168dc:	9702      	str	r7, [sp, #8]
 80168de:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80168e2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80168e6:	fb17 f709 	smulbb	r7, r7, r9
 80168ea:	b2c0      	uxtb	r0, r0
 80168ec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80168f0:	fb10 f009 	smulbb	r0, r0, r9
 80168f4:	fb0c 7c05 	mla	ip, ip, r5, r7
 80168f8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80168fc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016900:	fa1f fc8c 	uxth.w	ip, ip
 8016904:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016908:	fa5f fe8e 	uxtb.w	lr, lr
 801690c:	fb07 a705 	mla	r7, r7, r5, sl
 8016910:	fb0e 0005 	mla	r0, lr, r5, r0
 8016914:	f10c 0501 	add.w	r5, ip, #1
 8016918:	b2bf      	uxth	r7, r7
 801691a:	b280      	uxth	r0, r0
 801691c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016920:	f100 0a01 	add.w	sl, r0, #1
 8016924:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016928:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801692c:	9802      	ldr	r0, [sp, #8]
 801692e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016932:	ea4a 0c0c 	orr.w	ip, sl, ip
 8016936:	f107 0a01 	add.w	sl, r7, #1
 801693a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801693e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016942:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016946:	ea4c 0c0a 	orr.w	ip, ip, sl
 801694a:	f824 c000 	strh.w	ip, [r4, r0]
 801694e:	e7af      	b.n	80168b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016950:	f04f 0e00 	mov.w	lr, #0
 8016954:	eba3 000e 	sub.w	r0, r3, lr
 8016958:	2800      	cmp	r0, #0
 801695a:	f77f af43 	ble.w	80167e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801695e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8016962:	140d      	asrs	r5, r1, #16
 8016964:	1410      	asrs	r0, r2, #16
 8016966:	fb06 5000 	mla	r0, r6, r0, r5
 801696a:	9d01      	ldr	r5, [sp, #4]
 801696c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8016970:	0e2e      	lsrs	r6, r5, #24
 8016972:	2eff      	cmp	r6, #255	@ 0xff
 8016974:	d112      	bne.n	801699c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8016976:	482c      	ldr	r0, [pc, #176]	@ (8016a28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8016978:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801697c:	0968      	lsrs	r0, r5, #5
 801697e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8016982:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8016986:	4330      	orrs	r0, r6
 8016988:	4328      	orrs	r0, r5
 801698a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801698e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016990:	f10e 0e01 	add.w	lr, lr, #1
 8016994:	4401      	add	r1, r0
 8016996:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016998:	4402      	add	r2, r0
 801699a:	e7db      	b.n	8016954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801699c:	b2f0      	uxtb	r0, r6
 801699e:	2e00      	cmp	r6, #0
 80169a0:	d0f5      	beq.n	801698e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80169a2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80169a6:	fa1f f980 	uxth.w	r9, r0
 80169aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80169ae:	43c0      	mvns	r0, r0
 80169b0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80169b4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80169b8:	fb16 f609 	smulbb	r6, r6, r9
 80169bc:	b2c0      	uxtb	r0, r0
 80169be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80169c2:	b2ed      	uxtb	r5, r5
 80169c4:	fb1a fa09 	smulbb	sl, sl, r9
 80169c8:	fb07 6700 	mla	r7, r7, r0, r6
 80169cc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80169d0:	fb15 f509 	smulbb	r5, r5, r9
 80169d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80169d8:	b2bf      	uxth	r7, r7
 80169da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80169de:	fa5f fc8c 	uxtb.w	ip, ip
 80169e2:	fb06 a600 	mla	r6, r6, r0, sl
 80169e6:	fb0c 5500 	mla	r5, ip, r0, r5
 80169ea:	1c78      	adds	r0, r7, #1
 80169ec:	b2b6      	uxth	r6, r6
 80169ee:	b2ad      	uxth	r5, r5
 80169f0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80169f4:	f105 0a01 	add.w	sl, r5, #1
 80169f8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80169fc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016a00:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016a04:	ea4a 0707 	orr.w	r7, sl, r7
 8016a08:	f106 0a01 	add.w	sl, r6, #1
 8016a0c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016a10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016a14:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016a18:	ea47 070a 	orr.w	r7, r7, sl
 8016a1c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8016a20:	e7b5      	b.n	801698e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8016a22:	b005      	add	sp, #20
 8016a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a28:	fffff800 	.word	0xfffff800

08016a2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a30:	b087      	sub	sp, #28
 8016a32:	468b      	mov	fp, r1
 8016a34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016a38:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8016a3a:	9203      	str	r2, [sp, #12]
 8016a3c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016a40:	6841      	ldr	r1, [r0, #4]
 8016a42:	9204      	str	r2, [sp, #16]
 8016a44:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8016a48:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8016a4c:	fb01 2404 	mla	r4, r1, r4, r2
 8016a50:	6802      	ldr	r2, [r0, #0]
 8016a52:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016a56:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016a5a:	3201      	adds	r2, #1
 8016a5c:	f022 0201 	bic.w	r2, r2, #1
 8016a60:	9200      	str	r2, [sp, #0]
 8016a62:	f8d9 2000 	ldr.w	r2, [r9]
 8016a66:	9201      	str	r2, [sp, #4]
 8016a68:	f1bb 0f00 	cmp.w	fp, #0
 8016a6c:	dc03      	bgt.n	8016a76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8016a6e:	9a03      	ldr	r2, [sp, #12]
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	f340 816a 	ble.w	8016d4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8016a76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016a78:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8016a7c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016a80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016a82:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8016a86:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	dd0e      	ble.n	8016aac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016a8e:	1402      	asrs	r2, r0, #16
 8016a90:	d405      	bmi.n	8016a9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016a92:	42ba      	cmp	r2, r7
 8016a94:	da03      	bge.n	8016a9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016a96:	140a      	asrs	r2, r1, #16
 8016a98:	d401      	bmi.n	8016a9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016a9a:	42b2      	cmp	r2, r6
 8016a9c:	db07      	blt.n	8016aae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016a9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	3402      	adds	r4, #2
 8016aa4:	4410      	add	r0, r2
 8016aa6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016aa8:	4411      	add	r1, r2
 8016aaa:	e7ee      	b.n	8016a8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8016aac:	d017      	beq.n	8016ade <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016aae:	1e5a      	subs	r2, r3, #1
 8016ab0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8016ab2:	fb05 0502 	mla	r5, r5, r2, r0
 8016ab6:	142d      	asrs	r5, r5, #16
 8016ab8:	d409      	bmi.n	8016ace <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8016aba:	42bd      	cmp	r5, r7
 8016abc:	da07      	bge.n	8016ace <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8016abe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8016ac0:	fb05 1202 	mla	r2, r5, r2, r1
 8016ac4:	1412      	asrs	r2, r2, #16
 8016ac6:	d402      	bmi.n	8016ace <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8016ac8:	42b2      	cmp	r2, r6
 8016aca:	f2c0 80c8 	blt.w	8016c5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8016ace:	2700      	movs	r7, #0
 8016ad0:	19da      	adds	r2, r3, r7
 8016ad2:	2a00      	cmp	r2, #0
 8016ad4:	dc3e      	bgt.n	8016b54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8016ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ada:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016ade:	f1bb 0f00 	cmp.w	fp, #0
 8016ae2:	f340 8132 	ble.w	8016d4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8016ae6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016aea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016aec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016af0:	f1bb 0b01 	subs.w	fp, fp, #1
 8016af4:	eeb0 6a62 	vmov.f32	s12, s5
 8016af8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016afc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b04:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016b08:	eeb0 6a43 	vmov.f32	s12, s6
 8016b0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b10:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016b14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b2c:	ee12 2a90 	vmov	r2, s5
 8016b30:	eef0 2a47 	vmov.f32	s5, s14
 8016b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b38:	ee13 2a10 	vmov	r2, s6
 8016b3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016b3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b40:	eeb0 3a67 	vmov.f32	s6, s15
 8016b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b48:	9a03      	ldr	r2, [sp, #12]
 8016b4a:	9314      	str	r3, [sp, #80]	@ 0x50
 8016b4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b4e:	bf08      	it	eq
 8016b50:	4613      	moveq	r3, r2
 8016b52:	e789      	b.n	8016a68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016b54:	1405      	asrs	r5, r0, #16
 8016b56:	d436      	bmi.n	8016bc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8016b58:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016b5c:	42aa      	cmp	r2, r5
 8016b5e:	dd32      	ble.n	8016bc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8016b60:	140e      	asrs	r6, r1, #16
 8016b62:	d430      	bmi.n	8016bc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8016b64:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8016b68:	42b2      	cmp	r2, r6
 8016b6a:	dd2c      	ble.n	8016bc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8016b6c:	9a00      	ldr	r2, [sp, #0]
 8016b6e:	fb06 5502 	mla	r5, r6, r2, r5
 8016b72:	9e01      	ldr	r6, [sp, #4]
 8016b74:	086a      	lsrs	r2, r5, #1
 8016b76:	5cb2      	ldrb	r2, [r6, r2]
 8016b78:	07ee      	lsls	r6, r5, #31
 8016b7a:	bf54      	ite	pl
 8016b7c:	f002 020f 	andpl.w	r2, r2, #15
 8016b80:	1112      	asrmi	r2, r2, #4
 8016b82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016b86:	b2d2      	uxtb	r2, r2
 8016b88:	b1ea      	cbz	r2, 8016bc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8016b8a:	9d04      	ldr	r5, [sp, #16]
 8016b8c:	436a      	muls	r2, r5
 8016b8e:	1c55      	adds	r5, r2, #1
 8016b90:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8016b94:	4d6e      	ldr	r5, [pc, #440]	@ (8016d50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8016b96:	1212      	asrs	r2, r2, #8
 8016b98:	682d      	ldr	r5, [r5, #0]
 8016b9a:	2aff      	cmp	r2, #255	@ 0xff
 8016b9c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8016ba0:	9605      	str	r6, [sp, #20]
 8016ba2:	d116      	bne.n	8016bd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8016ba4:	f06f 0201 	mvn.w	r2, #1
 8016ba8:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8016bac:	fb02 fc07 	mul.w	ip, r2, r7
 8016bb0:	096a      	lsrs	r2, r5, #5
 8016bb2:	f026 0607 	bic.w	r6, r6, #7
 8016bb6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8016bba:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8016bbe:	4316      	orrs	r6, r2
 8016bc0:	432e      	orrs	r6, r5
 8016bc2:	f824 600c 	strh.w	r6, [r4, ip]
 8016bc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016bc8:	3f01      	subs	r7, #1
 8016bca:	4410      	add	r0, r2
 8016bcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016bce:	4411      	add	r1, r2
 8016bd0:	e77e      	b.n	8016ad0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8016bd2:	f06f 0601 	mvn.w	r6, #1
 8016bd6:	fa1f fa82 	uxth.w	sl, r2
 8016bda:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8016bde:	43d2      	mvns	r2, r2
 8016be0:	437e      	muls	r6, r7
 8016be2:	b2ed      	uxtb	r5, r5
 8016be4:	fb1c fc0a 	smulbb	ip, ip, sl
 8016be8:	b2d2      	uxtb	r2, r2
 8016bea:	f834 8006 	ldrh.w	r8, [r4, r6]
 8016bee:	fb15 f50a 	smulbb	r5, r5, sl
 8016bf2:	9602      	str	r6, [sp, #8]
 8016bf4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8016bf8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8016bfc:	fb16 f60a 	smulbb	r6, r6, sl
 8016c00:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8016c04:	fb0e ce02 	mla	lr, lr, r2, ip
 8016c08:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8016c0c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016c10:	fa1f fe8e 	uxth.w	lr, lr
 8016c14:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8016c18:	fa5f f888 	uxtb.w	r8, r8
 8016c1c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8016c20:	fb08 5502 	mla	r5, r8, r2, r5
 8016c24:	f10e 0201 	add.w	r2, lr, #1
 8016c28:	fa1f fc8c 	uxth.w	ip, ip
 8016c2c:	b2ad      	uxth	r5, r5
 8016c2e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8016c32:	9a02      	ldr	r2, [sp, #8]
 8016c34:	1c6e      	adds	r6, r5, #1
 8016c36:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8016c3a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8016c3e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8016c42:	ea46 0e0e 	orr.w	lr, r6, lr
 8016c46:	f10c 0601 	add.w	r6, ip, #1
 8016c4a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8016c4e:	0976      	lsrs	r6, r6, #5
 8016c50:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8016c54:	ea4e 0e06 	orr.w	lr, lr, r6
 8016c58:	f824 e002 	strh.w	lr, [r4, r2]
 8016c5c:	e7b3      	b.n	8016bc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8016c5e:	f04f 0800 	mov.w	r8, #0
 8016c62:	eba3 0208 	sub.w	r2, r3, r8
 8016c66:	2a00      	cmp	r2, #0
 8016c68:	f77f af35 	ble.w	8016ad6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8016c6c:	1402      	asrs	r2, r0, #16
 8016c6e:	9e00      	ldr	r6, [sp, #0]
 8016c70:	140d      	asrs	r5, r1, #16
 8016c72:	fb06 2505 	mla	r5, r6, r5, r2
 8016c76:	9e01      	ldr	r6, [sp, #4]
 8016c78:	086a      	lsrs	r2, r5, #1
 8016c7a:	07ed      	lsls	r5, r5, #31
 8016c7c:	5cb2      	ldrb	r2, [r6, r2]
 8016c7e:	bf54      	ite	pl
 8016c80:	f002 020f 	andpl.w	r2, r2, #15
 8016c84:	1112      	asrmi	r2, r2, #4
 8016c86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016c8a:	b2d2      	uxtb	r2, r2
 8016c8c:	b1c2      	cbz	r2, 8016cc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8016c8e:	9d04      	ldr	r5, [sp, #16]
 8016c90:	436a      	muls	r2, r5
 8016c92:	1c55      	adds	r5, r2, #1
 8016c94:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8016c98:	4d2d      	ldr	r5, [pc, #180]	@ (8016d50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8016c9a:	1212      	asrs	r2, r2, #8
 8016c9c:	682e      	ldr	r6, [r5, #0]
 8016c9e:	2aff      	cmp	r2, #255	@ 0xff
 8016ca0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8016ca4:	d113      	bne.n	8016cce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016ca6:	0972      	lsrs	r2, r6, #5
 8016ca8:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8016cac:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8016cb0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8016cb4:	f025 0507 	bic.w	r5, r5, #7
 8016cb8:	4315      	orrs	r5, r2
 8016cba:	4335      	orrs	r5, r6
 8016cbc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8016cc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016cc2:	f108 0801 	add.w	r8, r8, #1
 8016cc6:	4410      	add	r0, r2
 8016cc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016cca:	4411      	add	r1, r2
 8016ccc:	e7c9      	b.n	8016c62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8016cce:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8016cd2:	fa1f fa82 	uxth.w	sl, r2
 8016cd6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8016cda:	43d2      	mvns	r2, r2
 8016cdc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8016ce0:	fb17 f70a 	smulbb	r7, r7, sl
 8016ce4:	b2d2      	uxtb	r2, r2
 8016ce6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8016cea:	b2f6      	uxtb	r6, r6
 8016cec:	b2ed      	uxtb	r5, r5
 8016cee:	fb0c 7c02 	mla	ip, ip, r2, r7
 8016cf2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8016cf6:	fb16 f60a 	smulbb	r6, r6, sl
 8016cfa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016cfe:	fa1f fc8c 	uxth.w	ip, ip
 8016d02:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8016d06:	fb15 f50a 	smulbb	r5, r5, sl
 8016d0a:	fa5f fe8e 	uxtb.w	lr, lr
 8016d0e:	fb0e 6602 	mla	r6, lr, r2, r6
 8016d12:	fb07 5702 	mla	r7, r7, r2, r5
 8016d16:	f10c 0201 	add.w	r2, ip, #1
 8016d1a:	b2b6      	uxth	r6, r6
 8016d1c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8016d20:	1c75      	adds	r5, r6, #1
 8016d22:	b2bf      	uxth	r7, r7
 8016d24:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8016d28:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8016d2c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016d30:	ea45 0c0c 	orr.w	ip, r5, ip
 8016d34:	1c7d      	adds	r5, r7, #1
 8016d36:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8016d3a:	096d      	lsrs	r5, r5, #5
 8016d3c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8016d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8016d44:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8016d48:	e7ba      	b.n	8016cc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8016d4a:	b007      	add	sp, #28
 8016d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d50:	2400aa8c 	.word	0x2400aa8c

08016d54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d58:	b087      	sub	sp, #28
 8016d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016d5e:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 8017068 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8016d62:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8016d64:	9101      	str	r1, [sp, #4]
 8016d66:	9205      	str	r2, [sp, #20]
 8016d68:	6841      	ldr	r1, [r0, #4]
 8016d6a:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8016d6e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8016d72:	fb01 2404 	mla	r4, r1, r4, r2
 8016d76:	6802      	ldr	r2, [r0, #0]
 8016d78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016d7c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8016d80:	3201      	adds	r2, #1
 8016d82:	f022 0201 	bic.w	r2, r2, #1
 8016d86:	9202      	str	r2, [sp, #8]
 8016d88:	f8db 2000 	ldr.w	r2, [fp]
 8016d8c:	9203      	str	r2, [sp, #12]
 8016d8e:	9a01      	ldr	r2, [sp, #4]
 8016d90:	2a00      	cmp	r2, #0
 8016d92:	dc03      	bgt.n	8016d9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016d94:	9a05      	ldr	r2, [sp, #20]
 8016d96:	2a00      	cmp	r2, #0
 8016d98:	f340 8162 	ble.w	8017060 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8016d9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016d9e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8016da2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016da6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016da8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8016dac:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	dd0e      	ble.n	8016dd2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016db4:	1402      	asrs	r2, r0, #16
 8016db6:	d405      	bmi.n	8016dc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016db8:	42ba      	cmp	r2, r7
 8016dba:	da03      	bge.n	8016dc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016dbc:	140a      	asrs	r2, r1, #16
 8016dbe:	d401      	bmi.n	8016dc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016dc0:	42b2      	cmp	r2, r6
 8016dc2:	db07      	blt.n	8016dd4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016dc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016dc6:	3b01      	subs	r3, #1
 8016dc8:	3402      	adds	r4, #2
 8016dca:	4410      	add	r0, r2
 8016dcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016dce:	4411      	add	r1, r2
 8016dd0:	e7ee      	b.n	8016db0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016dd2:	d017      	beq.n	8016e04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8016dd4:	1e5a      	subs	r2, r3, #1
 8016dd6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8016dd8:	fb05 0502 	mla	r5, r5, r2, r0
 8016ddc:	142d      	asrs	r5, r5, #16
 8016dde:	d409      	bmi.n	8016df4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016de0:	42bd      	cmp	r5, r7
 8016de2:	da07      	bge.n	8016df4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016de4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8016de6:	fb05 1202 	mla	r2, r5, r2, r1
 8016dea:	1412      	asrs	r2, r2, #16
 8016dec:	d402      	bmi.n	8016df4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016dee:	42b2      	cmp	r2, r6
 8016df0:	f2c0 80c3 	blt.w	8016f7a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8016df4:	2500      	movs	r5, #0
 8016df6:	195a      	adds	r2, r3, r5
 8016df8:	2a00      	cmp	r2, #0
 8016dfa:	dc3f      	bgt.n	8016e7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8016dfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016e04:	9b01      	ldr	r3, [sp, #4]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	f340 812a 	ble.w	8017060 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8016e0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016e16:	eeb0 6a62 	vmov.f32	s12, s5
 8016e1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016e1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e26:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016e2a:	eeb0 6a43 	vmov.f32	s12, s6
 8016e2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e32:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016e36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e4e:	ee12 2a90 	vmov	r2, s5
 8016e52:	eef0 2a47 	vmov.f32	s5, s14
 8016e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e5a:	ee13 2a10 	vmov	r2, s6
 8016e5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016e60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e62:	eeb0 3a67 	vmov.f32	s6, s15
 8016e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e6a:	9314      	str	r3, [sp, #80]	@ 0x50
 8016e6c:	9b01      	ldr	r3, [sp, #4]
 8016e6e:	9a05      	ldr	r2, [sp, #20]
 8016e70:	3b01      	subs	r3, #1
 8016e72:	9301      	str	r3, [sp, #4]
 8016e74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e76:	bf08      	it	eq
 8016e78:	4613      	moveq	r3, r2
 8016e7a:	e788      	b.n	8016d8e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016e7c:	1406      	asrs	r6, r0, #16
 8016e7e:	d42c      	bmi.n	8016eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016e80:	f8db 2008 	ldr.w	r2, [fp, #8]
 8016e84:	42b2      	cmp	r2, r6
 8016e86:	dd28      	ble.n	8016eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016e88:	140f      	asrs	r7, r1, #16
 8016e8a:	d426      	bmi.n	8016eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016e8c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8016e90:	42ba      	cmp	r2, r7
 8016e92:	dd22      	ble.n	8016eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016e94:	9a02      	ldr	r2, [sp, #8]
 8016e96:	fb07 6602 	mla	r6, r7, r2, r6
 8016e9a:	9f03      	ldr	r7, [sp, #12]
 8016e9c:	0872      	lsrs	r2, r6, #1
 8016e9e:	07f6      	lsls	r6, r6, #31
 8016ea0:	5cba      	ldrb	r2, [r7, r2]
 8016ea2:	bf54      	ite	pl
 8016ea4:	f002 020f 	andpl.w	r2, r2, #15
 8016ea8:	1112      	asrmi	r2, r2, #4
 8016eaa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016eae:	b2d2      	uxtb	r2, r2
 8016eb0:	2aff      	cmp	r2, #255	@ 0xff
 8016eb2:	d118      	bne.n	8016ee6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016eb4:	f06f 0601 	mvn.w	r6, #1
 8016eb8:	f8d8 2000 	ldr.w	r2, [r8]
 8016ebc:	fb06 f705 	mul.w	r7, r6, r5
 8016ec0:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 8016ec4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8016ec8:	0956      	lsrs	r6, r2, #5
 8016eca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8016ece:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8016ed2:	ea4c 0606 	orr.w	r6, ip, r6
 8016ed6:	4316      	orrs	r6, r2
 8016ed8:	53e6      	strh	r6, [r4, r7]
 8016eda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016edc:	3d01      	subs	r5, #1
 8016ede:	4410      	add	r0, r2
 8016ee0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016ee2:	4411      	add	r1, r2
 8016ee4:	e787      	b.n	8016df6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8016ee6:	2a00      	cmp	r2, #0
 8016ee8:	d0f7      	beq.n	8016eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016eea:	f06f 0601 	mvn.w	r6, #1
 8016eee:	f8d8 c000 	ldr.w	ip, [r8]
 8016ef2:	fa1f f982 	uxth.w	r9, r2
 8016ef6:	43d2      	mvns	r2, r2
 8016ef8:	436e      	muls	r6, r5
 8016efa:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8016efe:	b2d2      	uxtb	r2, r2
 8016f00:	f834 e006 	ldrh.w	lr, [r4, r6]
 8016f04:	fb1a fa09 	smulbb	sl, sl, r9
 8016f08:	9604      	str	r6, [sp, #16]
 8016f0a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8016f0e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8016f12:	fb16 f609 	smulbb	r6, r6, r9
 8016f16:	fa5f fc8c 	uxtb.w	ip, ip
 8016f1a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8016f1e:	fb1c fc09 	smulbb	ip, ip, r9
 8016f22:	fb07 6702 	mla	r7, r7, r2, r6
 8016f26:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8016f2a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016f2e:	b2bf      	uxth	r7, r7
 8016f30:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8016f34:	fa5f fe8e 	uxtb.w	lr, lr
 8016f38:	fb06 a602 	mla	r6, r6, r2, sl
 8016f3c:	fb0e cc02 	mla	ip, lr, r2, ip
 8016f40:	1c7a      	adds	r2, r7, #1
 8016f42:	b2b6      	uxth	r6, r6
 8016f44:	fa1f fc8c 	uxth.w	ip, ip
 8016f48:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016f4c:	9a04      	ldr	r2, [sp, #16]
 8016f4e:	f10c 0a01 	add.w	sl, ip, #1
 8016f52:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8016f56:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8016f5a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016f5e:	ea4a 0707 	orr.w	r7, sl, r7
 8016f62:	f106 0a01 	add.w	sl, r6, #1
 8016f66:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016f6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016f6e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8016f72:	ea47 070a 	orr.w	r7, r7, sl
 8016f76:	52a7      	strh	r7, [r4, r2]
 8016f78:	e7af      	b.n	8016eda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016f7a:	f04f 0e00 	mov.w	lr, #0
 8016f7e:	eba3 020e 	sub.w	r2, r3, lr
 8016f82:	2a00      	cmp	r2, #0
 8016f84:	f77f af3a 	ble.w	8016dfc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8016f88:	1402      	asrs	r2, r0, #16
 8016f8a:	9e02      	ldr	r6, [sp, #8]
 8016f8c:	140d      	asrs	r5, r1, #16
 8016f8e:	fb06 2505 	mla	r5, r6, r5, r2
 8016f92:	9e03      	ldr	r6, [sp, #12]
 8016f94:	086a      	lsrs	r2, r5, #1
 8016f96:	07ed      	lsls	r5, r5, #31
 8016f98:	5cb2      	ldrb	r2, [r6, r2]
 8016f9a:	bf54      	ite	pl
 8016f9c:	f002 020f 	andpl.w	r2, r2, #15
 8016fa0:	1112      	asrmi	r2, r2, #4
 8016fa2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016fa6:	b2d2      	uxtb	r2, r2
 8016fa8:	2aff      	cmp	r2, #255	@ 0xff
 8016faa:	d115      	bne.n	8016fd8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016fac:	f8d8 5000 	ldr.w	r5, [r8]
 8016fb0:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8016fb4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8016fb8:	096a      	lsrs	r2, r5, #5
 8016fba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8016fbe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8016fc2:	4332      	orrs	r2, r6
 8016fc4:	432a      	orrs	r2, r5
 8016fc6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8016fca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016fcc:	f10e 0e01 	add.w	lr, lr, #1
 8016fd0:	4410      	add	r0, r2
 8016fd2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016fd4:	4411      	add	r1, r2
 8016fd6:	e7d2      	b.n	8016f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8016fd8:	2a00      	cmp	r2, #0
 8016fda:	d0f6      	beq.n	8016fca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016fdc:	f8d8 7000 	ldr.w	r7, [r8]
 8016fe0:	fa1f f982 	uxth.w	r9, r2
 8016fe4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8016fe8:	43d2      	mvns	r2, r2
 8016fea:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8016fee:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016ff2:	ea4f 262c 	mov.w	r6, ip, asr #8
 8016ff6:	fb15 f509 	smulbb	r5, r5, r9
 8016ffa:	b2d2      	uxtb	r2, r2
 8016ffc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8017000:	b2ff      	uxtb	r7, r7
 8017002:	fb1a fa09 	smulbb	sl, sl, r9
 8017006:	fb06 5602 	mla	r6, r6, r2, r5
 801700a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801700e:	fb17 f709 	smulbb	r7, r7, r9
 8017012:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017016:	b2b6      	uxth	r6, r6
 8017018:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801701c:	fa5f fc8c 	uxtb.w	ip, ip
 8017020:	fb05 a502 	mla	r5, r5, r2, sl
 8017024:	fb0c 7702 	mla	r7, ip, r2, r7
 8017028:	1c72      	adds	r2, r6, #1
 801702a:	b2ad      	uxth	r5, r5
 801702c:	b2bf      	uxth	r7, r7
 801702e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8017032:	f107 0a01 	add.w	sl, r7, #1
 8017036:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801703a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801703e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017042:	ea4a 0606 	orr.w	r6, sl, r6
 8017046:	f105 0a01 	add.w	sl, r5, #1
 801704a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801704e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017052:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8017056:	ea46 060a 	orr.w	r6, r6, sl
 801705a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801705e:	e7b4      	b.n	8016fca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017060:	b007      	add	sp, #28
 8017062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017066:	bf00      	nop
 8017068:	2400aa8c 	.word	0x2400aa8c

0801706c <_ZN8touchgfx8LCD16bppD1Ev>:
 801706c:	4770      	bx	lr

0801706e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801706e:	4770      	bx	lr

08017070 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 8017070:	4770      	bx	lr

08017072 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 8017072:	4770      	bx	lr

08017074 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8017074:	4770      	bx	lr

08017076 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8017076:	4770      	bx	lr

08017078 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8017078:	4770      	bx	lr

0801707a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801707a:	4770      	bx	lr

0801707c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801707c:	4770      	bx	lr

0801707e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801707e:	4770      	bx	lr

08017080 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017080:	4770      	bx	lr

08017082 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017082:	4770      	bx	lr

08017084 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017084:	4770      	bx	lr

08017086 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017086:	4770      	bx	lr

08017088 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8017088:	4770      	bx	lr

0801708a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801708a:	4770      	bx	lr

0801708c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801708c:	4770      	bx	lr

0801708e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801708e:	4770      	bx	lr

08017090 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8017090:	4770      	bx	lr

08017092 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017092:	4770      	bx	lr

08017094 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017094:	4770      	bx	lr

08017096 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017096:	4770      	bx	lr

08017098 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017098:	4770      	bx	lr

0801709a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801709a:	4770      	bx	lr

0801709c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801709c:	4770      	bx	lr

0801709e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801709e:	4770      	bx	lr

080170a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80170a0:	4770      	bx	lr

080170a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80170a2:	4770      	bx	lr

080170a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80170a4:	4770      	bx	lr

080170a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80170a6:	4770      	bx	lr

080170a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80170a8:	4770      	bx	lr

080170aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80170aa:	4770      	bx	lr

080170ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80170ac:	4770      	bx	lr

080170ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80170ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170b2:	b088      	sub	sp, #32
 80170b4:	4606      	mov	r6, r0
 80170b6:	4688      	mov	r8, r1
 80170b8:	4691      	mov	r9, r2
 80170ba:	ac08      	add	r4, sp, #32
 80170bc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80170c0:	4620      	mov	r0, r4
 80170c2:	f7fd fc31 	bl	8014928 <_ZNK8touchgfx6Bitmap7getDataEv>
 80170c6:	6833      	ldr	r3, [r6, #0]
 80170c8:	4605      	mov	r5, r0
 80170ca:	4620      	mov	r0, r4
 80170cc:	699f      	ldr	r7, [r3, #24]
 80170ce:	f7fd fb39 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170d2:	4682      	mov	sl, r0
 80170d4:	4620      	mov	r0, r4
 80170d6:	f7fd fb69 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170da:	9500      	str	r5, [sp, #0]
 80170dc:	464b      	mov	r3, r9
 80170de:	4642      	mov	r2, r8
 80170e0:	4631      	mov	r1, r6
 80170e2:	e9cd a001 	strd	sl, r0, [sp, #4]
 80170e6:	a806      	add	r0, sp, #24
 80170e8:	47b8      	blx	r7
 80170ea:	4628      	mov	r0, r5
 80170ec:	b008      	add	sp, #32
 80170ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080170f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80170f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170f8:	2300      	movs	r3, #0
 80170fa:	9300      	str	r3, [sp, #0]
 80170fc:	4b3d      	ldr	r3, [pc, #244]	@ (80171f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d137      	bne.n	8017174 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8017104:	4a3c      	ldr	r2, [pc, #240]	@ (80171f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8017106:	f9b2 2000 	ldrsh.w	r2, [r2]
 801710a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d132      	bne.n	8017178 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8017112:	4b3a      	ldr	r3, [pc, #232]	@ (80171fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8017114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017118:	ac02      	add	r4, sp, #8
 801711a:	6808      	ldr	r0, [r1, #0]
 801711c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017120:	ab02      	add	r3, sp, #8
 8017122:	6849      	ldr	r1, [r1, #4]
 8017124:	4d36      	ldr	r5, [pc, #216]	@ (8017200 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8017126:	c303      	stmia	r3!, {r0, r1}
 8017128:	4669      	mov	r1, sp
 801712a:	4620      	mov	r0, r4
 801712c:	f7fa fc84 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017130:	4668      	mov	r0, sp
 8017132:	f7fa fc59 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017136:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801713a:	f8bd 2000 	ldrh.w	r2, [sp]
 801713e:	462f      	mov	r7, r5
 8017140:	6828      	ldr	r0, [r5, #0]
 8017142:	4413      	add	r3, r2
 8017144:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017148:	f8ad 3008 	strh.w	r3, [sp, #8]
 801714c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017150:	4413      	add	r3, r2
 8017152:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801715a:	4798      	blx	r3
 801715c:	f010 0f01 	tst.w	r0, #1
 8017160:	d00c      	beq.n	801717c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8017162:	6828      	ldr	r0, [r5, #0]
 8017164:	6803      	ldr	r3, [r0, #0]
 8017166:	e894 0006 	ldmia.w	r4, {r1, r2}
 801716a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801716c:	4798      	blx	r3
 801716e:	b004      	add	sp, #16
 8017170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017174:	4a21      	ldr	r2, [pc, #132]	@ (80171fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8017176:	e7c6      	b.n	8017106 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017178:	4b1f      	ldr	r3, [pc, #124]	@ (80171f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801717a:	e7cb      	b.n	8017114 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801717c:	6838      	ldr	r0, [r7, #0]
 801717e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017182:	6803      	ldr	r3, [r0, #0]
 8017184:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8017188:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801718e:	4798      	blx	r3
 8017190:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017194:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017198:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801719c:	fb16 3602 	smlabb	r6, r6, r2, r3
 80171a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80171a4:	6838      	ldr	r0, [r7, #0]
 80171a6:	6803      	ldr	r3, [r0, #0]
 80171a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171aa:	4798      	blx	r3
 80171ac:	4a12      	ldr	r2, [pc, #72]	@ (80171f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80171ae:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80171b2:	8813      	ldrh	r3, [r2, #0]
 80171b4:	4691      	mov	r9, r2
 80171b6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80171ba:	435d      	muls	r5, r3
 80171bc:	fb03 1404 	mla	r4, r3, r4, r1
 80171c0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80171c4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80171c8:	6838      	ldr	r0, [r7, #0]
 80171ca:	42ac      	cmp	r4, r5
 80171cc:	6803      	ldr	r3, [r0, #0]
 80171ce:	d20e      	bcs.n	80171ee <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80171d0:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 80171d4:	4632      	mov	r2, r6
 80171d6:	4643      	mov	r3, r8
 80171d8:	4621      	mov	r1, r4
 80171da:	47d0      	blx	sl
 80171dc:	f8b9 3000 	ldrh.w	r3, [r9]
 80171e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80171e4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80171e8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80171ec:	e7ec      	b.n	80171c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80171ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171f0:	4798      	blx	r3
 80171f2:	e7bc      	b.n	801716e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80171f4:	2400aa7c 	.word	0x2400aa7c
 80171f8:	2400aa7e 	.word	0x2400aa7e
 80171fc:	2400aa80 	.word	0x2400aa80
 8017200:	2400aa84 	.word	0x2400aa84

08017204 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017208:	b08b      	sub	sp, #44	@ 0x2c
 801720a:	460f      	mov	r7, r1
 801720c:	4616      	mov	r6, r2
 801720e:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8017212:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8017216:	f1bb 0f00 	cmp.w	fp, #0
 801721a:	d04a      	beq.n	80172b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801721c:	6810      	ldr	r0, [r2, #0]
 801721e:	ad06      	add	r5, sp, #24
 8017220:	6851      	ldr	r1, [r2, #4]
 8017222:	c503      	stmia	r5!, {r0, r1}
 8017224:	6818      	ldr	r0, [r3, #0]
 8017226:	ad08      	add	r5, sp, #32
 8017228:	6859      	ldr	r1, [r3, #4]
 801722a:	c503      	stmia	r5!, {r0, r1}
 801722c:	a806      	add	r0, sp, #24
 801722e:	f7fa fbdb 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017232:	4631      	mov	r1, r6
 8017234:	a808      	add	r0, sp, #32
 8017236:	f7fa fbff 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801723a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801723e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017242:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017246:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801724a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801724e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8017252:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8017256:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801725a:	4f5f      	ldr	r7, [pc, #380]	@ (80173d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801725c:	440a      	add	r2, r1
 801725e:	6838      	ldr	r0, [r7, #0]
 8017260:	46b9      	mov	r9, r7
 8017262:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017266:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801726a:	4413      	add	r3, r2
 801726c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017270:	6803      	ldr	r3, [r0, #0]
 8017272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017274:	4798      	blx	r3
 8017276:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801727a:	d11d      	bne.n	80172b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801727c:	b9fc      	cbnz	r4, 80172be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801727e:	f010 0f01 	tst.w	r0, #1
 8017282:	d01c      	beq.n	80172be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8017284:	f8d9 0000 	ldr.w	r0, [r9]
 8017288:	2700      	movs	r7, #0
 801728a:	b2ad      	uxth	r5, r5
 801728c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8017290:	6801      	ldr	r1, [r0, #0]
 8017292:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017296:	f8cd b00c 	str.w	fp, [sp, #12]
 801729a:	9501      	str	r5, [sp, #4]
 801729c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80172a0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80172a4:	9402      	str	r4, [sp, #8]
 80172a6:	fa1f f488 	uxth.w	r4, r8
 80172aa:	9400      	str	r4, [sp, #0]
 80172ac:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 80172ae:	4631      	mov	r1, r6
 80172b0:	47a0      	blx	r4
 80172b2:	b00b      	add	sp, #44	@ 0x2c
 80172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	f010 0f04 	tst.w	r0, #4
 80172bc:	e7e1      	b.n	8017282 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80172be:	f8d9 0000 	ldr.w	r0, [r9]
 80172c2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80172c6:	6803      	ldr	r3, [r0, #0]
 80172c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172ca:	4798      	blx	r3
 80172cc:	4b43      	ldr	r3, [pc, #268]	@ (80173dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80172ce:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80172d2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80172d6:	881a      	ldrh	r2, [r3, #0]
 80172d8:	469a      	mov	sl, r3
 80172da:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80172de:	fb05 f502 	mul.w	r5, r5, r2
 80172e2:	fb02 1404 	mla	r4, r2, r4, r1
 80172e6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80172ea:	d059      	beq.n	80173a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80172ec:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 80172f0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80172f4:	fa1f f28b 	uxth.w	r2, fp
 80172f8:	469e      	mov	lr, r3
 80172fa:	fa1f f989 	uxth.w	r9, r9
 80172fe:	42ac      	cmp	r4, r5
 8017300:	d264      	bcs.n	80173cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8017302:	eb04 0a07 	add.w	sl, r4, r7
 8017306:	4554      	cmp	r4, sl
 8017308:	d23d      	bcs.n	8017386 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801730a:	8821      	ldrh	r1, [r4, #0]
 801730c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8017310:	1208      	asrs	r0, r1, #8
 8017312:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017316:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801731a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801731e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8017322:	00c9      	lsls	r1, r1, #3
 8017324:	fb10 f009 	smulbb	r0, r0, r9
 8017328:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801732c:	b2c9      	uxtb	r1, r1
 801732e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017332:	10d8      	asrs	r0, r3, #3
 8017334:	fb1b fb09 	smulbb	fp, fp, r9
 8017338:	00db      	lsls	r3, r3, #3
 801733a:	fa1f fc8c 	uxth.w	ip, ip
 801733e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8017342:	fb11 f109 	smulbb	r1, r1, r9
 8017346:	b2db      	uxtb	r3, r3
 8017348:	fb00 b002 	mla	r0, r0, r2, fp
 801734c:	f10c 0b01 	add.w	fp, ip, #1
 8017350:	fb03 1302 	mla	r3, r3, r2, r1
 8017354:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8017358:	b29b      	uxth	r3, r3
 801735a:	b280      	uxth	r0, r0
 801735c:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8017360:	f103 0c01 	add.w	ip, r3, #1
 8017364:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8017368:	1c43      	adds	r3, r0, #1
 801736a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801736e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8017372:	0940      	lsrs	r0, r0, #5
 8017374:	ea4c 0c0b 	orr.w	ip, ip, fp
 8017378:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801737c:	ea4c 0c00 	orr.w	ip, ip, r0
 8017380:	f824 cb02 	strh.w	ip, [r4], #2
 8017384:	e7bf      	b.n	8017306 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8017386:	f8be 3000 	ldrh.w	r3, [lr]
 801738a:	eba3 0308 	sub.w	r3, r3, r8
 801738e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017392:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017396:	eba3 0308 	sub.w	r3, r3, r8
 801739a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801739e:	e7ae      	b.n	80172fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80173a0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80173a4:	f8d9 0000 	ldr.w	r0, [r9]
 80173a8:	42ac      	cmp	r4, r5
 80173aa:	6803      	ldr	r3, [r0, #0]
 80173ac:	d20e      	bcs.n	80173cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80173ae:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 80173b2:	4632      	mov	r2, r6
 80173b4:	463b      	mov	r3, r7
 80173b6:	4621      	mov	r1, r4
 80173b8:	47c0      	blx	r8
 80173ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80173be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80173c2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80173c6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80173ca:	e7eb      	b.n	80173a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80173cc:	4b02      	ldr	r3, [pc, #8]	@ (80173d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80173ce:	6818      	ldr	r0, [r3, #0]
 80173d0:	6803      	ldr	r3, [r0, #0]
 80173d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173d4:	4798      	blx	r3
 80173d6:	e76c      	b.n	80172b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80173d8:	2400aa84 	.word	0x2400aa84
 80173dc:	2400aa7e 	.word	0x2400aa7e

080173e0 <_ZN8touchgfx8LCD16bppD0Ev>:
 80173e0:	b510      	push	{r4, lr}
 80173e2:	4604      	mov	r4, r0
 80173e4:	218c      	movs	r1, #140	@ 0x8c
 80173e6:	f00b fcbd 	bl	8022d64 <_ZdlPvj>
 80173ea:	4620      	mov	r0, r4
 80173ec:	bd10      	pop	{r4, pc}

080173ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 80173ee:	b510      	push	{r4, lr}
 80173f0:	4604      	mov	r4, r0
 80173f2:	2104      	movs	r1, #4
 80173f4:	f00b fcb6 	bl	8022d64 <_ZdlPvj>
 80173f8:	4620      	mov	r0, r4
 80173fa:	bd10      	pop	{r4, pc}

080173fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 80173fc:	b510      	push	{r4, lr}
 80173fe:	4604      	mov	r4, r0
 8017400:	2104      	movs	r1, #4
 8017402:	f00b fcaf 	bl	8022d64 <_ZdlPvj>
 8017406:	4620      	mov	r0, r4
 8017408:	bd10      	pop	{r4, pc}

0801740a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801740a:	b510      	push	{r4, lr}
 801740c:	4604      	mov	r4, r0
 801740e:	f640 0144 	movw	r1, #2116	@ 0x844
 8017412:	f00b fca7 	bl	8022d64 <_ZdlPvj>
 8017416:	4620      	mov	r0, r4
 8017418:	bd10      	pop	{r4, pc}

0801741a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801741a:	b510      	push	{r4, lr}
 801741c:	4604      	mov	r4, r0
 801741e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8017422:	f00b fc9f 	bl	8022d64 <_ZdlPvj>
 8017426:	4620      	mov	r0, r4
 8017428:	bd10      	pop	{r4, pc}

0801742a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801742a:	b510      	push	{r4, lr}
 801742c:	4604      	mov	r4, r0
 801742e:	2104      	movs	r1, #4
 8017430:	f00b fc98 	bl	8022d64 <_ZdlPvj>
 8017434:	4620      	mov	r0, r4
 8017436:	bd10      	pop	{r4, pc}

08017438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8017438:	b510      	push	{r4, lr}
 801743a:	4604      	mov	r4, r0
 801743c:	2104      	movs	r1, #4
 801743e:	f00b fc91 	bl	8022d64 <_ZdlPvj>
 8017442:	4620      	mov	r0, r4
 8017444:	bd10      	pop	{r4, pc}

08017446 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017446:	b510      	push	{r4, lr}
 8017448:	4604      	mov	r4, r0
 801744a:	2104      	movs	r1, #4
 801744c:	f00b fc8a 	bl	8022d64 <_ZdlPvj>
 8017450:	4620      	mov	r0, r4
 8017452:	bd10      	pop	{r4, pc}

08017454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8017454:	b510      	push	{r4, lr}
 8017456:	4604      	mov	r4, r0
 8017458:	2104      	movs	r1, #4
 801745a:	f00b fc83 	bl	8022d64 <_ZdlPvj>
 801745e:	4620      	mov	r0, r4
 8017460:	bd10      	pop	{r4, pc}

08017462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017462:	b510      	push	{r4, lr}
 8017464:	4604      	mov	r4, r0
 8017466:	2104      	movs	r1, #4
 8017468:	f00b fc7c 	bl	8022d64 <_ZdlPvj>
 801746c:	4620      	mov	r0, r4
 801746e:	bd10      	pop	{r4, pc}

08017470 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017470:	b510      	push	{r4, lr}
 8017472:	4604      	mov	r4, r0
 8017474:	2104      	movs	r1, #4
 8017476:	f00b fc75 	bl	8022d64 <_ZdlPvj>
 801747a:	4620      	mov	r0, r4
 801747c:	bd10      	pop	{r4, pc}

0801747e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801747e:	b510      	push	{r4, lr}
 8017480:	4604      	mov	r4, r0
 8017482:	2104      	movs	r1, #4
 8017484:	f00b fc6e 	bl	8022d64 <_ZdlPvj>
 8017488:	4620      	mov	r0, r4
 801748a:	bd10      	pop	{r4, pc}

0801748c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801748c:	b510      	push	{r4, lr}
 801748e:	4604      	mov	r4, r0
 8017490:	2104      	movs	r1, #4
 8017492:	f00b fc67 	bl	8022d64 <_ZdlPvj>
 8017496:	4620      	mov	r0, r4
 8017498:	bd10      	pop	{r4, pc}

0801749a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801749a:	b510      	push	{r4, lr}
 801749c:	4604      	mov	r4, r0
 801749e:	2104      	movs	r1, #4
 80174a0:	f00b fc60 	bl	8022d64 <_ZdlPvj>
 80174a4:	4620      	mov	r0, r4
 80174a6:	bd10      	pop	{r4, pc}

080174a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80174a8:	b510      	push	{r4, lr}
 80174aa:	4604      	mov	r4, r0
 80174ac:	2104      	movs	r1, #4
 80174ae:	f00b fc59 	bl	8022d64 <_ZdlPvj>
 80174b2:	4620      	mov	r0, r4
 80174b4:	bd10      	pop	{r4, pc}

080174b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80174b6:	b510      	push	{r4, lr}
 80174b8:	4604      	mov	r4, r0
 80174ba:	2104      	movs	r1, #4
 80174bc:	f00b fc52 	bl	8022d64 <_ZdlPvj>
 80174c0:	4620      	mov	r0, r4
 80174c2:	bd10      	pop	{r4, pc}

080174c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80174c4:	b510      	push	{r4, lr}
 80174c6:	4604      	mov	r4, r0
 80174c8:	2104      	movs	r1, #4
 80174ca:	f00b fc4b 	bl	8022d64 <_ZdlPvj>
 80174ce:	4620      	mov	r0, r4
 80174d0:	bd10      	pop	{r4, pc}

080174d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80174d2:	b510      	push	{r4, lr}
 80174d4:	4604      	mov	r4, r0
 80174d6:	2104      	movs	r1, #4
 80174d8:	f00b fc44 	bl	8022d64 <_ZdlPvj>
 80174dc:	4620      	mov	r0, r4
 80174de:	bd10      	pop	{r4, pc}

080174e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80174e0:	b510      	push	{r4, lr}
 80174e2:	4604      	mov	r4, r0
 80174e4:	2104      	movs	r1, #4
 80174e6:	f00b fc3d 	bl	8022d64 <_ZdlPvj>
 80174ea:	4620      	mov	r0, r4
 80174ec:	bd10      	pop	{r4, pc}

080174ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80174ee:	b510      	push	{r4, lr}
 80174f0:	4604      	mov	r4, r0
 80174f2:	2104      	movs	r1, #4
 80174f4:	f00b fc36 	bl	8022d64 <_ZdlPvj>
 80174f8:	4620      	mov	r0, r4
 80174fa:	bd10      	pop	{r4, pc}

080174fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80174fc:	b510      	push	{r4, lr}
 80174fe:	4604      	mov	r4, r0
 8017500:	2104      	movs	r1, #4
 8017502:	f00b fc2f 	bl	8022d64 <_ZdlPvj>
 8017506:	4620      	mov	r0, r4
 8017508:	bd10      	pop	{r4, pc}

0801750a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801750a:	b510      	push	{r4, lr}
 801750c:	4604      	mov	r4, r0
 801750e:	2104      	movs	r1, #4
 8017510:	f00b fc28 	bl	8022d64 <_ZdlPvj>
 8017514:	4620      	mov	r0, r4
 8017516:	bd10      	pop	{r4, pc}

08017518 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8017518:	b510      	push	{r4, lr}
 801751a:	4604      	mov	r4, r0
 801751c:	2104      	movs	r1, #4
 801751e:	f00b fc21 	bl	8022d64 <_ZdlPvj>
 8017522:	4620      	mov	r0, r4
 8017524:	bd10      	pop	{r4, pc}

08017526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017526:	b510      	push	{r4, lr}
 8017528:	4604      	mov	r4, r0
 801752a:	2104      	movs	r1, #4
 801752c:	f00b fc1a 	bl	8022d64 <_ZdlPvj>
 8017530:	4620      	mov	r0, r4
 8017532:	bd10      	pop	{r4, pc}

08017534 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017534:	b510      	push	{r4, lr}
 8017536:	4604      	mov	r4, r0
 8017538:	2104      	movs	r1, #4
 801753a:	f00b fc13 	bl	8022d64 <_ZdlPvj>
 801753e:	4620      	mov	r0, r4
 8017540:	bd10      	pop	{r4, pc}

08017542 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017542:	b510      	push	{r4, lr}
 8017544:	4604      	mov	r4, r0
 8017546:	2104      	movs	r1, #4
 8017548:	f00b fc0c 	bl	8022d64 <_ZdlPvj>
 801754c:	4620      	mov	r0, r4
 801754e:	bd10      	pop	{r4, pc}

08017550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017550:	b510      	push	{r4, lr}
 8017552:	4604      	mov	r4, r0
 8017554:	2104      	movs	r1, #4
 8017556:	f00b fc05 	bl	8022d64 <_ZdlPvj>
 801755a:	4620      	mov	r0, r4
 801755c:	bd10      	pop	{r4, pc}

0801755e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801755e:	b510      	push	{r4, lr}
 8017560:	4604      	mov	r4, r0
 8017562:	2104      	movs	r1, #4
 8017564:	f00b fbfe 	bl	8022d64 <_ZdlPvj>
 8017568:	4620      	mov	r0, r4
 801756a:	bd10      	pop	{r4, pc}

0801756c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801756c:	b510      	push	{r4, lr}
 801756e:	4604      	mov	r4, r0
 8017570:	2104      	movs	r1, #4
 8017572:	f00b fbf7 	bl	8022d64 <_ZdlPvj>
 8017576:	4620      	mov	r0, r4
 8017578:	bd10      	pop	{r4, pc}

0801757a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801757a:	b510      	push	{r4, lr}
 801757c:	4604      	mov	r4, r0
 801757e:	2104      	movs	r1, #4
 8017580:	f00b fbf0 	bl	8022d64 <_ZdlPvj>
 8017584:	4620      	mov	r0, r4
 8017586:	bd10      	pop	{r4, pc}

08017588 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017588:	b510      	push	{r4, lr}
 801758a:	4604      	mov	r4, r0
 801758c:	2104      	movs	r1, #4
 801758e:	f00b fbe9 	bl	8022d64 <_ZdlPvj>
 8017592:	4620      	mov	r0, r4
 8017594:	bd10      	pop	{r4, pc}

08017596 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017596:	b510      	push	{r4, lr}
 8017598:	4604      	mov	r4, r0
 801759a:	2104      	movs	r1, #4
 801759c:	f00b fbe2 	bl	8022d64 <_ZdlPvj>
 80175a0:	4620      	mov	r0, r4
 80175a2:	bd10      	pop	{r4, pc}

080175a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80175a4:	b510      	push	{r4, lr}
 80175a6:	4604      	mov	r4, r0
 80175a8:	2104      	movs	r1, #4
 80175aa:	f00b fbdb 	bl	8022d64 <_ZdlPvj>
 80175ae:	4620      	mov	r0, r4
 80175b0:	bd10      	pop	{r4, pc}
	...

080175b4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 80175b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b8:	b08f      	sub	sp, #60	@ 0x3c
 80175ba:	4616      	mov	r6, r2
 80175bc:	4682      	mov	sl, r0
 80175be:	460d      	mov	r5, r1
 80175c0:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 80175c4:	9205      	str	r2, [sp, #20]
 80175c6:	2a00      	cmp	r2, #0
 80175c8:	f000 82b7 	beq.w	8017b3a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 80175cc:	6830      	ldr	r0, [r6, #0]
 80175ce:	ac0a      	add	r4, sp, #40	@ 0x28
 80175d0:	6871      	ldr	r1, [r6, #4]
 80175d2:	c403      	stmia	r4!, {r0, r1}
 80175d4:	6818      	ldr	r0, [r3, #0]
 80175d6:	ac0c      	add	r4, sp, #48	@ 0x30
 80175d8:	6859      	ldr	r1, [r3, #4]
 80175da:	c403      	stmia	r4!, {r0, r1}
 80175dc:	a80a      	add	r0, sp, #40	@ 0x28
 80175de:	f7fa fa03 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80175e2:	4631      	mov	r1, r6
 80175e4:	a80c      	add	r0, sp, #48	@ 0x30
 80175e6:	f7fa fa27 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80175ea:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80175ee:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80175f2:	bfdb      	ittet	le
 80175f4:	b293      	uxthle	r3, r2
 80175f6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80175fa:	2301      	movgt	r3, #1
 80175fc:	fb91 f3f3 	sdivle	r3, r1, r3
 8017600:	9300      	str	r3, [sp, #0]
 8017602:	f105 0308 	add.w	r3, r5, #8
 8017606:	9900      	ldr	r1, [sp, #0]
 8017608:	9306      	str	r3, [sp, #24]
 801760a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801760e:	440b      	add	r3, r1
 8017610:	3b01      	subs	r3, #1
 8017612:	fb93 f3f1 	sdiv	r3, r3, r1
 8017616:	3b01      	subs	r3, #1
 8017618:	9906      	ldr	r1, [sp, #24]
 801761a:	b29b      	uxth	r3, r3
 801761c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017620:	9900      	ldr	r1, [sp, #0]
 8017622:	9307      	str	r3, [sp, #28]
 8017624:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017628:	fb93 f0f1 	sdiv	r0, r3, r1
 801762c:	b284      	uxth	r4, r0
 801762e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8017632:	9402      	str	r4, [sp, #8]
 8017634:	9d02      	ldr	r5, [sp, #8]
 8017636:	9c00      	ldr	r4, [sp, #0]
 8017638:	fb05 3414 	mls	r4, r5, r4, r3
 801763c:	fb14 f402 	smulbb	r4, r4, r2
 8017640:	440c      	add	r4, r1
 8017642:	b2a4      	uxth	r4, r4
 8017644:	2d00      	cmp	r5, #0
 8017646:	d06c      	beq.n	8017722 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 8017648:	1e6a      	subs	r2, r5, #1
 801764a:	9806      	ldr	r0, [sp, #24]
 801764c:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8017650:	9a07      	ldr	r2, [sp, #28]
 8017652:	ba36      	rev	r6, r6
 8017654:	4416      	add	r6, r2
 8017656:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801765a:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801765e:	4411      	add	r1, r2
 8017660:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8017664:	f8df 932c 	ldr.w	r9, [pc, #812]	@ 8017994 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 8017668:	4413      	add	r3, r2
 801766a:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801766e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017672:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8017676:	9301      	str	r3, [sp, #4]
 8017678:	4bc4      	ldr	r3, [pc, #784]	@ (801798c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801767a:	6818      	ldr	r0, [r3, #0]
 801767c:	6803      	ldr	r3, [r0, #0]
 801767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017680:	4798      	blx	r3
 8017682:	4bc3      	ldr	r3, [pc, #780]	@ (8017990 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 8017684:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8017688:	881b      	ldrh	r3, [r3, #0]
 801768a:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801768e:	fb03 2808 	mla	r8, r3, r8, r2
 8017692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017696:	436b      	muls	r3, r5
 8017698:	2500      	movs	r5, #0
 801769a:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801769e:	4629      	mov	r1, r5
 80176a0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80176a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80176a6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80176aa:	fb94 f3f3 	sdiv	r3, r4, r3
 80176ae:	9304      	str	r3, [sp, #16]
 80176b0:	f10a 0304 	add.w	r3, sl, #4
 80176b4:	4618      	mov	r0, r3
 80176b6:	9308      	str	r3, [sp, #32]
 80176b8:	f00c fcf2 	bl	80240a0 <memset>
 80176bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176be:	4543      	cmp	r3, r8
 80176c0:	f240 8236 	bls.w	8017b30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 80176c4:	2203      	movs	r2, #3
 80176c6:	2107      	movs	r1, #7
 80176c8:	200b      	movs	r0, #11
 80176ca:	2c00      	cmp	r4, #0
 80176cc:	f000 8131 	beq.w	8017932 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 80176d0:	7833      	ldrb	r3, [r6, #0]
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80176d6:	d126      	bne.n	8017726 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 80176d8:	f896 e001 	ldrb.w	lr, [r6, #1]
 80176dc:	3c01      	subs	r4, #1
 80176de:	f896 c002 	ldrb.w	ip, [r6, #2]
 80176e2:	1d37      	adds	r7, r6, #4
 80176e4:	fa5f fe8e 	uxtb.w	lr, lr
 80176e8:	f896 b003 	ldrb.w	fp, [r6, #3]
 80176ec:	fa5f fc8c 	uxtb.w	ip, ip
 80176f0:	f36e 0507 	bfi	r5, lr, #0, #8
 80176f4:	fa5f fb8b 	uxtb.w	fp, fp
 80176f8:	b2a4      	uxth	r4, r4
 80176fa:	f36c 250f 	bfi	r5, ip, #8, #8
 80176fe:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8017702:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 8017706:	f36b 4517 	bfi	r5, fp, #16, #8
 801770a:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801770e:	0e2b      	lsrs	r3, r5, #24
 8017710:	fb10 c303 	smlabb	r3, r0, r3, ip
 8017714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017718:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801771c:	605d      	str	r5, [r3, #4]
 801771e:	463e      	mov	r6, r7
 8017720:	e7d3      	b.n	80176ca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 8017722:	9e07      	ldr	r6, [sp, #28]
 8017724:	e797      	b.n	8017656 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 8017726:	2bff      	cmp	r3, #255	@ 0xff
 8017728:	d127      	bne.n	801777a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801772a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801772e:	3c01      	subs	r4, #1
 8017730:	78b3      	ldrb	r3, [r6, #2]
 8017732:	1d77      	adds	r7, r6, #5
 8017734:	fa5f fc8c 	uxtb.w	ip, ip
 8017738:	f896 e003 	ldrb.w	lr, [r6, #3]
 801773c:	b2db      	uxtb	r3, r3
 801773e:	f896 b004 	ldrb.w	fp, [r6, #4]
 8017742:	f36c 0507 	bfi	r5, ip, #0, #8
 8017746:	fa5f fe8e 	uxtb.w	lr, lr
 801774a:	fa5f fb8b 	uxtb.w	fp, fp
 801774e:	f363 250f 	bfi	r5, r3, #8, #8
 8017752:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017756:	b2a4      	uxth	r4, r4
 8017758:	fb12 330e 	smlabb	r3, r2, lr, r3
 801775c:	f36e 4517 	bfi	r5, lr, #16, #8
 8017760:	fb11 330c 	smlabb	r3, r1, ip, r3
 8017764:	f36b 651f 	bfi	r5, fp, #24, #8
 8017768:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801776c:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 8017770:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 8017774:	f8cb 5004 	str.w	r5, [fp, #4]
 8017778:	e7d1      	b.n	801771e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801777a:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801777e:	f106 0701 	add.w	r7, r6, #1
 8017782:	d107      	bne.n	8017794 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 8017784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017788:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801778c:	685d      	ldr	r5, [r3, #4]
 801778e:	3c01      	subs	r4, #1
 8017790:	b2a4      	uxth	r4, r4
 8017792:	e7c4      	b.n	801771e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8017794:	f1bc 0f01 	cmp.w	ip, #1
 8017798:	d12c      	bne.n	80177f4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801779a:	f003 0e03 	and.w	lr, r3, #3
 801779e:	f003 0c0c 	and.w	ip, r3, #12
 80177a2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80177a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80177aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80177ae:	3b02      	subs	r3, #2
 80177b0:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 80177b4:	fa5f fe8e 	uxtb.w	lr, lr
 80177b8:	f36e 0507 	bfi	r5, lr, #0, #8
 80177bc:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80177c0:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80177c4:	f36c 250f 	bfi	r5, ip, #8, #8
 80177c8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80177cc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80177d0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	fb12 cc03 	smlabb	ip, r2, r3, ip
 80177da:	f363 4517 	bfi	r5, r3, #16, #8
 80177de:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 80177e2:	0e2e      	lsrs	r6, r5, #24
 80177e4:	fb10 c606 	smlabb	r6, r0, r6, ip
 80177e8:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80177ec:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80177f0:	6075      	str	r5, [r6, #4]
 80177f2:	e7cc      	b.n	801778e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 80177f4:	f1bc 0f02 	cmp.w	ip, #2
 80177f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80177fc:	d12a      	bne.n	8017854 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 80177fe:	1cb7      	adds	r7, r6, #2
 8017800:	7876      	ldrb	r6, [r6, #1]
 8017802:	3b20      	subs	r3, #32
 8017804:	b2f6      	uxtb	r6, r6
 8017806:	f006 0c0f 	and.w	ip, r6, #15
 801780a:	1136      	asrs	r6, r6, #4
 801780c:	f1ac 0c08 	sub.w	ip, ip, #8
 8017810:	3e08      	subs	r6, #8
 8017812:	449c      	add	ip, r3
 8017814:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8017818:	fa5f fc8c 	uxtb.w	ip, ip
 801781c:	f36c 0507 	bfi	r5, ip, #0, #8
 8017820:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8017824:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 8017828:	4433      	add	r3, r6
 801782a:	fa5f fe8e 	uxtb.w	lr, lr
 801782e:	f36e 250f 	bfi	r5, lr, #8, #8
 8017832:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8017836:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801783a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801783e:	b2db      	uxtb	r3, r3
 8017840:	fb12 ee03 	smlabb	lr, r2, r3, lr
 8017844:	f363 4517 	bfi	r5, r3, #16, #8
 8017848:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801784c:	0e2e      	lsrs	r6, r5, #24
 801784e:	fb10 e606 	smlabb	r6, r0, r6, lr
 8017852:	e7c9      	b.n	80177e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 8017854:	1c5e      	adds	r6, r3, #1
 8017856:	42a6      	cmp	r6, r4
 8017858:	dd4e      	ble.n	80178f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801785a:	1b36      	subs	r6, r6, r4
 801785c:	2e00      	cmp	r6, #0
 801785e:	dc4e      	bgt.n	80178fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 8017860:	f8dd b004 	ldr.w	fp, [sp, #4]
 8017864:	2400      	movs	r4, #0
 8017866:	f1bb 0f00 	cmp.w	fp, #0
 801786a:	f340 8122 	ble.w	8017ab2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801786e:	1c7b      	adds	r3, r7, #1
 8017870:	9303      	str	r3, [sp, #12]
 8017872:	783b      	ldrb	r3, [r7, #0]
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2bfe      	cmp	r3, #254	@ 0xfe
 8017878:	d160      	bne.n	801793c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801787a:	7879      	ldrb	r1, [r7, #1]
 801787c:	1d3b      	adds	r3, r7, #4
 801787e:	78ba      	ldrb	r2, [r7, #2]
 8017880:	b2c9      	uxtb	r1, r1
 8017882:	78f8      	ldrb	r0, [r7, #3]
 8017884:	b2d2      	uxtb	r2, r2
 8017886:	9303      	str	r3, [sp, #12]
 8017888:	f361 0507 	bfi	r5, r1, #0, #8
 801788c:	b2c0      	uxtb	r0, r0
 801788e:	2303      	movs	r3, #3
 8017890:	f362 250f 	bfi	r5, r2, #8, #8
 8017894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017898:	fb13 2200 	smlabb	r2, r3, r0, r2
 801789c:	f360 4517 	bfi	r5, r0, #16, #8
 80178a0:	2307      	movs	r3, #7
 80178a2:	0e2e      	lsrs	r6, r5, #24
 80178a4:	fb13 2101 	smlabb	r1, r3, r1, r2
 80178a8:	230b      	movs	r3, #11
 80178aa:	fb13 1306 	smlabb	r3, r3, r6, r1
 80178ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80178b2:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80178b6:	605d      	str	r5, [r3, #4]
 80178b8:	2601      	movs	r6, #1
 80178ba:	4637      	mov	r7, r6
 80178bc:	0e2b      	lsrs	r3, r5, #24
 80178be:	ebab 0b07 	sub.w	fp, fp, r7
 80178c2:	eba6 0607 	sub.w	r6, r6, r7
 80178c6:	f040 80d3 	bne.w	8017a70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 80178ca:	b18c      	cbz	r4, 80178f0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 80178cc:	4648      	mov	r0, r9
 80178ce:	00a1      	lsls	r1, r4, #2
 80178d0:	f7f6 f9ac 	bl	800dc2c <_ZN8touchgfx5paint9flushLineEPmi>
 80178d4:	9b05      	ldr	r3, [sp, #20]
 80178d6:	4622      	mov	r2, r4
 80178d8:	4649      	mov	r1, r9
 80178da:	4640      	mov	r0, r8
 80178dc:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80178e0:	f7f6 f9e6 	bl	800dcb0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 80178e4:	4b2b      	ldr	r3, [pc, #172]	@ (8017994 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 80178e6:	4a2c      	ldr	r2, [pc, #176]	@ (8017998 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 80178e8:	4599      	cmp	r9, r3
 80178ea:	bf08      	it	eq
 80178ec:	4613      	moveq	r3, r2
 80178ee:	4699      	mov	r9, r3
 80178f0:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 80178f4:	2400      	movs	r4, #0
 80178f6:	e0da      	b.n	8017aae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 80178f8:	1ba6      	subs	r6, r4, r6
 80178fa:	b2b4      	uxth	r4, r6
 80178fc:	e70f      	b.n	801771e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 80178fe:	9b01      	ldr	r3, [sp, #4]
 8017900:	9a01      	ldr	r2, [sp, #4]
 8017902:	42b3      	cmp	r3, r6
 8017904:	bfa8      	it	ge
 8017906:	4633      	movge	r3, r6
 8017908:	0e2c      	lsrs	r4, r5, #24
 801790a:	eba2 0b03 	sub.w	fp, r2, r3
 801790e:	eba6 0603 	sub.w	r6, r6, r3
 8017912:	d00b      	beq.n	801792c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 8017914:	f1a9 0104 	sub.w	r1, r9, #4
 8017918:	461a      	mov	r2, r3
 801791a:	2a00      	cmp	r2, #0
 801791c:	dc02      	bgt.n	8017924 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801791e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017922:	e7a0      	b.n	8017866 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8017924:	f841 5f04 	str.w	r5, [r1, #4]!
 8017928:	3a01      	subs	r2, #1
 801792a:	e7f6      	b.n	801791a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801792c:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8017930:	e799      	b.n	8017866 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8017932:	4637      	mov	r7, r6
 8017934:	f8dd b004 	ldr.w	fp, [sp, #4]
 8017938:	4626      	mov	r6, r4
 801793a:	e794      	b.n	8017866 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801793c:	2bff      	cmp	r3, #255	@ 0xff
 801793e:	d11d      	bne.n	801797c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 8017940:	7878      	ldrb	r0, [r7, #1]
 8017942:	1d7b      	adds	r3, r7, #5
 8017944:	78ba      	ldrb	r2, [r7, #2]
 8017946:	b2c0      	uxtb	r0, r0
 8017948:	78fe      	ldrb	r6, [r7, #3]
 801794a:	b2d2      	uxtb	r2, r2
 801794c:	9303      	str	r3, [sp, #12]
 801794e:	f360 0507 	bfi	r5, r0, #0, #8
 8017952:	793b      	ldrb	r3, [r7, #4]
 8017954:	b2f6      	uxtb	r6, r6
 8017956:	b2d9      	uxtb	r1, r3
 8017958:	f362 250f 	bfi	r5, r2, #8, #8
 801795c:	2303      	movs	r3, #3
 801795e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017962:	f366 4517 	bfi	r5, r6, #16, #8
 8017966:	fb13 2206 	smlabb	r2, r3, r6, r2
 801796a:	2307      	movs	r3, #7
 801796c:	f361 651f 	bfi	r5, r1, #24, #8
 8017970:	fb13 2000 	smlabb	r0, r3, r0, r2
 8017974:	230b      	movs	r3, #11
 8017976:	fb13 0301 	smlabb	r3, r3, r1, r0
 801797a:	e798      	b.n	80178ae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801797c:	119e      	asrs	r6, r3, #6
 801797e:	d10d      	bne.n	801799c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8017980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017984:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8017988:	685d      	ldr	r5, [r3, #4]
 801798a:	e795      	b.n	80178b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801798c:	2400aa84 	.word	0x2400aa84
 8017990:	2400aa7e 	.word	0x2400aa7e
 8017994:	24000280 	.word	0x24000280
 8017998:	24000380 	.word	0x24000380
 801799c:	2e01      	cmp	r6, #1
 801799e:	ea4f 6115 	mov.w	r1, r5, lsr #24
 80179a2:	d12b      	bne.n	80179fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 80179a4:	f003 0003 	and.w	r0, r3, #3
 80179a8:	f003 020c 	and.w	r2, r3, #12
 80179ac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80179b0:	3802      	subs	r0, #2
 80179b2:	3a08      	subs	r2, #8
 80179b4:	1e9f      	subs	r7, r3, #2
 80179b6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80179ba:	b2c0      	uxtb	r0, r0
 80179bc:	f360 0507 	bfi	r5, r0, #0, #8
 80179c0:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80179c4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80179c8:	f362 250f 	bfi	r5, r2, #8, #8
 80179cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80179d0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80179d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80179d8:	2703      	movs	r7, #3
 80179da:	b2db      	uxtb	r3, r3
 80179dc:	fb17 2203 	smlabb	r2, r7, r3, r2
 80179e0:	2707      	movs	r7, #7
 80179e2:	f363 4517 	bfi	r5, r3, #16, #8
 80179e6:	230b      	movs	r3, #11
 80179e8:	fb17 2000 	smlabb	r0, r7, r0, r2
 80179ec:	fb13 0101 	smlabb	r1, r3, r1, r0
 80179f0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80179f4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80179f8:	604d      	str	r5, [r1, #4]
 80179fa:	e75e      	b.n	80178ba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 80179fc:	2e02      	cmp	r6, #2
 80179fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017a02:	d12f      	bne.n	8017a64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 8017a04:	7878      	ldrb	r0, [r7, #1]
 8017a06:	1cba      	adds	r2, r7, #2
 8017a08:	3b20      	subs	r3, #32
 8017a0a:	b2c0      	uxtb	r0, r0
 8017a0c:	9203      	str	r2, [sp, #12]
 8017a0e:	f000 020f 	and.w	r2, r0, #15
 8017a12:	1100      	asrs	r0, r0, #4
 8017a14:	3a08      	subs	r2, #8
 8017a16:	3808      	subs	r0, #8
 8017a18:	441a      	add	r2, r3
 8017a1a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8017a1e:	b2d2      	uxtb	r2, r2
 8017a20:	f362 0507 	bfi	r5, r2, #0, #8
 8017a24:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8017a28:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8017a2c:	4403      	add	r3, r0
 8017a2e:	b2f6      	uxtb	r6, r6
 8017a30:	f366 250f 	bfi	r5, r6, #8, #8
 8017a34:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8017a38:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8017a3c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017a40:	2003      	movs	r0, #3
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	fb10 6603 	smlabb	r6, r0, r3, r6
 8017a48:	2007      	movs	r0, #7
 8017a4a:	f363 4517 	bfi	r5, r3, #16, #8
 8017a4e:	230b      	movs	r3, #11
 8017a50:	fb10 6202 	smlabb	r2, r0, r2, r6
 8017a54:	fb13 2101 	smlabb	r1, r3, r1, r2
 8017a58:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8017a5c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8017a60:	604d      	str	r5, [r1, #4]
 8017a62:	e729      	b.n	80178b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8017a64:	1c5e      	adds	r6, r3, #1
 8017a66:	465f      	mov	r7, fp
 8017a68:	45b3      	cmp	fp, r6
 8017a6a:	bfa8      	it	ge
 8017a6c:	4637      	movge	r7, r6
 8017a6e:	e725      	b.n	80178bc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 8017a70:	193b      	adds	r3, r7, r4
 8017a72:	2b40      	cmp	r3, #64	@ 0x40
 8017a74:	dd13      	ble.n	8017a9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 8017a76:	4648      	mov	r0, r9
 8017a78:	00a1      	lsls	r1, r4, #2
 8017a7a:	f7f6 f8d7 	bl	800dc2c <_ZN8touchgfx5paint9flushLineEPmi>
 8017a7e:	4649      	mov	r1, r9
 8017a80:	9b05      	ldr	r3, [sp, #20]
 8017a82:	4622      	mov	r2, r4
 8017a84:	4640      	mov	r0, r8
 8017a86:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8017a8a:	f7f6 f911 	bl	800dcb0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8017a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8017b40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 8017a90:	2400      	movs	r4, #0
 8017a92:	4599      	cmp	r9, r3
 8017a94:	bf0c      	ite	eq
 8017a96:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 8017b4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 8017a9a:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 8017b40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 8017a9e:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 8017aa2:	463b      	mov	r3, r7
 8017aa4:	3b01      	subs	r3, #1
 8017aa6:	f842 5b04 	str.w	r5, [r2], #4
 8017aaa:	d1fb      	bne.n	8017aa4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8017aac:	443c      	add	r4, r7
 8017aae:	9f03      	ldr	r7, [sp, #12]
 8017ab0:	e6d9      	b.n	8017866 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8017ab2:	b15c      	cbz	r4, 8017acc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 8017ab4:	00a1      	lsls	r1, r4, #2
 8017ab6:	4648      	mov	r0, r9
 8017ab8:	f7f6 f8b8 	bl	800dc2c <_ZN8touchgfx5paint9flushLineEPmi>
 8017abc:	4640      	mov	r0, r8
 8017abe:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8017ac2:	9b05      	ldr	r3, [sp, #20]
 8017ac4:	4622      	mov	r2, r4
 8017ac6:	4649      	mov	r1, r9
 8017ac8:	f7f6 f8f2 	bl	800dcb0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8017acc:	4b1d      	ldr	r3, [pc, #116]	@ (8017b44 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 8017ace:	9a01      	ldr	r2, [sp, #4]
 8017ad0:	881b      	ldrh	r3, [r3, #0]
 8017ad2:	1a9b      	subs	r3, r3, r2
 8017ad4:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8017ad8:	9b04      	ldr	r3, [sp, #16]
 8017ada:	3301      	adds	r3, #1
 8017adc:	9304      	str	r3, [sp, #16]
 8017ade:	9a04      	ldr	r2, [sp, #16]
 8017ae0:	9b00      	ldr	r3, [sp, #0]
 8017ae2:	4293      	cmp	r3, r2
 8017ae4:	d11d      	bne.n	8017b22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 8017ae6:	9b02      	ldr	r3, [sp, #8]
 8017ae8:	2500      	movs	r5, #0
 8017aea:	9a02      	ldr	r2, [sp, #8]
 8017aec:	f103 0b01 	add.w	fp, r3, #1
 8017af0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8017af4:	9b06      	ldr	r3, [sp, #24]
 8017af6:	4629      	mov	r1, r5
 8017af8:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 8017afc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8017b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017b04:	1ba4      	subs	r4, r4, r6
 8017b06:	9b07      	ldr	r3, [sp, #28]
 8017b08:	ba3f      	rev	r7, r7
 8017b0a:	9808      	ldr	r0, [sp, #32]
 8017b0c:	b2a4      	uxth	r4, r4
 8017b0e:	441f      	add	r7, r3
 8017b10:	f00c fac6 	bl	80240a0 <memset>
 8017b14:	f8cd b008 	str.w	fp, [sp, #8]
 8017b18:	9504      	str	r5, [sp, #16]
 8017b1a:	f7f6 f87d 	bl	800dc18 <_ZN8touchgfx5paint8tearDownEv>
 8017b1e:	463e      	mov	r6, r7
 8017b20:	e5cc      	b.n	80176bc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 8017b22:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017b26:	9b01      	ldr	r3, [sp, #4]
 8017b28:	1ae4      	subs	r4, r4, r3
 8017b2a:	1ba4      	subs	r4, r4, r6
 8017b2c:	b2a4      	uxth	r4, r4
 8017b2e:	e7f4      	b.n	8017b1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 8017b30:	4b05      	ldr	r3, [pc, #20]	@ (8017b48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 8017b32:	6818      	ldr	r0, [r3, #0]
 8017b34:	6803      	ldr	r3, [r0, #0]
 8017b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017b38:	4798      	blx	r3
 8017b3a:	b00f      	add	sp, #60	@ 0x3c
 8017b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b40:	24000280 	.word	0x24000280
 8017b44:	2400aa7e 	.word	0x2400aa7e
 8017b48:	2400aa84 	.word	0x2400aa84
 8017b4c:	24000380 	.word	0x24000380

08017b50 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8017b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b54:	b08f      	sub	sp, #60	@ 0x3c
 8017b56:	461c      	mov	r4, r3
 8017b58:	9205      	str	r2, [sp, #20]
 8017b5a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017b5e:	9100      	str	r1, [sp, #0]
 8017b60:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017b62:	9201      	str	r2, [sp, #4]
 8017b64:	2a00      	cmp	r2, #0
 8017b66:	f000 8116 	beq.w	8017d96 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 8017b6a:	6820      	ldr	r0, [r4, #0]
 8017b6c:	aa0a      	add	r2, sp, #40	@ 0x28
 8017b6e:	6861      	ldr	r1, [r4, #4]
 8017b70:	c203      	stmia	r2!, {r0, r1}
 8017b72:	6818      	ldr	r0, [r3, #0]
 8017b74:	aa0c      	add	r2, sp, #48	@ 0x30
 8017b76:	6859      	ldr	r1, [r3, #4]
 8017b78:	c203      	stmia	r2!, {r0, r1}
 8017b7a:	a80a      	add	r0, sp, #40	@ 0x28
 8017b7c:	f7f9 ff34 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017b80:	4621      	mov	r1, r4
 8017b82:	a80c      	add	r0, sp, #48	@ 0x30
 8017b84:	f7f9 ff58 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017b88:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8017b8c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8017b90:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017b94:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017b98:	bfdb      	ittet	le
 8017b9a:	b2b3      	uxthle	r3, r6
 8017b9c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8017ba0:	2301      	movgt	r3, #1
 8017ba2:	fb92 f3f3 	sdivle	r3, r2, r3
 8017ba6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017baa:	441d      	add	r5, r3
 8017bac:	fb92 f1f3 	sdiv	r1, r2, r3
 8017bb0:	fa1f fc81 	uxth.w	ip, r1
 8017bb4:	3d01      	subs	r5, #1
 8017bb6:	fb0c 2413 	mls	r4, ip, r3, r2
 8017bba:	4661      	mov	r1, ip
 8017bbc:	fb14 f406 	smulbb	r4, r4, r6
 8017bc0:	4404      	add	r4, r0
 8017bc2:	fb95 f5f3 	sdiv	r5, r5, r3
 8017bc6:	b2a4      	uxth	r4, r4
 8017bc8:	b131      	cbz	r1, 8017bd8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8017bca:	9b05      	ldr	r3, [sp, #20]
 8017bcc:	9900      	ldr	r1, [sp, #0]
 8017bce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017bd2:	ba1b      	rev	r3, r3
 8017bd4:	4419      	add	r1, r3
 8017bd6:	9100      	str	r1, [sp, #0]
 8017bd8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017bdc:	b2ad      	uxth	r5, r5
 8017bde:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8017be2:	4418      	add	r0, r3
 8017be4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017be8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8017bec:	00ad      	lsls	r5, r5, #2
 8017bee:	441a      	add	r2, r3
 8017bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8017d9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8017bf2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017bf6:	6818      	ldr	r0, [r3, #0]
 8017bf8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017bfc:	6803      	ldr	r3, [r0, #0]
 8017bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c00:	4798      	blx	r3
 8017c02:	4967      	ldr	r1, [pc, #412]	@ (8017da0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8017c04:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017c08:	2c00      	cmp	r4, #0
 8017c0a:	880b      	ldrh	r3, [r1, #0]
 8017c0c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017c10:	bf0c      	ite	eq
 8017c12:	46c6      	moveq	lr, r8
 8017c14:	f04f 0e00 	movne.w	lr, #0
 8017c18:	9109      	str	r1, [sp, #36]	@ 0x24
 8017c1a:	fb03 c202 	mla	r2, r3, r2, ip
 8017c1e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8017c22:	4373      	muls	r3, r6
 8017c24:	fa1f fe8e 	uxth.w	lr, lr
 8017c28:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017c2c:	9103      	str	r1, [sp, #12]
 8017c2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017c32:	9306      	str	r3, [sp, #24]
 8017c34:	1d2b      	adds	r3, r5, #4
 8017c36:	9307      	str	r3, [sp, #28]
 8017c38:	9b01      	ldr	r3, [sp, #4]
 8017c3a:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8017c3e:	2300      	movs	r3, #0
 8017c40:	b292      	uxth	r2, r2
 8017c42:	9302      	str	r3, [sp, #8]
 8017c44:	9204      	str	r2, [sp, #16]
 8017c46:	9a06      	ldr	r2, [sp, #24]
 8017c48:	4282      	cmp	r2, r0
 8017c4a:	f240 809f 	bls.w	8017d8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 8017c4e:	b963      	cbnz	r3, 8017c6a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8017c50:	9b00      	ldr	r3, [sp, #0]
 8017c52:	781a      	ldrb	r2, [r3, #0]
 8017c54:	0993      	lsrs	r3, r2, #6
 8017c56:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017c5a:	9202      	str	r2, [sp, #8]
 8017c5c:	1e5a      	subs	r2, r3, #1
 8017c5e:	2a02      	cmp	r2, #2
 8017c60:	d815      	bhi.n	8017c8e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8017c62:	9a00      	ldr	r2, [sp, #0]
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	3201      	adds	r2, #1
 8017c68:	9200      	str	r2, [sp, #0]
 8017c6a:	b1b4      	cbz	r4, 8017c9a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8017c6c:	429c      	cmp	r4, r3
 8017c6e:	bf91      	iteee	ls
 8017c70:	1b1c      	subls	r4, r3, r4
 8017c72:	1ae4      	subhi	r4, r4, r3
 8017c74:	4671      	movhi	r1, lr
 8017c76:	f04f 0a00 	movhi.w	sl, #0
 8017c7a:	bf9b      	ittet	ls
 8017c7c:	fa1f fa84 	uxthls.w	sl, r4
 8017c80:	2400      	movls	r4, #0
 8017c82:	b2a4      	uxthhi	r4, r4
 8017c84:	fa1f f188 	uxthls.w	r1, r8
 8017c88:	4653      	mov	r3, sl
 8017c8a:	468e      	mov	lr, r1
 8017c8c:	e7db      	b.n	8017c46 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 8017c8e:	9a00      	ldr	r2, [sp, #0]
 8017c90:	9b00      	ldr	r3, [sp, #0]
 8017c92:	3202      	adds	r2, #2
 8017c94:	785b      	ldrb	r3, [r3, #1]
 8017c96:	9200      	str	r2, [sp, #0]
 8017c98:	e7e7      	b.n	8017c6a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8017c9a:	2202      	movs	r2, #2
 8017c9c:	9907      	ldr	r1, [sp, #28]
 8017c9e:	4573      	cmp	r3, lr
 8017ca0:	4615      	mov	r5, r2
 8017ca2:	9a02      	ldr	r2, [sp, #8]
 8017ca4:	bf24      	itt	cs
 8017ca6:	eba3 0a0e 	subcs.w	sl, r3, lr
 8017caa:	46f1      	movcs	r9, lr
 8017cac:	fb15 1202 	smlabb	r2, r5, r2, r1
 8017cb0:	9905      	ldr	r1, [sp, #20]
 8017cb2:	bf34      	ite	cc
 8017cb4:	4699      	movcc	r9, r3
 8017cb6:	fa1f fa8a 	uxthcs.w	sl, sl
 8017cba:	f831 c002 	ldrh.w	ip, [r1, r2]
 8017cbe:	bf38      	it	cc
 8017cc0:	ebae 0103 	subcc.w	r1, lr, r3
 8017cc4:	9a01      	ldr	r2, [sp, #4]
 8017cc6:	bf2e      	itee	cs
 8017cc8:	4621      	movcs	r1, r4
 8017cca:	b289      	uxthcc	r1, r1
 8017ccc:	46a2      	movcc	sl, r4
 8017cce:	2aff      	cmp	r2, #255	@ 0xff
 8017cd0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017cd4:	d105      	bne.n	8017ce2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 8017cd6:	4481      	add	r9, r0
 8017cd8:	4581      	cmp	r9, r0
 8017cda:	d045      	beq.n	8017d68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8017cdc:	f820 cb02 	strh.w	ip, [r0], #2
 8017ce0:	e7fa      	b.n	8017cd8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 8017ce2:	ea4f 222c 	mov.w	r2, ip, asr #8
 8017ce6:	9d03      	ldr	r5, [sp, #12]
 8017ce8:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8017cec:	4481      	add	r9, r0
 8017cee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017cf2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8017cf6:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8017cfa:	fa5f fc8c 	uxtb.w	ip, ip
 8017cfe:	436a      	muls	r2, r5
 8017d00:	fb0b fb05 	mul.w	fp, fp, r5
 8017d04:	fb0c fc05 	mul.w	ip, ip, r5
 8017d08:	9208      	str	r2, [sp, #32]
 8017d0a:	4581      	cmp	r9, r0
 8017d0c:	d02c      	beq.n	8017d68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8017d0e:	8802      	ldrh	r2, [r0, #0]
 8017d10:	9d04      	ldr	r5, [sp, #16]
 8017d12:	1216      	asrs	r6, r2, #8
 8017d14:	9f04      	ldr	r7, [sp, #16]
 8017d16:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8017d1a:	fb16 f605 	smulbb	r6, r6, r5
 8017d1e:	9d08      	ldr	r5, [sp, #32]
 8017d20:	442e      	add	r6, r5
 8017d22:	10d5      	asrs	r5, r2, #3
 8017d24:	00d2      	lsls	r2, r2, #3
 8017d26:	b2b6      	uxth	r6, r6
 8017d28:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8017d2c:	b2d2      	uxtb	r2, r2
 8017d2e:	fb15 f507 	smulbb	r5, r5, r7
 8017d32:	fb12 f207 	smulbb	r2, r2, r7
 8017d36:	1c77      	adds	r7, r6, #1
 8017d38:	445d      	add	r5, fp
 8017d3a:	4462      	add	r2, ip
 8017d3c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8017d40:	b2ad      	uxth	r5, r5
 8017d42:	b292      	uxth	r2, r2
 8017d44:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8017d48:	1c57      	adds	r7, r2, #1
 8017d4a:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8017d4e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017d52:	4316      	orrs	r6, r2
 8017d54:	1c6a      	adds	r2, r5, #1
 8017d56:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8017d5a:	096d      	lsrs	r5, r5, #5
 8017d5c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8017d60:	432e      	orrs	r6, r5
 8017d62:	f820 6b02 	strh.w	r6, [r0], #2
 8017d66:	e7d0      	b.n	8017d0a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8017d68:	4573      	cmp	r3, lr
 8017d6a:	d38d      	bcc.n	8017c88 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8017d6c:	fa1f f188 	uxth.w	r1, r8
 8017d70:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d76:	1a64      	subs	r4, r4, r1
 8017d78:	881b      	ldrh	r3, [r3, #0]
 8017d7a:	b2a4      	uxth	r4, r4
 8017d7c:	eba3 0308 	sub.w	r3, r3, r8
 8017d80:	2c00      	cmp	r4, #0
 8017d82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017d86:	bf18      	it	ne
 8017d88:	2100      	movne	r1, #0
 8017d8a:	e77d      	b.n	8017c88 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8017d8c:	4b03      	ldr	r3, [pc, #12]	@ (8017d9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8017d8e:	6818      	ldr	r0, [r3, #0]
 8017d90:	6803      	ldr	r3, [r0, #0]
 8017d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d94:	4798      	blx	r3
 8017d96:	b00f      	add	sp, #60	@ 0x3c
 8017d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d9c:	2400aa84 	.word	0x2400aa84
 8017da0:	2400aa7e 	.word	0x2400aa7e

08017da4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8017da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da8:	b09f      	sub	sp, #124	@ 0x7c
 8017daa:	461d      	mov	r5, r3
 8017dac:	4604      	mov	r4, r0
 8017dae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8017db0:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8017db4:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8017db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8017dba:	2a00      	cmp	r2, #0
 8017dbc:	f000 81ed 	beq.w	801819a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 8017dc0:	6828      	ldr	r0, [r5, #0]
 8017dc2:	aa1a      	add	r2, sp, #104	@ 0x68
 8017dc4:	6869      	ldr	r1, [r5, #4]
 8017dc6:	c203      	stmia	r2!, {r0, r1}
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	aa1c      	add	r2, sp, #112	@ 0x70
 8017dcc:	6859      	ldr	r1, [r3, #4]
 8017dce:	c203      	stmia	r2!, {r0, r1}
 8017dd0:	a81a      	add	r0, sp, #104	@ 0x68
 8017dd2:	f7f9 fe09 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	a81c      	add	r0, sp, #112	@ 0x70
 8017dda:	f7f9 fe2d 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017dde:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8017de2:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 8017de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017dea:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 8017dee:	bfdb      	ittet	le
 8017df0:	b29a      	uxthle	r2, r3
 8017df2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8017df6:	2201      	movgt	r2, #1
 8017df8:	fb91 f2f2 	sdivle	r2, r1, r2
 8017dfc:	9202      	str	r2, [sp, #8]
 8017dfe:	9802      	ldr	r0, [sp, #8]
 8017e00:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8017e04:	9902      	ldr	r1, [sp, #8]
 8017e06:	fb92 f0f0 	sdiv	r0, r2, r0
 8017e0a:	b280      	uxth	r0, r0
 8017e0c:	4488      	add	r8, r1
 8017e0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8017e10:	f108 38ff 	add.w	r8, r8, #4294967295
 8017e14:	9802      	ldr	r0, [sp, #8]
 8017e16:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8017e18:	fb05 2510 	mls	r5, r5, r0, r2
 8017e1c:	fb98 f8f1 	sdiv	r8, r8, r1
 8017e20:	fb15 f503 	smulbb	r5, r5, r3
 8017e24:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8017e28:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8017e2c:	f108 0801 	add.w	r8, r8, #1
 8017e30:	440d      	add	r5, r1
 8017e32:	4419      	add	r1, r3
 8017e34:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8017e38:	fa1f f888 	uxth.w	r8, r8
 8017e3c:	441a      	add	r2, r3
 8017e3e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8017e42:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8017e46:	b2ad      	uxth	r5, r5
 8017e48:	9304      	str	r3, [sp, #16]
 8017e4a:	4b94      	ldr	r3, [pc, #592]	@ (801809c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8017e4c:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8017e50:	6818      	ldr	r0, [r3, #0]
 8017e52:	6803      	ldr	r3, [r0, #0]
 8017e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e56:	4798      	blx	r3
 8017e58:	4b91      	ldr	r3, [pc, #580]	@ (80180a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8017e5a:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8017e5e:	2d00      	cmp	r5, #0
 8017e60:	881a      	ldrh	r2, [r3, #0]
 8017e62:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8017e66:	fb02 f606 	mul.w	r6, r2, r6
 8017e6a:	fb02 7101 	mla	r1, r2, r1, r7
 8017e6e:	9318      	str	r3, [sp, #96]	@ 0x60
 8017e70:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8017e74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8017e78:	f04f 0100 	mov.w	r1, #0
 8017e7c:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 8017e80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017e82:	4b88      	ldr	r3, [pc, #544]	@ (80180a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 8017e84:	920a      	str	r2, [sp, #40]	@ 0x28
 8017e86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017e88:	eba3 0304 	sub.w	r3, r3, r4
 8017e8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8017e8e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8017e92:	9319      	str	r3, [sp, #100]	@ 0x64
 8017e94:	f108 0204 	add.w	r2, r8, #4
 8017e98:	9211      	str	r2, [sp, #68]	@ 0x44
 8017e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e9c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8017ea0:	9215      	str	r2, [sp, #84]	@ 0x54
 8017ea2:	9a04      	ldr	r2, [sp, #16]
 8017ea4:	bf18      	it	ne
 8017ea6:	2200      	movne	r2, #0
 8017ea8:	b292      	uxth	r2, r2
 8017eaa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017eac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017eae:	fa11 f383 	uxtah	r3, r1, r3
 8017eb2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017eb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017eb8:	3304      	adds	r3, #4
 8017eba:	9306      	str	r3, [sp, #24]
 8017ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ebe:	4283      	cmp	r3, r0
 8017ec0:	f240 8166 	bls.w	8018190 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 8017ec4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8017ec8:	f04f 0a01 	mov.w	sl, #1
 8017ecc:	9902      	ldr	r1, [sp, #8]
 8017ece:	9e06      	ldr	r6, [sp, #24]
 8017ed0:	46d3      	mov	fp, sl
 8017ed2:	4657      	mov	r7, sl
 8017ed4:	7836      	ldrb	r6, [r6, #0]
 8017ed6:	fbb5 f3f3 	udiv	r3, r5, r3
 8017eda:	1acb      	subs	r3, r1, r3
 8017edc:	9612      	str	r6, [sp, #72]	@ 0x48
 8017ede:	3601      	adds	r6, #1
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	9605      	str	r6, [sp, #20]
 8017ee4:	9316      	str	r3, [sp, #88]	@ 0x58
 8017ee6:	9b06      	ldr	r3, [sp, #24]
 8017ee8:	7859      	ldrb	r1, [r3, #1]
 8017eea:	789b      	ldrb	r3, [r3, #2]
 8017eec:	021b      	lsls	r3, r3, #8
 8017eee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017ef2:	9906      	ldr	r1, [sp, #24]
 8017ef4:	78c9      	ldrb	r1, [r1, #3]
 8017ef6:	430b      	orrs	r3, r1
 8017ef8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017efa:	4419      	add	r1, r3
 8017efc:	1c4e      	adds	r6, r1, #1
 8017efe:	7849      	ldrb	r1, [r1, #1]
 8017f00:	9603      	str	r6, [sp, #12]
 8017f02:	0209      	lsls	r1, r1, #8
 8017f04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8017f06:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8017f0a:	5cf3      	ldrb	r3, [r6, r3]
 8017f0c:	4319      	orrs	r1, r3
 8017f0e:	b28b      	uxth	r3, r1
 8017f10:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8017f14:	930c      	str	r3, [sp, #48]	@ 0x30
 8017f16:	2300      	movs	r3, #0
 8017f18:	9307      	str	r3, [sp, #28]
 8017f1a:	469c      	mov	ip, r3
 8017f1c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8017f20:	930e      	str	r3, [sp, #56]	@ 0x38
 8017f22:	2d00      	cmp	r5, #0
 8017f24:	d07e      	beq.n	8018024 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 8017f26:	42af      	cmp	r7, r5
 8017f28:	d26e      	bcs.n	8018008 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 8017f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f2c:	1bed      	subs	r5, r5, r7
 8017f2e:	9201      	str	r2, [sp, #4]
 8017f30:	4283      	cmp	r3, r0
 8017f32:	b2ad      	uxth	r5, r5
 8017f34:	d802      	bhi.n	8017f3c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 8017f36:	e073      	b.n	8018020 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d15f      	bne.n	8017ffc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 8017f3c:	9b03      	ldr	r3, [sp, #12]
 8017f3e:	f1cb 0207 	rsb	r2, fp, #7
 8017f42:	785b      	ldrb	r3, [r3, #1]
 8017f44:	4093      	lsls	r3, r2
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8017f4c:	9b03      	ldr	r3, [sp, #12]
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	fa43 f30b 	asr.w	r3, r3, fp
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	4313      	orrs	r3, r2
 8017f58:	f10b 0201 	add.w	r2, fp, #1
 8017f5c:	fa5f fb82 	uxtb.w	fp, r2
 8017f60:	9a03      	ldr	r2, [sp, #12]
 8017f62:	b29f      	uxth	r7, r3
 8017f64:	f1bb 0f08 	cmp.w	fp, #8
 8017f68:	bf13      	iteet	ne
 8017f6a:	3201      	addne	r2, #1
 8017f6c:	3202      	addeq	r2, #2
 8017f6e:	f04f 0b00 	moveq.w	fp, #0
 8017f72:	9203      	strne	r2, [sp, #12]
 8017f74:	bf08      	it	eq
 8017f76:	9203      	streq	r2, [sp, #12]
 8017f78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017f7a:	42ba      	cmp	r2, r7
 8017f7c:	d309      	bcc.n	8017f92 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8017f7e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8017f82:	2301      	movs	r3, #1
 8017f84:	9a05      	ldr	r2, [sp, #20]
 8017f86:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8017f8a:	d30e      	bcc.n	8017faa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8017f8c:	469a      	mov	sl, r3
 8017f8e:	2600      	movs	r6, #0
 8017f90:	e035      	b.n	8017ffe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 8017f92:	9b05      	ldr	r3, [sp, #20]
 8017f94:	429f      	cmp	r7, r3
 8017f96:	d318      	bcc.n	8017fca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 8017f98:	eb04 030a 	add.w	r3, r4, sl
 8017f9c:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8017fa0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8017fa4:	f10a 0301 	add.w	r3, sl, #1
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	9a05      	ldr	r2, [sp, #20]
 8017fac:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8017fb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017fb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017fb6:	7116      	strb	r6, [r2, #4]
 8017fb8:	f10a 0601 	add.w	r6, sl, #1
 8017fbc:	80d1      	strh	r1, [r2, #6]
 8017fbe:	7156      	strb	r6, [r2, #5]
 8017fc0:	9a05      	ldr	r2, [sp, #20]
 8017fc2:	3201      	adds	r2, #1
 8017fc4:	b292      	uxth	r2, r2
 8017fc6:	9205      	str	r2, [sp, #20]
 8017fc8:	e7e0      	b.n	8017f8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 8017fca:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8017fce:	463a      	mov	r2, r7
 8017fd0:	795b      	ldrb	r3, [r3, #5]
 8017fd2:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8017fd6:	4426      	add	r6, r4
 8017fd8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8017fda:	eb01 0c06 	add.w	ip, r1, r6
 8017fde:	f1bc 0f00 	cmp.w	ip, #0
 8017fe2:	dd07      	ble.n	8017ff4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 8017fe4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017fe8:	f892 c004 	ldrb.w	ip, [r2, #4]
 8017fec:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8017ff0:	88d2      	ldrh	r2, [r2, #6]
 8017ff2:	e7f1      	b.n	8017fd8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 8017ff4:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	e7c3      	b.n	8017f84 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 8017ffc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017ffe:	970c      	str	r7, [sp, #48]	@ 0x30
 8018000:	46b4      	mov	ip, r6
 8018002:	9a01      	ldr	r2, [sp, #4]
 8018004:	461f      	mov	r7, r3
 8018006:	e78c      	b.n	8017f22 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 8018008:	1b7b      	subs	r3, r7, r5
 801800a:	eb0c 0605 	add.w	r6, ip, r5
 801800e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018012:	b29b      	uxth	r3, r3
 8018014:	b2b6      	uxth	r6, r6
 8018016:	9201      	str	r2, [sp, #4]
 8018018:	2500      	movs	r5, #0
 801801a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801801c:	4282      	cmp	r2, r0
 801801e:	d88b      	bhi.n	8017f38 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 8018020:	9a01      	ldr	r2, [sp, #4]
 8018022:	e74b      	b.n	8017ebc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 8018024:	4297      	cmp	r7, r2
 8018026:	d332      	bcc.n	801808e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 8018028:	1abb      	subs	r3, r7, r2
 801802a:	9208      	str	r2, [sp, #32]
 801802c:	9501      	str	r5, [sp, #4]
 801802e:	b29b      	uxth	r3, r3
 8018030:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018032:	29ff      	cmp	r1, #255	@ 0xff
 8018034:	9908      	ldr	r1, [sp, #32]
 8018036:	eb0c 0601 	add.w	r6, ip, r1
 801803a:	d135      	bne.n	80180a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801803c:	f1a0 0e02 	sub.w	lr, r0, #2
 8018040:	b2b6      	uxth	r6, r6
 8018042:	45b4      	cmp	ip, r6
 8018044:	f040 808c 	bne.w	8018160 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 8018048:	9908      	ldr	r1, [sp, #32]
 801804a:	4297      	cmp	r7, r2
 801804c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018050:	d3e2      	bcc.n	8018018 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 8018052:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018054:	9904      	ldr	r1, [sp, #16]
 8018056:	8812      	ldrh	r2, [r2, #0]
 8018058:	1a52      	subs	r2, r2, r1
 801805a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801805c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018060:	9a07      	ldr	r2, [sp, #28]
 8018062:	3201      	adds	r2, #1
 8018064:	428a      	cmp	r2, r1
 8018066:	9207      	str	r2, [sp, #28]
 8018068:	f040 8087 	bne.w	801817a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801806c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8018070:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8018074:	9b04      	ldr	r3, [sp, #16]
 8018076:	1bed      	subs	r5, r5, r7
 8018078:	b2ad      	uxth	r5, r5
 801807a:	2d00      	cmp	r5, #0
 801807c:	bf08      	it	eq
 801807e:	461a      	moveq	r2, r3
 8018080:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018082:	bf18      	it	ne
 8018084:	2200      	movne	r2, #0
 8018086:	3301      	adds	r3, #1
 8018088:	b292      	uxth	r2, r2
 801808a:	930d      	str	r3, [sp, #52]	@ 0x34
 801808c:	e70d      	b.n	8017eaa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801808e:	1bd1      	subs	r1, r2, r7
 8018090:	9708      	str	r7, [sp, #32]
 8018092:	b28b      	uxth	r3, r1
 8018094:	9301      	str	r3, [sp, #4]
 8018096:	462b      	mov	r3, r5
 8018098:	e7ca      	b.n	8018030 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801809a:	bf00      	nop
 801809c:	2400aa84 	.word	0x2400aa84
 80180a0:	2400aa7e 	.word	0x2400aa7e
 80180a4:	fffff7fb 	.word	0xfffff7fb
 80180a8:	b2b6      	uxth	r6, r6
 80180aa:	900b      	str	r0, [sp, #44]	@ 0x2c
 80180ac:	45b4      	cmp	ip, r6
 80180ae:	d0cb      	beq.n	8018048 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 80180b0:	f10c 0101 	add.w	r1, ip, #1
 80180b4:	44a4      	add	ip, r4
 80180b6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80180b8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 80180bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80180be:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80180c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80180c4:	ea4f 2825 	mov.w	r8, r5, asr #8
 80180c8:	f8b1 c000 	ldrh.w	ip, [r1]
 80180cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80180ce:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80180d2:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 80180d6:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80180da:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80180de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80180e2:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80180e6:	fb1e fe01 	smulbb	lr, lr, r1
 80180ea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80180ec:	fa5f fc8c 	uxtb.w	ip, ip
 80180f0:	fb08 e801 	mla	r8, r8, r1, lr
 80180f4:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 80180f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80180fa:	00ed      	lsls	r5, r5, #3
 80180fc:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8018100:	fa1f f888 	uxth.w	r8, r8
 8018104:	fb19 f901 	smulbb	r9, r9, r1
 8018108:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801810a:	b2ed      	uxtb	r5, r5
 801810c:	fb0e 9e01 	mla	lr, lr, r1, r9
 8018110:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018112:	fb1c fc01 	smulbb	ip, ip, r1
 8018116:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018118:	fa1f fe8e 	uxth.w	lr, lr
 801811c:	fb05 c501 	mla	r5, r5, r1, ip
 8018120:	f108 0c01 	add.w	ip, r8, #1
 8018124:	f10e 0901 	add.w	r9, lr, #1
 8018128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801812a:	b2ad      	uxth	r5, r5
 801812c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8018130:	f105 0c01 	add.w	ip, r5, #1
 8018134:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 8018138:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801813c:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8018140:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018144:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018148:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801814c:	ea4c 0808 	orr.w	r8, ip, r8
 8018150:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 8018154:	ea48 0809 	orr.w	r8, r8, r9
 8018158:	f821 8b02 	strh.w	r8, [r1], #2
 801815c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801815e:	e7a5      	b.n	80180ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 8018160:	f10c 0801 	add.w	r8, ip, #1
 8018164:	44a4      	add	ip, r4
 8018166:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018168:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801816c:	fa1f fc88 	uxth.w	ip, r8
 8018170:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8018174:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8018178:	e763      	b.n	8018042 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801817a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801817e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8018182:	1aad      	subs	r5, r5, r2
 8018184:	b2ad      	uxth	r5, r5
 8018186:	2d00      	cmp	r5, #0
 8018188:	bf18      	it	ne
 801818a:	2200      	movne	r2, #0
 801818c:	9201      	str	r2, [sp, #4]
 801818e:	e744      	b.n	801801a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 8018190:	4b03      	ldr	r3, [pc, #12]	@ (80181a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 8018192:	6818      	ldr	r0, [r3, #0]
 8018194:	6803      	ldr	r3, [r0, #0]
 8018196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018198:	4798      	blx	r3
 801819a:	b01f      	add	sp, #124	@ 0x7c
 801819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a0:	2400aa84 	.word	0x2400aa84

080181a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 80181a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a8:	b093      	sub	sp, #76	@ 0x4c
 80181aa:	4616      	mov	r6, r2
 80181ac:	460d      	mov	r5, r1
 80181ae:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 80181b2:	9003      	str	r0, [sp, #12]
 80181b4:	9201      	str	r2, [sp, #4]
 80181b6:	2a00      	cmp	r2, #0
 80181b8:	f000 8303 	beq.w	80187c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x61e>
 80181bc:	6830      	ldr	r0, [r6, #0]
 80181be:	ac0e      	add	r4, sp, #56	@ 0x38
 80181c0:	6871      	ldr	r1, [r6, #4]
 80181c2:	c403      	stmia	r4!, {r0, r1}
 80181c4:	6818      	ldr	r0, [r3, #0]
 80181c6:	ac10      	add	r4, sp, #64	@ 0x40
 80181c8:	6859      	ldr	r1, [r3, #4]
 80181ca:	c403      	stmia	r4!, {r0, r1}
 80181cc:	a80e      	add	r0, sp, #56	@ 0x38
 80181ce:	f7f9 fc0b 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80181d2:	4631      	mov	r1, r6
 80181d4:	a810      	add	r0, sp, #64	@ 0x40
 80181d6:	f7f9 fc2f 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80181da:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80181de:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80181e2:	bfdb      	ittet	le
 80181e4:	b293      	uxthle	r3, r2
 80181e6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80181ea:	2301      	movgt	r3, #1
 80181ec:	fb91 f3f3 	sdivle	r3, r1, r3
 80181f0:	9304      	str	r3, [sp, #16]
 80181f2:	f105 0308 	add.w	r3, r5, #8
 80181f6:	9904      	ldr	r1, [sp, #16]
 80181f8:	9308      	str	r3, [sp, #32]
 80181fa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80181fe:	440b      	add	r3, r1
 8018200:	3b01      	subs	r3, #1
 8018202:	fb93 f3f1 	sdiv	r3, r3, r1
 8018206:	3b01      	subs	r3, #1
 8018208:	9908      	ldr	r1, [sp, #32]
 801820a:	b29b      	uxth	r3, r3
 801820c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018210:	9904      	ldr	r1, [sp, #16]
 8018212:	9309      	str	r3, [sp, #36]	@ 0x24
 8018214:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8018218:	fb93 f0f1 	sdiv	r0, r3, r1
 801821c:	b284      	uxth	r4, r0
 801821e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8018222:	9405      	str	r4, [sp, #20]
 8018224:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018228:	fb05 3914 	mls	r9, r5, r4, r3
 801822c:	fb19 f902 	smulbb	r9, r9, r2
 8018230:	4489      	add	r9, r1
 8018232:	fa1f f989 	uxth.w	r9, r9
 8018236:	2d00      	cmp	r5, #0
 8018238:	d05d      	beq.n	80182f6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 801823a:	1e6a      	subs	r2, r5, #1
 801823c:	9808      	ldr	r0, [sp, #32]
 801823e:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 8018242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018244:	fa9a fa8a 	rev.w	sl, sl
 8018248:	4492      	add	sl, r2
 801824a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801824e:	f04f 0600 	mov.w	r6, #0
 8018252:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8018256:	4411      	add	r1, r2
 8018258:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801825c:	4413      	add	r3, r2
 801825e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8018262:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8018266:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801826a:	9302      	str	r3, [sp, #8]
 801826c:	4bca      	ldr	r3, [pc, #808]	@ (8018598 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 801826e:	6818      	ldr	r0, [r3, #0]
 8018270:	6803      	ldr	r3, [r0, #0]
 8018272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018274:	4798      	blx	r3
 8018276:	4bc9      	ldr	r3, [pc, #804]	@ (801859c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 8018278:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801827c:	2100      	movs	r1, #0
 801827e:	881b      	ldrh	r3, [r3, #0]
 8018280:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8018284:	fb03 2404 	mla	r4, r3, r4, r2
 8018288:	2280      	movs	r2, #128	@ 0x80
 801828a:	436b      	muls	r3, r5
 801828c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018290:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018294:	930d      	str	r3, [sp, #52]	@ 0x34
 8018296:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801829a:	fb99 f3f3 	sdiv	r3, r9, r3
 801829e:	9306      	str	r3, [sp, #24]
 80182a0:	9b01      	ldr	r3, [sp, #4]
 80182a2:	43db      	mvns	r3, r3
 80182a4:	b2db      	uxtb	r3, r3
 80182a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80182a8:	9b03      	ldr	r3, [sp, #12]
 80182aa:	3304      	adds	r3, #4
 80182ac:	4618      	mov	r0, r3
 80182ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182b0:	f00b fef6 	bl	80240a0 <memset>
 80182b4:	4bba      	ldr	r3, [pc, #744]	@ (80185a0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 80182b6:	9300      	str	r3, [sp, #0]
 80182b8:	2300      	movs	r3, #0
 80182ba:	9307      	str	r3, [sp, #28]
 80182bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80182be:	42a3      	cmp	r3, r4
 80182c0:	f240 827a 	bls.w	80187b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x614>
 80182c4:	f04f 0e07 	mov.w	lr, #7
 80182c8:	f1b9 0f00 	cmp.w	r9, #0
 80182cc:	f000 8159 	beq.w	8018582 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 80182d0:	f89a 5000 	ldrb.w	r5, [sl]
 80182d4:	f10a 0701 	add.w	r7, sl, #1
 80182d8:	b2ed      	uxtb	r5, r5
 80182da:	11aa      	asrs	r2, r5, #6
 80182dc:	d10e      	bne.n	80182fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 80182de:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80182e2:	9b03      	ldr	r3, [sp, #12]
 80182e4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80182e8:	88ae      	ldrh	r6, [r5, #4]
 80182ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80182ee:	fa1f f989 	uxth.w	r9, r9
 80182f2:	46ba      	mov	sl, r7
 80182f4:	e7e8      	b.n	80182c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 80182f6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80182fa:	e7a6      	b.n	801824a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 80182fc:	2a01      	cmp	r2, #1
 80182fe:	d129      	bne.n	8018354 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8018300:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8018304:	f005 0203 	and.w	r2, r5, #3
 8018308:	2103      	movs	r1, #3
 801830a:	3b02      	subs	r3, #2
 801830c:	4413      	add	r3, r2
 801830e:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8018312:	f3c5 1501 	ubfx	r5, r5, #4, #2
 8018316:	f003 031f 	and.w	r3, r3, #31
 801831a:	3a02      	subs	r2, #2
 801831c:	3d02      	subs	r5, #2
 801831e:	f363 0604 	bfi	r6, r3, #0, #5
 8018322:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8018326:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801832a:	f362 164a 	bfi	r6, r2, #5, #6
 801832e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018332:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8018336:	f005 051f 	and.w	r5, r5, #31
 801833a:	fb11 2205 	smlabb	r2, r1, r5, r2
 801833e:	f365 26cf 	bfi	r6, r5, #11, #5
 8018342:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8018346:	9a03      	ldr	r2, [sp, #12]
 8018348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801834c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018350:	809e      	strh	r6, [r3, #4]
 8018352:	e7ca      	b.n	80182ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 8018354:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8018358:	2a02      	cmp	r2, #2
 801835a:	b2ab      	uxth	r3, r5
 801835c:	d136      	bne.n	80183cc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 801835e:	2101      	movs	r1, #1
 8018360:	fb12 1205 	smlabb	r2, r2, r5, r1
 8018364:	4492      	add	sl, r2
 8018366:	463a      	mov	r2, r7
 8018368:	4552      	cmp	r2, sl
 801836a:	d01c      	beq.n	80183a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 801836c:	4694      	mov	ip, r2
 801836e:	f04f 0b03 	mov.w	fp, #3
 8018372:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8018376:	7852      	ldrb	r2, [r2, #1]
 8018378:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801837c:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8018380:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 8018384:	f001 021f 	and.w	r2, r1, #31
 8018388:	460e      	mov	r6, r1
 801838a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801838e:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8018392:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8018396:	9a03      	ldr	r2, [sp, #12]
 8018398:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801839c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80183a0:	4662      	mov	r2, ip
 80183a2:	8081      	strh	r1, [r0, #4]
 80183a4:	e7e0      	b.n	8018368 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 80183a6:	4599      	cmp	r9, r3
 80183a8:	d20b      	bcs.n	80183c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 80183aa:	eba5 0509 	sub.w	r5, r5, r9
 80183ae:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 80183b2:	2d00      	cmp	r5, #0
 80183b4:	f300 8208 	bgt.w	80187c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x624>
 80183b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80183bc:	2301      	movs	r3, #1
 80183be:	9307      	str	r3, [sp, #28]
 80183c0:	e00c      	b.n	80183dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80183c2:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80183c6:	eba9 0903 	sub.w	r9, r9, r3
 80183ca:	e790      	b.n	80182ee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 80183cc:	4599      	cmp	r9, r3
 80183ce:	d2fa      	bcs.n	80183c6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 80183d0:	eba5 0509 	sub.w	r5, r5, r9
 80183d4:	2d00      	cmp	r5, #0
 80183d6:	dc1d      	bgt.n	8018414 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 80183d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80183dc:	f04f 0b00 	mov.w	fp, #0
 80183e0:	f1b8 0f00 	cmp.w	r8, #0
 80183e4:	f340 81a0 	ble.w	8018728 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x584>
 80183e8:	783b      	ldrb	r3, [r7, #0]
 80183ea:	f107 0a01 	add.w	sl, r7, #1
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	119a      	asrs	r2, r3, #6
 80183f2:	f040 80d7 	bne.w	80185a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 80183f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80183fa:	9a03      	ldr	r2, [sp, #12]
 80183fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018400:	889e      	ldrh	r6, [r3, #4]
 8018402:	9b01      	ldr	r3, [sp, #4]
 8018404:	2bff      	cmp	r3, #255	@ 0xff
 8018406:	f040 81e8 	bne.w	80187da <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x636>
 801840a:	8026      	strh	r6, [r4, #0]
 801840c:	f108 38ff 	add.w	r8, r8, #4294967295
 8018410:	3402      	adds	r4, #2
 8018412:	e0be      	b.n	8018592 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8018414:	9b02      	ldr	r3, [sp, #8]
 8018416:	9a02      	ldr	r2, [sp, #8]
 8018418:	42ab      	cmp	r3, r5
 801841a:	bfa8      	it	ge
 801841c:	462b      	movge	r3, r5
 801841e:	eba2 0803 	sub.w	r8, r2, r3
 8018422:	9a07      	ldr	r2, [sp, #28]
 8018424:	1aed      	subs	r5, r5, r3
 8018426:	2a00      	cmp	r2, #0
 8018428:	d05a      	beq.n	80184e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 801842a:	9a01      	ldr	r2, [sp, #4]
 801842c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018430:	2aff      	cmp	r2, #255	@ 0xff
 8018432:	d049      	beq.n	80184c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8018434:	f8bd e004 	ldrh.w	lr, [sp, #4]
 8018438:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 801843c:	42a3      	cmp	r3, r4
 801843e:	f240 80a5 	bls.w	801858c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8018442:	46bc      	mov	ip, r7
 8018444:	8820      	ldrh	r0, [r4, #0]
 8018446:	f81c 2b02 	ldrb.w	r2, [ip], #2
 801844a:	ea4f 2a20 	mov.w	sl, r0, asr #8
 801844e:	7879      	ldrb	r1, [r7, #1]
 8018450:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8018454:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8018458:	fb1a fa09 	smulbb	sl, sl, r9
 801845c:	b212      	sxth	r2, r2
 801845e:	b291      	uxth	r1, r2
 8018460:	00d2      	lsls	r2, r2, #3
 8018462:	120f      	asrs	r7, r1, #8
 8018464:	10c9      	asrs	r1, r1, #3
 8018466:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801846a:	b2d2      	uxtb	r2, r2
 801846c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8018470:	fb07 a70e 	mla	r7, r7, lr, sl
 8018474:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 8018478:	00c0      	lsls	r0, r0, #3
 801847a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801847e:	b2bf      	uxth	r7, r7
 8018480:	b2c0      	uxtb	r0, r0
 8018482:	fb1a fa09 	smulbb	sl, sl, r9
 8018486:	fb10 f009 	smulbb	r0, r0, r9
 801848a:	fb01 a10e 	mla	r1, r1, lr, sl
 801848e:	fb02 020e 	mla	r2, r2, lr, r0
 8018492:	1c78      	adds	r0, r7, #1
 8018494:	b289      	uxth	r1, r1
 8018496:	b292      	uxth	r2, r2
 8018498:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801849c:	f101 0a01 	add.w	sl, r1, #1
 80184a0:	1c50      	adds	r0, r2, #1
 80184a2:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 80184a6:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80184aa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80184ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80184b2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80184b6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80184ba:	4307      	orrs	r7, r0
 80184bc:	ea47 070a 	orr.w	r7, r7, sl
 80184c0:	f824 7b02 	strh.w	r7, [r4], #2
 80184c4:	4667      	mov	r7, ip
 80184c6:	e7b9      	b.n	801843c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 80184c8:	42a3      	cmp	r3, r4
 80184ca:	d95f      	bls.n	801858c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 80184cc:	463a      	mov	r2, r7
 80184ce:	f812 1b02 	ldrb.w	r1, [r2], #2
 80184d2:	7878      	ldrb	r0, [r7, #1]
 80184d4:	4617      	mov	r7, r2
 80184d6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80184da:	f824 1b02 	strh.w	r1, [r4], #2
 80184de:	e7f3      	b.n	80184c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80184e0:	9901      	ldr	r1, [sp, #4]
 80184e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80184e6:	b2b2      	uxth	r2, r6
 80184e8:	29ff      	cmp	r1, #255	@ 0xff
 80184ea:	d044      	beq.n	8018576 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 80184ec:	ea4f 2922 	mov.w	r9, r2, asr #8
 80184f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80184f4:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80184f8:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 80184fc:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8018500:	4608      	mov	r0, r1
 8018502:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8018506:	fb09 f901 	mul.w	r9, r9, r1
 801850a:	fb0e fe01 	mul.w	lr, lr, r1
 801850e:	00d1      	lsls	r1, r2, #3
 8018510:	b2c9      	uxtb	r1, r1
 8018512:	4341      	muls	r1, r0
 8018514:	429c      	cmp	r4, r3
 8018516:	f4bf af61 	bcs.w	80183dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801851a:	8822      	ldrh	r2, [r4, #0]
 801851c:	1210      	asrs	r0, r2, #8
 801851e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8018522:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8018526:	00d2      	lsls	r2, r2, #3
 8018528:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801852c:	fb00 900a 	mla	r0, r0, sl, r9
 8018530:	b2d2      	uxtb	r2, r2
 8018532:	fb0c ec0a 	mla	ip, ip, sl, lr
 8018536:	b280      	uxth	r0, r0
 8018538:	fb02 120a 	mla	r2, r2, sl, r1
 801853c:	fa1f fc8c 	uxth.w	ip, ip
 8018540:	b292      	uxth	r2, r2
 8018542:	f100 0b01 	add.w	fp, r0, #1
 8018546:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801854a:	1c50      	adds	r0, r2, #1
 801854c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018550:	f10c 0201 	add.w	r2, ip, #1
 8018554:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8018558:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801855c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8018560:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8018564:	ea40 0b0b 	orr.w	fp, r0, fp
 8018568:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801856c:	ea4b 0b0c 	orr.w	fp, fp, ip
 8018570:	f824 bb02 	strh.w	fp, [r4], #2
 8018574:	e7ce      	b.n	8018514 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 8018576:	429c      	cmp	r4, r3
 8018578:	f4bf af30 	bcs.w	80183dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801857c:	f824 2b02 	strh.w	r2, [r4], #2
 8018580:	e7f9      	b.n	8018576 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8018582:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018586:	4657      	mov	r7, sl
 8018588:	464d      	mov	r5, r9
 801858a:	e727      	b.n	80183dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801858c:	2300      	movs	r3, #0
 801858e:	e716      	b.n	80183be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8018590:	44bb      	add	fp, r7
 8018592:	4657      	mov	r7, sl
 8018594:	e724      	b.n	80183e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 8018596:	bf00      	nop
 8018598:	2400aa84 	.word	0x2400aa84
 801859c:	2400aa7e 	.word	0x2400aa7e
 80185a0:	24000280 	.word	0x24000280
 80185a4:	2a01      	cmp	r2, #1
 80185a6:	d12a      	bne.n	80185fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 80185a8:	f3c6 0104 	ubfx	r1, r6, #0, #5
 80185ac:	f003 0203 	and.w	r2, r3, #3
 80185b0:	f3c3 0081 	ubfx	r0, r3, #2, #2
 80185b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80185b8:	3902      	subs	r1, #2
 80185ba:	3802      	subs	r0, #2
 80185bc:	3b02      	subs	r3, #2
 80185be:	4411      	add	r1, r2
 80185c0:	f001 011f 	and.w	r1, r1, #31
 80185c4:	f361 0604 	bfi	r6, r1, #0, #5
 80185c8:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 80185cc:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80185d0:	f360 164a 	bfi	r6, r0, #5, #6
 80185d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80185d8:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 80185dc:	f002 031f 	and.w	r3, r2, #31
 80185e0:	2203      	movs	r2, #3
 80185e2:	f363 26cf 	bfi	r6, r3, #11, #5
 80185e6:	fb12 0303 	smlabb	r3, r2, r3, r0
 80185ea:	2207      	movs	r2, #7
 80185ec:	fb12 3301 	smlabb	r3, r2, r1, r3
 80185f0:	9a03      	ldr	r2, [sp, #12]
 80185f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80185f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80185fa:	809e      	strh	r6, [r3, #4]
 80185fc:	e701      	b.n	8018402 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 80185fe:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8018602:	4647      	mov	r7, r8
 8018604:	45a8      	cmp	r8, r5
 8018606:	bfa8      	it	ge
 8018608:	462f      	movge	r7, r5
 801860a:	2a02      	cmp	r2, #2
 801860c:	d154      	bne.n	80186b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 801860e:	9b01      	ldr	r3, [sp, #4]
 8018610:	2bff      	cmp	r3, #255	@ 0xff
 8018612:	d01a      	beq.n	801864a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8018614:	eb0b 0307 	add.w	r3, fp, r7
 8018618:	2b40      	cmp	r3, #64	@ 0x40
 801861a:	dd16      	ble.n	801864a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801861c:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8018620:	9800      	ldr	r0, [sp, #0]
 8018622:	4649      	mov	r1, r9
 8018624:	f7f5 fb02 	bl	800dc2c <_ZN8touchgfx5paint9flushLineEPmi>
 8018628:	465a      	mov	r2, fp
 801862a:	9b01      	ldr	r3, [sp, #4]
 801862c:	4620      	mov	r0, r4
 801862e:	9900      	ldr	r1, [sp, #0]
 8018630:	444c      	add	r4, r9
 8018632:	f7f5 fb15 	bl	800dc60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8018636:	9b00      	ldr	r3, [sp, #0]
 8018638:	f04f 0b00 	mov.w	fp, #0
 801863c:	461a      	mov	r2, r3
 801863e:	4b6a      	ldr	r3, [pc, #424]	@ (80187e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 8018640:	429a      	cmp	r2, r3
 8018642:	bf0c      	ite	eq
 8018644:	4b69      	ldreq	r3, [pc, #420]	@ (80187ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8018646:	4b68      	ldrne	r3, [pc, #416]	@ (80187e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 8018648:	9300      	str	r3, [sp, #0]
 801864a:	4652      	mov	r2, sl
 801864c:	2100      	movs	r1, #0
 801864e:	42a9      	cmp	r1, r5
 8018650:	da2c      	bge.n	80186ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8018652:	4694      	mov	ip, r2
 8018654:	f04f 0903 	mov.w	r9, #3
 8018658:	42b9      	cmp	r1, r7
 801865a:	f81c 3b02 	ldrb.w	r3, [ip], #2
 801865e:	7852      	ldrb	r2, [r2, #1]
 8018660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018664:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8018668:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 801866c:	f003 021f 	and.w	r2, r3, #31
 8018670:	461e      	mov	r6, r3
 8018672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018676:	fb19 000e 	smlabb	r0, r9, lr, r0
 801867a:	f04f 0e07 	mov.w	lr, #7
 801867e:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8018682:	9a03      	ldr	r2, [sp, #12]
 8018684:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8018688:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801868c:	8083      	strh	r3, [r0, #4]
 801868e:	da0a      	bge.n	80186a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8018690:	9a01      	ldr	r2, [sp, #4]
 8018692:	2aff      	cmp	r2, #255	@ 0xff
 8018694:	bf13      	iteet	ne
 8018696:	9a00      	ldrne	r2, [sp, #0]
 8018698:	8023      	strheq	r3, [r4, #0]
 801869a:	3402      	addeq	r4, #2
 801869c:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 80186a0:	bf18      	it	ne
 80186a2:	f10b 0b01 	addne.w	fp, fp, #1
 80186a6:	3101      	adds	r1, #1
 80186a8:	4662      	mov	r2, ip
 80186aa:	e7d0      	b.n	801864e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 80186ac:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 80186b0:	eba8 0807 	sub.w	r8, r8, r7
 80186b4:	1bed      	subs	r5, r5, r7
 80186b6:	e76c      	b.n	8018592 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 80186b8:	9b01      	ldr	r3, [sp, #4]
 80186ba:	eba8 0807 	sub.w	r8, r8, r7
 80186be:	1bed      	subs	r5, r5, r7
 80186c0:	fa1f f986 	uxth.w	r9, r6
 80186c4:	2bff      	cmp	r3, #255	@ 0xff
 80186c6:	d027      	beq.n	8018718 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x574>
 80186c8:	eb0b 0307 	add.w	r3, fp, r7
 80186cc:	2b40      	cmp	r3, #64	@ 0x40
 80186ce:	dd18      	ble.n	8018702 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x55e>
 80186d0:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80186d4:	9800      	ldr	r0, [sp, #0]
 80186d6:	4619      	mov	r1, r3
 80186d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80186da:	f7f5 faa7 	bl	800dc2c <_ZN8touchgfx5paint9flushLineEPmi>
 80186de:	465a      	mov	r2, fp
 80186e0:	9b01      	ldr	r3, [sp, #4]
 80186e2:	4620      	mov	r0, r4
 80186e4:	9900      	ldr	r1, [sp, #0]
 80186e6:	f04f 0b00 	mov.w	fp, #0
 80186ea:	f7f5 fab9 	bl	800dc60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 80186ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80186f0:	441c      	add	r4, r3
 80186f2:	9b00      	ldr	r3, [sp, #0]
 80186f4:	461a      	mov	r2, r3
 80186f6:	4b3c      	ldr	r3, [pc, #240]	@ (80187e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 80186f8:	429a      	cmp	r2, r3
 80186fa:	bf0c      	ite	eq
 80186fc:	4b3b      	ldreq	r3, [pc, #236]	@ (80187ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 80186fe:	4b3a      	ldrne	r3, [pc, #232]	@ (80187e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 8018700:	9300      	str	r3, [sp, #0]
 8018702:	9b00      	ldr	r3, [sp, #0]
 8018704:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8018708:	463b      	mov	r3, r7
 801870a:	2b00      	cmp	r3, #0
 801870c:	f43f af40 	beq.w	8018590 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8018710:	f822 9b02 	strh.w	r9, [r2], #2
 8018714:	3b01      	subs	r3, #1
 8018716:	e7f8      	b.n	801870a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x566>
 8018718:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801871c:	42a7      	cmp	r7, r4
 801871e:	f67f af38 	bls.w	8018592 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8018722:	f824 9b02 	strh.w	r9, [r4], #2
 8018726:	e7f9      	b.n	801871c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x578>
 8018728:	f1bb 0f00 	cmp.w	fp, #0
 801872c:	d00c      	beq.n	8018748 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a4>
 801872e:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8018732:	9800      	ldr	r0, [sp, #0]
 8018734:	4641      	mov	r1, r8
 8018736:	f7f5 fa79 	bl	800dc2c <_ZN8touchgfx5paint9flushLineEPmi>
 801873a:	4620      	mov	r0, r4
 801873c:	4444      	add	r4, r8
 801873e:	9b01      	ldr	r3, [sp, #4]
 8018740:	465a      	mov	r2, fp
 8018742:	9900      	ldr	r1, [sp, #0]
 8018744:	f7f5 fa8c 	bl	800dc60 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8018748:	4b29      	ldr	r3, [pc, #164]	@ (80187f0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 801874a:	9a02      	ldr	r2, [sp, #8]
 801874c:	881b      	ldrh	r3, [r3, #0]
 801874e:	1a9b      	subs	r3, r3, r2
 8018750:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018754:	9b06      	ldr	r3, [sp, #24]
 8018756:	3301      	adds	r3, #1
 8018758:	9306      	str	r3, [sp, #24]
 801875a:	9a06      	ldr	r2, [sp, #24]
 801875c:	9b04      	ldr	r3, [sp, #16]
 801875e:	4293      	cmp	r3, r2
 8018760:	d120      	bne.n	80187a4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x600>
 8018762:	9b05      	ldr	r3, [sp, #20]
 8018764:	2100      	movs	r1, #0
 8018766:	9a05      	ldr	r2, [sp, #20]
 8018768:	f04f 0600 	mov.w	r6, #0
 801876c:	f103 0801 	add.w	r8, r3, #1
 8018770:	9b08      	ldr	r3, [sp, #32]
 8018772:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8018776:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801877a:	2280      	movs	r2, #128	@ 0x80
 801877c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8018780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018782:	ba3f      	rev	r7, r7
 8018784:	eba9 0905 	sub.w	r9, r9, r5
 8018788:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801878a:	441f      	add	r7, r3
 801878c:	f00b fc88 	bl	80240a0 <memset>
 8018790:	fa1f f989 	uxth.w	r9, r9
 8018794:	2300      	movs	r3, #0
 8018796:	f8cd 8014 	str.w	r8, [sp, #20]
 801879a:	9306      	str	r3, [sp, #24]
 801879c:	f7f5 fa3c 	bl	800dc18 <_ZN8touchgfx5paint8tearDownEv>
 80187a0:	46ba      	mov	sl, r7
 80187a2:	e58b      	b.n	80182bc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 80187a4:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 80187a8:	9b02      	ldr	r3, [sp, #8]
 80187aa:	eba9 0903 	sub.w	r9, r9, r3
 80187ae:	eba9 0505 	sub.w	r5, r9, r5
 80187b2:	fa1f f985 	uxth.w	r9, r5
 80187b6:	e7f1      	b.n	801879c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5f8>
 80187b8:	4b0e      	ldr	r3, [pc, #56]	@ (80187f4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 80187ba:	6818      	ldr	r0, [r3, #0]
 80187bc:	6803      	ldr	r3, [r0, #0]
 80187be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187c0:	4798      	blx	r3
 80187c2:	b013      	add	sp, #76	@ 0x4c
 80187c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187c8:	9b02      	ldr	r3, [sp, #8]
 80187ca:	9a02      	ldr	r2, [sp, #8]
 80187cc:	42ab      	cmp	r3, r5
 80187ce:	bfa8      	it	ge
 80187d0:	462b      	movge	r3, r5
 80187d2:	eba2 0803 	sub.w	r8, r2, r3
 80187d6:	1aed      	subs	r5, r5, r3
 80187d8:	e627      	b.n	801842a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 80187da:	f108 38ff 	add.w	r8, r8, #4294967295
 80187de:	fa1f f986 	uxth.w	r9, r6
 80187e2:	2500      	movs	r5, #0
 80187e4:	2701      	movs	r7, #1
 80187e6:	e76f      	b.n	80186c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x524>
 80187e8:	24000280 	.word	0x24000280
 80187ec:	24000380 	.word	0x24000380
 80187f0:	2400aa7e 	.word	0x2400aa7e
 80187f4:	2400aa84 	.word	0x2400aa84

080187f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80187f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187fc:	b08f      	sub	sp, #60	@ 0x3c
 80187fe:	461c      	mov	r4, r3
 8018800:	460f      	mov	r7, r1
 8018802:	9203      	str	r2, [sp, #12]
 8018804:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8018808:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801880a:	9202      	str	r2, [sp, #8]
 801880c:	2a00      	cmp	r2, #0
 801880e:	f000 8128 	beq.w	8018a62 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8018812:	6820      	ldr	r0, [r4, #0]
 8018814:	aa0a      	add	r2, sp, #40	@ 0x28
 8018816:	6861      	ldr	r1, [r4, #4]
 8018818:	c203      	stmia	r2!, {r0, r1}
 801881a:	6818      	ldr	r0, [r3, #0]
 801881c:	aa0c      	add	r2, sp, #48	@ 0x30
 801881e:	6859      	ldr	r1, [r3, #4]
 8018820:	c203      	stmia	r2!, {r0, r1}
 8018822:	a80a      	add	r0, sp, #40	@ 0x28
 8018824:	f7f9 f8e0 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018828:	4621      	mov	r1, r4
 801882a:	a80c      	add	r0, sp, #48	@ 0x30
 801882c:	f7f9 f904 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018830:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8018834:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8018838:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801883c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8018840:	bfdb      	ittet	le
 8018842:	b2b3      	uxthle	r3, r6
 8018844:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8018848:	2301      	movgt	r3, #1
 801884a:	fb92 f3f3 	sdivle	r3, r2, r3
 801884e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8018852:	441d      	add	r5, r3
 8018854:	fb92 f1f3 	sdiv	r1, r2, r3
 8018858:	fa1f fc81 	uxth.w	ip, r1
 801885c:	3d01      	subs	r5, #1
 801885e:	fb0c 2413 	mls	r4, ip, r3, r2
 8018862:	4661      	mov	r1, ip
 8018864:	fb14 f406 	smulbb	r4, r4, r6
 8018868:	4404      	add	r4, r0
 801886a:	fb95 f5f3 	sdiv	r5, r5, r3
 801886e:	b2a4      	uxth	r4, r4
 8018870:	b121      	cbz	r1, 801887c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8018872:	9b03      	ldr	r3, [sp, #12]
 8018874:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8018878:	ba1b      	rev	r3, r3
 801887a:	441f      	add	r7, r3
 801887c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018880:	b2ad      	uxth	r5, r5
 8018882:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8018886:	4418      	add	r0, r3
 8018888:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801888c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8018890:	00ad      	lsls	r5, r5, #2
 8018892:	441a      	add	r2, r3
 8018894:	4b74      	ldr	r3, [pc, #464]	@ (8018a68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8018896:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801889a:	6818      	ldr	r0, [r3, #0]
 801889c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80188a0:	6803      	ldr	r3, [r0, #0]
 80188a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188a4:	4798      	blx	r3
 80188a6:	4a71      	ldr	r2, [pc, #452]	@ (8018a6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 80188a8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80188ac:	2c00      	cmp	r4, #0
 80188ae:	8813      	ldrh	r3, [r2, #0]
 80188b0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80188b4:	bf0c      	ite	eq
 80188b6:	46c8      	moveq	r8, r9
 80188b8:	f04f 0800 	movne.w	r8, #0
 80188bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80188be:	fb03 c101 	mla	r1, r3, r1, ip
 80188c2:	4373      	muls	r3, r6
 80188c4:	fa1f f888 	uxth.w	r8, r8
 80188c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80188cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80188d0:	9304      	str	r3, [sp, #16]
 80188d2:	1d2b      	adds	r3, r5, #4
 80188d4:	9305      	str	r3, [sp, #20]
 80188d6:	2300      	movs	r3, #0
 80188d8:	9301      	str	r3, [sp, #4]
 80188da:	9a04      	ldr	r2, [sp, #16]
 80188dc:	4282      	cmp	r2, r0
 80188de:	f240 80bb 	bls.w	8018a58 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80188e2:	b95b      	cbnz	r3, 80188fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 80188e4:	783a      	ldrb	r2, [r7, #0]
 80188e6:	0993      	lsrs	r3, r2, #6
 80188e8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80188ec:	9201      	str	r2, [sp, #4]
 80188ee:	1e5a      	subs	r2, r3, #1
 80188f0:	2a02      	cmp	r2, #2
 80188f2:	bf8d      	iteet	hi
 80188f4:	787b      	ldrbhi	r3, [r7, #1]
 80188f6:	3701      	addls	r7, #1
 80188f8:	b29b      	uxthls	r3, r3
 80188fa:	3702      	addhi	r7, #2
 80188fc:	b184      	cbz	r4, 8018920 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 80188fe:	429c      	cmp	r4, r3
 8018900:	bf91      	iteee	ls
 8018902:	1b1c      	subls	r4, r3, r4
 8018904:	1ae4      	subhi	r4, r4, r3
 8018906:	46c4      	movhi	ip, r8
 8018908:	f04f 0a00 	movhi.w	sl, #0
 801890c:	bf9b      	ittet	ls
 801890e:	fa1f fa84 	uxthls.w	sl, r4
 8018912:	2400      	movls	r4, #0
 8018914:	b2a4      	uxthhi	r4, r4
 8018916:	fa1f fc89 	uxthls.w	ip, r9
 801891a:	4653      	mov	r3, sl
 801891c:	46e0      	mov	r8, ip
 801891e:	e7dc      	b.n	80188da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 8018920:	2204      	movs	r2, #4
 8018922:	9905      	ldr	r1, [sp, #20]
 8018924:	4543      	cmp	r3, r8
 8018926:	4615      	mov	r5, r2
 8018928:	9a01      	ldr	r2, [sp, #4]
 801892a:	bf24      	itt	cs
 801892c:	eba3 0a08 	subcs.w	sl, r3, r8
 8018930:	46c6      	movcs	lr, r8
 8018932:	fb15 1202 	smlabb	r2, r5, r2, r1
 8018936:	9903      	ldr	r1, [sp, #12]
 8018938:	bf3c      	itt	cc
 801893a:	eba8 0c03 	subcc.w	ip, r8, r3
 801893e:	469e      	movcc	lr, r3
 8018940:	588a      	ldr	r2, [r1, r2]
 8018942:	bf26      	itte	cs
 8018944:	fa1f fa8a 	uxthcs.w	sl, sl
 8018948:	46a4      	movcs	ip, r4
 801894a:	fa1f fc8c 	uxthcc.w	ip, ip
 801894e:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8018952:	bf38      	it	cc
 8018954:	46a2      	movcc	sl, r4
 8018956:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801895a:	2900      	cmp	r1, #0
 801895c:	d066      	beq.n	8018a2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801895e:	29ff      	cmp	r1, #255	@ 0xff
 8018960:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8018964:	d114      	bne.n	8018990 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8018966:	9d02      	ldr	r5, [sp, #8]
 8018968:	2dff      	cmp	r5, #255	@ 0xff
 801896a:	d111      	bne.n	8018990 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801896c:	0951      	lsrs	r1, r2, #5
 801896e:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8018972:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8018976:	4486      	add	lr, r0
 8018978:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801897c:	f026 0607 	bic.w	r6, r6, #7
 8018980:	430e      	orrs	r6, r1
 8018982:	4316      	orrs	r6, r2
 8018984:	b2b6      	uxth	r6, r6
 8018986:	4586      	cmp	lr, r0
 8018988:	d051      	beq.n	8018a2e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801898a:	f820 6b02 	strh.w	r6, [r0], #2
 801898e:	e7fa      	b.n	8018986 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8018990:	9d02      	ldr	r5, [sp, #8]
 8018992:	b2f6      	uxtb	r6, r6
 8018994:	4486      	add	lr, r0
 8018996:	4369      	muls	r1, r5
 8018998:	1c4d      	adds	r5, r1, #1
 801899a:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801899e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80189a2:	b2d2      	uxtb	r2, r2
 80189a4:	122d      	asrs	r5, r5, #8
 80189a6:	ea6f 0b05 	mvn.w	fp, r5
 80189aa:	b2ad      	uxth	r5, r5
 80189ac:	fb11 f105 	smulbb	r1, r1, r5
 80189b0:	fa5f fb8b 	uxtb.w	fp, fp
 80189b4:	fb16 f605 	smulbb	r6, r6, r5
 80189b8:	fb12 f205 	smulbb	r2, r2, r5
 80189bc:	b289      	uxth	r1, r1
 80189be:	b2b6      	uxth	r6, r6
 80189c0:	b292      	uxth	r2, r2
 80189c2:	9106      	str	r1, [sp, #24]
 80189c4:	9607      	str	r6, [sp, #28]
 80189c6:	9208      	str	r2, [sp, #32]
 80189c8:	4586      	cmp	lr, r0
 80189ca:	d030      	beq.n	8018a2e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80189cc:	8802      	ldrh	r2, [r0, #0]
 80189ce:	9906      	ldr	r1, [sp, #24]
 80189d0:	1216      	asrs	r6, r2, #8
 80189d2:	10d5      	asrs	r5, r2, #3
 80189d4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80189d8:	00d2      	lsls	r2, r2, #3
 80189da:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80189de:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80189e2:	b2d2      	uxtb	r2, r2
 80189e4:	fb06 160b 	mla	r6, r6, fp, r1
 80189e8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80189ec:	9907      	ldr	r1, [sp, #28]
 80189ee:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80189f2:	b2b6      	uxth	r6, r6
 80189f4:	fb05 150b 	mla	r5, r5, fp, r1
 80189f8:	9908      	ldr	r1, [sp, #32]
 80189fa:	fb02 120b 	mla	r2, r2, fp, r1
 80189fe:	1c71      	adds	r1, r6, #1
 8018a00:	b2ad      	uxth	r5, r5
 8018a02:	b292      	uxth	r2, r2
 8018a04:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8018a08:	1c51      	adds	r1, r2, #1
 8018a0a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8018a0e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018a12:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018a16:	4316      	orrs	r6, r2
 8018a18:	1c6a      	adds	r2, r5, #1
 8018a1a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8018a1e:	096d      	lsrs	r5, r5, #5
 8018a20:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8018a24:	432e      	orrs	r6, r5
 8018a26:	f820 6b02 	strh.w	r6, [r0], #2
 8018a2a:	e7cd      	b.n	80189c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 8018a2c:	4470      	add	r0, lr
 8018a2e:	4543      	cmp	r3, r8
 8018a30:	f4ff af73 	bcc.w	801891a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8018a34:	fa1f fc89 	uxth.w	ip, r9
 8018a38:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8018a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a3e:	eba4 040c 	sub.w	r4, r4, ip
 8018a42:	881b      	ldrh	r3, [r3, #0]
 8018a44:	b2a4      	uxth	r4, r4
 8018a46:	eba3 0309 	sub.w	r3, r3, r9
 8018a4a:	2c00      	cmp	r4, #0
 8018a4c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018a50:	bf18      	it	ne
 8018a52:	f04f 0c00 	movne.w	ip, #0
 8018a56:	e760      	b.n	801891a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8018a58:	4b03      	ldr	r3, [pc, #12]	@ (8018a68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8018a5a:	6818      	ldr	r0, [r3, #0]
 8018a5c:	6803      	ldr	r3, [r0, #0]
 8018a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a60:	4798      	blx	r3
 8018a62:	b00f      	add	sp, #60	@ 0x3c
 8018a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a68:	2400aa84 	.word	0x2400aa84
 8018a6c:	2400aa7e 	.word	0x2400aa7e

08018a70 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8018a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a74:	b093      	sub	sp, #76	@ 0x4c
 8018a76:	461c      	mov	r4, r3
 8018a78:	9205      	str	r2, [sp, #20]
 8018a7a:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8018a7e:	9101      	str	r1, [sp, #4]
 8018a80:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8018a82:	9202      	str	r2, [sp, #8]
 8018a84:	2a00      	cmp	r2, #0
 8018a86:	f000 812e 	beq.w	8018ce6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8018a8a:	6820      	ldr	r0, [r4, #0]
 8018a8c:	aa0e      	add	r2, sp, #56	@ 0x38
 8018a8e:	6861      	ldr	r1, [r4, #4]
 8018a90:	c203      	stmia	r2!, {r0, r1}
 8018a92:	6818      	ldr	r0, [r3, #0]
 8018a94:	aa10      	add	r2, sp, #64	@ 0x40
 8018a96:	6859      	ldr	r1, [r3, #4]
 8018a98:	c203      	stmia	r2!, {r0, r1}
 8018a9a:	a80e      	add	r0, sp, #56	@ 0x38
 8018a9c:	f7f8 ffa4 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018aa0:	4621      	mov	r1, r4
 8018aa2:	a810      	add	r0, sp, #64	@ 0x40
 8018aa4:	f7f8 ffc8 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018aa8:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8018aac:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8018ab0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8018ab4:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8018ab8:	bfdb      	ittet	le
 8018aba:	b2b3      	uxthle	r3, r6
 8018abc:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8018ac0:	2301      	movgt	r3, #1
 8018ac2:	fb92 f3f3 	sdivle	r3, r2, r3
 8018ac6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8018aca:	441d      	add	r5, r3
 8018acc:	fb92 f1f3 	sdiv	r1, r2, r3
 8018ad0:	fa1f fc81 	uxth.w	ip, r1
 8018ad4:	3d01      	subs	r5, #1
 8018ad6:	fb0c 2413 	mls	r4, ip, r3, r2
 8018ada:	4661      	mov	r1, ip
 8018adc:	fb14 f406 	smulbb	r4, r4, r6
 8018ae0:	4404      	add	r4, r0
 8018ae2:	fb95 f5f3 	sdiv	r5, r5, r3
 8018ae6:	b2a4      	uxth	r4, r4
 8018ae8:	b131      	cbz	r1, 8018af8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8018aea:	9b05      	ldr	r3, [sp, #20]
 8018aec:	9901      	ldr	r1, [sp, #4]
 8018aee:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8018af2:	ba1b      	rev	r3, r3
 8018af4:	4419      	add	r1, r3
 8018af6:	9101      	str	r1, [sp, #4]
 8018af8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018afc:	b2ad      	uxth	r5, r5
 8018afe:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8018b02:	4418      	add	r0, r3
 8018b04:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8018b08:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8018b0c:	00ad      	lsls	r5, r5, #2
 8018b0e:	441a      	add	r2, r3
 8018b10:	4b76      	ldr	r3, [pc, #472]	@ (8018cec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8018b12:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8018b16:	6818      	ldr	r0, [r3, #0]
 8018b18:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8018b1c:	6803      	ldr	r3, [r0, #0]
 8018b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b20:	4798      	blx	r3
 8018b22:	4973      	ldr	r1, [pc, #460]	@ (8018cf0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8018b24:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8018b28:	2c00      	cmp	r4, #0
 8018b2a:	880b      	ldrh	r3, [r1, #0]
 8018b2c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8018b30:	910d      	str	r1, [sp, #52]	@ 0x34
 8018b32:	fb03 c202 	mla	r2, r3, r2, ip
 8018b36:	bf08      	it	eq
 8018b38:	46dc      	moveq	ip, fp
 8018b3a:	fb03 f306 	mul.w	r3, r3, r6
 8018b3e:	bf18      	it	ne
 8018b40:	f04f 0c00 	movne.w	ip, #0
 8018b44:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8018b48:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018b4c:	fa1f fc8c 	uxth.w	ip, ip
 8018b50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018b54:	9106      	str	r1, [sp, #24]
 8018b56:	9308      	str	r3, [sp, #32]
 8018b58:	1d2b      	adds	r3, r5, #4
 8018b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b5c:	9b02      	ldr	r3, [sp, #8]
 8018b5e:	43da      	mvns	r2, r3
 8018b60:	2300      	movs	r3, #0
 8018b62:	b2d2      	uxtb	r2, r2
 8018b64:	9303      	str	r3, [sp, #12]
 8018b66:	9207      	str	r2, [sp, #28]
 8018b68:	9a08      	ldr	r2, [sp, #32]
 8018b6a:	4282      	cmp	r2, r0
 8018b6c:	f240 80b6 	bls.w	8018cdc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8018b70:	b963      	cbnz	r3, 8018b8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8018b72:	9b01      	ldr	r3, [sp, #4]
 8018b74:	781a      	ldrb	r2, [r3, #0]
 8018b76:	0993      	lsrs	r3, r2, #6
 8018b78:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018b7c:	9203      	str	r2, [sp, #12]
 8018b7e:	1e5a      	subs	r2, r3, #1
 8018b80:	2a02      	cmp	r2, #2
 8018b82:	d815      	bhi.n	8018bb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 8018b84:	9a01      	ldr	r2, [sp, #4]
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	3201      	adds	r2, #1
 8018b8a:	9201      	str	r2, [sp, #4]
 8018b8c:	b1b4      	cbz	r4, 8018bbc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 8018b8e:	429c      	cmp	r4, r3
 8018b90:	bf91      	iteee	ls
 8018b92:	1b1c      	subls	r4, r3, r4
 8018b94:	1ae4      	subhi	r4, r4, r3
 8018b96:	4666      	movhi	r6, ip
 8018b98:	f04f 0800 	movhi.w	r8, #0
 8018b9c:	bf9b      	ittet	ls
 8018b9e:	fa1f f884 	uxthls.w	r8, r4
 8018ba2:	2400      	movls	r4, #0
 8018ba4:	b2a4      	uxthhi	r4, r4
 8018ba6:	fa1f f68b 	uxthls.w	r6, fp
 8018baa:	4643      	mov	r3, r8
 8018bac:	46b4      	mov	ip, r6
 8018bae:	e7db      	b.n	8018b68 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 8018bb0:	9a01      	ldr	r2, [sp, #4]
 8018bb2:	9b01      	ldr	r3, [sp, #4]
 8018bb4:	3202      	adds	r2, #2
 8018bb6:	785b      	ldrb	r3, [r3, #1]
 8018bb8:	9201      	str	r2, [sp, #4]
 8018bba:	e7e7      	b.n	8018b8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8018bbc:	2203      	movs	r2, #3
 8018bbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018bc0:	4563      	cmp	r3, ip
 8018bc2:	4615      	mov	r5, r2
 8018bc4:	9a03      	ldr	r2, [sp, #12]
 8018bc6:	bf2c      	ite	cs
 8018bc8:	eba3 080c 	subcs.w	r8, r3, ip
 8018bcc:	ebac 0603 	subcc.w	r6, ip, r3
 8018bd0:	fb15 1202 	smlabb	r2, r5, r2, r1
 8018bd4:	9905      	ldr	r1, [sp, #20]
 8018bd6:	bf24      	itt	cs
 8018bd8:	fa1f f888 	uxthcs.w	r8, r8
 8018bdc:	46e1      	movcs	r9, ip
 8018bde:	eb01 0502 	add.w	r5, r1, r2
 8018be2:	9902      	ldr	r1, [sp, #8]
 8018be4:	bf2f      	iteee	cs
 8018be6:	4626      	movcs	r6, r4
 8018be8:	b2b6      	uxthcc	r6, r6
 8018bea:	4699      	movcc	r9, r3
 8018bec:	46a0      	movcc	r8, r4
 8018bee:	29ff      	cmp	r1, #255	@ 0xff
 8018bf0:	d04a      	beq.n	8018c88 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 8018bf2:	9f06      	ldr	r7, [sp, #24]
 8018bf4:	46ca      	mov	sl, r9
 8018bf6:	78a9      	ldrb	r1, [r5, #2]
 8018bf8:	9004      	str	r0, [sp, #16]
 8018bfa:	4379      	muls	r1, r7
 8018bfc:	910a      	str	r1, [sp, #40]	@ 0x28
 8018bfe:	7869      	ldrb	r1, [r5, #1]
 8018c00:	4379      	muls	r1, r7
 8018c02:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018c04:	9905      	ldr	r1, [sp, #20]
 8018c06:	5c8a      	ldrb	r2, [r1, r2]
 8018c08:	437a      	muls	r2, r7
 8018c0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8018c0c:	f1ba 0f00 	cmp.w	sl, #0
 8018c10:	d03d      	beq.n	8018c8e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 8018c12:	9a04      	ldr	r2, [sp, #16]
 8018c14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c18:	9f07      	ldr	r7, [sp, #28]
 8018c1a:	8812      	ldrh	r2, [r2, #0]
 8018c1c:	fa1f fa8a 	uxth.w	sl, sl
 8018c20:	46be      	mov	lr, r7
 8018c22:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018c24:	1215      	asrs	r5, r2, #8
 8018c26:	10d1      	asrs	r1, r2, #3
 8018c28:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8018c2c:	00d2      	lsls	r2, r2, #3
 8018c2e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8018c32:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8018c36:	b2d2      	uxtb	r2, r2
 8018c38:	fb05 750e 	mla	r5, r5, lr, r7
 8018c3c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8018c40:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c42:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018c46:	b2ad      	uxth	r5, r5
 8018c48:	fb01 710e 	mla	r1, r1, lr, r7
 8018c4c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018c4e:	fb02 720e 	mla	r2, r2, lr, r7
 8018c52:	f105 0e01 	add.w	lr, r5, #1
 8018c56:	b289      	uxth	r1, r1
 8018c58:	b292      	uxth	r2, r2
 8018c5a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8018c5e:	f102 0e01 	add.w	lr, r2, #1
 8018c62:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8018c66:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8018c6a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018c6e:	4315      	orrs	r5, r2
 8018c70:	1c4a      	adds	r2, r1, #1
 8018c72:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018c76:	9a04      	ldr	r2, [sp, #16]
 8018c78:	0949      	lsrs	r1, r1, #5
 8018c7a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8018c7e:	430d      	orrs	r5, r1
 8018c80:	f822 5b02 	strh.w	r5, [r2], #2
 8018c84:	9204      	str	r2, [sp, #16]
 8018c86:	e7c1      	b.n	8018c0c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8018c88:	4649      	mov	r1, r9
 8018c8a:	4686      	mov	lr, r0
 8018c8c:	b999      	cbnz	r1, 8018cb6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 8018c8e:	4563      	cmp	r3, ip
 8018c90:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8018c94:	d389      	bcc.n	8018baa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8018c96:	fa1f f68b 	uxth.w	r6, fp
 8018c9a:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8018c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ca0:	1ba4      	subs	r4, r4, r6
 8018ca2:	881b      	ldrh	r3, [r3, #0]
 8018ca4:	b2a4      	uxth	r4, r4
 8018ca6:	eba3 030b 	sub.w	r3, r3, fp
 8018caa:	2c00      	cmp	r4, #0
 8018cac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018cb0:	bf18      	it	ne
 8018cb2:	2600      	movne	r6, #0
 8018cb4:	e779      	b.n	8018baa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8018cb6:	78aa      	ldrb	r2, [r5, #2]
 8018cb8:	3901      	subs	r1, #1
 8018cba:	4f0e      	ldr	r7, [pc, #56]	@ (8018cf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8018cbc:	b289      	uxth	r1, r1
 8018cbe:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8018cc2:	786a      	ldrb	r2, [r5, #1]
 8018cc4:	00d2      	lsls	r2, r2, #3
 8018cc6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8018cca:	ea4a 0202 	orr.w	r2, sl, r2
 8018cce:	f895 a000 	ldrb.w	sl, [r5]
 8018cd2:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 8018cd6:	f82e 2b02 	strh.w	r2, [lr], #2
 8018cda:	e7d7      	b.n	8018c8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 8018cdc:	4b03      	ldr	r3, [pc, #12]	@ (8018cec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8018cde:	6818      	ldr	r0, [r3, #0]
 8018ce0:	6803      	ldr	r3, [r0, #0]
 8018ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ce4:	4798      	blx	r3
 8018ce6:	b013      	add	sp, #76	@ 0x4c
 8018ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cec:	2400aa84 	.word	0x2400aa84
 8018cf0:	2400aa7e 	.word	0x2400aa7e
 8018cf4:	fffff800 	.word	0xfffff800

08018cf8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8018cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cfc:	b09d      	sub	sp, #116	@ 0x74
 8018cfe:	461c      	mov	r4, r3
 8018d00:	4683      	mov	fp, r0
 8018d02:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018d04:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 8018d08:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8018d0c:	920e      	str	r2, [sp, #56]	@ 0x38
 8018d0e:	2a00      	cmp	r2, #0
 8018d10:	f000 81e4 	beq.w	80190dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 8018d14:	6820      	ldr	r0, [r4, #0]
 8018d16:	aa18      	add	r2, sp, #96	@ 0x60
 8018d18:	6861      	ldr	r1, [r4, #4]
 8018d1a:	c203      	stmia	r2!, {r0, r1}
 8018d1c:	6818      	ldr	r0, [r3, #0]
 8018d1e:	aa1a      	add	r2, sp, #104	@ 0x68
 8018d20:	6859      	ldr	r1, [r3, #4]
 8018d22:	c203      	stmia	r2!, {r0, r1}
 8018d24:	a818      	add	r0, sp, #96	@ 0x60
 8018d26:	f7f8 fe5f 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018d2a:	4621      	mov	r1, r4
 8018d2c:	a81a      	add	r0, sp, #104	@ 0x68
 8018d2e:	f7f8 fe83 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018d32:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8018d36:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 8018d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018d3e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8018d42:	bfdb      	ittet	le
 8018d44:	b29a      	uxthle	r2, r3
 8018d46:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018d4a:	2201      	movgt	r2, #1
 8018d4c:	fb91 f2f2 	sdivle	r2, r1, r2
 8018d50:	9202      	str	r2, [sp, #8]
 8018d52:	9802      	ldr	r0, [sp, #8]
 8018d54:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8018d58:	9902      	ldr	r1, [sp, #8]
 8018d5a:	fb92 f0f0 	sdiv	r0, r2, r0
 8018d5e:	b280      	uxth	r0, r0
 8018d60:	440c      	add	r4, r1
 8018d62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018d64:	3c01      	subs	r4, #1
 8018d66:	9802      	ldr	r0, [sp, #8]
 8018d68:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018d6a:	fb05 2510 	mls	r5, r5, r0, r2
 8018d6e:	fb94 f4f1 	sdiv	r4, r4, r1
 8018d72:	fb15 f503 	smulbb	r5, r5, r3
 8018d76:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8018d7a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8018d7e:	3401      	adds	r4, #1
 8018d80:	440d      	add	r5, r1
 8018d82:	4419      	add	r1, r3
 8018d84:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8018d88:	b2a4      	uxth	r4, r4
 8018d8a:	441a      	add	r2, r3
 8018d8c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8018d90:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8018d94:	00a4      	lsls	r4, r4, #2
 8018d96:	9306      	str	r3, [sp, #24]
 8018d98:	b2ad      	uxth	r5, r5
 8018d9a:	4bb3      	ldr	r3, [pc, #716]	@ (8019068 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8018d9c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8018da0:	6818      	ldr	r0, [r3, #0]
 8018da2:	6803      	ldr	r3, [r0, #0]
 8018da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018da6:	4798      	blx	r3
 8018da8:	4bb0      	ldr	r3, [pc, #704]	@ (801906c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8018daa:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8018dae:	2d00      	cmp	r5, #0
 8018db0:	881a      	ldrh	r2, [r3, #0]
 8018db2:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8018db6:	fb02 f606 	mul.w	r6, r2, r6
 8018dba:	fb02 7101 	mla	r1, r2, r1, r7
 8018dbe:	9316      	str	r3, [sp, #88]	@ 0x58
 8018dc0:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8018dc4:	4baa      	ldr	r3, [pc, #680]	@ (8019070 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 8018dc6:	bf18      	it	ne
 8018dc8:	2100      	movne	r1, #0
 8018dca:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8018dce:	eba3 030b 	sub.w	r3, r3, fp
 8018dd2:	920a      	str	r2, [sp, #40]	@ 0x28
 8018dd4:	f104 0204 	add.w	r2, r4, #4
 8018dd8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018dda:	9213      	str	r2, [sp, #76]	@ 0x4c
 8018ddc:	9a06      	ldr	r2, [sp, #24]
 8018dde:	bf08      	it	eq
 8018de0:	4611      	moveq	r1, r2
 8018de2:	2200      	movs	r2, #0
 8018de4:	b289      	uxth	r1, r1
 8018de6:	920d      	str	r2, [sp, #52]	@ 0x34
 8018de8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018dec:	fa12 f383 	uxtah	r3, r2, r3
 8018df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018df6:	3304      	adds	r3, #4
 8018df8:	9308      	str	r3, [sp, #32]
 8018dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018dfc:	4543      	cmp	r3, r8
 8018dfe:	f240 8168 	bls.w	80190d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 8018e02:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8018e06:	f04f 0e01 	mov.w	lr, #1
 8018e0a:	9a02      	ldr	r2, [sp, #8]
 8018e0c:	9808      	ldr	r0, [sp, #32]
 8018e0e:	fbb5 f3f3 	udiv	r3, r5, r3
 8018e12:	1ad3      	subs	r3, r2, r3
 8018e14:	7800      	ldrb	r0, [r0, #0]
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	9010      	str	r0, [sp, #64]	@ 0x40
 8018e1a:	3001      	adds	r0, #1
 8018e1c:	9314      	str	r3, [sp, #80]	@ 0x50
 8018e1e:	9b08      	ldr	r3, [sp, #32]
 8018e20:	9007      	str	r0, [sp, #28]
 8018e22:	785a      	ldrb	r2, [r3, #1]
 8018e24:	789b      	ldrb	r3, [r3, #2]
 8018e26:	021b      	lsls	r3, r3, #8
 8018e28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e2c:	9a08      	ldr	r2, [sp, #32]
 8018e2e:	78d2      	ldrb	r2, [r2, #3]
 8018e30:	4313      	orrs	r3, r2
 8018e32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018e34:	441a      	add	r2, r3
 8018e36:	1c50      	adds	r0, r2, #1
 8018e38:	7852      	ldrb	r2, [r2, #1]
 8018e3a:	9005      	str	r0, [sp, #20]
 8018e3c:	0212      	lsls	r2, r2, #8
 8018e3e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018e40:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8018e44:	5cc3      	ldrb	r3, [r0, r3]
 8018e46:	431a      	orrs	r2, r3
 8018e48:	b293      	uxth	r3, r2
 8018e4a:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 8018e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018e50:	2300      	movs	r3, #0
 8018e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e54:	2301      	movs	r3, #1
 8018e56:	9301      	str	r3, [sp, #4]
 8018e58:	9304      	str	r3, [sp, #16]
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	9303      	str	r3, [sp, #12]
 8018e5e:	2d00      	cmp	r5, #0
 8018e60:	d07d      	beq.n	8018f5e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8018e62:	45ae      	cmp	lr, r5
 8018e64:	d26c      	bcs.n	8018f40 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 8018e66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018e68:	eba5 050e 	sub.w	r5, r5, lr
 8018e6c:	460c      	mov	r4, r1
 8018e6e:	4543      	cmp	r3, r8
 8018e70:	b2ad      	uxth	r5, r5
 8018e72:	d802      	bhi.n	8018e7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8018e74:	e071      	b.n	8018f5a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d15d      	bne.n	8018f36 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 8018e7a:	9b05      	ldr	r3, [sp, #20]
 8018e7c:	9a04      	ldr	r2, [sp, #16]
 8018e7e:	785b      	ldrb	r3, [r3, #1]
 8018e80:	f1c2 0207 	rsb	r2, r2, #7
 8018e84:	9904      	ldr	r1, [sp, #16]
 8018e86:	4093      	lsls	r3, r2
 8018e88:	005b      	lsls	r3, r3, #1
 8018e8a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018e8e:	9b05      	ldr	r3, [sp, #20]
 8018e90:	781b      	ldrb	r3, [r3, #0]
 8018e92:	410b      	asrs	r3, r1
 8018e94:	3101      	adds	r1, #1
 8018e96:	b2c9      	uxtb	r1, r1
 8018e98:	b2db      	uxtb	r3, r3
 8018e9a:	2908      	cmp	r1, #8
 8018e9c:	9104      	str	r1, [sp, #16]
 8018e9e:	9905      	ldr	r1, [sp, #20]
 8018ea0:	ea43 0302 	orr.w	r3, r3, r2
 8018ea4:	bf0c      	ite	eq
 8018ea6:	3102      	addeq	r1, #2
 8018ea8:	3101      	addne	r1, #1
 8018eaa:	b29a      	uxth	r2, r3
 8018eac:	bf05      	ittet	eq
 8018eae:	9105      	streq	r1, [sp, #20]
 8018eb0:	2100      	moveq	r1, #0
 8018eb2:	9105      	strne	r1, [sp, #20]
 8018eb4:	9104      	streq	r1, [sp, #16]
 8018eb6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018eb8:	4291      	cmp	r1, r2
 8018eba:	d30a      	bcc.n	8018ed2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 8018ebc:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	9907      	ldr	r1, [sp, #28]
 8018ec4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018ec8:	d30f      	bcc.n	8018eea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8018eca:	2100      	movs	r1, #0
 8018ecc:	9301      	str	r3, [sp, #4]
 8018ece:	9103      	str	r1, [sp, #12]
 8018ed0:	e032      	b.n	8018f38 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 8018ed2:	9b07      	ldr	r3, [sp, #28]
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d318      	bcc.n	8018f0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 8018ed8:	9b01      	ldr	r3, [sp, #4]
 8018eda:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 8018ede:	445b      	add	r3, fp
 8018ee0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8018ee4:	9b01      	ldr	r3, [sp, #4]
 8018ee6:	3301      	adds	r3, #1
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	9907      	ldr	r1, [sp, #28]
 8018eec:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 8018ef0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8018ef4:	7108      	strb	r0, [r1, #4]
 8018ef6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8018ef8:	80c8      	strh	r0, [r1, #6]
 8018efa:	9801      	ldr	r0, [sp, #4]
 8018efc:	3001      	adds	r0, #1
 8018efe:	7148      	strb	r0, [r1, #5]
 8018f00:	9907      	ldr	r1, [sp, #28]
 8018f02:	3101      	adds	r1, #1
 8018f04:	b289      	uxth	r1, r1
 8018f06:	9107      	str	r1, [sp, #28]
 8018f08:	e7df      	b.n	8018eca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8018f0a:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8018f0e:	4611      	mov	r1, r2
 8018f10:	795b      	ldrb	r3, [r3, #5]
 8018f12:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 8018f16:	4458      	add	r0, fp
 8018f18:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8018f1a:	4406      	add	r6, r0
 8018f1c:	2e00      	cmp	r6, #0
 8018f1e:	dd06      	ble.n	8018f2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8018f20:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8018f24:	790e      	ldrb	r6, [r1, #4]
 8018f26:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8018f2a:	88c9      	ldrh	r1, [r1, #6]
 8018f2c:	e7f4      	b.n	8018f18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 8018f2e:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 8018f32:	b29b      	uxth	r3, r3
 8018f34:	e7c5      	b.n	8018ec2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 8018f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f38:	4621      	mov	r1, r4
 8018f3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018f3c:	469e      	mov	lr, r3
 8018f3e:	e78e      	b.n	8018e5e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 8018f40:	9a03      	ldr	r2, [sp, #12]
 8018f42:	ebae 0305 	sub.w	r3, lr, r5
 8018f46:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8018f4a:	442a      	add	r2, r5
 8018f4c:	b29b      	uxth	r3, r3
 8018f4e:	b292      	uxth	r2, r2
 8018f50:	9203      	str	r2, [sp, #12]
 8018f52:	2500      	movs	r5, #0
 8018f54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f56:	4542      	cmp	r2, r8
 8018f58:	d88d      	bhi.n	8018e76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 8018f5a:	4621      	mov	r1, r4
 8018f5c:	e74d      	b.n	8018dfa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 8018f5e:	458e      	cmp	lr, r1
 8018f60:	f04f 0900 	mov.w	r9, #0
 8018f64:	bf2b      	itete	cs
 8018f66:	ebae 0301 	subcs.w	r3, lr, r1
 8018f6a:	eba1 040e 	subcc.w	r4, r1, lr
 8018f6e:	462c      	movcs	r4, r5
 8018f70:	462b      	movcc	r3, r5
 8018f72:	bf27      	ittee	cs
 8018f74:	b29b      	uxthcs	r3, r3
 8018f76:	910c      	strcs	r1, [sp, #48]	@ 0x30
 8018f78:	b2a4      	uxthcc	r4, r4
 8018f7a:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8018f7e:	9a03      	ldr	r2, [sp, #12]
 8018f80:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018f82:	444a      	add	r2, r9
 8018f84:	4548      	cmp	r0, r9
 8018f86:	b292      	uxth	r2, r2
 8018f88:	d074      	beq.n	8019074 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 8018f8a:	2004      	movs	r0, #4
 8018f8c:	445a      	add	r2, fp
 8018f8e:	4605      	mov	r5, r0
 8018f90:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8018f94:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8018f96:	fb15 0202 	smlabb	r2, r5, r2, r0
 8018f9a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018f9c:	5880      	ldr	r0, [r0, r2]
 8018f9e:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8018fa2:	d014      	beq.n	8018fce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8018fa4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8018fa8:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8018fac:	d112      	bne.n	8018fd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 8018fae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018fb0:	2aff      	cmp	r2, #255	@ 0xff
 8018fb2:	d10f      	bne.n	8018fd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 8018fb4:	0942      	lsrs	r2, r0, #5
 8018fb6:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8018fba:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018fbe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8018fc2:	f025 0507 	bic.w	r5, r5, #7
 8018fc6:	4315      	orrs	r5, r2
 8018fc8:	4305      	orrs	r5, r0
 8018fca:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8018fce:	f109 0901 	add.w	r9, r9, #1
 8018fd2:	e7d4      	b.n	8018f7e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 8018fd4:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 8018fd8:	b2ed      	uxtb	r5, r5
 8018fda:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018fde:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018fe2:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8018fe6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018fea:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018fee:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8018ff2:	9215      	str	r2, [sp, #84]	@ 0x54
 8018ff4:	fa5f fc8c 	uxtb.w	ip, ip
 8018ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ffa:	b2c0      	uxtb	r0, r0
 8018ffc:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8019000:	fb02 fa0a 	mul.w	sl, r2, sl
 8019004:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8019008:	f10a 0201 	add.w	r2, sl, #1
 801900c:	eb02 222a 	add.w	r2, r2, sl, asr #8
 8019010:	1212      	asrs	r2, r2, #8
 8019012:	fa1f fa82 	uxth.w	sl, r2
 8019016:	43d2      	mvns	r2, r2
 8019018:	fb16 f60a 	smulbb	r6, r6, sl
 801901c:	b2d2      	uxtb	r2, r2
 801901e:	fb10 f00a 	smulbb	r0, r0, sl
 8019022:	fb07 6702 	mla	r7, r7, r2, r6
 8019026:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8019028:	fb0c 0002 	mla	r0, ip, r2, r0
 801902c:	fb15 f50a 	smulbb	r5, r5, sl
 8019030:	b2bf      	uxth	r7, r7
 8019032:	b280      	uxth	r0, r0
 8019034:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019038:	fb06 5602 	mla	r6, r6, r2, r5
 801903c:	1c7a      	adds	r2, r7, #1
 801903e:	1c45      	adds	r5, r0, #1
 8019040:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019044:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019048:	b2b6      	uxth	r6, r6
 801904a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801904e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019052:	432f      	orrs	r7, r5
 8019054:	1c75      	adds	r5, r6, #1
 8019056:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801905a:	096d      	lsrs	r5, r5, #5
 801905c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8019060:	432f      	orrs	r7, r5
 8019062:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8019066:	e7b2      	b.n	8018fce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8019068:	2400aa84 	.word	0x2400aa84
 801906c:	2400aa7e 	.word	0x2400aa7e
 8019070:	fffff7fb 	.word	0xfffff7fb
 8019074:	9203      	str	r2, [sp, #12]
 8019076:	458e      	cmp	lr, r1
 8019078:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801907a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801907e:	f4ff af68 	bcc.w	8018f52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8019082:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019084:	9906      	ldr	r1, [sp, #24]
 8019086:	8812      	ldrh	r2, [r2, #0]
 8019088:	1a52      	subs	r2, r2, r1
 801908a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801908c:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8019090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019092:	3201      	adds	r2, #1
 8019094:	428a      	cmp	r2, r1
 8019096:	9209      	str	r2, [sp, #36]	@ 0x24
 8019098:	d111      	bne.n	80190be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801909a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801909e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 80190a2:	9b06      	ldr	r3, [sp, #24]
 80190a4:	eba5 0509 	sub.w	r5, r5, r9
 80190a8:	b2ad      	uxth	r5, r5
 80190aa:	2d00      	cmp	r5, #0
 80190ac:	bf08      	it	eq
 80190ae:	4619      	moveq	r1, r3
 80190b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190b2:	bf18      	it	ne
 80190b4:	2100      	movne	r1, #0
 80190b6:	3301      	adds	r3, #1
 80190b8:	b289      	uxth	r1, r1
 80190ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80190bc:	e694      	b.n	8018de8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 80190be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80190c2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80190c6:	1b2d      	subs	r5, r5, r4
 80190c8:	b2ad      	uxth	r5, r5
 80190ca:	2d00      	cmp	r5, #0
 80190cc:	bf18      	it	ne
 80190ce:	2400      	movne	r4, #0
 80190d0:	e740      	b.n	8018f54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 80190d2:	4b04      	ldr	r3, [pc, #16]	@ (80190e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 80190d4:	6818      	ldr	r0, [r3, #0]
 80190d6:	6803      	ldr	r3, [r0, #0]
 80190d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80190da:	4798      	blx	r3
 80190dc:	b01d      	add	sp, #116	@ 0x74
 80190de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e2:	bf00      	nop
 80190e4:	2400aa84 	.word	0x2400aa84

080190e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80190e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ec:	b09f      	sub	sp, #124	@ 0x7c
 80190ee:	461d      	mov	r5, r3
 80190f0:	4604      	mov	r4, r0
 80190f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80190f4:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 80190f8:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 80190fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80190fe:	2a00      	cmp	r2, #0
 8019100:	f000 81fe 	beq.w	8019500 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 8019104:	6828      	ldr	r0, [r5, #0]
 8019106:	aa1a      	add	r2, sp, #104	@ 0x68
 8019108:	6869      	ldr	r1, [r5, #4]
 801910a:	c203      	stmia	r2!, {r0, r1}
 801910c:	6818      	ldr	r0, [r3, #0]
 801910e:	aa1c      	add	r2, sp, #112	@ 0x70
 8019110:	6859      	ldr	r1, [r3, #4]
 8019112:	c203      	stmia	r2!, {r0, r1}
 8019114:	a81a      	add	r0, sp, #104	@ 0x68
 8019116:	f7f8 fc67 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801911a:	4629      	mov	r1, r5
 801911c:	a81c      	add	r0, sp, #112	@ 0x70
 801911e:	f7f8 fc8b 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019122:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019126:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801912a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801912e:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 8019132:	bfdb      	ittet	le
 8019134:	b29a      	uxthle	r2, r3
 8019136:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801913a:	2201      	movgt	r2, #1
 801913c:	fb91 f2f2 	sdivle	r2, r1, r2
 8019140:	9201      	str	r2, [sp, #4]
 8019142:	9801      	ldr	r0, [sp, #4]
 8019144:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8019148:	9901      	ldr	r1, [sp, #4]
 801914a:	fb92 f0f0 	sdiv	r0, r2, r0
 801914e:	b280      	uxth	r0, r0
 8019150:	440e      	add	r6, r1
 8019152:	9010      	str	r0, [sp, #64]	@ 0x40
 8019154:	3e01      	subs	r6, #1
 8019156:	9801      	ldr	r0, [sp, #4]
 8019158:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801915a:	fb05 2510 	mls	r5, r5, r0, r2
 801915e:	fb96 f6f1 	sdiv	r6, r6, r1
 8019162:	fb15 f503 	smulbb	r5, r5, r3
 8019166:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801916a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801916e:	3601      	adds	r6, #1
 8019170:	440d      	add	r5, r1
 8019172:	4419      	add	r1, r3
 8019174:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8019178:	b2b6      	uxth	r6, r6
 801917a:	441a      	add	r2, r3
 801917c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8019180:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8019184:	b2ad      	uxth	r5, r5
 8019186:	9304      	str	r3, [sp, #16]
 8019188:	4b96      	ldr	r3, [pc, #600]	@ (80193e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801918a:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801918e:	6818      	ldr	r0, [r3, #0]
 8019190:	6803      	ldr	r3, [r0, #0]
 8019192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019194:	4798      	blx	r3
 8019196:	4b94      	ldr	r3, [pc, #592]	@ (80193e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 8019198:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801919c:	2d00      	cmp	r5, #0
 801919e:	881a      	ldrh	r2, [r3, #0]
 80191a0:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 80191a4:	fb02 f707 	mul.w	r7, r2, r7
 80191a8:	fb02 c101 	mla	r1, r2, r1, ip
 80191ac:	9318      	str	r3, [sp, #96]	@ 0x60
 80191ae:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 80191b2:	4b8e      	ldr	r3, [pc, #568]	@ (80193ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 80191b4:	bf18      	it	ne
 80191b6:	2100      	movne	r1, #0
 80191b8:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 80191bc:	eba3 0304 	sub.w	r3, r3, r4
 80191c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80191c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80191c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80191c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80191ca:	f106 0204 	add.w	r2, r6, #4
 80191ce:	9206      	str	r2, [sp, #24]
 80191d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80191d2:	ea6f 0202 	mvn.w	r2, r2
 80191d6:	b2d2      	uxtb	r2, r2
 80191d8:	9215      	str	r2, [sp, #84]	@ 0x54
 80191da:	9a04      	ldr	r2, [sp, #16]
 80191dc:	bf08      	it	eq
 80191de:	4611      	moveq	r1, r2
 80191e0:	2200      	movs	r2, #0
 80191e2:	b289      	uxth	r1, r1
 80191e4:	920d      	str	r2, [sp, #52]	@ 0x34
 80191e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80191e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80191ea:	fa12 f383 	uxtah	r3, r2, r3
 80191ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80191f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80191f4:	3304      	adds	r3, #4
 80191f6:	9307      	str	r3, [sp, #28]
 80191f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80191fa:	455b      	cmp	r3, fp
 80191fc:	f240 817b 	bls.w	80194f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 8019200:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8019204:	f04f 0801 	mov.w	r8, #1
 8019208:	9a01      	ldr	r2, [sp, #4]
 801920a:	9807      	ldr	r0, [sp, #28]
 801920c:	46c4      	mov	ip, r8
 801920e:	f8cd 8008 	str.w	r8, [sp, #8]
 8019212:	7800      	ldrb	r0, [r0, #0]
 8019214:	fbb5 f3f3 	udiv	r3, r5, r3
 8019218:	1ad3      	subs	r3, r2, r3
 801921a:	9011      	str	r0, [sp, #68]	@ 0x44
 801921c:	3001      	adds	r0, #1
 801921e:	b29b      	uxth	r3, r3
 8019220:	9005      	str	r0, [sp, #20]
 8019222:	9316      	str	r3, [sp, #88]	@ 0x58
 8019224:	9b07      	ldr	r3, [sp, #28]
 8019226:	785a      	ldrb	r2, [r3, #1]
 8019228:	789b      	ldrb	r3, [r3, #2]
 801922a:	021b      	lsls	r3, r3, #8
 801922c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019230:	9a07      	ldr	r2, [sp, #28]
 8019232:	78d2      	ldrb	r2, [r2, #3]
 8019234:	4313      	orrs	r3, r2
 8019236:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019238:	441a      	add	r2, r3
 801923a:	1c50      	adds	r0, r2, #1
 801923c:	7852      	ldrb	r2, [r2, #1]
 801923e:	9003      	str	r0, [sp, #12]
 8019240:	0212      	lsls	r2, r2, #8
 8019242:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019244:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8019248:	5cc3      	ldrb	r3, [r0, r3]
 801924a:	431a      	orrs	r2, r3
 801924c:	b293      	uxth	r3, r2
 801924e:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019252:	930c      	str	r3, [sp, #48]	@ 0x30
 8019254:	2300      	movs	r3, #0
 8019256:	9308      	str	r3, [sp, #32]
 8019258:	461a      	mov	r2, r3
 801925a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801925e:	930e      	str	r3, [sp, #56]	@ 0x38
 8019260:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8019264:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019266:	2d00      	cmp	r5, #0
 8019268:	d07d      	beq.n	8019366 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801926a:	45ac      	cmp	ip, r5
 801926c:	d26d      	bcs.n	801934a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801926e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019270:	eba5 050c 	sub.w	r5, r5, ip
 8019274:	4608      	mov	r0, r1
 8019276:	455b      	cmp	r3, fp
 8019278:	b2ad      	uxth	r5, r5
 801927a:	d802      	bhi.n	8019282 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801927c:	e071      	b.n	8019362 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801927e:	2b00      	cmp	r3, #0
 8019280:	d15d      	bne.n	801933e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8019282:	9b03      	ldr	r3, [sp, #12]
 8019284:	9a02      	ldr	r2, [sp, #8]
 8019286:	785b      	ldrb	r3, [r3, #1]
 8019288:	f1c2 0207 	rsb	r2, r2, #7
 801928c:	9902      	ldr	r1, [sp, #8]
 801928e:	4093      	lsls	r3, r2
 8019290:	005b      	lsls	r3, r3, #1
 8019292:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019296:	9b03      	ldr	r3, [sp, #12]
 8019298:	781b      	ldrb	r3, [r3, #0]
 801929a:	410b      	asrs	r3, r1
 801929c:	3101      	adds	r1, #1
 801929e:	b2c9      	uxtb	r1, r1
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	2908      	cmp	r1, #8
 80192a4:	9102      	str	r1, [sp, #8]
 80192a6:	9903      	ldr	r1, [sp, #12]
 80192a8:	ea43 0302 	orr.w	r3, r3, r2
 80192ac:	bf0c      	ite	eq
 80192ae:	3102      	addeq	r1, #2
 80192b0:	3101      	addne	r1, #1
 80192b2:	b29a      	uxth	r2, r3
 80192b4:	bf05      	ittet	eq
 80192b6:	9103      	streq	r1, [sp, #12]
 80192b8:	2100      	moveq	r1, #0
 80192ba:	9103      	strne	r1, [sp, #12]
 80192bc:	9102      	streq	r1, [sp, #8]
 80192be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80192c0:	4291      	cmp	r1, r2
 80192c2:	d30a      	bcc.n	80192da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 80192c4:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80192c8:	2301      	movs	r3, #1
 80192ca:	9905      	ldr	r1, [sp, #20]
 80192cc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80192d0:	d30f      	bcc.n	80192f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 80192d2:	2100      	movs	r1, #0
 80192d4:	4698      	mov	r8, r3
 80192d6:	9100      	str	r1, [sp, #0]
 80192d8:	e032      	b.n	8019340 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 80192da:	9b05      	ldr	r3, [sp, #20]
 80192dc:	429a      	cmp	r2, r3
 80192de:	d318      	bcc.n	8019312 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 80192e0:	eb04 0308 	add.w	r3, r4, r8
 80192e4:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80192e8:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80192ec:	f108 0301 	add.w	r3, r8, #1
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	9905      	ldr	r1, [sp, #20]
 80192f4:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80192f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80192fc:	710e      	strb	r6, [r1, #4]
 80192fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019300:	80ce      	strh	r6, [r1, #6]
 8019302:	f108 0601 	add.w	r6, r8, #1
 8019306:	714e      	strb	r6, [r1, #5]
 8019308:	9905      	ldr	r1, [sp, #20]
 801930a:	3101      	adds	r1, #1
 801930c:	b289      	uxth	r1, r1
 801930e:	9105      	str	r1, [sp, #20]
 8019310:	e7df      	b.n	80192d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8019312:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019316:	4611      	mov	r1, r2
 8019318:	795b      	ldrb	r3, [r3, #5]
 801931a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801931e:	4426      	add	r6, r4
 8019320:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8019322:	4437      	add	r7, r6
 8019324:	2f00      	cmp	r7, #0
 8019326:	dd06      	ble.n	8019336 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 8019328:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801932c:	790f      	ldrb	r7, [r1, #4]
 801932e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019332:	88c9      	ldrh	r1, [r1, #6]
 8019334:	e7f4      	b.n	8019320 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8019336:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801933a:	b29b      	uxth	r3, r3
 801933c:	e7c5      	b.n	80192ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801933e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019340:	920c      	str	r2, [sp, #48]	@ 0x30
 8019342:	4601      	mov	r1, r0
 8019344:	9a00      	ldr	r2, [sp, #0]
 8019346:	469c      	mov	ip, r3
 8019348:	e78d      	b.n	8019266 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801934a:	ebac 0305 	sub.w	r3, ip, r5
 801934e:	1957      	adds	r7, r2, r5
 8019350:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019354:	b2ba      	uxth	r2, r7
 8019356:	b29b      	uxth	r3, r3
 8019358:	9200      	str	r2, [sp, #0]
 801935a:	2500      	movs	r5, #0
 801935c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801935e:	455a      	cmp	r2, fp
 8019360:	d88d      	bhi.n	801927e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8019362:	4601      	mov	r1, r0
 8019364:	e748      	b.n	80191f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 8019366:	458c      	cmp	ip, r1
 8019368:	bf27      	ittee	cs
 801936a:	ebac 0301 	subcs.w	r3, ip, r1
 801936e:	4628      	movcs	r0, r5
 8019370:	eba1 000c 	subcc.w	r0, r1, ip
 8019374:	462b      	movcc	r3, r5
 8019376:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019378:	bf27      	ittee	cs
 801937a:	b29b      	uxthcs	r3, r3
 801937c:	9109      	strcs	r1, [sp, #36]	@ 0x24
 801937e:	b280      	uxthcc	r0, r0
 8019380:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8019384:	2dff      	cmp	r5, #255	@ 0xff
 8019386:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019388:	eb02 0705 	add.w	r7, r2, r5
 801938c:	b2bd      	uxth	r5, r7
 801938e:	9500      	str	r5, [sp, #0]
 8019390:	d12e      	bne.n	80193f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 8019392:	465e      	mov	r6, fp
 8019394:	9d00      	ldr	r5, [sp, #0]
 8019396:	42aa      	cmp	r2, r5
 8019398:	f040 8083 	bne.w	80194a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801939c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801939e:	458c      	cmp	ip, r1
 80193a0:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 80193a4:	d3d9      	bcc.n	801935a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 80193a6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80193a8:	9904      	ldr	r1, [sp, #16]
 80193aa:	8812      	ldrh	r2, [r2, #0]
 80193ac:	1a52      	subs	r2, r2, r1
 80193ae:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80193b0:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 80193b4:	9a08      	ldr	r2, [sp, #32]
 80193b6:	3201      	adds	r2, #1
 80193b8:	428a      	cmp	r2, r1
 80193ba:	9208      	str	r2, [sp, #32]
 80193bc:	f040 8091 	bne.w	80194e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 80193c0:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 80193c4:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 80193c8:	9b04      	ldr	r3, [sp, #16]
 80193ca:	eba5 050c 	sub.w	r5, r5, ip
 80193ce:	b2ad      	uxth	r5, r5
 80193d0:	2d00      	cmp	r5, #0
 80193d2:	bf08      	it	eq
 80193d4:	4619      	moveq	r1, r3
 80193d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80193d8:	bf18      	it	ne
 80193da:	2100      	movne	r1, #0
 80193dc:	3301      	adds	r3, #1
 80193de:	b289      	uxth	r1, r1
 80193e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80193e2:	e700      	b.n	80191e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 80193e4:	2400aa84 	.word	0x2400aa84
 80193e8:	2400aa7e 	.word	0x2400aa7e
 80193ec:	fffff7fb 	.word	0xfffff7fb
 80193f0:	46d9      	mov	r9, fp
 80193f2:	9d00      	ldr	r5, [sp, #0]
 80193f4:	42aa      	cmp	r2, r5
 80193f6:	d0d1      	beq.n	801939c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 80193f8:	1c55      	adds	r5, r2, #1
 80193fa:	4422      	add	r2, r4
 80193fc:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 8019400:	9a06      	ldr	r2, [sp, #24]
 8019402:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019406:	9517      	str	r5, [sp, #92]	@ 0x5c
 8019408:	4472      	add	r2, lr
 801940a:	9212      	str	r2, [sp, #72]	@ 0x48
 801940c:	f8b9 2000 	ldrh.w	r2, [r9]
 8019410:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019412:	1216      	asrs	r6, r2, #8
 8019414:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019418:	10d5      	asrs	r5, r2, #3
 801941a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801941c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8019420:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8019424:	00d2      	lsls	r2, r2, #3
 8019426:	fb1a fa07 	smulbb	sl, sl, r7
 801942a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801942e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019430:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019434:	b2d2      	uxtb	r2, r2
 8019436:	fb06 a607 	mla	r6, r6, r7, sl
 801943a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801943c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019440:	f897 a001 	ldrb.w	sl, [r7, #1]
 8019444:	b2b6      	uxth	r6, r6
 8019446:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8019448:	fb1a fa07 	smulbb	sl, sl, r7
 801944c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801944e:	fb05 a507 	mla	r5, r5, r7, sl
 8019452:	9f06      	ldr	r7, [sp, #24]
 8019454:	f106 0a01 	add.w	sl, r6, #1
 8019458:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801945c:	b2ad      	uxth	r5, r5
 801945e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8019460:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8019464:	f105 0a01 	add.w	sl, r5, #1
 8019468:	fb1e fe07 	smulbb	lr, lr, r7
 801946c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801946e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019472:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8019476:	fb02 e207 	mla	r2, r2, r7, lr
 801947a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801947e:	b292      	uxth	r2, r2
 8019480:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8019484:	f102 0e01 	add.w	lr, r2, #1
 8019488:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801948c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8019490:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019494:	ea4e 0606 	orr.w	r6, lr, r6
 8019498:	ea46 060a 	orr.w	r6, r6, sl
 801949c:	f829 6b02 	strh.w	r6, [r9], #2
 80194a0:	e7a7      	b.n	80193f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 80194a2:	f102 0e01 	add.w	lr, r2, #1
 80194a6:	4422      	add	r2, r4
 80194a8:	9f06      	ldr	r7, [sp, #24]
 80194aa:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 80194ae:	9a06      	ldr	r2, [sp, #24]
 80194b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194b4:	eb02 0a05 	add.w	sl, r2, r5
 80194b8:	4a13      	ldr	r2, [pc, #76]	@ (8019508 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 80194ba:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80194be:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 80194c2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80194c6:	00d2      	lsls	r2, r2, #3
 80194c8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80194cc:	ea49 0202 	orr.w	r2, r9, r2
 80194d0:	f817 9005 	ldrb.w	r9, [r7, r5]
 80194d4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80194d8:	f826 2b02 	strh.w	r2, [r6], #2
 80194dc:	fa1f f28e 	uxth.w	r2, lr
 80194e0:	e758      	b.n	8019394 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 80194e2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80194e6:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80194ea:	1a2d      	subs	r5, r5, r0
 80194ec:	b2ad      	uxth	r5, r5
 80194ee:	2d00      	cmp	r5, #0
 80194f0:	bf18      	it	ne
 80194f2:	2000      	movne	r0, #0
 80194f4:	e732      	b.n	801935c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 80194f6:	4b05      	ldr	r3, [pc, #20]	@ (801950c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 80194f8:	6818      	ldr	r0, [r3, #0]
 80194fa:	6803      	ldr	r3, [r0, #0]
 80194fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194fe:	4798      	blx	r3
 8019500:	b01f      	add	sp, #124	@ 0x7c
 8019502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019506:	bf00      	nop
 8019508:	fffff800 	.word	0xfffff800
 801950c:	2400aa84 	.word	0x2400aa84

08019510 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019514:	b091      	sub	sp, #68	@ 0x44
 8019516:	469b      	mov	fp, r3
 8019518:	4616      	mov	r6, r2
 801951a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801951e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8019522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019526:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801952a:	4604      	mov	r4, r0
 801952c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8019530:	4640      	mov	r0, r8
 8019532:	460d      	mov	r5, r1
 8019534:	4659      	mov	r1, fp
 8019536:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801953a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801953e:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8019542:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8019546:	f7f5 f861 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 801954a:	4631      	mov	r1, r6
 801954c:	4640      	mov	r0, r8
 801954e:	f7f5 f85d 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 8019552:	4b74      	ldr	r3, [pc, #464]	@ (8019724 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8019554:	8818      	ldrh	r0, [r3, #0]
 8019556:	4b74      	ldr	r3, [pc, #464]	@ (8019728 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8019558:	b202      	sxth	r2, r0
 801955a:	8819      	ldrh	r1, [r3, #0]
 801955c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8019560:	b20e      	sxth	r6, r1
 8019562:	2b00      	cmp	r3, #0
 8019564:	da07      	bge.n	8019576 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8019566:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801956a:	4463      	add	r3, ip
 801956c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019570:	2300      	movs	r3, #0
 8019572:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8019576:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801957a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801957e:	1ad2      	subs	r2, r2, r3
 8019580:	4594      	cmp	ip, r2
 8019582:	bfc4      	itt	gt
 8019584:	1ac2      	subgt	r2, r0, r3
 8019586:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801958a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801958e:	2a00      	cmp	r2, #0
 8019590:	da07      	bge.n	80195a2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8019592:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8019596:	4462      	add	r2, ip
 8019598:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801959c:	2200      	movs	r2, #0
 801959e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80195a2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 80195a6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80195aa:	eba6 060a 	sub.w	r6, r6, sl
 80195ae:	42b2      	cmp	r2, r6
 80195b0:	bfc4      	itt	gt
 80195b2:	eba1 020a 	subgt.w	r2, r1, sl
 80195b6:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 80195ba:	4a5c      	ldr	r2, [pc, #368]	@ (801972c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80195bc:	7812      	ldrb	r2, [r2, #0]
 80195be:	b9a2      	cbnz	r2, 80195ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80195c0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80195c4:	4286      	cmp	r6, r0
 80195c6:	4640      	mov	r0, r8
 80195c8:	9303      	str	r3, [sp, #12]
 80195ca:	bf14      	ite	ne
 80195cc:	2600      	movne	r6, #0
 80195ce:	2601      	moveq	r6, #1
 80195d0:	f7f5 f85f 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 80195d4:	9b03      	ldr	r3, [sp, #12]
 80195d6:	b160      	cbz	r0, 80195f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80195d8:	2300      	movs	r3, #0
 80195da:	8023      	strh	r3, [r4, #0]
 80195dc:	8063      	strh	r3, [r4, #2]
 80195de:	80a3      	strh	r3, [r4, #4]
 80195e0:	4620      	mov	r0, r4
 80195e2:	80e3      	strh	r3, [r4, #6]
 80195e4:	b011      	add	sp, #68	@ 0x44
 80195e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ea:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80195ee:	428e      	cmp	r6, r1
 80195f0:	e7e9      	b.n	80195c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80195f2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80195f6:	a90e      	add	r1, sp, #56	@ 0x38
 80195f8:	900e      	str	r0, [sp, #56]	@ 0x38
 80195fa:	a80c      	add	r0, sp, #48	@ 0x30
 80195fc:	9205      	str	r2, [sp, #20]
 80195fe:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8019602:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8019606:	9206      	str	r2, [sp, #24]
 8019608:	f8bb 2000 	ldrh.w	r2, [fp]
 801960c:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8019610:	1a9b      	subs	r3, r3, r2
 8019612:	b21b      	sxth	r3, r3
 8019614:	9303      	str	r3, [sp, #12]
 8019616:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801961a:	f8df b118 	ldr.w	fp, [pc, #280]	@ 8019734 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801961e:	ebaa 0a03 	sub.w	sl, sl, r3
 8019622:	fa0f f38a 	sxth.w	r3, sl
 8019626:	9304      	str	r3, [sp, #16]
 8019628:	9b03      	ldr	r3, [sp, #12]
 801962a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801962e:	9b04      	ldr	r3, [sp, #16]
 8019630:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019634:	9b05      	ldr	r3, [sp, #20]
 8019636:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801963a:	9b06      	ldr	r3, [sp, #24]
 801963c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019640:	f7f8 f9fa 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019644:	4640      	mov	r0, r8
 8019646:	f7f8 f9cf 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801964a:	a80e      	add	r0, sp, #56	@ 0x38
 801964c:	f7f8 f9cc 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019650:	4b37      	ldr	r3, [pc, #220]	@ (8019730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8019652:	4628      	mov	r0, r5
 8019654:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8019658:	881b      	ldrh	r3, [r3, #0]
 801965a:	9307      	str	r3, [sp, #28]
 801965c:	682b      	ldr	r3, [r5, #0]
 801965e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019660:	4798      	blx	r3
 8019662:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8019666:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801966a:	4681      	mov	r9, r0
 801966c:	f8db 0000 	ldr.w	r0, [fp]
 8019670:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8019674:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019676:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801967a:	6803      	ldr	r3, [r0, #0]
 801967c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801967e:	4798      	blx	r3
 8019680:	4607      	mov	r7, r0
 8019682:	f8db 0000 	ldr.w	r0, [fp]
 8019686:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801968a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801968e:	6803      	ldr	r3, [r0, #0]
 8019690:	9109      	str	r1, [sp, #36]	@ 0x24
 8019692:	9208      	str	r2, [sp, #32]
 8019694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019696:	4798      	blx	r3
 8019698:	f010 0f01 	tst.w	r0, #1
 801969c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80196a0:	d012      	beq.n	80196c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80196a2:	f8db 0000 	ldr.w	r0, [fp]
 80196a6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80196aa:	6803      	ldr	r3, [r0, #0]
 80196ac:	9200      	str	r2, [sp, #0]
 80196ae:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80196b0:	462b      	mov	r3, r5
 80196b2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80196b6:	47b0      	blx	r6
 80196b8:	9b03      	ldr	r3, [sp, #12]
 80196ba:	8023      	strh	r3, [r4, #0]
 80196bc:	9b04      	ldr	r3, [sp, #16]
 80196be:	8063      	strh	r3, [r4, #2]
 80196c0:	9b05      	ldr	r3, [sp, #20]
 80196c2:	80a3      	strh	r3, [r4, #4]
 80196c4:	9b06      	ldr	r3, [sp, #24]
 80196c6:	e78b      	b.n	80195e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80196c8:	fb09 f202 	mul.w	r2, r9, r2
 80196cc:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 80196d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80196d4:	440f      	add	r7, r1
 80196d6:	b166      	cbz	r6, 80196f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80196d8:	9a07      	ldr	r2, [sp, #28]
 80196da:	4592      	cmp	sl, r2
 80196dc:	d109      	bne.n	80196f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80196de:	f8db 0000 	ldr.w	r0, [fp]
 80196e2:	fb09 f303 	mul.w	r3, r9, r3
 80196e6:	4629      	mov	r1, r5
 80196e8:	6802      	ldr	r2, [r0, #0]
 80196ea:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 80196ec:	463a      	mov	r2, r7
 80196ee:	47b0      	blx	r6
 80196f0:	e7e2      	b.n	80196b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80196f2:	fb0a f303 	mul.w	r3, sl, r3
 80196f6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80196fa:	f8df b038 	ldr.w	fp, [pc, #56]	@ 8019734 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80196fe:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8019702:	4545      	cmp	r5, r8
 8019704:	d2d8      	bcs.n	80196b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8019706:	f8db 0000 	ldr.w	r0, [fp]
 801970a:	4629      	mov	r1, r5
 801970c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019710:	4435      	add	r5, r6
 8019712:	6802      	ldr	r2, [r0, #0]
 8019714:	005b      	lsls	r3, r3, #1
 8019716:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801971a:	463a      	mov	r2, r7
 801971c:	47d0      	blx	sl
 801971e:	444f      	add	r7, r9
 8019720:	e7ef      	b.n	8019702 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8019722:	bf00      	nop
 8019724:	2400aa78 	.word	0x2400aa78
 8019728:	2400aa7a 	.word	0x2400aa7a
 801972c:	2400aa7c 	.word	0x2400aa7c
 8019730:	2400aa7e 	.word	0x2400aa7e
 8019734:	2400aa84 	.word	0x2400aa84

08019738 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801973a:	4606      	mov	r6, r0
 801973c:	b087      	sub	sp, #28
 801973e:	460c      	mov	r4, r1
 8019740:	4617      	mov	r7, r2
 8019742:	461d      	mov	r5, r3
 8019744:	b333      	cbz	r3, 8019794 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019746:	4608      	mov	r0, r1
 8019748:	f7f4 ffa3 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 801974c:	bb10      	cbnz	r0, 8019794 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801974e:	6820      	ldr	r0, [r4, #0]
 8019750:	ab04      	add	r3, sp, #16
 8019752:	6861      	ldr	r1, [r4, #4]
 8019754:	4c1b      	ldr	r4, [pc, #108]	@ (80197c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8019756:	c303      	stmia	r3!, {r0, r1}
 8019758:	a804      	add	r0, sp, #16
 801975a:	f7f8 f945 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801975e:	6820      	ldr	r0, [r4, #0]
 8019760:	6803      	ldr	r3, [r0, #0]
 8019762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019764:	4798      	blx	r3
 8019766:	2dff      	cmp	r5, #255	@ 0xff
 8019768:	d016      	beq.n	8019798 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801976a:	f010 0f08 	tst.w	r0, #8
 801976e:	6820      	ldr	r0, [r4, #0]
 8019770:	d015      	beq.n	801979e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019772:	2400      	movs	r4, #0
 8019774:	6801      	ldr	r1, [r0, #0]
 8019776:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801977a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801977e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8019782:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019786:	9401      	str	r4, [sp, #4]
 8019788:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801978c:	9400      	str	r4, [sp, #0]
 801978e:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8019790:	4639      	mov	r1, r7
 8019792:	47a0      	blx	r4
 8019794:	b007      	add	sp, #28
 8019796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019798:	f010 0f02 	tst.w	r0, #2
 801979c:	e7e7      	b.n	801976e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801979e:	6803      	ldr	r3, [r0, #0]
 80197a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197a2:	4798      	blx	r3
 80197a4:	4b08      	ldr	r3, [pc, #32]	@ (80197c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80197a6:	4601      	mov	r1, r0
 80197a8:	4630      	mov	r0, r6
 80197aa:	881a      	ldrh	r2, [r3, #0]
 80197ac:	6833      	ldr	r3, [r6, #0]
 80197ae:	e9cd 7500 	strd	r7, r5, [sp]
 80197b2:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80197b4:	ab04      	add	r3, sp, #16
 80197b6:	47a8      	blx	r5
 80197b8:	6820      	ldr	r0, [r4, #0]
 80197ba:	6803      	ldr	r3, [r0, #0]
 80197bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197be:	4798      	blx	r3
 80197c0:	e7e8      	b.n	8019794 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80197c2:	bf00      	nop
 80197c4:	2400aa84 	.word	0x2400aa84
 80197c8:	2400aa7e 	.word	0x2400aa7e

080197cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80197cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197d0:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 80197d4:	4688      	mov	r8, r1
 80197d6:	4614      	mov	r4, r2
 80197d8:	461d      	mov	r5, r3
 80197da:	9e08      	ldr	r6, [sp, #32]
 80197dc:	2f00      	cmp	r7, #0
 80197de:	f000 80ab 	beq.w	8019938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7f4 ff55 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 80197e8:	2800      	cmp	r0, #0
 80197ea:	f040 80a5 	bne.w	8019938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80197ee:	f9b5 1000 	ldrsh.w	r1, [r5]
 80197f2:	2fff      	cmp	r7, #255	@ 0xff
 80197f4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80197f8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80197fc:	fb04 1303 	mla	r3, r4, r3, r1
 8019800:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8019804:	eba4 0200 	sub.w	r2, r4, r0
 8019808:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801980c:	fb04 f505 	mul.w	r5, r4, r5
 8019810:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8019814:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8019818:	d04a      	beq.n	80198b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801981a:	b2bc      	uxth	r4, r7
 801981c:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8019820:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8019824:	fa5f f788 	uxtb.w	r7, r8
 8019828:	b2f3      	uxtb	r3, r6
 801982a:	0040      	lsls	r0, r0, #1
 801982c:	fb0e fe04 	mul.w	lr, lr, r4
 8019830:	4367      	muls	r7, r4
 8019832:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8019836:	4363      	muls	r3, r4
 8019838:	fa1f fc8c 	uxth.w	ip, ip
 801983c:	42a9      	cmp	r1, r5
 801983e:	d27b      	bcs.n	8019938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019840:	eb01 0900 	add.w	r9, r1, r0
 8019844:	4549      	cmp	r1, r9
 8019846:	d231      	bcs.n	80198ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8019848:	880a      	ldrh	r2, [r1, #0]
 801984a:	1214      	asrs	r4, r2, #8
 801984c:	10d6      	asrs	r6, r2, #3
 801984e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8019852:	00d2      	lsls	r2, r2, #3
 8019854:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8019858:	b2d2      	uxtb	r2, r2
 801985a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801985e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019862:	fb14 f40c 	smulbb	r4, r4, ip
 8019866:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801986a:	fb12 f20c 	smulbb	r2, r2, ip
 801986e:	fb16 f60c 	smulbb	r6, r6, ip
 8019872:	4474      	add	r4, lr
 8019874:	441a      	add	r2, r3
 8019876:	b2a4      	uxth	r4, r4
 8019878:	443e      	add	r6, r7
 801987a:	b292      	uxth	r2, r2
 801987c:	f104 0a01 	add.w	sl, r4, #1
 8019880:	b2b6      	uxth	r6, r6
 8019882:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019886:	f102 0a01 	add.w	sl, r2, #1
 801988a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801988e:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8019892:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019896:	4322      	orrs	r2, r4
 8019898:	1c74      	adds	r4, r6, #1
 801989a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801989e:	0976      	lsrs	r6, r6, #5
 80198a0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80198a4:	4332      	orrs	r2, r6
 80198a6:	f821 2b02 	strh.w	r2, [r1], #2
 80198aa:	e7cb      	b.n	8019844 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 80198ac:	4441      	add	r1, r8
 80198ae:	e7c5      	b.n	801983c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80198b0:	0973      	lsrs	r3, r6, #5
 80198b2:	4f22      	ldr	r7, [pc, #136]	@ (801993c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 80198b4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80198b8:	ea08 0707 	and.w	r7, r8, r7
 80198bc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80198c0:	433b      	orrs	r3, r7
 80198c2:	07e7      	lsls	r7, r4, #31
 80198c4:	ea43 0306 	orr.w	r3, r3, r6
 80198c8:	b29b      	uxth	r3, r3
 80198ca:	d50b      	bpl.n	80198e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 80198cc:	0040      	lsls	r0, r0, #1
 80198ce:	0052      	lsls	r2, r2, #1
 80198d0:	42a9      	cmp	r1, r5
 80198d2:	d231      	bcs.n	8019938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80198d4:	180c      	adds	r4, r1, r0
 80198d6:	42a1      	cmp	r1, r4
 80198d8:	d202      	bcs.n	80198e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80198da:	f821 3b02 	strh.w	r3, [r1], #2
 80198de:	e7fa      	b.n	80198d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80198e0:	4411      	add	r1, r2
 80198e2:	e7f5      	b.n	80198d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80198e4:	078e      	lsls	r6, r1, #30
 80198e6:	d008      	beq.n	80198fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80198e8:	0066      	lsls	r6, r4, #1
 80198ea:	460a      	mov	r2, r1
 80198ec:	42aa      	cmp	r2, r5
 80198ee:	d202      	bcs.n	80198f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80198f0:	8013      	strh	r3, [r2, #0]
 80198f2:	4432      	add	r2, r6
 80198f4:	e7fa      	b.n	80198ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80198f6:	3102      	adds	r1, #2
 80198f8:	3801      	subs	r0, #1
 80198fa:	07c2      	lsls	r2, r0, #31
 80198fc:	d50b      	bpl.n	8019916 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80198fe:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8019902:	0066      	lsls	r6, r4, #1
 8019904:	3a01      	subs	r2, #1
 8019906:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801990a:	42aa      	cmp	r2, r5
 801990c:	d202      	bcs.n	8019914 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801990e:	8013      	strh	r3, [r2, #0]
 8019910:	4432      	add	r2, r6
 8019912:	e7fa      	b.n	801990a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8019914:	3801      	subs	r0, #1
 8019916:	b178      	cbz	r0, 8019938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019918:	1040      	asrs	r0, r0, #1
 801991a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801991e:	0080      	lsls	r0, r0, #2
 8019920:	0064      	lsls	r4, r4, #1
 8019922:	42a9      	cmp	r1, r5
 8019924:	d208      	bcs.n	8019938 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8019926:	180e      	adds	r6, r1, r0
 8019928:	460a      	mov	r2, r1
 801992a:	42b2      	cmp	r2, r6
 801992c:	d202      	bcs.n	8019934 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801992e:	f842 3b04 	str.w	r3, [r2], #4
 8019932:	e7fa      	b.n	801992a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8019934:	4421      	add	r1, r4
 8019936:	e7f4      	b.n	8019922 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8019938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801993c:	00fff800 	.word	0x00fff800

08019940 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019940:	2200      	movs	r2, #0
 8019942:	4912      	ldr	r1, [pc, #72]	@ (801998c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8019944:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8019948:	6001      	str	r1, [r0, #0]
 801994a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801994e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019952:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8019956:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801995a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801995e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8019962:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8019966:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801996a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801996e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8019972:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8019976:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801997a:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 801997e:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8019982:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8019986:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801998a:	4770      	bx	lr
 801998c:	08029cfc 	.word	0x08029cfc

08019990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019994:	b08d      	sub	sp, #52	@ 0x34
 8019996:	460d      	mov	r5, r1
 8019998:	4604      	mov	r4, r0
 801999a:	4699      	mov	r9, r3
 801999c:	6808      	ldr	r0, [r1, #0]
 801999e:	ab08      	add	r3, sp, #32
 80199a0:	6849      	ldr	r1, [r1, #4]
 80199a2:	c303      	stmia	r3!, {r0, r1}
 80199a4:	6810      	ldr	r0, [r2, #0]
 80199a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80199a8:	6851      	ldr	r1, [r2, #4]
 80199aa:	c303      	stmia	r3!, {r0, r1}
 80199ac:	a808      	add	r0, sp, #32
 80199ae:	f7f8 f81b 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80199b2:	4629      	mov	r1, r5
 80199b4:	a80a      	add	r0, sp, #40	@ 0x28
 80199b6:	4d67      	ldr	r5, [pc, #412]	@ (8019b54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80199b8:	f7f8 f83e 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80199bc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80199c0:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80199c4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80199c8:	6828      	ldr	r0, [r5, #0]
 80199ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 80199ce:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 80199d2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80199d6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80199da:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80199de:	440a      	add	r2, r1
 80199e0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80199e4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80199e8:	4413      	add	r3, r2
 80199ea:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80199ee:	6803      	ldr	r3, [r0, #0]
 80199f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80199f2:	4798      	blx	r3
 80199f4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80199f8:	d119      	bne.n	8019a2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80199fa:	f010 0f20 	tst.w	r0, #32
 80199fe:	6828      	ldr	r0, [r5, #0]
 8019a00:	d018      	beq.n	8019a34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8019a02:	2500      	movs	r5, #0
 8019a04:	6801      	ldr	r1, [r0, #0]
 8019a06:	b2b6      	uxth	r6, r6
 8019a08:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019a0c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8019a10:	9601      	str	r6, [sp, #4]
 8019a12:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8019a16:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8019a1a:	9502      	str	r5, [sp, #8]
 8019a1c:	fa1f f588 	uxth.w	r5, r8
 8019a20:	9500      	str	r5, [sp, #0]
 8019a22:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8019a24:	4621      	mov	r1, r4
 8019a26:	47a8      	blx	r5
 8019a28:	b00d      	add	sp, #52	@ 0x34
 8019a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8019a32:	e7e4      	b.n	80199fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8019a34:	6803      	ldr	r3, [r0, #0]
 8019a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a38:	4798      	blx	r3
 8019a3a:	4947      	ldr	r1, [pc, #284]	@ (8019b58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8019a3c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8019a40:	880b      	ldrh	r3, [r1, #0]
 8019a42:	468a      	mov	sl, r1
 8019a44:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8019a48:	fb03 5202 	mla	r2, r3, r2, r5
 8019a4c:	4373      	muls	r3, r6
 8019a4e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019a52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019a56:	9307      	str	r3, [sp, #28]
 8019a58:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019a5c:	9306      	str	r3, [sp, #24]
 8019a5e:	9b07      	ldr	r3, [sp, #28]
 8019a60:	4298      	cmp	r0, r3
 8019a62:	d270      	bcs.n	8019b46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019a64:	9b06      	ldr	r3, [sp, #24]
 8019a66:	4621      	mov	r1, r4
 8019a68:	eb00 0b03 	add.w	fp, r0, r3
 8019a6c:	4558      	cmp	r0, fp
 8019a6e:	d25d      	bcs.n	8019b2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8019a70:	f851 4b04 	ldr.w	r4, [r1], #4
 8019a74:	0e23      	lsrs	r3, r4, #24
 8019a76:	d014      	beq.n	8019aa2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019a78:	2bff      	cmp	r3, #255	@ 0xff
 8019a7a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8019a7e:	d112      	bne.n	8019aa6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019a80:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8019a84:	d10f      	bne.n	8019aa6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019a86:	0963      	lsrs	r3, r4, #5
 8019a88:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8019a8c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019a90:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8019a94:	f02c 0c07 	bic.w	ip, ip, #7
 8019a98:	ea43 0c0c 	orr.w	ip, r3, ip
 8019a9c:	ea4c 0404 	orr.w	r4, ip, r4
 8019aa0:	8004      	strh	r4, [r0, #0]
 8019aa2:	3002      	adds	r0, #2
 8019aa4:	e7e2      	b.n	8019a6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8019aa6:	fb09 f303 	mul.w	r3, r9, r3
 8019aaa:	8807      	ldrh	r7, [r0, #0]
 8019aac:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8019ab0:	fa5f fc8c 	uxtb.w	ip, ip
 8019ab4:	1c5a      	adds	r2, r3, #1
 8019ab6:	123e      	asrs	r6, r7, #8
 8019ab8:	10fd      	asrs	r5, r7, #3
 8019aba:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8019abe:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8019ac2:	00ff      	lsls	r7, r7, #3
 8019ac4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8019ac8:	1212      	asrs	r2, r2, #8
 8019aca:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019ace:	b293      	uxth	r3, r2
 8019ad0:	43d2      	mvns	r2, r2
 8019ad2:	b2ff      	uxtb	r7, r7
 8019ad4:	fb1e fe03 	smulbb	lr, lr, r3
 8019ad8:	b2d2      	uxtb	r2, r2
 8019ada:	fb1c fc03 	smulbb	ip, ip, r3
 8019ade:	b2e4      	uxtb	r4, r4
 8019ae0:	fb06 e602 	mla	r6, r6, r2, lr
 8019ae4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019ae8:	fb14 f403 	smulbb	r4, r4, r3
 8019aec:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8019af0:	b2b6      	uxth	r6, r6
 8019af2:	fb05 c502 	mla	r5, r5, r2, ip
 8019af6:	fb07 4702 	mla	r7, r7, r2, r4
 8019afa:	f106 0e01 	add.w	lr, r6, #1
 8019afe:	b2ad      	uxth	r5, r5
 8019b00:	b2bf      	uxth	r7, r7
 8019b02:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8019b06:	f105 0c01 	add.w	ip, r5, #1
 8019b0a:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8019b0e:	1c7e      	adds	r6, r7, #1
 8019b10:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019b14:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019b18:	096d      	lsrs	r5, r5, #5
 8019b1a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019b1e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8019b22:	ea46 060e 	orr.w	r6, r6, lr
 8019b26:	432e      	orrs	r6, r5
 8019b28:	8006      	strh	r6, [r0, #0]
 8019b2a:	e7ba      	b.n	8019aa2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019b2c:	f8ba 3000 	ldrh.w	r3, [sl]
 8019b30:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8019b34:	eba3 0308 	sub.w	r3, r3, r8
 8019b38:	eba4 0408 	sub.w	r4, r4, r8
 8019b3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019b40:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019b44:	e78b      	b.n	8019a5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8019b46:	4b03      	ldr	r3, [pc, #12]	@ (8019b54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019b48:	6818      	ldr	r0, [r3, #0]
 8019b4a:	6803      	ldr	r3, [r0, #0]
 8019b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b4e:	4798      	blx	r3
 8019b50:	e76a      	b.n	8019a28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8019b52:	bf00      	nop
 8019b54:	2400aa84 	.word	0x2400aa84
 8019b58:	2400aa7e 	.word	0x2400aa7e

08019b5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8019b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b60:	b085      	sub	sp, #20
 8019b62:	6810      	ldr	r0, [r2, #0]
 8019b64:	460c      	mov	r4, r1
 8019b66:	6851      	ldr	r1, [r2, #4]
 8019b68:	466d      	mov	r5, sp
 8019b6a:	4616      	mov	r6, r2
 8019b6c:	c503      	stmia	r5!, {r0, r1}
 8019b6e:	6818      	ldr	r0, [r3, #0]
 8019b70:	6859      	ldr	r1, [r3, #4]
 8019b72:	c503      	stmia	r5!, {r0, r1}
 8019b74:	4668      	mov	r0, sp
 8019b76:	4d2e      	ldr	r5, [pc, #184]	@ (8019c30 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8019b78:	f7f7 ff36 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b7c:	4631      	mov	r1, r6
 8019b7e:	a802      	add	r0, sp, #8
 8019b80:	4e2c      	ldr	r6, [pc, #176]	@ (8019c34 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8019b82:	f7f7 ff59 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b86:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019b8a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019b8e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8019b92:	6828      	ldr	r0, [r5, #0]
 8019b94:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019b98:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019b9c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8019ba0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019ba4:	f8bd 1000 	ldrh.w	r1, [sp]
 8019ba8:	440a      	add	r2, r1
 8019baa:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019bae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019bb2:	4413      	add	r3, r2
 8019bb4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019bb8:	6803      	ldr	r3, [r0, #0]
 8019bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019bbc:	4798      	blx	r3
 8019bbe:	8833      	ldrh	r3, [r6, #0]
 8019bc0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019bc4:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8019bc8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8019bcc:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8019c38 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8019bd0:	fb03 1202 	mla	r2, r3, r2, r1
 8019bd4:	fb08 f303 	mul.w	r3, r8, r3
 8019bd8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019bdc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019be0:	4298      	cmp	r0, r3
 8019be2:	d21d      	bcs.n	8019c20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8019be4:	eb00 080c 	add.w	r8, r0, ip
 8019be8:	4540      	cmp	r0, r8
 8019bea:	d20f      	bcs.n	8019c0c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8019bec:	f854 1b04 	ldr.w	r1, [r4], #4
 8019bf0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8019bf4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8019bf8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8019bfc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8019c00:	ea42 0209 	orr.w	r2, r2, r9
 8019c04:	430a      	orrs	r2, r1
 8019c06:	f820 2b02 	strh.w	r2, [r0], #2
 8019c0a:	e7ed      	b.n	8019be8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8019c0c:	8832      	ldrh	r2, [r6, #0]
 8019c0e:	1bd2      	subs	r2, r2, r7
 8019c10:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019c14:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019c18:	1bd2      	subs	r2, r2, r7
 8019c1a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8019c1e:	e7df      	b.n	8019be0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8019c20:	6828      	ldr	r0, [r5, #0]
 8019c22:	6803      	ldr	r3, [r0, #0]
 8019c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c26:	4798      	blx	r3
 8019c28:	b005      	add	sp, #20
 8019c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c2e:	bf00      	nop
 8019c30:	2400aa84 	.word	0x2400aa84
 8019c34:	2400aa7e 	.word	0x2400aa7e
 8019c38:	fffff800 	.word	0xfffff800

08019c3c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8019c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c40:	b08e      	sub	sp, #56	@ 0x38
 8019c42:	460e      	mov	r6, r1
 8019c44:	4604      	mov	r4, r0
 8019c46:	461d      	mov	r5, r3
 8019c48:	6808      	ldr	r0, [r1, #0]
 8019c4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8019c4c:	6849      	ldr	r1, [r1, #4]
 8019c4e:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 8019e24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019c52:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 8019e28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8019c56:	c303      	stmia	r3!, {r0, r1}
 8019c58:	6810      	ldr	r0, [r2, #0]
 8019c5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8019c5c:	6851      	ldr	r1, [r2, #4]
 8019c5e:	c303      	stmia	r3!, {r0, r1}
 8019c60:	a80a      	add	r0, sp, #40	@ 0x28
 8019c62:	f7f7 fec1 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c66:	4631      	mov	r1, r6
 8019c68:	a80c      	add	r0, sp, #48	@ 0x30
 8019c6a:	f7f7 fee5 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c6e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019c72:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019c76:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019c7a:	f8d8 0000 	ldr.w	r0, [r8]
 8019c7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019c82:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8019c86:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8019c8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019c8e:	440c      	add	r4, r1
 8019c90:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8019c94:	440a      	add	r2, r1
 8019c96:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8019c9a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8019c9e:	4413      	add	r3, r2
 8019ca0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019ca4:	6803      	ldr	r3, [r0, #0]
 8019ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019ca8:	4798      	blx	r3
 8019caa:	2dff      	cmp	r5, #255	@ 0xff
 8019cac:	d124      	bne.n	8019cf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8019cae:	f010 0f01 	tst.w	r0, #1
 8019cb2:	f8d8 0000 	ldr.w	r0, [r8]
 8019cb6:	d022      	beq.n	8019cfe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8019cb8:	2100      	movs	r1, #0
 8019cba:	f04f 0e01 	mov.w	lr, #1
 8019cbe:	f8d0 c000 	ldr.w	ip, [r0]
 8019cc2:	b2b6      	uxth	r6, r6
 8019cc4:	f8cd e018 	str.w	lr, [sp, #24]
 8019cc8:	b2bf      	uxth	r7, r7
 8019cca:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8019cce:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8019cd2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8019cd6:	f8b9 e000 	ldrh.w	lr, [r9]
 8019cda:	9503      	str	r5, [sp, #12]
 8019cdc:	9601      	str	r6, [sp, #4]
 8019cde:	9700      	str	r7, [sp, #0]
 8019ce0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019ce4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019ce8:	9102      	str	r1, [sp, #8]
 8019cea:	4621      	mov	r1, r4
 8019cec:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8019cf0:	47a8      	blx	r5
 8019cf2:	b00e      	add	sp, #56	@ 0x38
 8019cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cf8:	f010 0f04 	tst.w	r0, #4
 8019cfc:	e7d9      	b.n	8019cb2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8019cfe:	6803      	ldr	r3, [r0, #0]
 8019d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d02:	4798      	blx	r3
 8019d04:	f8b9 3000 	ldrh.w	r3, [r9]
 8019d08:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019d0c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8019d10:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8019d14:	435e      	muls	r6, r3
 8019d16:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8019d1a:	2dff      	cmp	r5, #255	@ 0xff
 8019d1c:	fb03 1202 	mla	r2, r3, r2, r1
 8019d20:	ebac 0c07 	sub.w	ip, ip, r7
 8019d24:	eba3 0707 	sub.w	r7, r3, r7
 8019d28:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019d2c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019d30:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019d34:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8019d38:	d049      	beq.n	8019dce <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8019d3a:	43eb      	mvns	r3, r5
 8019d3c:	fa1f f985 	uxth.w	r9, r5
 8019d40:	b2db      	uxtb	r3, r3
 8019d42:	42b0      	cmp	r0, r6
 8019d44:	d266      	bcs.n	8019e14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019d46:	eb00 0a0e 	add.w	sl, r0, lr
 8019d4a:	4550      	cmp	r0, sl
 8019d4c:	4621      	mov	r1, r4
 8019d4e:	f104 0403 	add.w	r4, r4, #3
 8019d52:	d25b      	bcs.n	8019e0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8019d54:	8802      	ldrh	r2, [r0, #0]
 8019d56:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019d5a:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019d5e:	fb11 f109 	smulbb	r1, r1, r9
 8019d62:	10d5      	asrs	r5, r2, #3
 8019d64:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8019d68:	00d2      	lsls	r2, r2, #3
 8019d6a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8019d6e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8019d72:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019d76:	fb08 1803 	mla	r8, r8, r3, r1
 8019d7a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8019d7e:	b2d2      	uxtb	r2, r2
 8019d80:	fb11 f109 	smulbb	r1, r1, r9
 8019d84:	fa1f f888 	uxth.w	r8, r8
 8019d88:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019d8c:	fb05 1503 	mla	r5, r5, r3, r1
 8019d90:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019d94:	fb11 f109 	smulbb	r1, r1, r9
 8019d98:	b2ad      	uxth	r5, r5
 8019d9a:	fb02 1203 	mla	r2, r2, r3, r1
 8019d9e:	f108 0101 	add.w	r1, r8, #1
 8019da2:	b292      	uxth	r2, r2
 8019da4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019da8:	1c51      	adds	r1, r2, #1
 8019daa:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8019dae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019db2:	1c69      	adds	r1, r5, #1
 8019db4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8019db8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019dbc:	096d      	lsrs	r5, r5, #5
 8019dbe:	ea42 0208 	orr.w	r2, r2, r8
 8019dc2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8019dc6:	432a      	orrs	r2, r5
 8019dc8:	f820 2b02 	strh.w	r2, [r0], #2
 8019dcc:	e7bd      	b.n	8019d4a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8019dce:	4a14      	ldr	r2, [pc, #80]	@ (8019e20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8019dd0:	42b0      	cmp	r0, r6
 8019dd2:	d21f      	bcs.n	8019e14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019dd4:	eb00 050e 	add.w	r5, r0, lr
 8019dd8:	42a8      	cmp	r0, r5
 8019dda:	4621      	mov	r1, r4
 8019ddc:	f104 0403 	add.w	r4, r4, #3
 8019de0:	d210      	bcs.n	8019e04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8019de2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8019de6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019dea:	00db      	lsls	r3, r3, #3
 8019dec:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8019df0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8019df4:	430b      	orrs	r3, r1
 8019df6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019dfa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8019dfe:	f820 3b02 	strh.w	r3, [r0], #2
 8019e02:	e7e9      	b.n	8019dd8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8019e04:	4438      	add	r0, r7
 8019e06:	eb01 040c 	add.w	r4, r1, ip
 8019e0a:	e7e1      	b.n	8019dd0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8019e0c:	4438      	add	r0, r7
 8019e0e:	eb01 040c 	add.w	r4, r1, ip
 8019e12:	e796      	b.n	8019d42 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8019e14:	4b03      	ldr	r3, [pc, #12]	@ (8019e24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8019e16:	6818      	ldr	r0, [r3, #0]
 8019e18:	6803      	ldr	r3, [r0, #0]
 8019e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e1c:	4798      	blx	r3
 8019e1e:	e768      	b.n	8019cf2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8019e20:	fffff800 	.word	0xfffff800
 8019e24:	2400aa84 	.word	0x2400aa84
 8019e28:	2400aa7e 	.word	0x2400aa7e

08019e2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8019e2c:	b4f0      	push	{r4, r5, r6, r7}
 8019e2e:	4616      	mov	r6, r2
 8019e30:	461c      	mov	r4, r3
 8019e32:	460d      	mov	r5, r1
 8019e34:	9a04      	ldr	r2, [sp, #16]
 8019e36:	2e01      	cmp	r6, #1
 8019e38:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019e3c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8019e40:	d012      	beq.n	8019e68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8019e42:	d303      	bcc.n	8019e4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8019e44:	2e02      	cmp	r6, #2
 8019e46:	d00a      	beq.n	8019e5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8019e48:	bcf0      	pop	{r4, r5, r6, r7}
 8019e4a:	4770      	bx	lr
 8019e4c:	6805      	ldr	r5, [r0, #0]
 8019e4e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8019e52:	68ed      	ldr	r5, [r5, #12]
 8019e54:	4613      	mov	r3, r2
 8019e56:	4622      	mov	r2, r4
 8019e58:	46ac      	mov	ip, r5
 8019e5a:	bcf0      	pop	{r4, r5, r6, r7}
 8019e5c:	4760      	bx	ip
 8019e5e:	4621      	mov	r1, r4
 8019e60:	4628      	mov	r0, r5
 8019e62:	bcf0      	pop	{r4, r5, r6, r7}
 8019e64:	f7ff bd94 	b.w	8019990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019e68:	4621      	mov	r1, r4
 8019e6a:	4628      	mov	r0, r5
 8019e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8019e6e:	f7ff bee5 	b.w	8019c3c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08019e74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8019e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e78:	b093      	sub	sp, #76	@ 0x4c
 8019e7a:	4681      	mov	r9, r0
 8019e7c:	4688      	mov	r8, r1
 8019e7e:	6810      	ldr	r0, [r2, #0]
 8019e80:	6851      	ldr	r1, [r2, #4]
 8019e82:	ac0e      	add	r4, sp, #56	@ 0x38
 8019e84:	4616      	mov	r6, r2
 8019e86:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8019e8a:	4f6b      	ldr	r7, [pc, #428]	@ (801a038 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8019e8c:	c403      	stmia	r4!, {r0, r1}
 8019e8e:	6818      	ldr	r0, [r3, #0]
 8019e90:	ac10      	add	r4, sp, #64	@ 0x40
 8019e92:	6859      	ldr	r1, [r3, #4]
 8019e94:	c403      	stmia	r4!, {r0, r1}
 8019e96:	a80e      	add	r0, sp, #56	@ 0x38
 8019e98:	f7f7 fda6 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019e9c:	4631      	mov	r1, r6
 8019e9e:	a810      	add	r0, sp, #64	@ 0x40
 8019ea0:	4e66      	ldr	r6, [pc, #408]	@ (801a03c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8019ea2:	f7f7 fdc9 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019ea6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8019eaa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8019eae:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8019eb2:	6830      	ldr	r0, [r6, #0]
 8019eb4:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019eb8:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8019ebc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8019ec0:	4489      	add	r9, r1
 8019ec2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8019ec6:	440a      	add	r2, r1
 8019ec8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8019ecc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019ed0:	4413      	add	r3, r2
 8019ed2:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8019ed6:	6803      	ldr	r3, [r0, #0]
 8019ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019eda:	4798      	blx	r3
 8019edc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8019ee0:	6830      	ldr	r0, [r6, #0]
 8019ee2:	d01d      	beq.n	8019f20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	6801      	ldr	r1, [r0, #0]
 8019ee8:	b2a4      	uxth	r4, r4
 8019eea:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8019eee:	b2ad      	uxth	r5, r5
 8019ef0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8019ef4:	220b      	movs	r2, #11
 8019ef6:	9207      	str	r2, [sp, #28]
 8019ef8:	883a      	ldrh	r2, [r7, #0]
 8019efa:	9502      	str	r5, [sp, #8]
 8019efc:	9206      	str	r2, [sp, #24]
 8019efe:	2201      	movs	r2, #1
 8019f00:	9401      	str	r4, [sp, #4]
 8019f02:	e9cd a204 	strd	sl, r2, [sp, #16]
 8019f06:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8019f0a:	9203      	str	r2, [sp, #12]
 8019f0c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8019f10:	9200      	str	r2, [sp, #0]
 8019f12:	4642      	mov	r2, r8
 8019f14:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8019f16:	4649      	mov	r1, r9
 8019f18:	47a0      	blx	r4
 8019f1a:	b013      	add	sp, #76	@ 0x4c
 8019f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f20:	6803      	ldr	r3, [r0, #0]
 8019f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f24:	4798      	blx	r3
 8019f26:	883b      	ldrh	r3, [r7, #0]
 8019f28:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8019f2c:	f04f 0e04 	mov.w	lr, #4
 8019f30:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8019f34:	435d      	muls	r5, r3
 8019f36:	fb03 1202 	mla	r2, r3, r2, r1
 8019f3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019f3e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8019f42:	920c      	str	r2, [sp, #48]	@ 0x30
 8019f44:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8019f48:	1b12      	subs	r2, r2, r4
 8019f4a:	920d      	str	r2, [sp, #52]	@ 0x34
 8019f4c:	0062      	lsls	r2, r4, #1
 8019f4e:	1b1c      	subs	r4, r3, r4
 8019f50:	920a      	str	r2, [sp, #40]	@ 0x28
 8019f52:	0063      	lsls	r3, r4, #1
 8019f54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019f58:	4298      	cmp	r0, r3
 8019f5a:	d266      	bcs.n	801a02a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8019f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f5e:	eb00 0b03 	add.w	fp, r0, r3
 8019f62:	4558      	cmp	r0, fp
 8019f64:	d25c      	bcs.n	801a020 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8019f66:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019f6a:	fb1e e303 	smlabb	r3, lr, r3, lr
 8019f6e:	f858 2003 	ldr.w	r2, [r8, r3]
 8019f72:	0e11      	lsrs	r1, r2, #24
 8019f74:	d012      	beq.n	8019f9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8019f76:	29ff      	cmp	r1, #255	@ 0xff
 8019f78:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8019f7c:	d110      	bne.n	8019fa0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019f7e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8019f82:	d10d      	bne.n	8019fa0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019f84:	0953      	lsrs	r3, r2, #5
 8019f86:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8019f8a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019f8e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8019f92:	f027 0707 	bic.w	r7, r7, #7
 8019f96:	431f      	orrs	r7, r3
 8019f98:	433a      	orrs	r2, r7
 8019f9a:	8002      	strh	r2, [r0, #0]
 8019f9c:	3002      	adds	r0, #2
 8019f9e:	e7e0      	b.n	8019f62 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8019fa0:	fb0a f101 	mul.w	r1, sl, r1
 8019fa4:	8806      	ldrh	r6, [r0, #0]
 8019fa6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019faa:	b2d2      	uxtb	r2, r2
 8019fac:	1c4b      	adds	r3, r1, #1
 8019fae:	1235      	asrs	r5, r6, #8
 8019fb0:	10f4      	asrs	r4, r6, #3
 8019fb2:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8019fb6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8019fba:	00f6      	lsls	r6, r6, #3
 8019fbc:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8019fc0:	121b      	asrs	r3, r3, #8
 8019fc2:	b2f6      	uxtb	r6, r6
 8019fc4:	b299      	uxth	r1, r3
 8019fc6:	43db      	mvns	r3, r3
 8019fc8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8019fcc:	fb1c fc01 	smulbb	ip, ip, r1
 8019fd0:	b2db      	uxtb	r3, r3
 8019fd2:	fb12 f201 	smulbb	r2, r2, r1
 8019fd6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8019fda:	fb05 c503 	mla	r5, r5, r3, ip
 8019fde:	b2ff      	uxtb	r7, r7
 8019fe0:	fb06 2203 	mla	r2, r6, r3, r2
 8019fe4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8019fe8:	fb17 f701 	smulbb	r7, r7, r1
 8019fec:	b2ad      	uxth	r5, r5
 8019fee:	b292      	uxth	r2, r2
 8019ff0:	fb04 7403 	mla	r4, r4, r3, r7
 8019ff4:	f105 0c01 	add.w	ip, r5, #1
 8019ff8:	1c57      	adds	r7, r2, #1
 8019ffa:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019ffe:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a002:	b2a4      	uxth	r4, r4
 801a004:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801a008:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a00c:	433d      	orrs	r5, r7
 801a00e:	1c67      	adds	r7, r4, #1
 801a010:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801a014:	0964      	lsrs	r4, r4, #5
 801a016:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801a01a:	4325      	orrs	r5, r4
 801a01c:	8005      	strh	r5, [r0, #0]
 801a01e:	e7bd      	b.n	8019f9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a022:	4418      	add	r0, r3
 801a024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a026:	4499      	add	r9, r3
 801a028:	e795      	b.n	8019f56 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801a02a:	4b04      	ldr	r3, [pc, #16]	@ (801a03c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801a02c:	6818      	ldr	r0, [r3, #0]
 801a02e:	6803      	ldr	r3, [r0, #0]
 801a030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a032:	4798      	blx	r3
 801a034:	e771      	b.n	8019f1a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801a036:	bf00      	nop
 801a038:	2400aa7e 	.word	0x2400aa7e
 801a03c:	2400aa84 	.word	0x2400aa84

0801a040 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a044:	b087      	sub	sp, #28
 801a046:	4680      	mov	r8, r0
 801a048:	460d      	mov	r5, r1
 801a04a:	4614      	mov	r4, r2
 801a04c:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801a050:	2e00      	cmp	r6, #0
 801a052:	f000 80b9 	beq.w	801a1c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801a056:	6810      	ldr	r0, [r2, #0]
 801a058:	af02      	add	r7, sp, #8
 801a05a:	6851      	ldr	r1, [r2, #4]
 801a05c:	c703      	stmia	r7!, {r0, r1}
 801a05e:	6818      	ldr	r0, [r3, #0]
 801a060:	af04      	add	r7, sp, #16
 801a062:	6859      	ldr	r1, [r3, #4]
 801a064:	c703      	stmia	r7!, {r0, r1}
 801a066:	a802      	add	r0, sp, #8
 801a068:	f7f7 fcbe 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a06c:	4621      	mov	r1, r4
 801a06e:	a804      	add	r0, sp, #16
 801a070:	f7f7 fce2 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a074:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a078:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a07c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801a080:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a084:	fb14 2103 	smlabb	r1, r4, r3, r2
 801a088:	eb08 0401 	add.w	r4, r8, r1
 801a08c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a090:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a094:	440a      	add	r2, r1
 801a096:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a09a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a09e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a0a2:	4413      	add	r3, r2
 801a0a4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a0a8:	4b49      	ldr	r3, [pc, #292]	@ (801a1d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801a0aa:	6818      	ldr	r0, [r3, #0]
 801a0ac:	6803      	ldr	r3, [r0, #0]
 801a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0b0:	4798      	blx	r3
 801a0b2:	4b48      	ldr	r3, [pc, #288]	@ (801a1d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801a0b4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801a0b8:	2eff      	cmp	r6, #255	@ 0xff
 801a0ba:	881a      	ldrh	r2, [r3, #0]
 801a0bc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a0c0:	fb02 c101 	mla	r1, r2, r1, ip
 801a0c4:	fb02 f207 	mul.w	r2, r2, r7
 801a0c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a0cc:	f105 0104 	add.w	r1, r5, #4
 801a0d0:	461d      	mov	r5, r3
 801a0d2:	d05a      	beq.n	801a18a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801a0d4:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 801a0d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a0dc:	b2b6      	uxth	r6, r6
 801a0de:	9301      	str	r3, [sp, #4]
 801a0e0:	fa1f fe8e 	uxth.w	lr, lr
 801a0e4:	4282      	cmp	r2, r0
 801a0e6:	d96a      	bls.n	801a1be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801a0e8:	eb00 0b0a 	add.w	fp, r0, sl
 801a0ec:	4583      	cmp	fp, r0
 801a0ee:	d940      	bls.n	801a172 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801a0f0:	8805      	ldrh	r5, [r0, #0]
 801a0f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a0f6:	122f      	asrs	r7, r5, #8
 801a0f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a0fc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a100:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a104:	00ed      	lsls	r5, r5, #3
 801a106:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a10a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801a10e:	fb17 f70e 	smulbb	r7, r7, lr
 801a112:	b2ed      	uxtb	r5, r5
 801a114:	fb19 f90e 	smulbb	r9, r9, lr
 801a118:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801a11c:	fb15 f50e 	smulbb	r5, r5, lr
 801a120:	fb0c 7c06 	mla	ip, ip, r6, r7
 801a124:	10df      	asrs	r7, r3, #3
 801a126:	00db      	lsls	r3, r3, #3
 801a128:	fa1f fc8c 	uxth.w	ip, ip
 801a12c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801a130:	b2db      	uxtb	r3, r3
 801a132:	fb07 9706 	mla	r7, r7, r6, r9
 801a136:	f10c 0901 	add.w	r9, ip, #1
 801a13a:	fb03 5306 	mla	r3, r3, r6, r5
 801a13e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a142:	b29b      	uxth	r3, r3
 801a144:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 801a148:	b2bf      	uxth	r7, r7
 801a14a:	f103 0c01 	add.w	ip, r3, #1
 801a14e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a152:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a156:	ea4c 0c09 	orr.w	ip, ip, r9
 801a15a:	f107 0901 	add.w	r9, r7, #1
 801a15e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a162:	097f      	lsrs	r7, r7, #5
 801a164:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801a168:	ea4c 0c07 	orr.w	ip, ip, r7
 801a16c:	f820 cb02 	strh.w	ip, [r0], #2
 801a170:	e7bc      	b.n	801a0ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801a172:	9b01      	ldr	r3, [sp, #4]
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	eba3 0308 	sub.w	r3, r3, r8
 801a17a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a17e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a182:	eba3 0308 	sub.w	r3, r3, r8
 801a186:	441c      	add	r4, r3
 801a188:	e7ac      	b.n	801a0e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801a18a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a18e:	4282      	cmp	r2, r0
 801a190:	d915      	bls.n	801a1be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801a192:	eb00 060a 	add.w	r6, r0, sl
 801a196:	4286      	cmp	r6, r0
 801a198:	d906      	bls.n	801a1a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801a19a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a19e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a1a2:	f820 3b02 	strh.w	r3, [r0], #2
 801a1a6:	e7f6      	b.n	801a196 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801a1a8:	882b      	ldrh	r3, [r5, #0]
 801a1aa:	eba3 0308 	sub.w	r3, r3, r8
 801a1ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a1b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a1b6:	eba3 0308 	sub.w	r3, r3, r8
 801a1ba:	441c      	add	r4, r3
 801a1bc:	e7e7      	b.n	801a18e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801a1be:	4b04      	ldr	r3, [pc, #16]	@ (801a1d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801a1c0:	6818      	ldr	r0, [r3, #0]
 801a1c2:	6803      	ldr	r3, [r0, #0]
 801a1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1c6:	4798      	blx	r3
 801a1c8:	b007      	add	sp, #28
 801a1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ce:	bf00      	nop
 801a1d0:	2400aa84 	.word	0x2400aa84
 801a1d4:	2400aa7e 	.word	0x2400aa7e

0801a1d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1dc:	b091      	sub	sp, #68	@ 0x44
 801a1de:	4680      	mov	r8, r0
 801a1e0:	460f      	mov	r7, r1
 801a1e2:	4614      	mov	r4, r2
 801a1e4:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 801a1e8:	2d00      	cmp	r5, #0
 801a1ea:	d051      	beq.n	801a290 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801a1ec:	6810      	ldr	r0, [r2, #0]
 801a1ee:	ae0c      	add	r6, sp, #48	@ 0x30
 801a1f0:	6851      	ldr	r1, [r2, #4]
 801a1f2:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 801a3f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801a1f6:	c603      	stmia	r6!, {r0, r1}
 801a1f8:	6818      	ldr	r0, [r3, #0]
 801a1fa:	ae0e      	add	r6, sp, #56	@ 0x38
 801a1fc:	6859      	ldr	r1, [r3, #4]
 801a1fe:	c603      	stmia	r6!, {r0, r1}
 801a200:	a80c      	add	r0, sp, #48	@ 0x30
 801a202:	f7f7 fbf1 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a206:	4621      	mov	r1, r4
 801a208:	a80e      	add	r0, sp, #56	@ 0x38
 801a20a:	f7f7 fc15 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a20e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a212:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a216:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a21a:	f8d9 0000 	ldr.w	r0, [r9]
 801a21e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a222:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801a226:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 801a22a:	eb08 0401 	add.w	r4, r8, r1
 801a22e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a232:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 801a3f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801a236:	440a      	add	r2, r1
 801a238:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a23c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a240:	4413      	add	r3, r2
 801a242:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a246:	6803      	ldr	r3, [r0, #0]
 801a248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a24a:	4798      	blx	r3
 801a24c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a250:	f8d9 0000 	ldr.w	r0, [r9]
 801a254:	d01f      	beq.n	801a296 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801a256:	2200      	movs	r2, #0
 801a258:	6801      	ldr	r1, [r0, #0]
 801a25a:	b2b6      	uxth	r6, r6
 801a25c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a260:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801a264:	220b      	movs	r2, #11
 801a266:	9207      	str	r2, [sp, #28]
 801a268:	f8b8 2000 	ldrh.w	r2, [r8]
 801a26c:	9601      	str	r6, [sp, #4]
 801a26e:	9206      	str	r2, [sp, #24]
 801a270:	2201      	movs	r2, #1
 801a272:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801a276:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a27a:	9203      	str	r2, [sp, #12]
 801a27c:	fa1f f28a 	uxth.w	r2, sl
 801a280:	9202      	str	r2, [sp, #8]
 801a282:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a286:	9200      	str	r2, [sp, #0]
 801a288:	463a      	mov	r2, r7
 801a28a:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801a28c:	4621      	mov	r1, r4
 801a28e:	47a8      	blx	r5
 801a290:	b011      	add	sp, #68	@ 0x44
 801a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a296:	6803      	ldr	r3, [r0, #0]
 801a298:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801a29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a29e:	4798      	blx	r3
 801a2a0:	f8b8 2000 	ldrh.w	r2, [r8]
 801a2a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a2a8:	2dff      	cmp	r5, #255	@ 0xff
 801a2aa:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801a2ae:	fb0a fa02 	mul.w	sl, sl, r2
 801a2b2:	fb02 1303 	mla	r3, r2, r3, r1
 801a2b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a2ba:	d062      	beq.n	801a382 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801a2bc:	ea6f 0c05 	mvn.w	ip, r5
 801a2c0:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801a2c4:	b2ad      	uxth	r5, r5
 801a2c6:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801a2ca:	fa5f fc8c 	uxtb.w	ip, ip
 801a2ce:	930a      	str	r3, [sp, #40]	@ 0x28
 801a2d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2d2:	4298      	cmp	r0, r3
 801a2d4:	f080 8085 	bcs.w	801a3e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a2d8:	eb00 0b09 	add.w	fp, r0, r9
 801a2dc:	4558      	cmp	r0, fp
 801a2de:	d246      	bcs.n	801a36e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801a2e0:	f814 eb01 	ldrb.w	lr, [r4], #1
 801a2e4:	2303      	movs	r3, #3
 801a2e6:	2204      	movs	r2, #4
 801a2e8:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801a2ec:	8803      	ldrh	r3, [r0, #0]
 801a2ee:	eb07 0a0e 	add.w	sl, r7, lr
 801a2f2:	1219      	asrs	r1, r3, #8
 801a2f4:	10da      	asrs	r2, r3, #3
 801a2f6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a2fa:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801a2fe:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801a308:	fb18 f805 	smulbb	r8, r8, r5
 801a30c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801a310:	fb1e fe05 	smulbb	lr, lr, r5
 801a314:	b2db      	uxtb	r3, r3
 801a316:	fb01 810c 	mla	r1, r1, ip, r8
 801a31a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a31e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a322:	fb18 f805 	smulbb	r8, r8, r5
 801a326:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a32a:	b289      	uxth	r1, r1
 801a32c:	fb02 820c 	mla	r2, r2, ip, r8
 801a330:	fb03 e30c 	mla	r3, r3, ip, lr
 801a334:	f101 0801 	add.w	r8, r1, #1
 801a338:	b292      	uxth	r2, r2
 801a33a:	b29b      	uxth	r3, r3
 801a33c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a340:	f102 0801 	add.w	r8, r2, #1
 801a344:	f103 0e01 	add.w	lr, r3, #1
 801a348:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801a34c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801a350:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a354:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a358:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a35c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801a360:	ea4e 0101 	orr.w	r1, lr, r1
 801a364:	ea41 0108 	orr.w	r1, r1, r8
 801a368:	f820 1b02 	strh.w	r1, [r0], #2
 801a36c:	e7b6      	b.n	801a2dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801a36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a370:	881b      	ldrh	r3, [r3, #0]
 801a372:	1b9b      	subs	r3, r3, r6
 801a374:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a378:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a37c:	1b9b      	subs	r3, r3, r6
 801a37e:	441c      	add	r4, r3
 801a380:	e7a6      	b.n	801a2d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801a382:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801a386:	2203      	movs	r2, #3
 801a388:	2504      	movs	r5, #4
 801a38a:	4919      	ldr	r1, [pc, #100]	@ (801a3f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801a38c:	4550      	cmp	r0, sl
 801a38e:	d228      	bcs.n	801a3e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801a390:	eb00 0c09 	add.w	ip, r0, r9
 801a394:	4560      	cmp	r0, ip
 801a396:	4623      	mov	r3, r4
 801a398:	d219      	bcs.n	801a3ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801a39a:	f893 e000 	ldrb.w	lr, [r3]
 801a39e:	3401      	adds	r4, #1
 801a3a0:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801a3a4:	eb07 0b0e 	add.w	fp, r7, lr
 801a3a8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801a3ac:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a3b0:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a3b4:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801a3b8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a3bc:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801a3c0:	ea43 030b 	orr.w	r3, r3, fp
 801a3c4:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801a3c8:	f820 3b02 	strh.w	r3, [r0], #2
 801a3cc:	e7e2      	b.n	801a394 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801a3ce:	f8b8 3000 	ldrh.w	r3, [r8]
 801a3d2:	1b9b      	subs	r3, r3, r6
 801a3d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a3d8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a3dc:	1b9b      	subs	r3, r3, r6
 801a3de:	441c      	add	r4, r3
 801a3e0:	e7d4      	b.n	801a38c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a3e2:	4b04      	ldr	r3, [pc, #16]	@ (801a3f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801a3e4:	6818      	ldr	r0, [r3, #0]
 801a3e6:	6803      	ldr	r3, [r0, #0]
 801a3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3ea:	4798      	blx	r3
 801a3ec:	e750      	b.n	801a290 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801a3ee:	bf00      	nop
 801a3f0:	fffff800 	.word	0xfffff800
 801a3f4:	2400aa84 	.word	0x2400aa84
 801a3f8:	2400aa7e 	.word	0x2400aa7e

0801a3fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a3fc:	b4f0      	push	{r4, r5, r6, r7}
 801a3fe:	460c      	mov	r4, r1
 801a400:	4611      	mov	r1, r2
 801a402:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a406:	461a      	mov	r2, r3
 801a408:	780f      	ldrb	r7, [r1, #0]
 801a40a:	9b04      	ldr	r3, [sp, #16]
 801a40c:	2f01      	cmp	r7, #1
 801a40e:	784e      	ldrb	r6, [r1, #1]
 801a410:	d038      	beq.n	801a484 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801a412:	d31f      	bcc.n	801a454 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 801a414:	2f02      	cmp	r7, #2
 801a416:	d14d      	bne.n	801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a418:	2e03      	cmp	r6, #3
 801a41a:	d84b      	bhi.n	801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a41c:	e8df f006 	tbb	[pc, r6]
 801a420:	17140702 	.word	0x17140702
 801a424:	9504      	str	r5, [sp, #16]
 801a426:	4620      	mov	r0, r4
 801a428:	bcf0      	pop	{r4, r5, r6, r7}
 801a42a:	f7ff be09 	b.w	801a040 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801a42e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801a430:	2800      	cmp	r0, #0
 801a432:	d03f      	beq.n	801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a434:	6806      	ldr	r6, [r0, #0]
 801a436:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a43a:	68b5      	ldr	r5, [r6, #8]
 801a43c:	4613      	mov	r3, r2
 801a43e:	46ac      	mov	ip, r5
 801a440:	460a      	mov	r2, r1
 801a442:	4621      	mov	r1, r4
 801a444:	bcf0      	pop	{r4, r5, r6, r7}
 801a446:	4760      	bx	ip
 801a448:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801a44c:	e7f0      	b.n	801a430 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a44e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801a452:	e7ed      	b.n	801a430 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a454:	2e03      	cmp	r6, #3
 801a456:	d82d      	bhi.n	801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a458:	e8df f006 	tbb	[pc, r6]
 801a45c:	110e0702 	.word	0x110e0702
 801a460:	9504      	str	r5, [sp, #16]
 801a462:	4620      	mov	r0, r4
 801a464:	bcf0      	pop	{r4, r5, r6, r7}
 801a466:	f7ff bd05 	b.w	8019e74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a46a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801a46c:	b310      	cbz	r0, 801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a46e:	6806      	ldr	r6, [r0, #0]
 801a470:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a474:	68f5      	ldr	r5, [r6, #12]
 801a476:	e7e1      	b.n	801a43c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801a478:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801a47c:	e7f6      	b.n	801a46c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801a47e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801a482:	e7f3      	b.n	801a46c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801a484:	2e03      	cmp	r6, #3
 801a486:	d815      	bhi.n	801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a488:	e8df f006 	tbb	[pc, r6]
 801a48c:	110e0702 	.word	0x110e0702
 801a490:	9504      	str	r5, [sp, #16]
 801a492:	4620      	mov	r0, r4
 801a494:	bcf0      	pop	{r4, r5, r6, r7}
 801a496:	f7ff be9f 	b.w	801a1d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a49a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801a49c:	b150      	cbz	r0, 801a4b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801a49e:	6806      	ldr	r6, [r0, #0]
 801a4a0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a4a4:	6935      	ldr	r5, [r6, #16]
 801a4a6:	e7c9      	b.n	801a43c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801a4a8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801a4ac:	e7f6      	b.n	801a49c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801a4ae:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801a4b2:	e7f3      	b.n	801a49c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801a4b4:	bcf0      	pop	{r4, r5, r6, r7}
 801a4b6:	4770      	bx	lr

0801a4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4bc:	b087      	sub	sp, #28
 801a4be:	4604      	mov	r4, r0
 801a4c0:	460e      	mov	r6, r1
 801a4c2:	6810      	ldr	r0, [r2, #0]
 801a4c4:	6851      	ldr	r1, [r2, #4]
 801a4c6:	ad02      	add	r5, sp, #8
 801a4c8:	4617      	mov	r7, r2
 801a4ca:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 801a4ce:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 801a700 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801a4d2:	c503      	stmia	r5!, {r0, r1}
 801a4d4:	6818      	ldr	r0, [r3, #0]
 801a4d6:	ad04      	add	r5, sp, #16
 801a4d8:	6859      	ldr	r1, [r3, #4]
 801a4da:	c503      	stmia	r5!, {r0, r1}
 801a4dc:	a802      	add	r0, sp, #8
 801a4de:	f7f7 fa83 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a4e2:	4639      	mov	r1, r7
 801a4e4:	a804      	add	r0, sp, #16
 801a4e6:	f7f7 faa7 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a4ea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a4ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a4f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a4f6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801a4fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a4fe:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801a502:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a506:	440e      	add	r6, r1
 801a508:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a50c:	440a      	add	r2, r1
 801a50e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a512:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a516:	4413      	add	r3, r2
 801a518:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a51c:	4b77      	ldr	r3, [pc, #476]	@ (801a6fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a51e:	6818      	ldr	r0, [r3, #0]
 801a520:	6803      	ldr	r3, [r0, #0]
 801a522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a524:	4798      	blx	r3
 801a526:	f8b9 b000 	ldrh.w	fp, [r9]
 801a52a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a52e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801a532:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a536:	fb05 f50b 	mul.w	r5, r5, fp
 801a53a:	fb0b 2303 	mla	r3, fp, r3, r2
 801a53e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a542:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a546:	9300      	str	r3, [sp, #0]
 801a548:	d069      	beq.n	801a61e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801a54a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801a54e:	4558      	cmp	r0, fp
 801a550:	f080 80cc 	bcs.w	801a6ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a554:	9b00      	ldr	r3, [sp, #0]
 801a556:	4631      	mov	r1, r6
 801a558:	18c3      	adds	r3, r0, r3
 801a55a:	9301      	str	r3, [sp, #4]
 801a55c:	9b01      	ldr	r3, [sp, #4]
 801a55e:	4298      	cmp	r0, r3
 801a560:	d24f      	bcs.n	801a602 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801a562:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a566:	2a00      	cmp	r2, #0
 801a568:	d048      	beq.n	801a5fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a56a:	fb0a f202 	mul.w	r2, sl, r2
 801a56e:	1c53      	adds	r3, r2, #1
 801a570:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a574:	121b      	asrs	r3, r3, #8
 801a576:	d041      	beq.n	801a5fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801a578:	8802      	ldrh	r2, [r0, #0]
 801a57a:	b29e      	uxth	r6, r3
 801a57c:	f8b4 c000 	ldrh.w	ip, [r4]
 801a580:	43db      	mvns	r3, r3
 801a582:	1215      	asrs	r5, r2, #8
 801a584:	b2db      	uxtb	r3, r3
 801a586:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a58a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801a58e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801a592:	fb15 f503 	smulbb	r5, r5, r3
 801a596:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801a59a:	00d2      	lsls	r2, r2, #3
 801a59c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801a5a0:	fb07 5706 	mla	r7, r7, r6, r5
 801a5a4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801a5a8:	b2d2      	uxtb	r2, r2
 801a5aa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a5ae:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801a5b2:	fb1e fe03 	smulbb	lr, lr, r3
 801a5b6:	b2bf      	uxth	r7, r7
 801a5b8:	fb12 f203 	smulbb	r2, r2, r3
 801a5bc:	fa5f fc8c 	uxtb.w	ip, ip
 801a5c0:	fb05 e506 	mla	r5, r5, r6, lr
 801a5c4:	f107 0e01 	add.w	lr, r7, #1
 801a5c8:	fb0c 2c06 	mla	ip, ip, r6, r2
 801a5cc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a5d0:	fa1f fc8c 	uxth.w	ip, ip
 801a5d4:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 801a5d8:	b2ad      	uxth	r5, r5
 801a5da:	f10c 0701 	add.w	r7, ip, #1
 801a5de:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a5e2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a5e6:	ea47 070e 	orr.w	r7, r7, lr
 801a5ea:	f105 0e01 	add.w	lr, r5, #1
 801a5ee:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801a5f2:	096d      	lsrs	r5, r5, #5
 801a5f4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801a5f8:	432f      	orrs	r7, r5
 801a5fa:	8007      	strh	r7, [r0, #0]
 801a5fc:	3002      	adds	r0, #2
 801a5fe:	3402      	adds	r4, #2
 801a600:	e7ac      	b.n	801a55c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801a602:	f8b9 3000 	ldrh.w	r3, [r9]
 801a606:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a60a:	eba3 0308 	sub.w	r3, r3, r8
 801a60e:	eba6 0608 	sub.w	r6, r6, r8
 801a612:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a616:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a61a:	440e      	add	r6, r1
 801a61c:	e797      	b.n	801a54e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801a61e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a622:	42a8      	cmp	r0, r5
 801a624:	d262      	bcs.n	801a6ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801a626:	9b00      	ldr	r3, [sp, #0]
 801a628:	4631      	mov	r1, r6
 801a62a:	eb00 0b03 	add.w	fp, r0, r3
 801a62e:	4558      	cmp	r0, fp
 801a630:	d24e      	bcs.n	801a6d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801a632:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a636:	b12b      	cbz	r3, 801a644 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a638:	2bff      	cmp	r3, #255	@ 0xff
 801a63a:	f8b4 e000 	ldrh.w	lr, [r4]
 801a63e:	d104      	bne.n	801a64a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801a640:	f8a0 e000 	strh.w	lr, [r0]
 801a644:	3002      	adds	r0, #2
 801a646:	3402      	adds	r4, #2
 801a648:	e7f1      	b.n	801a62e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801a64a:	8802      	ldrh	r2, [r0, #0]
 801a64c:	b29f      	uxth	r7, r3
 801a64e:	43db      	mvns	r3, r3
 801a650:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a654:	1216      	asrs	r6, r2, #8
 801a656:	b2db      	uxtb	r3, r3
 801a658:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801a65c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801a660:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801a664:	00d2      	lsls	r2, r2, #3
 801a666:	fb16 f603 	smulbb	r6, r6, r3
 801a66a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801a66e:	b2d2      	uxtb	r2, r2
 801a670:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a674:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a678:	fb1a fa03 	smulbb	sl, sl, r3
 801a67c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a680:	fa1f fc8c 	uxth.w	ip, ip
 801a684:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801a688:	fb12 f303 	smulbb	r3, r2, r3
 801a68c:	fa5f fe8e 	uxtb.w	lr, lr
 801a690:	fb06 a607 	mla	r6, r6, r7, sl
 801a694:	f10c 0201 	add.w	r2, ip, #1
 801a698:	fb0e 3307 	mla	r3, lr, r7, r3
 801a69c:	b2b6      	uxth	r6, r6
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a6a4:	f106 0a01 	add.w	sl, r6, #1
 801a6a8:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801a6ac:	f103 0c01 	add.w	ip, r3, #1
 801a6b0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801a6b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a6b8:	0976      	lsrs	r6, r6, #5
 801a6ba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a6be:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801a6c2:	ea4c 0c02 	orr.w	ip, ip, r2
 801a6c6:	ea4c 0c06 	orr.w	ip, ip, r6
 801a6ca:	f8a0 c000 	strh.w	ip, [r0]
 801a6ce:	e7b9      	b.n	801a644 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801a6d0:	f8b9 3000 	ldrh.w	r3, [r9]
 801a6d4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801a6d8:	eba3 0308 	sub.w	r3, r3, r8
 801a6dc:	eba6 0608 	sub.w	r6, r6, r8
 801a6e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a6e4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801a6e8:	440e      	add	r6, r1
 801a6ea:	e79a      	b.n	801a622 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801a6ec:	4b03      	ldr	r3, [pc, #12]	@ (801a6fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801a6ee:	6818      	ldr	r0, [r3, #0]
 801a6f0:	6803      	ldr	r3, [r0, #0]
 801a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a6f4:	4798      	blx	r3
 801a6f6:	b007      	add	sp, #28
 801a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6fc:	2400aa84 	.word	0x2400aa84
 801a700:	2400aa7e 	.word	0x2400aa7e

0801a704 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a708:	b089      	sub	sp, #36	@ 0x24
 801a70a:	4607      	mov	r7, r0
 801a70c:	4688      	mov	r8, r1
 801a70e:	4692      	mov	sl, r2
 801a710:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801a714:	4699      	mov	r9, r3
 801a716:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801a718:	2e00      	cmp	r6, #0
 801a71a:	d048      	beq.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a71c:	4608      	mov	r0, r1
 801a71e:	f7fa f811 	bl	8014744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a722:	4605      	mov	r5, r0
 801a724:	4640      	mov	r0, r8
 801a726:	f7fa f841 	bl	80147ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a72a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a72e:	4640      	mov	r0, r8
 801a730:	f8ad a008 	strh.w	sl, [sp, #8]
 801a734:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a738:	f8ad 900a 	strh.w	r9, [sp, #10]
 801a73c:	f7fa f8f4 	bl	8014928 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a740:	4605      	mov	r5, r0
 801a742:	4640      	mov	r0, r8
 801a744:	f7fa f920 	bl	8014988 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a748:	4682      	mov	sl, r0
 801a74a:	4640      	mov	r0, r8
 801a74c:	f7fa f970 	bl	8014a30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a750:	2810      	cmp	r0, #16
 801a752:	d82c      	bhi.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a754:	e8df f010 	tbh	[pc, r0, lsl #1]
 801a758:	00ba00ca 	.word	0x00ba00ca
 801a75c:	002b0011 	.word	0x002b0011
 801a760:	002b002b 	.word	0x002b002b
 801a764:	002b002b 	.word	0x002b002b
 801a768:	002b002b 	.word	0x002b002b
 801a76c:	00c1002b 	.word	0x00c1002b
 801a770:	002b002b 	.word	0x002b002b
 801a774:	002b0180 	.word	0x002b0180
 801a778:	0173      	.short	0x0173
 801a77a:	4bbc      	ldr	r3, [pc, #752]	@ (801aa6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 801a77c:	6818      	ldr	r0, [r3, #0]
 801a77e:	6803      	ldr	r3, [r0, #0]
 801a780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a782:	4798      	blx	r3
 801a784:	2eff      	cmp	r6, #255	@ 0xff
 801a786:	d101      	bne.n	801a78c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801a788:	0683      	lsls	r3, r0, #26
 801a78a:	d506      	bpl.n	801a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 801a78c:	4633      	mov	r3, r6
 801a78e:	4622      	mov	r2, r4
 801a790:	a902      	add	r1, sp, #8
 801a792:	4628      	mov	r0, r5
 801a794:	f7ff f8fc 	bl	8019990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a798:	e009      	b.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a79a:	4640      	mov	r0, r8
 801a79c:	f7fa f88c 	bl	80148b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a7a0:	b940      	cbnz	r0, 801a7b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 801a7a2:	4623      	mov	r3, r4
 801a7a4:	aa02      	add	r2, sp, #8
 801a7a6:	4629      	mov	r1, r5
 801a7a8:	4638      	mov	r0, r7
 801a7aa:	f7ff f9d7 	bl	8019b5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a7ae:	b009      	add	sp, #36	@ 0x24
 801a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7b4:	f10d 0918 	add.w	r9, sp, #24
 801a7b8:	4641      	mov	r1, r8
 801a7ba:	f10d 0810 	add.w	r8, sp, #16
 801a7be:	4648      	mov	r0, r9
 801a7c0:	f7fa f828 	bl	8014814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a7c4:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a7c8:	e888 0003 	stmia.w	r8, {r0, r1}
 801a7cc:	4640      	mov	r0, r8
 801a7ce:	4621      	mov	r1, r4
 801a7d0:	f7f3 ff1c 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 801a7d4:	4640      	mov	r0, r8
 801a7d6:	f7f3 ff5c 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7da:	2800      	cmp	r0, #0
 801a7dc:	d1d6      	bne.n	801a78c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801a7de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a7e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a7e6:	4293      	cmp	r3, r2
 801a7e8:	dd12      	ble.n	801a810 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 801a7ea:	1a9b      	subs	r3, r3, r2
 801a7ec:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a7f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a7f4:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a7f8:	4628      	mov	r0, r5
 801a7fa:	f8ad 201a 	strh.w	r2, [sp, #26]
 801a7fe:	464a      	mov	r2, r9
 801a800:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a804:	a902      	add	r1, sp, #8
 801a806:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a80a:	4633      	mov	r3, r6
 801a80c:	f7ff f8c0 	bl	8019990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a810:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801a814:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a818:	4293      	cmp	r3, r2
 801a81a:	dd12      	ble.n	801a842 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 801a81c:	1a9b      	subs	r3, r3, r2
 801a81e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a822:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801a826:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a82a:	464a      	mov	r2, r9
 801a82c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a830:	4628      	mov	r0, r5
 801a832:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a836:	23ff      	movs	r3, #255	@ 0xff
 801a838:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a83c:	a902      	add	r1, sp, #8
 801a83e:	f7ff f8a7 	bl	8019990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a842:	4643      	mov	r3, r8
 801a844:	aa02      	add	r2, sp, #8
 801a846:	4629      	mov	r1, r5
 801a848:	4638      	mov	r0, r7
 801a84a:	f7ff f987 	bl	8019b5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801a84e:	88a2      	ldrh	r2, [r4, #4]
 801a850:	8823      	ldrh	r3, [r4, #0]
 801a852:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a856:	4413      	add	r3, r2
 801a858:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a85c:	440a      	add	r2, r1
 801a85e:	b29b      	uxth	r3, r3
 801a860:	b292      	uxth	r2, r2
 801a862:	b218      	sxth	r0, r3
 801a864:	b211      	sxth	r1, r2
 801a866:	4288      	cmp	r0, r1
 801a868:	dd12      	ble.n	801a890 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 801a86a:	1a9b      	subs	r3, r3, r2
 801a86c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801a870:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801a874:	464a      	mov	r2, r9
 801a876:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a87a:	a902      	add	r1, sp, #8
 801a87c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a880:	23ff      	movs	r3, #255	@ 0xff
 801a882:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a886:	4628      	mov	r0, r5
 801a888:	f8ad 601a 	strh.w	r6, [sp, #26]
 801a88c:	f7ff f880 	bl	8019990 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a890:	88e2      	ldrh	r2, [r4, #6]
 801a892:	8863      	ldrh	r3, [r4, #2]
 801a894:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801a898:	4413      	add	r3, r2
 801a89a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801a89e:	440a      	add	r2, r1
 801a8a0:	b29b      	uxth	r3, r3
 801a8a2:	b292      	uxth	r2, r2
 801a8a4:	b218      	sxth	r0, r3
 801a8a6:	b211      	sxth	r1, r2
 801a8a8:	4288      	cmp	r0, r1
 801a8aa:	dd80      	ble.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a8ac:	1a9b      	subs	r3, r3, r2
 801a8ae:	f9b4 6000 	ldrsh.w	r6, [r4]
 801a8b2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a8b6:	464a      	mov	r2, r9
 801a8b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a8bc:	23ff      	movs	r3, #255	@ 0xff
 801a8be:	f8ad 6018 	strh.w	r6, [sp, #24]
 801a8c2:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a8c6:	f8ad 001c 	strh.w	r0, [sp, #28]
 801a8ca:	e761      	b.n	801a790 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801a8cc:	4633      	mov	r3, r6
 801a8ce:	4622      	mov	r2, r4
 801a8d0:	a902      	add	r1, sp, #8
 801a8d2:	4628      	mov	r0, r5
 801a8d4:	f7ff f9b2 	bl	8019c3c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801a8d8:	e769      	b.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a8da:	e9cd 4600 	strd	r4, r6, [sp]
 801a8de:	ab02      	add	r3, sp, #8
 801a8e0:	4652      	mov	r2, sl
 801a8e2:	4629      	mov	r1, r5
 801a8e4:	4638      	mov	r0, r7
 801a8e6:	f7ff fd89 	bl	801a3fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801a8ea:	e760      	b.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a8ec:	4640      	mov	r0, r8
 801a8ee:	f7f9 ffe3 	bl	80148b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a8f2:	b948      	cbnz	r0, 801a908 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 801a8f4:	683b      	ldr	r3, [r7, #0]
 801a8f6:	aa02      	add	r2, sp, #8
 801a8f8:	4629      	mov	r1, r5
 801a8fa:	e9cd 6000 	strd	r6, r0, [sp]
 801a8fe:	4638      	mov	r0, r7
 801a900:	68de      	ldr	r6, [r3, #12]
 801a902:	4623      	mov	r3, r4
 801a904:	47b0      	blx	r6
 801a906:	e752      	b.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a908:	f10d 0918 	add.w	r9, sp, #24
 801a90c:	4641      	mov	r1, r8
 801a90e:	f10d 0810 	add.w	r8, sp, #16
 801a912:	4648      	mov	r0, r9
 801a914:	f7f9 ff7e 	bl	8014814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a918:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a91c:	e888 0003 	stmia.w	r8, {r0, r1}
 801a920:	4640      	mov	r0, r8
 801a922:	4621      	mov	r1, r4
 801a924:	f7f3 fe72 	bl	800e60c <_ZN8touchgfx4RectaNERKS0_>
 801a928:	4640      	mov	r0, r8
 801a92a:	f7f3 feb2 	bl	800e692 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a92e:	b138      	cbz	r0, 801a940 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 801a930:	4623      	mov	r3, r4
 801a932:	9600      	str	r6, [sp, #0]
 801a934:	aa02      	add	r2, sp, #8
 801a936:	4651      	mov	r1, sl
 801a938:	4628      	mov	r0, r5
 801a93a:	f7ff fdbd 	bl	801a4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a93e:	e736      	b.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801a940:	683b      	ldr	r3, [r7, #0]
 801a942:	aa02      	add	r2, sp, #8
 801a944:	4629      	mov	r1, r5
 801a946:	e9cd 6000 	strd	r6, r0, [sp]
 801a94a:	4638      	mov	r0, r7
 801a94c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801a950:	4643      	mov	r3, r8
 801a952:	47d8      	blx	fp
 801a954:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a958:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a95c:	4293      	cmp	r3, r2
 801a95e:	dd13      	ble.n	801a988 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 801a960:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a964:	1a9b      	subs	r3, r3, r2
 801a966:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a96a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a96e:	4628      	mov	r0, r5
 801a970:	f8ad 201a 	strh.w	r2, [sp, #26]
 801a974:	aa02      	add	r2, sp, #8
 801a976:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a97a:	4651      	mov	r1, sl
 801a97c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a980:	464b      	mov	r3, r9
 801a982:	9600      	str	r6, [sp, #0]
 801a984:	f7ff fd98 	bl	801a4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a988:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801a98c:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a990:	4293      	cmp	r3, r2
 801a992:	dd13      	ble.n	801a9bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 801a994:	1a9b      	subs	r3, r3, r2
 801a996:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a99a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801a99e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a9a2:	aa02      	add	r2, sp, #8
 801a9a4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a9ae:	464b      	mov	r3, r9
 801a9b0:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a9b4:	4651      	mov	r1, sl
 801a9b6:	9600      	str	r6, [sp, #0]
 801a9b8:	f7ff fd7e 	bl	801a4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a9bc:	88a2      	ldrh	r2, [r4, #4]
 801a9be:	8823      	ldrh	r3, [r4, #0]
 801a9c0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a9c4:	4413      	add	r3, r2
 801a9c6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a9ca:	440a      	add	r2, r1
 801a9cc:	b29b      	uxth	r3, r3
 801a9ce:	b292      	uxth	r2, r2
 801a9d0:	b218      	sxth	r0, r3
 801a9d2:	b211      	sxth	r1, r2
 801a9d4:	4288      	cmp	r0, r1
 801a9d6:	dd13      	ble.n	801aa00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 801a9d8:	1a9b      	subs	r3, r3, r2
 801a9da:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801a9de:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801a9e2:	aa02      	add	r2, sp, #8
 801a9e4:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a9e8:	4651      	mov	r1, sl
 801a9ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a9ee:	464b      	mov	r3, r9
 801a9f0:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a9f4:	4628      	mov	r0, r5
 801a9f6:	9600      	str	r6, [sp, #0]
 801a9f8:	f8ad 701a 	strh.w	r7, [sp, #26]
 801a9fc:	f7ff fd5c 	bl	801a4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801aa00:	88e2      	ldrh	r2, [r4, #6]
 801aa02:	8863      	ldrh	r3, [r4, #2]
 801aa04:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801aa08:	4413      	add	r3, r2
 801aa0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801aa0e:	440a      	add	r2, r1
 801aa10:	b29b      	uxth	r3, r3
 801aa12:	b292      	uxth	r2, r2
 801aa14:	b218      	sxth	r0, r3
 801aa16:	b211      	sxth	r1, r2
 801aa18:	4288      	cmp	r0, r1
 801aa1a:	f77f aec8 	ble.w	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801aa1e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801aa22:	1a9b      	subs	r3, r3, r2
 801aa24:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801aa28:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa2c:	464b      	mov	r3, r9
 801aa2e:	f8ad 7018 	strh.w	r7, [sp, #24]
 801aa32:	f8ad 101a 	strh.w	r1, [sp, #26]
 801aa36:	f8ad 001c 	strh.w	r0, [sp, #28]
 801aa3a:	9600      	str	r6, [sp, #0]
 801aa3c:	e77a      	b.n	801a934 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801aa3e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801aa42:	2800      	cmp	r0, #0
 801aa44:	f43f aeb3 	beq.w	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801aa48:	6803      	ldr	r3, [r0, #0]
 801aa4a:	9600      	str	r6, [sp, #0]
 801aa4c:	68de      	ldr	r6, [r3, #12]
 801aa4e:	4623      	mov	r3, r4
 801aa50:	aa02      	add	r2, sp, #8
 801aa52:	4629      	mov	r1, r5
 801aa54:	47b0      	blx	r6
 801aa56:	e6aa      	b.n	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801aa58:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	f43f aea6 	beq.w	801a7ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801aa62:	6803      	ldr	r3, [r0, #0]
 801aa64:	9600      	str	r6, [sp, #0]
 801aa66:	689e      	ldr	r6, [r3, #8]
 801aa68:	e7f1      	b.n	801aa4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 801aa6a:	bf00      	nop
 801aa6c:	2400aa84 	.word	0x2400aa84

0801aa70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801aa70:	b180      	cbz	r0, 801aa94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801aa72:	2903      	cmp	r1, #3
 801aa74:	d81c      	bhi.n	801aab0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801aa76:	e8df f001 	tbb	[pc, r1]
 801aa7a:	1d02      	.short	0x1d02
 801aa7c:	1f08      	.short	0x1f08
 801aa7e:	4b10      	ldr	r3, [pc, #64]	@ (801aac0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801aa80:	8818      	ldrh	r0, [r3, #0]
 801aa82:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aa86:	4240      	negs	r0, r0
 801aa88:	4770      	bx	lr
 801aa8a:	4b0d      	ldr	r3, [pc, #52]	@ (801aac0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801aa8c:	8818      	ldrh	r0, [r3, #0]
 801aa8e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aa92:	4770      	bx	lr
 801aa94:	2903      	cmp	r1, #3
 801aa96:	d80b      	bhi.n	801aab0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801aa98:	a301      	add	r3, pc, #4	@ (adr r3, 801aaa0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801aa9a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801aa9e:	bf00      	nop
 801aaa0:	0801aab5 	.word	0x0801aab5
 801aaa4:	0801aa8b 	.word	0x0801aa8b
 801aaa8:	0801aab9 	.word	0x0801aab9
 801aaac:	0801aa7f 	.word	0x0801aa7f
 801aab0:	2000      	movs	r0, #0
 801aab2:	4770      	bx	lr
 801aab4:	2001      	movs	r0, #1
 801aab6:	4770      	bx	lr
 801aab8:	f04f 30ff 	mov.w	r0, #4294967295
 801aabc:	4770      	bx	lr
 801aabe:	bf00      	nop
 801aac0:	2400aa7e 	.word	0x2400aa7e

0801aac4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801aac4:	b180      	cbz	r0, 801aae8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801aac6:	2903      	cmp	r1, #3
 801aac8:	d81c      	bhi.n	801ab04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801aaca:	e8df f001 	tbb	[pc, r1]
 801aace:	021d      	.short	0x021d
 801aad0:	071f      	.short	0x071f
 801aad2:	4b10      	ldr	r3, [pc, #64]	@ (801ab14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801aad4:	8818      	ldrh	r0, [r3, #0]
 801aad6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aada:	4770      	bx	lr
 801aadc:	4b0d      	ldr	r3, [pc, #52]	@ (801ab14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801aade:	8818      	ldrh	r0, [r3, #0]
 801aae0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801aae4:	4240      	negs	r0, r0
 801aae6:	4770      	bx	lr
 801aae8:	2903      	cmp	r1, #3
 801aaea:	d80b      	bhi.n	801ab04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801aaec:	a301      	add	r3, pc, #4	@ (adr r3, 801aaf4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801aaee:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801aaf2:	bf00      	nop
 801aaf4:	0801aad3 	.word	0x0801aad3
 801aaf8:	0801ab0d 	.word	0x0801ab0d
 801aafc:	0801aadd 	.word	0x0801aadd
 801ab00:	0801ab09 	.word	0x0801ab09
 801ab04:	2000      	movs	r0, #0
 801ab06:	4770      	bx	lr
 801ab08:	2001      	movs	r0, #1
 801ab0a:	4770      	bx	lr
 801ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab10:	4770      	bx	lr
 801ab12:	bf00      	nop
 801ab14:	2400aa7e 	.word	0x2400aa7e

0801ab18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab1c:	b099      	sub	sp, #100	@ 0x64
 801ab1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ab20:	a914      	add	r1, sp, #80	@ 0x50
 801ab22:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 801ab26:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 801ab2a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 801ab2e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 801ab32:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 801ab36:	e881 000c 	stmia.w	r1, {r2, r3}
 801ab3a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801ab3e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 801ab42:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab44:	f891 900d 	ldrb.w	r9, [r1, #13]
 801ab48:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801ab4c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801ab50:	9310      	str	r3, [sp, #64]	@ 0x40
 801ab52:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 801ab56:	930c      	str	r3, [sp, #48]	@ 0x30
 801ab58:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 801ab5c:	798f      	ldrb	r7, [r1, #6]
 801ab5e:	431f      	orrs	r7, r3
 801ab60:	f000 8195 	beq.w	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ab64:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801ab68:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801ab6c:	f891 9007 	ldrb.w	r9, [r1, #7]
 801ab70:	ea59 0903 	orrs.w	r9, r9, r3
 801ab74:	f000 818b 	beq.w	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ab78:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	2d00      	cmp	r5, #0
 801ab80:	f000 812e 	beq.w	801ade0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801ab84:	1aed      	subs	r5, r5, r3
 801ab86:	b2ad      	uxth	r5, r5
 801ab88:	042b      	lsls	r3, r5, #16
 801ab8a:	d502      	bpl.n	801ab92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ab8c:	1b64      	subs	r4, r4, r5
 801ab8e:	2500      	movs	r5, #0
 801ab90:	b224      	sxth	r4, r4
 801ab92:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ab96:	a814      	add	r0, sp, #80	@ 0x50
 801ab98:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801ab9c:	428c      	cmp	r4, r1
 801ab9e:	b28b      	uxth	r3, r1
 801aba0:	bfbf      	itttt	lt
 801aba2:	18ed      	addlt	r5, r5, r3
 801aba4:	1b2c      	sublt	r4, r5, r4
 801aba6:	b2a5      	uxthlt	r5, r4
 801aba8:	460c      	movlt	r4, r1
 801abaa:	8891      	ldrh	r1, [r2, #4]
 801abac:	440b      	add	r3, r1
 801abae:	4621      	mov	r1, r4
 801abb0:	b21b      	sxth	r3, r3
 801abb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801abb4:	88d3      	ldrh	r3, [r2, #6]
 801abb6:	8852      	ldrh	r2, [r2, #2]
 801abb8:	4413      	add	r3, r2
 801abba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abbc:	b21b      	sxth	r3, r3
 801abbe:	930d      	str	r3, [sp, #52]	@ 0x34
 801abc0:	4bbd      	ldr	r3, [pc, #756]	@ (801aeb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801abc2:	f893 b000 	ldrb.w	fp, [r3]
 801abc6:	f10b 3cff 	add.w	ip, fp, #4294967295
 801abca:	f1dc 0300 	rsbs	r3, ip, #0
 801abce:	eb43 030c 	adc.w	r3, r3, ip
 801abd2:	930e      	str	r3, [sp, #56]	@ 0x38
 801abd4:	4653      	mov	r3, sl
 801abd6:	f7f6 fd7c 	bl	80116d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801abda:	4621      	mov	r1, r4
 801abdc:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 801abe0:	4653      	mov	r3, sl
 801abe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abe4:	a814      	add	r0, sp, #80	@ 0x50
 801abe6:	f7f6 fd91 	bl	801170c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801abea:	a918      	add	r1, sp, #96	@ 0x60
 801abec:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801abf0:	a817      	add	r0, sp, #92	@ 0x5c
 801abf2:	f7f6 feb7 	bl	8011964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801abf6:	f1ba 0f00 	cmp.w	sl, #0
 801abfa:	f040 80f4 	bne.w	801ade6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801abfe:	f1bb 0f01 	cmp.w	fp, #1
 801ac02:	f040 80f8 	bne.w	801adf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801ac06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	f040 8145 	bne.w	801ae98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801ac0e:	b2ba      	uxth	r2, r7
 801ac10:	b905      	cbnz	r5, 801ac14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801ac12:	b16e      	cbz	r6, 801ac30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801ac14:	fb06 5302 	mla	r3, r6, r2, r5
 801ac18:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801ac1a:	4631      	mov	r1, r6
 801ac1c:	fb08 f303 	mul.w	r3, r8, r3
 801ac20:	f003 0607 	and.w	r6, r3, #7
 801ac24:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801ac28:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ac2a:	eba9 0301 	sub.w	r3, r9, r1
 801ac2e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac30:	4651      	mov	r1, sl
 801ac32:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ac34:	f7ff ff1c 	bl	801aa70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801ac38:	4681      	mov	r9, r0
 801ac3a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ac3c:	f7ff ff42 	bl	801aac4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801ac40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ac42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ac44:	4683      	mov	fp, r0
 801ac46:	eba3 0a01 	sub.w	sl, r3, r1
 801ac4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ac4c:	459a      	cmp	sl, r3
 801ac4e:	bfa8      	it	ge
 801ac50:	469a      	movge	sl, r3
 801ac52:	f1ba 0f00 	cmp.w	sl, #0
 801ac56:	f340 811a 	ble.w	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ac5a:	1b64      	subs	r4, r4, r5
 801ac5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac5e:	1b1c      	subs	r4, r3, r4
 801ac60:	42bc      	cmp	r4, r7
 801ac62:	bfd4      	ite	le
 801ac64:	ebc5 0504 	rsble	r5, r5, r4
 801ac68:	ebc5 0507 	rsbgt	r5, r5, r7
 801ac6c:	2d00      	cmp	r5, #0
 801ac6e:	f340 810e 	ble.w	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ac72:	1b52      	subs	r2, r2, r5
 801ac74:	fb08 f302 	mul.w	r3, r8, r2
 801ac78:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	f040 8116 	bne.w	801aeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801ac82:	4b8e      	ldr	r3, [pc, #568]	@ (801aebc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801ac84:	6818      	ldr	r0, [r3, #0]
 801ac86:	6803      	ldr	r3, [r0, #0]
 801ac88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac8a:	4798      	blx	r3
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	4a8c      	ldr	r2, [pc, #560]	@ (801aec0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801ac90:	fa03 f308 	lsl.w	r3, r3, r8
 801ac94:	8811      	ldrh	r1, [r2, #0]
 801ac96:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 801ac9a:	3b01      	subs	r3, #1
 801ac9c:	b2db      	uxtb	r3, r3
 801ac9e:	930e      	str	r3, [sp, #56]	@ 0x38
 801aca0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801aca4:	fb01 2303 	mla	r3, r1, r3, r2
 801aca8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801acac:	930a      	str	r3, [sp, #40]	@ 0x28
 801acae:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801acb0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801acb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801acb6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801acb8:	0a19      	lsrs	r1, r3, #8
 801acba:	b2cb      	uxtb	r3, r1
 801acbc:	9312      	str	r3, [sp, #72]	@ 0x48
 801acbe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801acc0:	b2db      	uxtb	r3, r3
 801acc2:	9311      	str	r3, [sp, #68]	@ 0x44
 801acc4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801acc6:	095a      	lsrs	r2, r3, #5
 801acc8:	4b7e      	ldr	r3, [pc, #504]	@ (801aec4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801acca:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801acce:	400b      	ands	r3, r1
 801acd0:	4313      	orrs	r3, r2
 801acd2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801acd4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801acd8:	4313      	orrs	r3, r2
 801acda:	b29b      	uxth	r3, r3
 801acdc:	9310      	str	r3, [sp, #64]	@ 0x40
 801acde:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ace0:	781a      	ldrb	r2, [r3, #0]
 801ace2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801ace6:	fb05 b919 	mls	r9, r5, r9, fp
 801acea:	4132      	asrs	r2, r6
 801acec:	fb03 fb05 	mul.w	fp, r3, r5
 801acf0:	930d      	str	r3, [sp, #52]	@ 0x34
 801acf2:	b2d2      	uxtb	r2, r2
 801acf4:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801acf8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801acfc:	f0c0 80f5 	bcc.w	801aeea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801ad00:	46ae      	mov	lr, r5
 801ad02:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 801ad06:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ad0a:	f0c0 80dd 	bcc.w	801aec8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801ad0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad10:	4013      	ands	r3, r2
 801ad12:	d055      	beq.n	801adc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801ad14:	20ff      	movs	r0, #255	@ 0xff
 801ad16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ad18:	fb90 f1f1 	sdiv	r1, r0, r1
 801ad1c:	434b      	muls	r3, r1
 801ad1e:	2bfe      	cmp	r3, #254	@ 0xfe
 801ad20:	dd03      	ble.n	801ad2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801ad22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ad24:	4281      	cmp	r1, r0
 801ad26:	f000 80c4 	beq.w	801aeb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801ad2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ad2c:	f8bc 4000 	ldrh.w	r4, [ip]
 801ad30:	fb11 f303 	smulbb	r3, r1, r3
 801ad34:	1220      	asrs	r0, r4, #8
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801ad3c:	1c59      	adds	r1, r3, #1
 801ad3e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801ad42:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ad46:	10e1      	asrs	r1, r4, #3
 801ad48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ad4c:	00e4      	lsls	r4, r4, #3
 801ad4e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801ad52:	b29f      	uxth	r7, r3
 801ad54:	43db      	mvns	r3, r3
 801ad56:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801ad5a:	b2db      	uxtb	r3, r3
 801ad5c:	b2e4      	uxtb	r4, r4
 801ad5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ad62:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801ad66:	fb13 f907 	smulbb	r9, r3, r7
 801ad6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad6c:	fb00 9003 	mla	r0, r0, r3, r9
 801ad70:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ad72:	fb13 f907 	smulbb	r9, r3, r7
 801ad76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad78:	b280      	uxth	r0, r0
 801ad7a:	fb01 9103 	mla	r1, r1, r3, r9
 801ad7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ad80:	fb13 f707 	smulbb	r7, r3, r7
 801ad84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad86:	b289      	uxth	r1, r1
 801ad88:	fb04 7403 	mla	r4, r4, r3, r7
 801ad8c:	1c43      	adds	r3, r0, #1
 801ad8e:	b2a4      	uxth	r4, r4
 801ad90:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ad94:	f104 0901 	add.w	r9, r4, #1
 801ad98:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801ad9c:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801ada0:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801ada4:	ea49 0000 	orr.w	r0, r9, r0
 801ada8:	f101 0901 	add.w	r9, r1, #1
 801adac:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801adb0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801adb4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801adb8:	ea40 0009 	orr.w	r0, r0, r9
 801adbc:	f8ac 0000 	strh.w	r0, [ip]
 801adc0:	4446      	add	r6, r8
 801adc2:	b2b6      	uxth	r6, r6
 801adc4:	2e07      	cmp	r6, #7
 801adc6:	bf89      	itett	hi
 801adc8:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801adca:	fa42 f208 	asrls.w	r2, r2, r8
 801adce:	2600      	movhi	r6, #0
 801add0:	785a      	ldrbhi	r2, [r3, #1]
 801add2:	bf8a      	itet	hi
 801add4:	3301      	addhi	r3, #1
 801add6:	b2d2      	uxtbls	r2, r2
 801add8:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 801adda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801addc:	449c      	add	ip, r3
 801adde:	e792      	b.n	801ad06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ade0:	441c      	add	r4, r3
 801ade2:	b224      	sxth	r4, r4
 801ade4:	e6d5      	b.n	801ab92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ade6:	f1ba 0f01 	cmp.w	sl, #1
 801adea:	f47f af0c 	bne.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801adee:	f1bb 0f01 	cmp.w	fp, #1
 801adf2:	f47f af08 	bne.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801adf6:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 801aebc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801adfa:	f8db 0000 	ldr.w	r0, [fp]
 801adfe:	6803      	ldr	r3, [r0, #0]
 801ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae02:	4798      	blx	r3
 801ae04:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801ae08:	465a      	mov	r2, fp
 801ae0a:	d006      	beq.n	801ae1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801ae0c:	f1b8 0f04 	cmp.w	r8, #4
 801ae10:	d140      	bne.n	801ae94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801ae12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ae14:	3300      	adds	r3, #0
 801ae16:	bf18      	it	ne
 801ae18:	2301      	movne	r3, #1
 801ae1a:	0580      	lsls	r0, r0, #22
 801ae1c:	d56e      	bpl.n	801aefc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801ae1e:	f1b8 0f08 	cmp.w	r8, #8
 801ae22:	d16b      	bne.n	801aefc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	bf0c      	ite	eq
 801ae28:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801ae2c:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801ae30:	2d00      	cmp	r5, #0
 801ae32:	f47f aee8 	bne.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ae36:	2e00      	cmp	r6, #0
 801ae38:	f47f aee5 	bne.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ae3c:	19e3      	adds	r3, r4, r7
 801ae3e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ae40:	4283      	cmp	r3, r0
 801ae42:	f73f aee0 	bgt.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ae46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae48:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ae4a:	444b      	add	r3, r9
 801ae4c:	4283      	cmp	r3, r0
 801ae4e:	f73f aeda 	bgt.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ae52:	b2bf      	uxth	r7, r7
 801ae54:	f1b8 0f08 	cmp.w	r8, #8
 801ae58:	6810      	ldr	r0, [r2, #0]
 801ae5a:	f04f 0500 	mov.w	r5, #0
 801ae5e:	bf18      	it	ne
 801ae60:	3701      	addne	r7, #1
 801ae62:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 801ae66:	6804      	ldr	r4, [r0, #0]
 801ae68:	bf18      	it	ne
 801ae6a:	f027 0701 	bicne.w	r7, r7, #1
 801ae6e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801ae72:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801ae76:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ae78:	bf18      	it	ne
 801ae7a:	b2bf      	uxthne	r7, r7
 801ae7c:	9104      	str	r1, [sp, #16]
 801ae7e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801ae80:	e9cd 7900 	strd	r7, r9, [sp]
 801ae84:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ae88:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801ae8a:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801ae8c:	47a0      	blx	r4
 801ae8e:	b019      	add	sp, #100	@ 0x64
 801ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae94:	2300      	movs	r3, #0
 801ae96:	e7c0      	b.n	801ae1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801ae98:	2208      	movs	r2, #8
 801ae9a:	fb92 f3f8 	sdiv	r3, r2, r8
 801ae9e:	1e5a      	subs	r2, r3, #1
 801aea0:	443a      	add	r2, r7
 801aea2:	fb92 f2f3 	sdiv	r2, r2, r3
 801aea6:	fb12 f203 	smulbb	r2, r2, r3
 801aeaa:	b292      	uxth	r2, r2
 801aeac:	e6b0      	b.n	801ac10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801aeae:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801aeb0:	e6ec      	b.n	801ac8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801aeb2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801aeb4:	e782      	b.n	801adbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801aeb6:	bf00      	nop
 801aeb8:	2400aa7c 	.word	0x2400aa7c
 801aebc:	2400aa84 	.word	0x2400aa84
 801aec0:	2400aa7e 	.word	0x2400aa7e
 801aec4:	00fff800 	.word	0x00fff800
 801aec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aeca:	b153      	cbz	r3, 801aee2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801aecc:	441e      	add	r6, r3
 801aece:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aed0:	b2b6      	uxth	r6, r6
 801aed2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801aed6:	f006 0607 	and.w	r6, r6, #7
 801aeda:	781a      	ldrb	r2, [r3, #0]
 801aedc:	9328      	str	r3, [sp, #160]	@ 0xa0
 801aede:	4132      	asrs	r2, r6
 801aee0:	b2d2      	uxtb	r2, r2
 801aee2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aee4:	445b      	add	r3, fp
 801aee6:	930a      	str	r3, [sp, #40]	@ 0x28
 801aee8:	e706      	b.n	801acf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801aeea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d1ce      	bne.n	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801aef0:	4b05      	ldr	r3, [pc, #20]	@ (801af08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801aef2:	6818      	ldr	r0, [r3, #0]
 801aef4:	6803      	ldr	r3, [r0, #0]
 801aef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aef8:	4798      	blx	r3
 801aefa:	e7c8      	b.n	801ae8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	f43f ae82 	beq.w	801ac06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801af02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801af06:	e793      	b.n	801ae30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801af08:	2400aa84 	.word	0x2400aa84

0801af0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801af0c:	b538      	push	{r3, r4, r5, lr}
 801af0e:	4c15      	ldr	r4, [pc, #84]	@ (801af64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801af10:	4605      	mov	r5, r0
 801af12:	7823      	ldrb	r3, [r4, #0]
 801af14:	f3bf 8f5b 	dmb	ish
 801af18:	07da      	lsls	r2, r3, #31
 801af1a:	d40b      	bmi.n	801af34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801af1c:	4620      	mov	r0, r4
 801af1e:	f007 ff23 	bl	8022d68 <__cxa_guard_acquire>
 801af22:	b138      	cbz	r0, 801af34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801af24:	4620      	mov	r0, r4
 801af26:	f007 ff2b 	bl	8022d80 <__cxa_guard_release>
 801af2a:	4a0f      	ldr	r2, [pc, #60]	@ (801af68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801af2c:	490f      	ldr	r1, [pc, #60]	@ (801af6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801af2e:	4810      	ldr	r0, [pc, #64]	@ (801af70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801af30:	f007 ff13 	bl	8022d5a <__aeabi_atexit>
 801af34:	4c0f      	ldr	r4, [pc, #60]	@ (801af74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801af36:	7823      	ldrb	r3, [r4, #0]
 801af38:	f3bf 8f5b 	dmb	ish
 801af3c:	07db      	lsls	r3, r3, #31
 801af3e:	d40b      	bmi.n	801af58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801af40:	4620      	mov	r0, r4
 801af42:	f007 ff11 	bl	8022d68 <__cxa_guard_acquire>
 801af46:	b138      	cbz	r0, 801af58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801af48:	4620      	mov	r0, r4
 801af4a:	f007 ff19 	bl	8022d80 <__cxa_guard_release>
 801af4e:	4a06      	ldr	r2, [pc, #24]	@ (801af68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801af50:	4909      	ldr	r1, [pc, #36]	@ (801af78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801af52:	480a      	ldr	r0, [pc, #40]	@ (801af7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801af54:	f007 ff01 	bl	8022d5a <__aeabi_atexit>
 801af58:	4b05      	ldr	r3, [pc, #20]	@ (801af70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801af5a:	616b      	str	r3, [r5, #20]
 801af5c:	4b07      	ldr	r3, [pc, #28]	@ (801af7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801af5e:	61ab      	str	r3, [r5, #24]
 801af60:	bd38      	pop	{r3, r4, r5, pc}
 801af62:	bf00      	nop
 801af64:	2400ab60 	.word	0x2400ab60
 801af68:	24000000 	.word	0x24000000
 801af6c:	080170a9 	.word	0x080170a9
 801af70:	2400007c 	.word	0x2400007c
 801af74:	2400ab64 	.word	0x2400ab64
 801af78:	080170a7 	.word	0x080170a7
 801af7c:	24000080 	.word	0x24000080

0801af80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801af80:	b538      	push	{r3, r4, r5, lr}
 801af82:	4c15      	ldr	r4, [pc, #84]	@ (801afd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801af84:	4605      	mov	r5, r0
 801af86:	7823      	ldrb	r3, [r4, #0]
 801af88:	f3bf 8f5b 	dmb	ish
 801af8c:	07da      	lsls	r2, r3, #31
 801af8e:	d40b      	bmi.n	801afa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801af90:	4620      	mov	r0, r4
 801af92:	f007 fee9 	bl	8022d68 <__cxa_guard_acquire>
 801af96:	b138      	cbz	r0, 801afa8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801af98:	4620      	mov	r0, r4
 801af9a:	f007 fef1 	bl	8022d80 <__cxa_guard_release>
 801af9e:	4a0f      	ldr	r2, [pc, #60]	@ (801afdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801afa0:	490f      	ldr	r1, [pc, #60]	@ (801afe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801afa2:	4810      	ldr	r0, [pc, #64]	@ (801afe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801afa4:	f007 fed9 	bl	8022d5a <__aeabi_atexit>
 801afa8:	4c0f      	ldr	r4, [pc, #60]	@ (801afe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801afaa:	7823      	ldrb	r3, [r4, #0]
 801afac:	f3bf 8f5b 	dmb	ish
 801afb0:	07db      	lsls	r3, r3, #31
 801afb2:	d40b      	bmi.n	801afcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801afb4:	4620      	mov	r0, r4
 801afb6:	f007 fed7 	bl	8022d68 <__cxa_guard_acquire>
 801afba:	b138      	cbz	r0, 801afcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801afbc:	4620      	mov	r0, r4
 801afbe:	f007 fedf 	bl	8022d80 <__cxa_guard_release>
 801afc2:	4a06      	ldr	r2, [pc, #24]	@ (801afdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801afc4:	4909      	ldr	r1, [pc, #36]	@ (801afec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801afc6:	480a      	ldr	r0, [pc, #40]	@ (801aff0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801afc8:	f007 fec7 	bl	8022d5a <__aeabi_atexit>
 801afcc:	4b05      	ldr	r3, [pc, #20]	@ (801afe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801afce:	60eb      	str	r3, [r5, #12]
 801afd0:	4b07      	ldr	r3, [pc, #28]	@ (801aff0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801afd2:	612b      	str	r3, [r5, #16]
 801afd4:	bd38      	pop	{r3, r4, r5, pc}
 801afd6:	bf00      	nop
 801afd8:	2400ab38 	.word	0x2400ab38
 801afdc:	24000000 	.word	0x24000000
 801afe0:	080170ad 	.word	0x080170ad
 801afe4:	24000054 	.word	0x24000054
 801afe8:	2400ab3c 	.word	0x2400ab3c
 801afec:	080170ab 	.word	0x080170ab
 801aff0:	24000058 	.word	0x24000058

0801aff4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801aff4:	b510      	push	{r4, lr}
 801aff6:	4604      	mov	r4, r0
 801aff8:	f7ff ff88 	bl	801af0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801affc:	4620      	mov	r0, r4
 801affe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b002:	f7ff bfbd 	b.w	801af80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801b008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b008:	b538      	push	{r3, r4, r5, lr}
 801b00a:	4c15      	ldr	r4, [pc, #84]	@ (801b060 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b00c:	4605      	mov	r5, r0
 801b00e:	7823      	ldrb	r3, [r4, #0]
 801b010:	f3bf 8f5b 	dmb	ish
 801b014:	07da      	lsls	r2, r3, #31
 801b016:	d40b      	bmi.n	801b030 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b018:	4620      	mov	r0, r4
 801b01a:	f007 fea5 	bl	8022d68 <__cxa_guard_acquire>
 801b01e:	b138      	cbz	r0, 801b030 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b020:	4620      	mov	r0, r4
 801b022:	f007 fead 	bl	8022d80 <__cxa_guard_release>
 801b026:	4a0f      	ldr	r2, [pc, #60]	@ (801b064 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b028:	490f      	ldr	r1, [pc, #60]	@ (801b068 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b02a:	4810      	ldr	r0, [pc, #64]	@ (801b06c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b02c:	f007 fe95 	bl	8022d5a <__aeabi_atexit>
 801b030:	4c0f      	ldr	r4, [pc, #60]	@ (801b070 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b032:	7823      	ldrb	r3, [r4, #0]
 801b034:	f3bf 8f5b 	dmb	ish
 801b038:	07db      	lsls	r3, r3, #31
 801b03a:	d40b      	bmi.n	801b054 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b03c:	4620      	mov	r0, r4
 801b03e:	f007 fe93 	bl	8022d68 <__cxa_guard_acquire>
 801b042:	b138      	cbz	r0, 801b054 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b044:	4620      	mov	r0, r4
 801b046:	f007 fe9b 	bl	8022d80 <__cxa_guard_release>
 801b04a:	4a06      	ldr	r2, [pc, #24]	@ (801b064 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b04c:	4909      	ldr	r1, [pc, #36]	@ (801b074 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b04e:	480a      	ldr	r0, [pc, #40]	@ (801b078 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b050:	f007 fe83 	bl	8022d5a <__aeabi_atexit>
 801b054:	4b05      	ldr	r3, [pc, #20]	@ (801b06c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b056:	626b      	str	r3, [r5, #36]	@ 0x24
 801b058:	4b07      	ldr	r3, [pc, #28]	@ (801b078 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b05a:	62ab      	str	r3, [r5, #40]	@ 0x28
 801b05c:	bd38      	pop	{r3, r4, r5, pc}
 801b05e:	bf00      	nop
 801b060:	2400ab68 	.word	0x2400ab68
 801b064:	24000000 	.word	0x24000000
 801b068:	080170a1 	.word	0x080170a1
 801b06c:	24000084 	.word	0x24000084
 801b070:	2400ab6c 	.word	0x2400ab6c
 801b074:	0801709f 	.word	0x0801709f
 801b078:	24000088 	.word	0x24000088

0801b07c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b07c:	b538      	push	{r3, r4, r5, lr}
 801b07e:	4c15      	ldr	r4, [pc, #84]	@ (801b0d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b080:	4605      	mov	r5, r0
 801b082:	7823      	ldrb	r3, [r4, #0]
 801b084:	f3bf 8f5b 	dmb	ish
 801b088:	07da      	lsls	r2, r3, #31
 801b08a:	d40b      	bmi.n	801b0a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b08c:	4620      	mov	r0, r4
 801b08e:	f007 fe6b 	bl	8022d68 <__cxa_guard_acquire>
 801b092:	b138      	cbz	r0, 801b0a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b094:	4620      	mov	r0, r4
 801b096:	f007 fe73 	bl	8022d80 <__cxa_guard_release>
 801b09a:	4a0f      	ldr	r2, [pc, #60]	@ (801b0d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b09c:	490f      	ldr	r1, [pc, #60]	@ (801b0dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b09e:	4810      	ldr	r0, [pc, #64]	@ (801b0e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b0a0:	f007 fe5b 	bl	8022d5a <__aeabi_atexit>
 801b0a4:	4c0f      	ldr	r4, [pc, #60]	@ (801b0e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b0a6:	7823      	ldrb	r3, [r4, #0]
 801b0a8:	f3bf 8f5b 	dmb	ish
 801b0ac:	07db      	lsls	r3, r3, #31
 801b0ae:	d40b      	bmi.n	801b0c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	f007 fe59 	bl	8022d68 <__cxa_guard_acquire>
 801b0b6:	b138      	cbz	r0, 801b0c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	f007 fe61 	bl	8022d80 <__cxa_guard_release>
 801b0be:	4a06      	ldr	r2, [pc, #24]	@ (801b0d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b0c0:	4909      	ldr	r1, [pc, #36]	@ (801b0e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b0c2:	480a      	ldr	r0, [pc, #40]	@ (801b0ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b0c4:	f007 fe49 	bl	8022d5a <__aeabi_atexit>
 801b0c8:	4b05      	ldr	r3, [pc, #20]	@ (801b0e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b0ca:	61eb      	str	r3, [r5, #28]
 801b0cc:	4b07      	ldr	r3, [pc, #28]	@ (801b0ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b0ce:	622b      	str	r3, [r5, #32]
 801b0d0:	bd38      	pop	{r3, r4, r5, pc}
 801b0d2:	bf00      	nop
 801b0d4:	2400ab40 	.word	0x2400ab40
 801b0d8:	24000000 	.word	0x24000000
 801b0dc:	080170a5 	.word	0x080170a5
 801b0e0:	2400005c 	.word	0x2400005c
 801b0e4:	2400ab44 	.word	0x2400ab44
 801b0e8:	080170a3 	.word	0x080170a3
 801b0ec:	24000060 	.word	0x24000060

0801b0f0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801b0f0:	b510      	push	{r4, lr}
 801b0f2:	4604      	mov	r4, r0
 801b0f4:	f7ff ff88 	bl	801b008 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0fe:	f7ff bfbd 	b.w	801b07c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b104:	b538      	push	{r3, r4, r5, lr}
 801b106:	4c15      	ldr	r4, [pc, #84]	@ (801b15c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b108:	4605      	mov	r5, r0
 801b10a:	7823      	ldrb	r3, [r4, #0]
 801b10c:	f3bf 8f5b 	dmb	ish
 801b110:	07da      	lsls	r2, r3, #31
 801b112:	d40b      	bmi.n	801b12c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b114:	4620      	mov	r0, r4
 801b116:	f007 fe27 	bl	8022d68 <__cxa_guard_acquire>
 801b11a:	b138      	cbz	r0, 801b12c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b11c:	4620      	mov	r0, r4
 801b11e:	f007 fe2f 	bl	8022d80 <__cxa_guard_release>
 801b122:	4a0f      	ldr	r2, [pc, #60]	@ (801b160 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b124:	490f      	ldr	r1, [pc, #60]	@ (801b164 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b126:	4810      	ldr	r0, [pc, #64]	@ (801b168 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b128:	f007 fe17 	bl	8022d5a <__aeabi_atexit>
 801b12c:	4c0f      	ldr	r4, [pc, #60]	@ (801b16c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b12e:	7823      	ldrb	r3, [r4, #0]
 801b130:	f3bf 8f5b 	dmb	ish
 801b134:	07db      	lsls	r3, r3, #31
 801b136:	d40b      	bmi.n	801b150 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b138:	4620      	mov	r0, r4
 801b13a:	f007 fe15 	bl	8022d68 <__cxa_guard_acquire>
 801b13e:	b138      	cbz	r0, 801b150 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b140:	4620      	mov	r0, r4
 801b142:	f007 fe1d 	bl	8022d80 <__cxa_guard_release>
 801b146:	4a06      	ldr	r2, [pc, #24]	@ (801b160 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b148:	4909      	ldr	r1, [pc, #36]	@ (801b170 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b14a:	480a      	ldr	r0, [pc, #40]	@ (801b174 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b14c:	f007 fe05 	bl	8022d5a <__aeabi_atexit>
 801b150:	4b05      	ldr	r3, [pc, #20]	@ (801b168 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b152:	636b      	str	r3, [r5, #52]	@ 0x34
 801b154:	4b07      	ldr	r3, [pc, #28]	@ (801b174 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b156:	63ab      	str	r3, [r5, #56]	@ 0x38
 801b158:	bd38      	pop	{r3, r4, r5, pc}
 801b15a:	bf00      	nop
 801b15c:	2400ab78 	.word	0x2400ab78
 801b160:	24000000 	.word	0x24000000
 801b164:	08017099 	.word	0x08017099
 801b168:	24000094 	.word	0x24000094
 801b16c:	2400ab7c 	.word	0x2400ab7c
 801b170:	08017097 	.word	0x08017097
 801b174:	24000098 	.word	0x24000098

0801b178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b178:	b538      	push	{r3, r4, r5, lr}
 801b17a:	4c15      	ldr	r4, [pc, #84]	@ (801b1d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b17c:	4605      	mov	r5, r0
 801b17e:	7823      	ldrb	r3, [r4, #0]
 801b180:	f3bf 8f5b 	dmb	ish
 801b184:	07da      	lsls	r2, r3, #31
 801b186:	d40b      	bmi.n	801b1a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b188:	4620      	mov	r0, r4
 801b18a:	f007 fded 	bl	8022d68 <__cxa_guard_acquire>
 801b18e:	b138      	cbz	r0, 801b1a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b190:	4620      	mov	r0, r4
 801b192:	f007 fdf5 	bl	8022d80 <__cxa_guard_release>
 801b196:	4a0f      	ldr	r2, [pc, #60]	@ (801b1d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b198:	490f      	ldr	r1, [pc, #60]	@ (801b1d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b19a:	4810      	ldr	r0, [pc, #64]	@ (801b1dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b19c:	f007 fddd 	bl	8022d5a <__aeabi_atexit>
 801b1a0:	4c0f      	ldr	r4, [pc, #60]	@ (801b1e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b1a2:	7823      	ldrb	r3, [r4, #0]
 801b1a4:	f3bf 8f5b 	dmb	ish
 801b1a8:	07db      	lsls	r3, r3, #31
 801b1aa:	d40b      	bmi.n	801b1c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b1ac:	4620      	mov	r0, r4
 801b1ae:	f007 fddb 	bl	8022d68 <__cxa_guard_acquire>
 801b1b2:	b138      	cbz	r0, 801b1c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b1b4:	4620      	mov	r0, r4
 801b1b6:	f007 fde3 	bl	8022d80 <__cxa_guard_release>
 801b1ba:	4a06      	ldr	r2, [pc, #24]	@ (801b1d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b1bc:	4909      	ldr	r1, [pc, #36]	@ (801b1e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b1be:	480a      	ldr	r0, [pc, #40]	@ (801b1e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b1c0:	f007 fdcb 	bl	8022d5a <__aeabi_atexit>
 801b1c4:	4b05      	ldr	r3, [pc, #20]	@ (801b1dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b1c6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801b1c8:	4b07      	ldr	r3, [pc, #28]	@ (801b1e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b1ca:	632b      	str	r3, [r5, #48]	@ 0x30
 801b1cc:	bd38      	pop	{r3, r4, r5, pc}
 801b1ce:	bf00      	nop
 801b1d0:	2400ab48 	.word	0x2400ab48
 801b1d4:	24000000 	.word	0x24000000
 801b1d8:	0801709d 	.word	0x0801709d
 801b1dc:	24000064 	.word	0x24000064
 801b1e0:	2400ab4c 	.word	0x2400ab4c
 801b1e4:	0801709b 	.word	0x0801709b
 801b1e8:	24000068 	.word	0x24000068

0801b1ec <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b1ec:	b510      	push	{r4, lr}
 801b1ee:	4604      	mov	r4, r0
 801b1f0:	f7ff ff88 	bl	801b104 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1fa:	f7ff bfbd 	b.w	801b178 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801b200:	b538      	push	{r3, r4, r5, lr}
 801b202:	4c15      	ldr	r4, [pc, #84]	@ (801b258 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801b204:	4605      	mov	r5, r0
 801b206:	7823      	ldrb	r3, [r4, #0]
 801b208:	f3bf 8f5b 	dmb	ish
 801b20c:	07da      	lsls	r2, r3, #31
 801b20e:	d40b      	bmi.n	801b228 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801b210:	4620      	mov	r0, r4
 801b212:	f007 fda9 	bl	8022d68 <__cxa_guard_acquire>
 801b216:	b138      	cbz	r0, 801b228 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801b218:	4620      	mov	r0, r4
 801b21a:	f007 fdb1 	bl	8022d80 <__cxa_guard_release>
 801b21e:	4a0f      	ldr	r2, [pc, #60]	@ (801b25c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b220:	490f      	ldr	r1, [pc, #60]	@ (801b260 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801b222:	4810      	ldr	r0, [pc, #64]	@ (801b264 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b224:	f007 fd99 	bl	8022d5a <__aeabi_atexit>
 801b228:	4c0f      	ldr	r4, [pc, #60]	@ (801b268 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801b22a:	7823      	ldrb	r3, [r4, #0]
 801b22c:	f3bf 8f5b 	dmb	ish
 801b230:	07db      	lsls	r3, r3, #31
 801b232:	d40b      	bmi.n	801b24c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801b234:	4620      	mov	r0, r4
 801b236:	f007 fd97 	bl	8022d68 <__cxa_guard_acquire>
 801b23a:	b138      	cbz	r0, 801b24c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801b23c:	4620      	mov	r0, r4
 801b23e:	f007 fd9f 	bl	8022d80 <__cxa_guard_release>
 801b242:	4a06      	ldr	r2, [pc, #24]	@ (801b25c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801b244:	4909      	ldr	r1, [pc, #36]	@ (801b26c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801b246:	480a      	ldr	r0, [pc, #40]	@ (801b270 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801b248:	f007 fd87 	bl	8022d5a <__aeabi_atexit>
 801b24c:	4b05      	ldr	r3, [pc, #20]	@ (801b264 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801b24e:	656b      	str	r3, [r5, #84]	@ 0x54
 801b250:	4b07      	ldr	r3, [pc, #28]	@ (801b270 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801b252:	65ab      	str	r3, [r5, #88]	@ 0x58
 801b254:	bd38      	pop	{r3, r4, r5, pc}
 801b256:	bf00      	nop
 801b258:	2400ab80 	.word	0x2400ab80
 801b25c:	24000000 	.word	0x24000000
 801b260:	08017089 	.word	0x08017089
 801b264:	2400009c 	.word	0x2400009c
 801b268:	2400ab84 	.word	0x2400ab84
 801b26c:	08017087 	.word	0x08017087
 801b270:	240000a0 	.word	0x240000a0

0801b274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801b274:	b538      	push	{r3, r4, r5, lr}
 801b276:	4c15      	ldr	r4, [pc, #84]	@ (801b2cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801b278:	4605      	mov	r5, r0
 801b27a:	7823      	ldrb	r3, [r4, #0]
 801b27c:	f3bf 8f5b 	dmb	ish
 801b280:	07da      	lsls	r2, r3, #31
 801b282:	d40b      	bmi.n	801b29c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801b284:	4620      	mov	r0, r4
 801b286:	f007 fd6f 	bl	8022d68 <__cxa_guard_acquire>
 801b28a:	b138      	cbz	r0, 801b29c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801b28c:	4620      	mov	r0, r4
 801b28e:	f007 fd77 	bl	8022d80 <__cxa_guard_release>
 801b292:	4a0f      	ldr	r2, [pc, #60]	@ (801b2d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b294:	490f      	ldr	r1, [pc, #60]	@ (801b2d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801b296:	4810      	ldr	r0, [pc, #64]	@ (801b2d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b298:	f007 fd5f 	bl	8022d5a <__aeabi_atexit>
 801b29c:	4c0f      	ldr	r4, [pc, #60]	@ (801b2dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801b29e:	7823      	ldrb	r3, [r4, #0]
 801b2a0:	f3bf 8f5b 	dmb	ish
 801b2a4:	07db      	lsls	r3, r3, #31
 801b2a6:	d40b      	bmi.n	801b2c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	f007 fd5d 	bl	8022d68 <__cxa_guard_acquire>
 801b2ae:	b138      	cbz	r0, 801b2c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	f007 fd65 	bl	8022d80 <__cxa_guard_release>
 801b2b6:	4a06      	ldr	r2, [pc, #24]	@ (801b2d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801b2b8:	4909      	ldr	r1, [pc, #36]	@ (801b2e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801b2ba:	480a      	ldr	r0, [pc, #40]	@ (801b2e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801b2bc:	f007 fd4d 	bl	8022d5a <__aeabi_atexit>
 801b2c0:	4b05      	ldr	r3, [pc, #20]	@ (801b2d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801b2c2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801b2c4:	4b07      	ldr	r3, [pc, #28]	@ (801b2e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801b2c6:	652b      	str	r3, [r5, #80]	@ 0x50
 801b2c8:	bd38      	pop	{r3, r4, r5, pc}
 801b2ca:	bf00      	nop
 801b2cc:	2400ab88 	.word	0x2400ab88
 801b2d0:	24000000 	.word	0x24000000
 801b2d4:	0801708d 	.word	0x0801708d
 801b2d8:	240000a4 	.word	0x240000a4
 801b2dc:	2400ab8c 	.word	0x2400ab8c
 801b2e0:	0801708b 	.word	0x0801708b
 801b2e4:	240000a8 	.word	0x240000a8

0801b2e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801b2e8:	b538      	push	{r3, r4, r5, lr}
 801b2ea:	4c15      	ldr	r4, [pc, #84]	@ (801b340 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801b2ec:	4605      	mov	r5, r0
 801b2ee:	7823      	ldrb	r3, [r4, #0]
 801b2f0:	f3bf 8f5b 	dmb	ish
 801b2f4:	07da      	lsls	r2, r3, #31
 801b2f6:	d40b      	bmi.n	801b310 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801b2f8:	4620      	mov	r0, r4
 801b2fa:	f007 fd35 	bl	8022d68 <__cxa_guard_acquire>
 801b2fe:	b138      	cbz	r0, 801b310 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801b300:	4620      	mov	r0, r4
 801b302:	f007 fd3d 	bl	8022d80 <__cxa_guard_release>
 801b306:	4a0f      	ldr	r2, [pc, #60]	@ (801b344 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b308:	490f      	ldr	r1, [pc, #60]	@ (801b348 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801b30a:	4810      	ldr	r0, [pc, #64]	@ (801b34c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b30c:	f007 fd25 	bl	8022d5a <__aeabi_atexit>
 801b310:	4c0f      	ldr	r4, [pc, #60]	@ (801b350 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801b312:	7823      	ldrb	r3, [r4, #0]
 801b314:	f3bf 8f5b 	dmb	ish
 801b318:	07db      	lsls	r3, r3, #31
 801b31a:	d40b      	bmi.n	801b334 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801b31c:	4620      	mov	r0, r4
 801b31e:	f007 fd23 	bl	8022d68 <__cxa_guard_acquire>
 801b322:	b138      	cbz	r0, 801b334 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801b324:	4620      	mov	r0, r4
 801b326:	f007 fd2b 	bl	8022d80 <__cxa_guard_release>
 801b32a:	4a06      	ldr	r2, [pc, #24]	@ (801b344 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801b32c:	4909      	ldr	r1, [pc, #36]	@ (801b354 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801b32e:	480a      	ldr	r0, [pc, #40]	@ (801b358 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801b330:	f007 fd13 	bl	8022d5a <__aeabi_atexit>
 801b334:	4b05      	ldr	r3, [pc, #20]	@ (801b34c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801b336:	646b      	str	r3, [r5, #68]	@ 0x44
 801b338:	4b07      	ldr	r3, [pc, #28]	@ (801b358 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801b33a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801b33c:	bd38      	pop	{r3, r4, r5, pc}
 801b33e:	bf00      	nop
 801b340:	2400ab50 	.word	0x2400ab50
 801b344:	24000000 	.word	0x24000000
 801b348:	08017091 	.word	0x08017091
 801b34c:	2400006c 	.word	0x2400006c
 801b350:	2400ab54 	.word	0x2400ab54
 801b354:	0801708f 	.word	0x0801708f
 801b358:	24000070 	.word	0x24000070

0801b35c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801b35c:	b538      	push	{r3, r4, r5, lr}
 801b35e:	4c15      	ldr	r4, [pc, #84]	@ (801b3b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801b360:	4605      	mov	r5, r0
 801b362:	7823      	ldrb	r3, [r4, #0]
 801b364:	f3bf 8f5b 	dmb	ish
 801b368:	07da      	lsls	r2, r3, #31
 801b36a:	d40b      	bmi.n	801b384 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801b36c:	4620      	mov	r0, r4
 801b36e:	f007 fcfb 	bl	8022d68 <__cxa_guard_acquire>
 801b372:	b138      	cbz	r0, 801b384 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801b374:	4620      	mov	r0, r4
 801b376:	f007 fd03 	bl	8022d80 <__cxa_guard_release>
 801b37a:	4a0f      	ldr	r2, [pc, #60]	@ (801b3b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b37c:	490f      	ldr	r1, [pc, #60]	@ (801b3bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801b37e:	4810      	ldr	r0, [pc, #64]	@ (801b3c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b380:	f007 fceb 	bl	8022d5a <__aeabi_atexit>
 801b384:	4c0f      	ldr	r4, [pc, #60]	@ (801b3c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801b386:	7823      	ldrb	r3, [r4, #0]
 801b388:	f3bf 8f5b 	dmb	ish
 801b38c:	07db      	lsls	r3, r3, #31
 801b38e:	d40b      	bmi.n	801b3a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801b390:	4620      	mov	r0, r4
 801b392:	f007 fce9 	bl	8022d68 <__cxa_guard_acquire>
 801b396:	b138      	cbz	r0, 801b3a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801b398:	4620      	mov	r0, r4
 801b39a:	f007 fcf1 	bl	8022d80 <__cxa_guard_release>
 801b39e:	4a06      	ldr	r2, [pc, #24]	@ (801b3b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801b3a0:	4909      	ldr	r1, [pc, #36]	@ (801b3c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801b3a2:	480a      	ldr	r0, [pc, #40]	@ (801b3cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801b3a4:	f007 fcd9 	bl	8022d5a <__aeabi_atexit>
 801b3a8:	4b05      	ldr	r3, [pc, #20]	@ (801b3c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801b3aa:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b3ac:	4b07      	ldr	r3, [pc, #28]	@ (801b3cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801b3ae:	642b      	str	r3, [r5, #64]	@ 0x40
 801b3b0:	bd38      	pop	{r3, r4, r5, pc}
 801b3b2:	bf00      	nop
 801b3b4:	2400ab70 	.word	0x2400ab70
 801b3b8:	24000000 	.word	0x24000000
 801b3bc:	08017095 	.word	0x08017095
 801b3c0:	2400008c 	.word	0x2400008c
 801b3c4:	2400ab74 	.word	0x2400ab74
 801b3c8:	08017093 	.word	0x08017093
 801b3cc:	24000090 	.word	0x24000090

0801b3d0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801b3d0:	b510      	push	{r4, lr}
 801b3d2:	4604      	mov	r4, r0
 801b3d4:	f7ff ff14 	bl	801b200 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f7ff ff85 	bl	801b2e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801b3de:	4620      	mov	r0, r4
 801b3e0:	f7ff ff48 	bl	801b274 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801b3e4:	4620      	mov	r0, r4
 801b3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3ea:	f7ff bfb7 	b.w	801b35c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801b3f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b3f0:	b538      	push	{r3, r4, r5, lr}
 801b3f2:	4c15      	ldr	r4, [pc, #84]	@ (801b448 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b3f4:	4605      	mov	r5, r0
 801b3f6:	7823      	ldrb	r3, [r4, #0]
 801b3f8:	f3bf 8f5b 	dmb	ish
 801b3fc:	07da      	lsls	r2, r3, #31
 801b3fe:	d40b      	bmi.n	801b418 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b400:	4620      	mov	r0, r4
 801b402:	f007 fcb1 	bl	8022d68 <__cxa_guard_acquire>
 801b406:	b138      	cbz	r0, 801b418 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b408:	4620      	mov	r0, r4
 801b40a:	f007 fcb9 	bl	8022d80 <__cxa_guard_release>
 801b40e:	4a0f      	ldr	r2, [pc, #60]	@ (801b44c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b410:	490f      	ldr	r1, [pc, #60]	@ (801b450 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b412:	4810      	ldr	r0, [pc, #64]	@ (801b454 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b414:	f007 fca1 	bl	8022d5a <__aeabi_atexit>
 801b418:	4c0f      	ldr	r4, [pc, #60]	@ (801b458 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b41a:	7823      	ldrb	r3, [r4, #0]
 801b41c:	f3bf 8f5b 	dmb	ish
 801b420:	07db      	lsls	r3, r3, #31
 801b422:	d40b      	bmi.n	801b43c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b424:	4620      	mov	r0, r4
 801b426:	f007 fc9f 	bl	8022d68 <__cxa_guard_acquire>
 801b42a:	b138      	cbz	r0, 801b43c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b42c:	4620      	mov	r0, r4
 801b42e:	f007 fca7 	bl	8022d80 <__cxa_guard_release>
 801b432:	4a06      	ldr	r2, [pc, #24]	@ (801b44c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b434:	4909      	ldr	r1, [pc, #36]	@ (801b45c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b436:	480a      	ldr	r0, [pc, #40]	@ (801b460 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b438:	f007 fc8f 	bl	8022d5a <__aeabi_atexit>
 801b43c:	4b05      	ldr	r3, [pc, #20]	@ (801b454 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b43e:	666b      	str	r3, [r5, #100]	@ 0x64
 801b440:	4b07      	ldr	r3, [pc, #28]	@ (801b460 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b442:	66ab      	str	r3, [r5, #104]	@ 0x68
 801b444:	bd38      	pop	{r3, r4, r5, pc}
 801b446:	bf00      	nop
 801b448:	2400ab58 	.word	0x2400ab58
 801b44c:	24000000 	.word	0x24000000
 801b450:	08017081 	.word	0x08017081
 801b454:	24000074 	.word	0x24000074
 801b458:	2400ab5c 	.word	0x2400ab5c
 801b45c:	0801707f 	.word	0x0801707f
 801b460:	24000078 	.word	0x24000078

0801b464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b464:	b538      	push	{r3, r4, r5, lr}
 801b466:	4c15      	ldr	r4, [pc, #84]	@ (801b4bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b468:	4605      	mov	r5, r0
 801b46a:	7823      	ldrb	r3, [r4, #0]
 801b46c:	f3bf 8f5b 	dmb	ish
 801b470:	07da      	lsls	r2, r3, #31
 801b472:	d40b      	bmi.n	801b48c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b474:	4620      	mov	r0, r4
 801b476:	f007 fc77 	bl	8022d68 <__cxa_guard_acquire>
 801b47a:	b138      	cbz	r0, 801b48c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b47c:	4620      	mov	r0, r4
 801b47e:	f007 fc7f 	bl	8022d80 <__cxa_guard_release>
 801b482:	4a0f      	ldr	r2, [pc, #60]	@ (801b4c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b484:	490f      	ldr	r1, [pc, #60]	@ (801b4c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b486:	4810      	ldr	r0, [pc, #64]	@ (801b4c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b488:	f007 fc67 	bl	8022d5a <__aeabi_atexit>
 801b48c:	4c0f      	ldr	r4, [pc, #60]	@ (801b4cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b48e:	7823      	ldrb	r3, [r4, #0]
 801b490:	f3bf 8f5b 	dmb	ish
 801b494:	07db      	lsls	r3, r3, #31
 801b496:	d40b      	bmi.n	801b4b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b498:	4620      	mov	r0, r4
 801b49a:	f007 fc65 	bl	8022d68 <__cxa_guard_acquire>
 801b49e:	b138      	cbz	r0, 801b4b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f007 fc6d 	bl	8022d80 <__cxa_guard_release>
 801b4a6:	4a06      	ldr	r2, [pc, #24]	@ (801b4c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b4a8:	4909      	ldr	r1, [pc, #36]	@ (801b4d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b4aa:	480a      	ldr	r0, [pc, #40]	@ (801b4d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b4ac:	f007 fc55 	bl	8022d5a <__aeabi_atexit>
 801b4b0:	4b05      	ldr	r3, [pc, #20]	@ (801b4c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b4b2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801b4b4:	4b07      	ldr	r3, [pc, #28]	@ (801b4d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b4b6:	662b      	str	r3, [r5, #96]	@ 0x60
 801b4b8:	bd38      	pop	{r3, r4, r5, pc}
 801b4ba:	bf00      	nop
 801b4bc:	2400ab30 	.word	0x2400ab30
 801b4c0:	24000000 	.word	0x24000000
 801b4c4:	08017085 	.word	0x08017085
 801b4c8:	2400004c 	.word	0x2400004c
 801b4cc:	2400ab34 	.word	0x2400ab34
 801b4d0:	08017083 	.word	0x08017083
 801b4d4:	24000050 	.word	0x24000050

0801b4d8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801b4d8:	b510      	push	{r4, lr}
 801b4da:	4604      	mov	r4, r0
 801b4dc:	f7ff ff88 	bl	801b3f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4e6:	f7ff bfbd 	b.w	801b464 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b4ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b4ec:	b538      	push	{r3, r4, r5, lr}
 801b4ee:	4c15      	ldr	r4, [pc, #84]	@ (801b544 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b4f0:	4605      	mov	r5, r0
 801b4f2:	7823      	ldrb	r3, [r4, #0]
 801b4f4:	f3bf 8f5b 	dmb	ish
 801b4f8:	07da      	lsls	r2, r3, #31
 801b4fa:	d40b      	bmi.n	801b514 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	f007 fc33 	bl	8022d68 <__cxa_guard_acquire>
 801b502:	b138      	cbz	r0, 801b514 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b504:	4620      	mov	r0, r4
 801b506:	f007 fc3b 	bl	8022d80 <__cxa_guard_release>
 801b50a:	4a0f      	ldr	r2, [pc, #60]	@ (801b548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b50c:	490f      	ldr	r1, [pc, #60]	@ (801b54c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b50e:	4810      	ldr	r0, [pc, #64]	@ (801b550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b510:	f007 fc23 	bl	8022d5a <__aeabi_atexit>
 801b514:	4c0f      	ldr	r4, [pc, #60]	@ (801b554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b516:	7823      	ldrb	r3, [r4, #0]
 801b518:	f3bf 8f5b 	dmb	ish
 801b51c:	07db      	lsls	r3, r3, #31
 801b51e:	d40b      	bmi.n	801b538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b520:	4620      	mov	r0, r4
 801b522:	f007 fc21 	bl	8022d68 <__cxa_guard_acquire>
 801b526:	b138      	cbz	r0, 801b538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b528:	4620      	mov	r0, r4
 801b52a:	f007 fc29 	bl	8022d80 <__cxa_guard_release>
 801b52e:	4a06      	ldr	r2, [pc, #24]	@ (801b548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b530:	4909      	ldr	r1, [pc, #36]	@ (801b558 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b532:	480a      	ldr	r0, [pc, #40]	@ (801b55c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b534:	f007 fc11 	bl	8022d5a <__aeabi_atexit>
 801b538:	4b05      	ldr	r3, [pc, #20]	@ (801b550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b53a:	676b      	str	r3, [r5, #116]	@ 0x74
 801b53c:	4b07      	ldr	r3, [pc, #28]	@ (801b55c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b53e:	67ab      	str	r3, [r5, #120]	@ 0x78
 801b540:	bd38      	pop	{r3, r4, r5, pc}
 801b542:	bf00      	nop
 801b544:	2400ab28 	.word	0x2400ab28
 801b548:	24000000 	.word	0x24000000
 801b54c:	08017079 	.word	0x08017079
 801b550:	24000044 	.word	0x24000044
 801b554:	2400ab2c 	.word	0x2400ab2c
 801b558:	08017077 	.word	0x08017077
 801b55c:	24000048 	.word	0x24000048

0801b560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	4c15      	ldr	r4, [pc, #84]	@ (801b5b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b564:	4605      	mov	r5, r0
 801b566:	7823      	ldrb	r3, [r4, #0]
 801b568:	f3bf 8f5b 	dmb	ish
 801b56c:	07da      	lsls	r2, r3, #31
 801b56e:	d40b      	bmi.n	801b588 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b570:	4620      	mov	r0, r4
 801b572:	f007 fbf9 	bl	8022d68 <__cxa_guard_acquire>
 801b576:	b138      	cbz	r0, 801b588 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b578:	4620      	mov	r0, r4
 801b57a:	f007 fc01 	bl	8022d80 <__cxa_guard_release>
 801b57e:	4a0f      	ldr	r2, [pc, #60]	@ (801b5bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b580:	490f      	ldr	r1, [pc, #60]	@ (801b5c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b582:	4810      	ldr	r0, [pc, #64]	@ (801b5c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b584:	f007 fbe9 	bl	8022d5a <__aeabi_atexit>
 801b588:	4c0f      	ldr	r4, [pc, #60]	@ (801b5c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b58a:	7823      	ldrb	r3, [r4, #0]
 801b58c:	f3bf 8f5b 	dmb	ish
 801b590:	07db      	lsls	r3, r3, #31
 801b592:	d40b      	bmi.n	801b5ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b594:	4620      	mov	r0, r4
 801b596:	f007 fbe7 	bl	8022d68 <__cxa_guard_acquire>
 801b59a:	b138      	cbz	r0, 801b5ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b59c:	4620      	mov	r0, r4
 801b59e:	f007 fbef 	bl	8022d80 <__cxa_guard_release>
 801b5a2:	4a06      	ldr	r2, [pc, #24]	@ (801b5bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b5a4:	4909      	ldr	r1, [pc, #36]	@ (801b5cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b5a6:	480a      	ldr	r0, [pc, #40]	@ (801b5d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b5a8:	f007 fbd7 	bl	8022d5a <__aeabi_atexit>
 801b5ac:	4b05      	ldr	r3, [pc, #20]	@ (801b5c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b5ae:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801b5b0:	4b07      	ldr	r3, [pc, #28]	@ (801b5d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b5b2:	672b      	str	r3, [r5, #112]	@ 0x70
 801b5b4:	bd38      	pop	{r3, r4, r5, pc}
 801b5b6:	bf00      	nop
 801b5b8:	2400ab20 	.word	0x2400ab20
 801b5bc:	24000000 	.word	0x24000000
 801b5c0:	0801707d 	.word	0x0801707d
 801b5c4:	2400003c 	.word	0x2400003c
 801b5c8:	2400ab24 	.word	0x2400ab24
 801b5cc:	0801707b 	.word	0x0801707b
 801b5d0:	24000040 	.word	0x24000040

0801b5d4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801b5d4:	b510      	push	{r4, lr}
 801b5d6:	4604      	mov	r4, r0
 801b5d8:	f7ff ff88 	bl	801b4ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b5dc:	4620      	mov	r0, r4
 801b5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5e2:	f7ff bfbd 	b.w	801b560 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801b5e6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801b5e6:	b510      	push	{r4, lr}
 801b5e8:	4604      	mov	r4, r0
 801b5ea:	f7ff fff3 	bl	801b5d4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f7ff ff72 	bl	801b4d8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f7ff fdf9 	bl	801b1ec <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	f7ff fcfa 	bl	801aff4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801b600:	4620      	mov	r0, r4
 801b602:	f7ff fd75 	bl	801b0f0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801b606:	4620      	mov	r0, r4
 801b608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b60c:	f7ff bee0 	b.w	801b3d0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801b610 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801b610:	b538      	push	{r3, r4, r5, lr}
 801b612:	4c0b      	ldr	r4, [pc, #44]	@ (801b640 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801b614:	4605      	mov	r5, r0
 801b616:	7823      	ldrb	r3, [r4, #0]
 801b618:	f3bf 8f5b 	dmb	ish
 801b61c:	07db      	lsls	r3, r3, #31
 801b61e:	d40b      	bmi.n	801b638 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801b620:	4620      	mov	r0, r4
 801b622:	f007 fba1 	bl	8022d68 <__cxa_guard_acquire>
 801b626:	b138      	cbz	r0, 801b638 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801b628:	4620      	mov	r0, r4
 801b62a:	f007 fba9 	bl	8022d80 <__cxa_guard_release>
 801b62e:	4a05      	ldr	r2, [pc, #20]	@ (801b644 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801b630:	4905      	ldr	r1, [pc, #20]	@ (801b648 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801b632:	4806      	ldr	r0, [pc, #24]	@ (801b64c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b634:	f007 fb91 	bl	8022d5a <__aeabi_atexit>
 801b638:	4b04      	ldr	r3, [pc, #16]	@ (801b64c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b63a:	67eb      	str	r3, [r5, #124]	@ 0x7c
 801b63c:	bd38      	pop	{r3, r4, r5, pc}
 801b63e:	bf00      	nop
 801b640:	2400ab14 	.word	0x2400ab14
 801b644:	24000000 	.word	0x24000000
 801b648:	08017075 	.word	0x08017075
 801b64c:	24000034 	.word	0x24000034

0801b650 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801b650:	b538      	push	{r3, r4, r5, lr}
 801b652:	4c0b      	ldr	r4, [pc, #44]	@ (801b680 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801b654:	4605      	mov	r5, r0
 801b656:	7823      	ldrb	r3, [r4, #0]
 801b658:	f3bf 8f5b 	dmb	ish
 801b65c:	07db      	lsls	r3, r3, #31
 801b65e:	d40b      	bmi.n	801b678 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801b660:	4620      	mov	r0, r4
 801b662:	f007 fb81 	bl	8022d68 <__cxa_guard_acquire>
 801b666:	b138      	cbz	r0, 801b678 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801b668:	4620      	mov	r0, r4
 801b66a:	f007 fb89 	bl	8022d80 <__cxa_guard_release>
 801b66e:	4a05      	ldr	r2, [pc, #20]	@ (801b684 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801b670:	4905      	ldr	r1, [pc, #20]	@ (801b688 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801b672:	4806      	ldr	r0, [pc, #24]	@ (801b68c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b674:	f007 fb71 	bl	8022d5a <__aeabi_atexit>
 801b678:	4b04      	ldr	r3, [pc, #16]	@ (801b68c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b67a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 801b67e:	bd38      	pop	{r3, r4, r5, pc}
 801b680:	2400ab18 	.word	0x2400ab18
 801b684:	24000000 	.word	0x24000000
 801b688:	08017073 	.word	0x08017073
 801b68c:	24000038 	.word	0x24000038

0801b690 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801b690:	b570      	push	{r4, r5, r6, lr}
 801b692:	4d0d      	ldr	r5, [pc, #52]	@ (801b6c8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801b694:	4606      	mov	r6, r0
 801b696:	4c0d      	ldr	r4, [pc, #52]	@ (801b6cc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801b698:	782b      	ldrb	r3, [r5, #0]
 801b69a:	f3bf 8f5b 	dmb	ish
 801b69e:	f013 0f01 	tst.w	r3, #1
 801b6a2:	d10d      	bne.n	801b6c0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b6a4:	4628      	mov	r0, r5
 801b6a6:	f007 fb5f 	bl	8022d68 <__cxa_guard_acquire>
 801b6aa:	b148      	cbz	r0, 801b6c0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b6ac:	4b08      	ldr	r3, [pc, #32]	@ (801b6d0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801b6ae:	4628      	mov	r0, r5
 801b6b0:	6023      	str	r3, [r4, #0]
 801b6b2:	f007 fb65 	bl	8022d80 <__cxa_guard_release>
 801b6b6:	4a07      	ldr	r2, [pc, #28]	@ (801b6d4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801b6b8:	4620      	mov	r0, r4
 801b6ba:	4907      	ldr	r1, [pc, #28]	@ (801b6d8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 801b6bc:	f007 fb4d 	bl	8022d5a <__aeabi_atexit>
 801b6c0:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 801b6c4:	bd70      	pop	{r4, r5, r6, pc}
 801b6c6:	bf00      	nop
 801b6c8:	2400ab1c 	.word	0x2400ab1c
 801b6cc:	2400ac94 	.word	0x2400ac94
 801b6d0:	08029a98 	.word	0x08029a98
 801b6d4:	24000000 	.word	0x24000000
 801b6d8:	08017071 	.word	0x08017071

0801b6dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801b6dc:	b510      	push	{r4, lr}
 801b6de:	4604      	mov	r4, r0
 801b6e0:	f7ff ff96 	bl	801b610 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801b6e4:	4620      	mov	r0, r4
 801b6e6:	f7ff ffb3 	bl	801b650 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6f0:	f7ff bfce 	b.w	801b690 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801b6f4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 801b6f4:	b570      	push	{r4, r5, r6, lr}
 801b6f6:	4d0d      	ldr	r5, [pc, #52]	@ (801b72c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 801b6f8:	4606      	mov	r6, r0
 801b6fa:	4c0d      	ldr	r4, [pc, #52]	@ (801b730 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 801b6fc:	782b      	ldrb	r3, [r5, #0]
 801b6fe:	f3bf 8f5b 	dmb	ish
 801b702:	f013 0f01 	tst.w	r3, #1
 801b706:	d10d      	bne.n	801b724 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 801b708:	4628      	mov	r0, r5
 801b70a:	f007 fb2d 	bl	8022d68 <__cxa_guard_acquire>
 801b70e:	b148      	cbz	r0, 801b724 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 801b710:	4b08      	ldr	r3, [pc, #32]	@ (801b734 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 801b712:	4628      	mov	r0, r5
 801b714:	6023      	str	r3, [r4, #0]
 801b716:	f007 fb33 	bl	8022d80 <__cxa_guard_release>
 801b71a:	4a07      	ldr	r2, [pc, #28]	@ (801b738 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 801b71c:	4620      	mov	r0, r4
 801b71e:	4907      	ldr	r1, [pc, #28]	@ (801b73c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x48>)
 801b720:	f007 fb1b 	bl	8022d5a <__aeabi_atexit>
 801b724:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 801b728:	bd70      	pop	{r4, r5, r6, pc}
 801b72a:	bf00      	nop
 801b72c:	2400ab10 	.word	0x2400ab10
 801b730:	2400ab90 	.word	0x2400ab90
 801b734:	08029ab4 	.word	0x08029ab4
 801b738:	24000000 	.word	0x24000000
 801b73c:	0801706f 	.word	0x0801706f

0801b740 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b744:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 801b748:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 801b74c:	2d00      	cmp	r5, #0
 801b74e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 801b752:	fb05 4c0e 	mla	ip, r5, lr, r4
 801b756:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 801b75a:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 801b75e:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801b762:	eb02 0a0c 	add.w	sl, r2, ip
 801b766:	8808      	ldrh	r0, [r1, #0]
 801b768:	f2c0 80b0 	blt.w	801b8cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801b76c:	45ab      	cmp	fp, r5
 801b76e:	f340 80ad 	ble.w	801b8cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801b772:	2c00      	cmp	r4, #0
 801b774:	f2c0 80a8 	blt.w	801b8c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801b778:	45a6      	cmp	lr, r4
 801b77a:	f340 80a5 	ble.w	801b8c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801b77e:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b782:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801b786:	1c62      	adds	r2, r4, #1
 801b788:	f100 80a3 	bmi.w	801b8d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b78c:	4596      	cmp	lr, r2
 801b78e:	f340 80a0 	ble.w	801b8d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b792:	f1b9 0f00 	cmp.w	r9, #0
 801b796:	f000 809c 	beq.w	801b8d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801b79a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b79e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801b7a2:	3501      	adds	r5, #1
 801b7a4:	f100 8099 	bmi.w	801b8da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b7a8:	45ab      	cmp	fp, r5
 801b7aa:	f340 8096 	ble.w	801b8da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b7ae:	2f00      	cmp	r7, #0
 801b7b0:	f000 8093 	beq.w	801b8da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801b7b4:	2c00      	cmp	r4, #0
 801b7b6:	f2c0 808e 	blt.w	801b8d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801b7ba:	45a6      	cmp	lr, r4
 801b7bc:	f340 808b 	ble.w	801b8d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801b7c0:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801b7c4:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801b7c8:	3401      	adds	r4, #1
 801b7ca:	f100 8089 	bmi.w	801b8e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b7ce:	45a6      	cmp	lr, r4
 801b7d0:	f340 8086 	ble.w	801b8e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b7d4:	f1b9 0f00 	cmp.w	r9, #0
 801b7d8:	f000 8082 	beq.w	801b8e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801b7dc:	44d6      	add	lr, sl
 801b7de:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b7e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b7e6:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801b7ea:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801b7ee:	fb19 fe07 	smulbb	lr, r9, r7
 801b7f2:	f1c7 0210 	rsb	r2, r7, #16
 801b7f6:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801b7fa:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801b7fe:	eba2 0209 	sub.w	r2, r2, r9
 801b802:	ea44 0808 	orr.w	r8, r4, r8
 801b806:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801b80a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801b80e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801b812:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801b816:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801b81a:	ea44 0c0c 	orr.w	ip, r4, ip
 801b81e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801b822:	fb04 f40c 	mul.w	r4, r4, ip
 801b826:	fb02 4808 	mla	r8, r2, r8, r4
 801b82a:	041a      	lsls	r2, r3, #16
 801b82c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801b830:	b2b4      	uxth	r4, r6
 801b832:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801b836:	43f6      	mvns	r6, r6
 801b838:	4313      	orrs	r3, r2
 801b83a:	042a      	lsls	r2, r5, #16
 801b83c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801b840:	b2f6      	uxtb	r6, r6
 801b842:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801b846:	fb0e 8303 	mla	r3, lr, r3, r8
 801b84a:	432a      	orrs	r2, r5
 801b84c:	fb07 3202 	mla	r2, r7, r2, r3
 801b850:	10c7      	asrs	r7, r0, #3
 801b852:	0d53      	lsrs	r3, r2, #21
 801b854:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b858:	0952      	lsrs	r2, r2, #5
 801b85a:	fb17 f706 	smulbb	r7, r7, r6
 801b85e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b862:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801b866:	431a      	orrs	r2, r3
 801b868:	b293      	uxth	r3, r2
 801b86a:	1202      	asrs	r2, r0, #8
 801b86c:	121d      	asrs	r5, r3, #8
 801b86e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801b872:	00c0      	lsls	r0, r0, #3
 801b874:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801b878:	fb12 f206 	smulbb	r2, r2, r6
 801b87c:	b2c0      	uxtb	r0, r0
 801b87e:	fb05 2504 	mla	r5, r5, r4, r2
 801b882:	10da      	asrs	r2, r3, #3
 801b884:	fb10 f006 	smulbb	r0, r0, r6
 801b888:	00db      	lsls	r3, r3, #3
 801b88a:	b2ad      	uxth	r5, r5
 801b88c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801b890:	b2db      	uxtb	r3, r3
 801b892:	fb02 7204 	mla	r2, r2, r4, r7
 801b896:	fb03 0004 	mla	r0, r3, r4, r0
 801b89a:	1c6b      	adds	r3, r5, #1
 801b89c:	b292      	uxth	r2, r2
 801b89e:	b280      	uxth	r0, r0
 801b8a0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b8a4:	1c43      	adds	r3, r0, #1
 801b8a6:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801b8aa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b8ae:	1c50      	adds	r0, r2, #1
 801b8b0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b8b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b8b8:	0952      	lsrs	r2, r2, #5
 801b8ba:	432b      	orrs	r3, r5
 801b8bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801b8c0:	4313      	orrs	r3, r2
 801b8c2:	800b      	strh	r3, [r1, #0]
 801b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8c8:	4680      	mov	r8, r0
 801b8ca:	e75c      	b.n	801b786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801b8cc:	4684      	mov	ip, r0
 801b8ce:	4680      	mov	r8, r0
 801b8d0:	e767      	b.n	801b7a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801b8d2:	4684      	mov	ip, r0
 801b8d4:	e765      	b.n	801b7a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801b8d6:	4605      	mov	r5, r0
 801b8d8:	e776      	b.n	801b7c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801b8da:	4603      	mov	r3, r0
 801b8dc:	4605      	mov	r5, r0
 801b8de:	e782      	b.n	801b7e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801b8e0:	4603      	mov	r3, r0
 801b8e2:	e780      	b.n	801b7e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801b8e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e8:	b099      	sub	sp, #100	@ 0x64
 801b8ea:	9215      	str	r2, [sp, #84]	@ 0x54
 801b8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801b8ee:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801b8f0:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 801b8f4:	9016      	str	r0, [sp, #88]	@ 0x58
 801b8f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801b8f8:	6850      	ldr	r0, [r2, #4]
 801b8fa:	910c      	str	r1, [sp, #48]	@ 0x30
 801b8fc:	6812      	ldr	r2, [r2, #0]
 801b8fe:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801b902:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 801b906:	fb00 1303 	mla	r3, r0, r3, r1
 801b90a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801b90e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b914:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b916:	685e      	ldr	r6, [r3, #4]
 801b918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b91a:	3604      	adds	r6, #4
 801b91c:	43db      	mvns	r3, r3
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	930a      	str	r3, [sp, #40]	@ 0x28
 801b922:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b924:	2b00      	cmp	r3, #0
 801b926:	dc03      	bgt.n	801b930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b928:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	f340 8225 	ble.w	801bd7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801b930:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b932:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b936:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b93a:	1e48      	subs	r0, r1, #1
 801b93c:	1e57      	subs	r7, r2, #1
 801b93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b940:	2b00      	cmp	r3, #0
 801b942:	f340 80e3 	ble.w	801bb0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b946:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801b94a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b94e:	d406      	bmi.n	801b95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b950:	4584      	cmp	ip, r0
 801b952:	da04      	bge.n	801b95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b954:	2b00      	cmp	r3, #0
 801b956:	db02      	blt.n	801b95e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b958:	42bb      	cmp	r3, r7
 801b95a:	f2c0 80d8 	blt.w	801bb0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b95e:	f11c 0c01 	adds.w	ip, ip, #1
 801b962:	f100 80c9 	bmi.w	801baf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b966:	4561      	cmp	r1, ip
 801b968:	f2c0 80c6 	blt.w	801baf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b96c:	3301      	adds	r3, #1
 801b96e:	f100 80c3 	bmi.w	801baf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b972:	429a      	cmp	r2, r3
 801b974:	f2c0 80c0 	blt.w	801baf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b978:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b97c:	4647      	mov	r7, r8
 801b97e:	f1bb 0f00 	cmp.w	fp, #0
 801b982:	f340 80e3 	ble.w	801bb4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801b986:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801b988:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b98c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801b98e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801b992:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801b996:	ea5f 422a 	movs.w	r2, sl, asr #16
 801b99a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b99e:	689b      	ldr	r3, [r3, #8]
 801b9a0:	f100 8121 	bmi.w	801bbe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b9a4:	f103 39ff 	add.w	r9, r3, #4294967295
 801b9a8:	454a      	cmp	r2, r9
 801b9aa:	f280 811c 	bge.w	801bbe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b9ae:	f1bc 0f00 	cmp.w	ip, #0
 801b9b2:	f2c0 8118 	blt.w	801bbe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b9b6:	f10e 39ff 	add.w	r9, lr, #4294967295
 801b9ba:	45cc      	cmp	ip, r9
 801b9bc:	f280 8113 	bge.w	801bbe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801b9c0:	b21b      	sxth	r3, r3
 801b9c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9c4:	fb0c 2203 	mla	r2, ip, r3, r2
 801b9c8:	eb04 0902 	add.w	r9, r4, r2
 801b9cc:	5ca2      	ldrb	r2, [r4, r2]
 801b9ce:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801b9d2:	2800      	cmp	r0, #0
 801b9d4:	f000 80fe 	beq.w	801bbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801b9d8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b9dc:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801b9e0:	9211      	str	r2, [sp, #68]	@ 0x44
 801b9e2:	b151      	cbz	r1, 801b9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b9e4:	eb09 0203 	add.w	r2, r9, r3
 801b9e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b9ec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b9f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b9f2:	7853      	ldrb	r3, [r2, #1]
 801b9f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b9f8:	9312      	str	r3, [sp, #72]	@ 0x48
 801b9fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b9fc:	fb10 f201 	smulbb	r2, r0, r1
 801ba00:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ba02:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ba06:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ba0a:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801ba0e:	10d2      	asrs	r2, r2, #3
 801ba10:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ba14:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801ba18:	ea4c 0c03 	orr.w	ip, ip, r3
 801ba1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ba1e:	041b      	lsls	r3, r3, #16
 801ba20:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801ba24:	4323      	orrs	r3, r4
 801ba26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ba28:	4353      	muls	r3, r2
 801ba2a:	fb09 330c 	mla	r3, r9, ip, r3
 801ba2e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801ba32:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801ba36:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801ba3a:	ea4c 0e0e 	orr.w	lr, ip, lr
 801ba3e:	f1c1 0c10 	rsb	ip, r1, #16
 801ba42:	ebac 0c00 	sub.w	ip, ip, r0
 801ba46:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ba4a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801ba4e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ba52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba54:	0418      	lsls	r0, r3, #16
 801ba56:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ba5a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801ba5e:	4318      	orrs	r0, r3
 801ba60:	fb02 c200 	mla	r2, r2, r0, ip
 801ba64:	8838      	ldrh	r0, [r7, #0]
 801ba66:	0d53      	lsrs	r3, r2, #21
 801ba68:	0952      	lsrs	r2, r2, #5
 801ba6a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ba6e:	1201      	asrs	r1, r0, #8
 801ba70:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ba74:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801ba78:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801ba7c:	00c0      	lsls	r0, r0, #3
 801ba7e:	431a      	orrs	r2, r3
 801ba80:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801ba84:	fb11 f104 	smulbb	r1, r1, r4
 801ba88:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801ba8c:	b292      	uxth	r2, r2
 801ba8e:	fb1e fe04 	smulbb	lr, lr, r4
 801ba92:	b2c0      	uxtb	r0, r0
 801ba94:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801ba98:	fb10 f004 	smulbb	r0, r0, r4
 801ba9c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801baa0:	fb0c 1c03 	mla	ip, ip, r3, r1
 801baa4:	10d1      	asrs	r1, r2, #3
 801baa6:	00d2      	lsls	r2, r2, #3
 801baa8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801baac:	fa1f fc8c 	uxth.w	ip, ip
 801bab0:	b2d2      	uxtb	r2, r2
 801bab2:	fb01 e103 	mla	r1, r1, r3, lr
 801bab6:	fb02 0303 	mla	r3, r2, r3, r0
 801baba:	b289      	uxth	r1, r1
 801babc:	b29a      	uxth	r2, r3
 801babe:	f10c 0301 	add.w	r3, ip, #1
 801bac2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bac6:	1c53      	adds	r3, r2, #1
 801bac8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bacc:	1c4a      	adds	r2, r1, #1
 801bace:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801bad2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801bad6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bada:	0949      	lsrs	r1, r1, #5
 801badc:	ea43 030c 	orr.w	r3, r3, ip
 801bae0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801bae4:	430b      	orrs	r3, r1
 801bae6:	803b      	strh	r3, [r7, #0]
 801bae8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801baea:	3702      	adds	r7, #2
 801baec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801baf0:	449a      	add	sl, r3
 801baf2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801baf4:	441d      	add	r5, r3
 801baf6:	e742      	b.n	801b97e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801baf8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bafa:	f108 0802 	add.w	r8, r8, #2
 801bafe:	449a      	add	sl, r3
 801bb00:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801bb02:	441d      	add	r5, r3
 801bb04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb06:	3b01      	subs	r3, #1
 801bb08:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb0a:	e718      	b.n	801b93e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bb0c:	d023      	beq.n	801bb56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801bb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb10:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801bb12:	3b01      	subs	r3, #1
 801bb14:	fb00 a003 	mla	r0, r0, r3, sl
 801bb18:	1400      	asrs	r0, r0, #16
 801bb1a:	f53f af2d 	bmi.w	801b978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb1e:	3901      	subs	r1, #1
 801bb20:	4288      	cmp	r0, r1
 801bb22:	f6bf af29 	bge.w	801b978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb26:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801bb28:	fb01 5303 	mla	r3, r1, r3, r5
 801bb2c:	141b      	asrs	r3, r3, #16
 801bb2e:	f53f af23 	bmi.w	801b978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb32:	3a01      	subs	r2, #1
 801bb34:	4293      	cmp	r3, r2
 801bb36:	f6bf af1f 	bge.w	801b978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb3a:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801bb3e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 801bb42:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801bb46:	f1be 0f00 	cmp.w	lr, #0
 801bb4a:	dc6c      	bgt.n	801bc26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801bb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb4e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bb52:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801bb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	f340 810e 	ble.w	801bd7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801bb5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bb62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bb64:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb6c:	eef0 6a62 	vmov.f32	s13, s5
 801bb70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bb74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb7c:	ee16 aa90 	vmov	sl, s13
 801bb80:	eef0 6a43 	vmov.f32	s13, s6
 801bb84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb88:	ee16 5a90 	vmov	r5, s13
 801bb8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb90:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb94:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bba0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bba4:	ee12 2a90 	vmov	r2, s5
 801bba8:	eef0 2a47 	vmov.f32	s5, s14
 801bbac:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbb0:	ee13 2a10 	vmov	r2, s6
 801bbb4:	9325      	str	r3, [sp, #148]	@ 0x94
 801bbb6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bbb8:	eeb0 3a67 	vmov.f32	s6, s15
 801bbbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbc0:	9326      	str	r3, [sp, #152]	@ 0x98
 801bbc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbc4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bbc6:	3b01      	subs	r3, #1
 801bbc8:	930c      	str	r3, [sp, #48]	@ 0x30
 801bbca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bbcc:	bf08      	it	eq
 801bbce:	4613      	moveq	r3, r2
 801bbd0:	9309      	str	r3, [sp, #36]	@ 0x24
 801bbd2:	e6a6      	b.n	801b922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bbd4:	2900      	cmp	r1, #0
 801bbd6:	f43f af10 	beq.w	801b9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bbda:	f819 3003 	ldrb.w	r3, [r9, r3]
 801bbde:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bbe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bbe4:	e709      	b.n	801b9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bbe6:	f112 0901 	adds.w	r9, r2, #1
 801bbea:	f53f af7d 	bmi.w	801bae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bbee:	454b      	cmp	r3, r9
 801bbf0:	f6ff af7a 	blt.w	801bae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bbf4:	f11c 0901 	adds.w	r9, ip, #1
 801bbf8:	f53f af76 	bmi.w	801bae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bbfc:	45ce      	cmp	lr, r9
 801bbfe:	f6ff af73 	blt.w	801bae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bc02:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bc04:	b21b      	sxth	r3, r3
 801bc06:	9202      	str	r2, [sp, #8]
 801bc08:	fa0f f28e 	sxth.w	r2, lr
 801bc0c:	9300      	str	r3, [sp, #0]
 801bc0e:	4633      	mov	r3, r6
 801bc10:	9201      	str	r2, [sp, #4]
 801bc12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bc14:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801bc18:	e9cd c003 	strd	ip, r0, [sp, #12]
 801bc1c:	4639      	mov	r1, r7
 801bc1e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801bc20:	f7ff fd8e 	bl	801b740 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801bc24:	e760      	b.n	801bae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bc26:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801bc28:	ea4f 422a 	mov.w	r2, sl, asr #16
 801bc2c:	1429      	asrs	r1, r5, #16
 801bc2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801bc34:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801bc38:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bc3c:	fb03 2101 	mla	r1, r3, r1, r2
 801bc40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bc42:	440a      	add	r2, r1
 801bc44:	5c61      	ldrb	r1, [r4, r1]
 801bc46:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801bc4a:	f1bc 0f00 	cmp.w	ip, #0
 801bc4e:	f000 808c 	beq.w	801bd6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801bc52:	7857      	ldrb	r7, [r2, #1]
 801bc54:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801bc58:	9413      	str	r4, [sp, #76]	@ 0x4c
 801bc5a:	b140      	cbz	r0, 801bc6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bc5c:	18d7      	adds	r7, r2, r3
 801bc5e:	5cd3      	ldrb	r3, [r2, r3]
 801bc60:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bc64:	9310      	str	r3, [sp, #64]	@ 0x40
 801bc66:	787b      	ldrb	r3, [r7, #1]
 801bc68:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bc6c:	9314      	str	r3, [sp, #80]	@ 0x50
 801bc6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc70:	fb1c f200 	smulbb	r2, ip, r0
 801bc74:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bc76:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bc7a:	041f      	lsls	r7, r3, #16
 801bc7c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801bc80:	10d2      	asrs	r2, r2, #3
 801bc82:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 801bc86:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 801bc8a:	431f      	orrs	r7, r3
 801bc8c:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801bc90:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bc92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc94:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801bc96:	041b      	lsls	r3, r3, #16
 801bc98:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801bc9c:	ea43 030b 	orr.w	r3, r3, fp
 801bca0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801bca4:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801bca8:	4353      	muls	r3, r2
 801bcaa:	fb04 3707 	mla	r7, r4, r7, r3
 801bcae:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801bcb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bcb4:	ea43 0b01 	orr.w	fp, r3, r1
 801bcb8:	f1c0 0110 	rsb	r1, r0, #16
 801bcbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bcbe:	eba1 0c0c 	sub.w	ip, r1, ip
 801bcc2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bcc6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801bcca:	fb0c 770b 	mla	r7, ip, fp, r7
 801bcce:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bcd2:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 801bcd6:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801bcda:	ea4c 0c0b 	orr.w	ip, ip, fp
 801bcde:	fb02 770c 	mla	r7, r2, ip, r7
 801bce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bce4:	0d79      	lsrs	r1, r7, #21
 801bce6:	8812      	ldrh	r2, [r2, #0]
 801bce8:	097f      	lsrs	r7, r7, #5
 801bcea:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801bcee:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801bcf2:	430f      	orrs	r7, r1
 801bcf4:	1211      	asrs	r1, r2, #8
 801bcf6:	b2bb      	uxth	r3, r7
 801bcf8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801bcfc:	10d7      	asrs	r7, r2, #3
 801bcfe:	fb11 f104 	smulbb	r1, r1, r4
 801bd02:	1218      	asrs	r0, r3, #8
 801bd04:	00d2      	lsls	r2, r2, #3
 801bd06:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801bd0a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801bd0e:	fb17 f704 	smulbb	r7, r7, r4
 801bd12:	b2d2      	uxtb	r2, r2
 801bd14:	fb00 1009 	mla	r0, r0, r9, r1
 801bd18:	10d9      	asrs	r1, r3, #3
 801bd1a:	fb12 f204 	smulbb	r2, r2, r4
 801bd1e:	00db      	lsls	r3, r3, #3
 801bd20:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801bd24:	b280      	uxth	r0, r0
 801bd26:	b2db      	uxtb	r3, r3
 801bd28:	fb01 7109 	mla	r1, r1, r9, r7
 801bd2c:	fb03 2309 	mla	r3, r3, r9, r2
 801bd30:	1c42      	adds	r2, r0, #1
 801bd32:	b289      	uxth	r1, r1
 801bd34:	b29b      	uxth	r3, r3
 801bd36:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bd3a:	1c4f      	adds	r7, r1, #1
 801bd3c:	1c5a      	adds	r2, r3, #1
 801bd3e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801bd42:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801bd46:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bd4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd4c:	0949      	lsrs	r1, r1, #5
 801bd4e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bd52:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801bd56:	4310      	orrs	r0, r2
 801bd58:	4308      	orrs	r0, r1
 801bd5a:	f823 0b02 	strh.w	r0, [r3], #2
 801bd5e:	930e      	str	r3, [sp, #56]	@ 0x38
 801bd60:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bd62:	449a      	add	sl, r3
 801bd64:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801bd66:	441d      	add	r5, r3
 801bd68:	e6ed      	b.n	801bb46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	f43f af7f 	beq.w	801bc6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bd70:	5cd3      	ldrb	r3, [r2, r3]
 801bd72:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801bd76:	9310      	str	r3, [sp, #64]	@ 0x40
 801bd78:	e779      	b.n	801bc6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bd7a:	b019      	add	sp, #100	@ 0x64
 801bd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801bd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd84:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 801bd88:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801bd8c:	f1b8 0f00 	cmp.w	r8, #0
 801bd90:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 801bd94:	fb08 470e 	mla	r7, r8, lr, r4
 801bd98:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 801bd9c:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801bda0:	eb02 0907 	add.w	r9, r2, r7
 801bda4:	8808      	ldrh	r0, [r1, #0]
 801bda6:	db67      	blt.n	801be78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801bda8:	45c2      	cmp	sl, r8
 801bdaa:	dd65      	ble.n	801be78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801bdac:	2c00      	cmp	r4, #0
 801bdae:	db61      	blt.n	801be74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801bdb0:	45a6      	cmp	lr, r4
 801bdb2:	dd5f      	ble.n	801be74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801bdb4:	5dd2      	ldrb	r2, [r2, r7]
 801bdb6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801bdba:	1c62      	adds	r2, r4, #1
 801bdbc:	d45f      	bmi.n	801be7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bdbe:	4596      	cmp	lr, r2
 801bdc0:	dd5d      	ble.n	801be7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bdc2:	2d00      	cmp	r5, #0
 801bdc4:	d05b      	beq.n	801be7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801bdc6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801bdca:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801bdce:	f118 0801 	adds.w	r8, r8, #1
 801bdd2:	d458      	bmi.n	801be86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bdd4:	45c2      	cmp	sl, r8
 801bdd6:	dd56      	ble.n	801be86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bdd8:	2e00      	cmp	r6, #0
 801bdda:	d054      	beq.n	801be86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801bddc:	2c00      	cmp	r4, #0
 801bdde:	db50      	blt.n	801be82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801bde0:	45a6      	cmp	lr, r4
 801bde2:	dd4e      	ble.n	801be82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801bde4:	f819 200e 	ldrb.w	r2, [r9, lr]
 801bde8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801bdec:	3401      	adds	r4, #1
 801bdee:	d407      	bmi.n	801be00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bdf0:	45a6      	cmp	lr, r4
 801bdf2:	dd05      	ble.n	801be00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bdf4:	b125      	cbz	r5, 801be00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801bdf6:	44ce      	add	lr, r9
 801bdf8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801bdfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801be00:	fb15 f406 	smulbb	r4, r5, r6
 801be04:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801be08:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801be0c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801be10:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801be14:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801be18:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801be1c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801be20:	ea43 0c0c 	orr.w	ip, r3, ip
 801be24:	f1c6 0310 	rsb	r3, r6, #16
 801be28:	ea4e 0707 	orr.w	r7, lr, r7
 801be2c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801be30:	1b5b      	subs	r3, r3, r5
 801be32:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801be36:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801be3a:	437d      	muls	r5, r7
 801be3c:	fb03 5c0c 	mla	ip, r3, ip, r5
 801be40:	0403      	lsls	r3, r0, #16
 801be42:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801be46:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801be4a:	4318      	orrs	r0, r3
 801be4c:	0413      	lsls	r3, r2, #16
 801be4e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801be52:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801be56:	fb04 c000 	mla	r0, r4, r0, ip
 801be5a:	4313      	orrs	r3, r2
 801be5c:	fb06 0003 	mla	r0, r6, r3, r0
 801be60:	0d43      	lsrs	r3, r0, #21
 801be62:	0940      	lsrs	r0, r0, #5
 801be64:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801be68:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801be6c:	4318      	orrs	r0, r3
 801be6e:	8008      	strh	r0, [r1, #0]
 801be70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be74:	4684      	mov	ip, r0
 801be76:	e7a0      	b.n	801bdba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801be78:	4607      	mov	r7, r0
 801be7a:	4684      	mov	ip, r0
 801be7c:	e7a7      	b.n	801bdce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801be7e:	4607      	mov	r7, r0
 801be80:	e7a5      	b.n	801bdce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801be82:	4602      	mov	r2, r0
 801be84:	e7b2      	b.n	801bdec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801be86:	4602      	mov	r2, r0
 801be88:	e7ba      	b.n	801be00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801be8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be8e:	b093      	sub	sp, #76	@ 0x4c
 801be90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801be94:	920f      	str	r2, [sp, #60]	@ 0x3c
 801be96:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801be98:	9010      	str	r0, [sp, #64]	@ 0x40
 801be9a:	9108      	str	r1, [sp, #32]
 801be9c:	6850      	ldr	r0, [r2, #4]
 801be9e:	9306      	str	r3, [sp, #24]
 801bea0:	6812      	ldr	r2, [r2, #0]
 801bea2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801bea6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801beaa:	fb00 1303 	mla	r3, r0, r3, r1
 801beae:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801beb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	9307      	str	r3, [sp, #28]
 801beb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801beba:	685f      	ldr	r7, [r3, #4]
 801bebc:	3704      	adds	r7, #4
 801bebe:	9b08      	ldr	r3, [sp, #32]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	dc03      	bgt.n	801becc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	f340 81b2 	ble.w	801c230 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801becc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bece:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bed2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bed6:	1e48      	subs	r0, r1, #1
 801bed8:	f102 3cff 	add.w	ip, r2, #4294967295
 801bedc:	9b06      	ldr	r3, [sp, #24]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	f340 80a9 	ble.w	801c036 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801bee4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bee8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801beec:	d406      	bmi.n	801befc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801beee:	4586      	cmp	lr, r0
 801bef0:	da04      	bge.n	801befc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	db02      	blt.n	801befc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bef6:	4563      	cmp	r3, ip
 801bef8:	f2c0 809e 	blt.w	801c038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801befc:	f11e 0e01 	adds.w	lr, lr, #1
 801bf00:	f100 808f 	bmi.w	801c022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801bf04:	4571      	cmp	r1, lr
 801bf06:	f2c0 808c 	blt.w	801c022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801bf0a:	3301      	adds	r3, #1
 801bf0c:	f100 8089 	bmi.w	801c022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801bf10:	429a      	cmp	r2, r3
 801bf12:	f2c0 8086 	blt.w	801c022 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801bf16:	f8dd b018 	ldr.w	fp, [sp, #24]
 801bf1a:	46c8      	mov	r8, r9
 801bf1c:	f1bb 0f00 	cmp.w	fp, #0
 801bf20:	f340 80a6 	ble.w	801c070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801bf24:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801bf26:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801bf2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bf2c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801bf30:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801bf34:	1422      	asrs	r2, r4, #16
 801bf36:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801bf3a:	689b      	ldr	r3, [r3, #8]
 801bf3c:	f100 80e3 	bmi.w	801c106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bf40:	f103 3aff 	add.w	sl, r3, #4294967295
 801bf44:	4552      	cmp	r2, sl
 801bf46:	f280 80de 	bge.w	801c106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bf4a:	f1bc 0f00 	cmp.w	ip, #0
 801bf4e:	f2c0 80da 	blt.w	801c106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bf52:	f10e 3aff 	add.w	sl, lr, #4294967295
 801bf56:	45d4      	cmp	ip, sl
 801bf58:	f280 80d5 	bge.w	801c106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bf5c:	b21b      	sxth	r3, r3
 801bf5e:	9d07      	ldr	r5, [sp, #28]
 801bf60:	fb0c 2203 	mla	r2, ip, r3, r2
 801bf64:	eb05 0a02 	add.w	sl, r5, r2
 801bf68:	5caa      	ldrb	r2, [r5, r2]
 801bf6a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801bf6e:	2800      	cmp	r0, #0
 801bf70:	f000 80c0 	beq.w	801c0f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bf74:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801bf78:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801bf7c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bf7e:	b151      	cbz	r1, 801bf96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801bf80:	eb0a 0203 	add.w	r2, sl, r3
 801bf84:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801bf88:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801bf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf8e:	7853      	ldrb	r3, [r2, #1]
 801bf90:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801bf94:	930c      	str	r3, [sp, #48]	@ 0x30
 801bf96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf98:	fb10 f201 	smulbb	r2, r0, r1
 801bf9c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801bf9e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bfa2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801bfa6:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801bfaa:	10d2      	asrs	r2, r2, #3
 801bfac:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801bfb0:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801bfb4:	ea4c 0c03 	orr.w	ip, ip, r3
 801bfb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bfba:	041b      	lsls	r3, r3, #16
 801bfbc:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801bfc0:	432b      	orrs	r3, r5
 801bfc2:	4353      	muls	r3, r2
 801bfc4:	fb0a 330c 	mla	r3, sl, ip, r3
 801bfc8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801bfcc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801bfd0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801bfd4:	ea4c 0e0e 	orr.w	lr, ip, lr
 801bfd8:	f1c1 0c10 	rsb	ip, r1, #16
 801bfdc:	ebac 0c00 	sub.w	ip, ip, r0
 801bfe0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bfe4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801bfe8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801bfec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfee:	0418      	lsls	r0, r3, #16
 801bff0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801bff4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801bff8:	4318      	orrs	r0, r3
 801bffa:	fb02 c200 	mla	r2, r2, r0, ip
 801bffe:	0d53      	lsrs	r3, r2, #21
 801c000:	0952      	lsrs	r2, r2, #5
 801c002:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c006:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801c00a:	431a      	orrs	r2, r3
 801c00c:	f8a8 2000 	strh.w	r2, [r8]
 801c010:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c012:	f108 0802 	add.w	r8, r8, #2
 801c016:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c01a:	441c      	add	r4, r3
 801c01c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c01e:	441e      	add	r6, r3
 801c020:	e77c      	b.n	801bf1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c022:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c024:	f109 0902 	add.w	r9, r9, #2
 801c028:	441c      	add	r4, r3
 801c02a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c02c:	441e      	add	r6, r3
 801c02e:	9b06      	ldr	r3, [sp, #24]
 801c030:	3b01      	subs	r3, #1
 801c032:	9306      	str	r3, [sp, #24]
 801c034:	e752      	b.n	801bedc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c036:	d020      	beq.n	801c07a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c038:	9b06      	ldr	r3, [sp, #24]
 801c03a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801c03c:	3b01      	subs	r3, #1
 801c03e:	fb00 4003 	mla	r0, r0, r3, r4
 801c042:	1400      	asrs	r0, r0, #16
 801c044:	f53f af67 	bmi.w	801bf16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c048:	3901      	subs	r1, #1
 801c04a:	4288      	cmp	r0, r1
 801c04c:	f6bf af63 	bge.w	801bf16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c050:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801c052:	fb01 6303 	mla	r3, r1, r3, r6
 801c056:	141b      	asrs	r3, r3, #16
 801c058:	f53f af5d 	bmi.w	801bf16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c05c:	3a01      	subs	r2, #1
 801c05e:	4293      	cmp	r3, r2
 801c060:	f6bf af59 	bge.w	801bf16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c064:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c068:	46ca      	mov	sl, r9
 801c06a:	f1b8 0f00 	cmp.w	r8, #0
 801c06e:	dc67      	bgt.n	801c140 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c070:	9b06      	ldr	r3, [sp, #24]
 801c072:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c076:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801c07a:	9b08      	ldr	r3, [sp, #32]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	f340 80d7 	ble.w	801c230 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801c082:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c086:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c088:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c08c:	eeb0 6a62 	vmov.f32	s12, s5
 801c090:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c094:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c098:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c09c:	ee16 4a10 	vmov	r4, s12
 801c0a0:	eeb0 6a43 	vmov.f32	s12, s6
 801c0a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c0a8:	ee16 6a10 	vmov	r6, s12
 801c0ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0c4:	ee12 2a90 	vmov	r2, s5
 801c0c8:	eef0 2a47 	vmov.f32	s5, s14
 801c0cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0d0:	ee13 2a10 	vmov	r2, s6
 801c0d4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c0d6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c0d8:	eeb0 3a67 	vmov.f32	s6, s15
 801c0dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0e0:	9320      	str	r3, [sp, #128]	@ 0x80
 801c0e2:	9b08      	ldr	r3, [sp, #32]
 801c0e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c0e6:	3b01      	subs	r3, #1
 801c0e8:	9308      	str	r3, [sp, #32]
 801c0ea:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c0ec:	bf08      	it	eq
 801c0ee:	4613      	moveq	r3, r2
 801c0f0:	9306      	str	r3, [sp, #24]
 801c0f2:	e6e4      	b.n	801bebe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c0f4:	2900      	cmp	r1, #0
 801c0f6:	f43f af4e 	beq.w	801bf96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c0fa:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801c0fe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c102:	9309      	str	r3, [sp, #36]	@ 0x24
 801c104:	e747      	b.n	801bf96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801c106:	f112 0a01 	adds.w	sl, r2, #1
 801c10a:	d481      	bmi.n	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c10c:	4553      	cmp	r3, sl
 801c10e:	f6ff af7f 	blt.w	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c112:	f11c 0a01 	adds.w	sl, ip, #1
 801c116:	f53f af7b 	bmi.w	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c11a:	45d6      	cmp	lr, sl
 801c11c:	f6ff af78 	blt.w	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c120:	b21b      	sxth	r3, r3
 801c122:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801c126:	fa0f f28e 	sxth.w	r2, lr
 801c12a:	9300      	str	r3, [sp, #0]
 801c12c:	463b      	mov	r3, r7
 801c12e:	9201      	str	r2, [sp, #4]
 801c130:	9a07      	ldr	r2, [sp, #28]
 801c132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c136:	4641      	mov	r1, r8
 801c138:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c13a:	f7ff fe21 	bl	801bd80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801c13e:	e767      	b.n	801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c140:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c142:	1422      	asrs	r2, r4, #16
 801c144:	1431      	asrs	r1, r6, #16
 801c146:	9d07      	ldr	r5, [sp, #28]
 801c148:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c14c:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801c150:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c154:	fb03 2101 	mla	r1, r3, r1, r2
 801c158:	9a07      	ldr	r2, [sp, #28]
 801c15a:	440a      	add	r2, r1
 801c15c:	5c69      	ldrb	r1, [r5, r1]
 801c15e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801c162:	f1be 0f00 	cmp.w	lr, #0
 801c166:	d05c      	beq.n	801c222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801c168:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c16c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801c170:	950d      	str	r5, [sp, #52]	@ 0x34
 801c172:	b150      	cbz	r0, 801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c174:	eb02 0c03 	add.w	ip, r2, r3
 801c178:	5cd3      	ldrb	r3, [r2, r3]
 801c17a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c17e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c180:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c184:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c188:	930e      	str	r3, [sp, #56]	@ 0x38
 801c18a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c18c:	fb1e f200 	smulbb	r2, lr, r0
 801c190:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801c192:	f108 38ff 	add.w	r8, r8, #4294967295
 801c196:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c19a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801c19e:	10d2      	asrs	r2, r2, #3
 801c1a0:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 801c1a4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801c1a8:	ea4c 0c03 	orr.w	ip, ip, r3
 801c1ac:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801c1b0:	9311      	str	r3, [sp, #68]	@ 0x44
 801c1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c1b4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c1b6:	041b      	lsls	r3, r3, #16
 801c1b8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801c1bc:	ea43 030b 	orr.w	r3, r3, fp
 801c1c0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c1c4:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801c1c8:	4353      	muls	r3, r2
 801c1ca:	fb05 3c0c 	mla	ip, r5, ip, r3
 801c1ce:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 801c1d2:	ea43 0b01 	orr.w	fp, r3, r1
 801c1d6:	f1c0 0110 	rsb	r1, r0, #16
 801c1da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c1dc:	eba1 0e0e 	sub.w	lr, r1, lr
 801c1e0:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801c1e4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c1e8:	fb0e cc0b 	mla	ip, lr, fp, ip
 801c1ec:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801c1f0:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 801c1f4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801c1f8:	ea4b 0e0e 	orr.w	lr, fp, lr
 801c1fc:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c200:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801c204:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c208:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801c20c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801c210:	ea43 0c0c 	orr.w	ip, r3, ip
 801c214:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c216:	441c      	add	r4, r3
 801c218:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c21a:	f82a cb02 	strh.w	ip, [sl], #2
 801c21e:	441e      	add	r6, r3
 801c220:	e723      	b.n	801c06a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c222:	2800      	cmp	r0, #0
 801c224:	d0b1      	beq.n	801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c226:	5cd3      	ldrb	r3, [r2, r3]
 801c228:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801c22c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c22e:	e7ac      	b.n	801c18a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801c230:	b013      	add	sp, #76	@ 0x4c
 801c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c236 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801c236:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c23a:	880d      	ldrh	r5, [r1, #0]
 801c23c:	b087      	sub	sp, #28
 801c23e:	10ef      	asrs	r7, r5, #3
 801c240:	9103      	str	r1, [sp, #12]
 801c242:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801c246:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 801c24a:	00ed      	lsls	r5, r5, #3
 801c24c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c250:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801c254:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801c258:	b2ed      	uxtb	r5, r5
 801c25a:	9701      	str	r7, [sp, #4]
 801c25c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801c260:	9502      	str	r5, [sp, #8]
 801c262:	9d01      	ldr	r5, [sp, #4]
 801c264:	9902      	ldr	r1, [sp, #8]
 801c266:	022d      	lsls	r5, r5, #8
 801c268:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 801c26c:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 801c270:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801c274:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801c278:	430d      	orrs	r5, r1
 801c27a:	fb06 0709 	mla	r7, r6, r9, r0
 801c27e:	2e00      	cmp	r6, #0
 801c280:	9505      	str	r5, [sp, #20]
 801c282:	eb02 0c07 	add.w	ip, r2, r7
 801c286:	f2c0 80b6 	blt.w	801c3f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801c28a:	45b3      	cmp	fp, r6
 801c28c:	f340 80b3 	ble.w	801c3f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801c290:	2800      	cmp	r0, #0
 801c292:	f2c0 80ae 	blt.w	801c3f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801c296:	4581      	cmp	r9, r0
 801c298:	f340 80ab 	ble.w	801c3f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801c29c:	5dd7      	ldrb	r7, [r2, r7]
 801c29e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c2a2:	441f      	add	r7, r3
 801c2a4:	1c42      	adds	r2, r0, #1
 801c2a6:	f100 80a9 	bmi.w	801c3fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c2aa:	4591      	cmp	r9, r2
 801c2ac:	f340 80a6 	ble.w	801c3fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c2b0:	2c00      	cmp	r4, #0
 801c2b2:	f000 80a3 	beq.w	801c3fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801c2b6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c2ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2be:	441d      	add	r5, r3
 801c2c0:	3601      	adds	r6, #1
 801c2c2:	f100 809f 	bmi.w	801c404 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c2c6:	45b3      	cmp	fp, r6
 801c2c8:	f340 809c 	ble.w	801c404 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c2cc:	f1be 0f00 	cmp.w	lr, #0
 801c2d0:	f000 8098 	beq.w	801c404 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801c2d4:	2800      	cmp	r0, #0
 801c2d6:	f2c0 8093 	blt.w	801c400 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801c2da:	4581      	cmp	r9, r0
 801c2dc:	f340 8090 	ble.w	801c400 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801c2e0:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801c2e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c2e8:	441e      	add	r6, r3
 801c2ea:	3001      	adds	r0, #1
 801c2ec:	f100 808d 	bmi.w	801c40a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c2f0:	4581      	cmp	r9, r0
 801c2f2:	f340 808a 	ble.w	801c40a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c2f6:	2c00      	cmp	r4, #0
 801c2f8:	f000 8087 	beq.w	801c40a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801c2fc:	44e1      	add	r9, ip
 801c2fe:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c302:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c306:	4413      	add	r3, r2
 801c308:	b2a4      	uxth	r4, r4
 801c30a:	f897 c002 	ldrb.w	ip, [r7, #2]
 801c30e:	fa1f fe8e 	uxth.w	lr, lr
 801c312:	9901      	ldr	r1, [sp, #4]
 801c314:	fb04 fb0e 	mul.w	fp, r4, lr
 801c318:	0124      	lsls	r4, r4, #4
 801c31a:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801c31e:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 801c322:	eba4 040b 	sub.w	r4, r4, fp
 801c326:	fa1f f08e 	uxth.w	r0, lr
 801c32a:	b2a2      	uxth	r2, r4
 801c32c:	78ac      	ldrb	r4, [r5, #2]
 801c32e:	eba9 0900 	sub.w	r9, r9, r0
 801c332:	fa1f fe88 	uxth.w	lr, r8
 801c336:	4354      	muls	r4, r2
 801c338:	ea6f 0808 	mvn.w	r8, r8
 801c33c:	fa1f f989 	uxth.w	r9, r9
 801c340:	fa5f f888 	uxtb.w	r8, r8
 801c344:	fb09 440c 	mla	r4, r9, ip, r4
 801c348:	f896 c002 	ldrb.w	ip, [r6, #2]
 801c34c:	fb1a fa08 	smulbb	sl, sl, r8
 801c350:	fb00 440c 	mla	r4, r0, ip, r4
 801c354:	f893 c002 	ldrb.w	ip, [r3, #2]
 801c358:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801c35c:	787c      	ldrb	r4, [r7, #1]
 801c35e:	783f      	ldrb	r7, [r7, #0]
 801c360:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c364:	fb0c ac0e 	mla	ip, ip, lr, sl
 801c368:	f895 a001 	ldrb.w	sl, [r5, #1]
 801c36c:	782d      	ldrb	r5, [r5, #0]
 801c36e:	fb02 fa0a 	mul.w	sl, r2, sl
 801c372:	fa1f fc8c 	uxth.w	ip, ip
 801c376:	436a      	muls	r2, r5
 801c378:	7835      	ldrb	r5, [r6, #0]
 801c37a:	fb09 aa04 	mla	sl, r9, r4, sl
 801c37e:	7874      	ldrb	r4, [r6, #1]
 801c380:	fb09 2207 	mla	r2, r9, r7, r2
 801c384:	fb00 aa04 	mla	sl, r0, r4, sl
 801c388:	785c      	ldrb	r4, [r3, #1]
 801c38a:	fb00 2005 	mla	r0, r0, r5, r2
 801c38e:	781b      	ldrb	r3, [r3, #0]
 801c390:	fb0b a404 	mla	r4, fp, r4, sl
 801c394:	fb11 fa08 	smulbb	sl, r1, r8
 801c398:	fb0b 0b03 	mla	fp, fp, r3, r0
 801c39c:	9b02      	ldr	r3, [sp, #8]
 801c39e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c3a2:	fb13 f808 	smulbb	r8, r3, r8
 801c3a6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801c3aa:	fb04 a40e 	mla	r4, r4, lr, sl
 801c3ae:	f10c 0301 	add.w	r3, ip, #1
 801c3b2:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801c3b6:	b2a4      	uxth	r4, r4
 801c3b8:	fa1f fe8e 	uxth.w	lr, lr
 801c3bc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c3c0:	f104 0a01 	add.w	sl, r4, #1
 801c3c4:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 801c3c8:	f10e 0c01 	add.w	ip, lr, #1
 801c3cc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c3d0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c3d4:	0964      	lsrs	r4, r4, #5
 801c3d6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c3da:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801c3de:	ea4c 0c03 	orr.w	ip, ip, r3
 801c3e2:	9b03      	ldr	r3, [sp, #12]
 801c3e4:	ea4c 0c04 	orr.w	ip, ip, r4
 801c3e8:	f8a3 c000 	strh.w	ip, [r3]
 801c3ec:	b007      	add	sp, #28
 801c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3f2:	af05      	add	r7, sp, #20
 801c3f4:	e756      	b.n	801c2a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801c3f6:	ad05      	add	r5, sp, #20
 801c3f8:	462f      	mov	r7, r5
 801c3fa:	e761      	b.n	801c2c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801c3fc:	ad05      	add	r5, sp, #20
 801c3fe:	e75f      	b.n	801c2c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801c400:	ae05      	add	r6, sp, #20
 801c402:	e772      	b.n	801c2ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801c404:	ab05      	add	r3, sp, #20
 801c406:	461e      	mov	r6, r3
 801c408:	e77e      	b.n	801c308 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801c40a:	ab05      	add	r3, sp, #20
 801c40c:	e77c      	b.n	801c308 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801c40e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c40e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c412:	b095      	sub	sp, #84	@ 0x54
 801c414:	9212      	str	r2, [sp, #72]	@ 0x48
 801c416:	9309      	str	r3, [sp, #36]	@ 0x24
 801c418:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c41a:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801c41e:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c420:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c422:	6850      	ldr	r0, [r2, #4]
 801c424:	910e      	str	r1, [sp, #56]	@ 0x38
 801c426:	6812      	ldr	r2, [r2, #0]
 801c428:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 801c42c:	fb00 1303 	mla	r3, r0, r3, r1
 801c430:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c434:	930a      	str	r3, [sp, #40]	@ 0x28
 801c436:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c43c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c43e:	685c      	ldr	r4, [r3, #4]
 801c440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c442:	3404      	adds	r4, #4
 801c444:	43db      	mvns	r3, r3
 801c446:	b2db      	uxtb	r3, r3
 801c448:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	dc03      	bgt.n	801c458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c450:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c452:	2b00      	cmp	r3, #0
 801c454:	f340 8255 	ble.w	801c902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801c458:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c45a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c45e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c462:	1e48      	subs	r0, r1, #1
 801c464:	1e55      	subs	r5, r2, #1
 801c466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c468:	2b00      	cmp	r3, #0
 801c46a:	f340 80f9 	ble.w	801c660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c46e:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801c470:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c472:	1436      	asrs	r6, r6, #16
 801c474:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c478:	d406      	bmi.n	801c488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c47a:	4286      	cmp	r6, r0
 801c47c:	da04      	bge.n	801c488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c47e:	2b00      	cmp	r3, #0
 801c480:	db02      	blt.n	801c488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c482:	42ab      	cmp	r3, r5
 801c484:	f2c0 80ed 	blt.w	801c662 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c488:	3601      	adds	r6, #1
 801c48a:	f100 80da 	bmi.w	801c642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c48e:	42b1      	cmp	r1, r6
 801c490:	f2c0 80d7 	blt.w	801c642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c494:	3301      	adds	r3, #1
 801c496:	f100 80d4 	bmi.w	801c642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c49a:	429a      	cmp	r2, r3
 801c49c:	f2c0 80d1 	blt.w	801c642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801c4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4a2:	9311      	str	r3, [sp, #68]	@ 0x44
 801c4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4a6:	930c      	str	r3, [sp, #48]	@ 0x30
 801c4a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	f340 80fa 	ble.w	801c6a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c4b0:	9826      	ldr	r0, [sp, #152]	@ 0x98
 801c4b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c4b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c4b6:	68c6      	ldr	r6, [r0, #12]
 801c4b8:	141d      	asrs	r5, r3, #16
 801c4ba:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801c4bc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c4c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c4c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c4c4:	1400      	asrs	r0, r0, #16
 801c4c6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c4ca:	6892      	ldr	r2, [r2, #8]
 801c4cc:	f100 813e 	bmi.w	801c74c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c4d0:	1e57      	subs	r7, r2, #1
 801c4d2:	42b8      	cmp	r0, r7
 801c4d4:	f280 813a 	bge.w	801c74c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c4d8:	2d00      	cmp	r5, #0
 801c4da:	f2c0 8137 	blt.w	801c74c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c4de:	1e77      	subs	r7, r6, #1
 801c4e0:	42bd      	cmp	r5, r7
 801c4e2:	f280 8133 	bge.w	801c74c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801c4e6:	b212      	sxth	r2, r2
 801c4e8:	fb05 0002 	mla	r0, r5, r2, r0
 801c4ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c4ee:	f815 a000 	ldrb.w	sl, [r5, r0]
 801c4f2:	182e      	adds	r6, r5, r0
 801c4f4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801c4f8:	eb04 050a 	add.w	r5, r4, sl
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	f000 8117 	beq.w	801c730 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c502:	f896 c001 	ldrb.w	ip, [r6, #1]
 801c506:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c50a:	44a4      	add	ip, r4
 801c50c:	2900      	cmp	r1, #0
 801c50e:	f000 8117 	beq.w	801c740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c512:	18b0      	adds	r0, r6, r2
 801c514:	5cb2      	ldrb	r2, [r6, r2]
 801c516:	7840      	ldrb	r0, [r0, #1]
 801c518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c51c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c520:	4422      	add	r2, r4
 801c522:	4420      	add	r0, r4
 801c524:	b29b      	uxth	r3, r3
 801c526:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801c52a:	b289      	uxth	r1, r1
 801c52c:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c530:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c532:	fb03 f901 	mul.w	r9, r3, r1
 801c536:	011b      	lsls	r3, r3, #4
 801c538:	f8b6 e000 	ldrh.w	lr, [r6]
 801c53c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c540:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801c544:	eba3 0309 	sub.w	r3, r3, r9
 801c548:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801c54c:	b289      	uxth	r1, r1
 801c54e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801c552:	b29b      	uxth	r3, r3
 801c554:	eba8 0801 	sub.w	r8, r8, r1
 801c558:	435f      	muls	r7, r3
 801c55a:	fa1f f888 	uxth.w	r8, r8
 801c55e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c560:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c562:	fb08 770b 	mla	r7, r8, fp, r7
 801c566:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c56a:	fb01 770b 	mla	r7, r1, fp, r7
 801c56e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c572:	fb09 770b 	mla	r7, r9, fp, r7
 801c576:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801c57a:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801c57e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c582:	fb1b fb03 	smulbb	fp, fp, r3
 801c586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c588:	fb07 b706 	mla	r7, r7, r6, fp
 801c58c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c590:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801c594:	f89c c000 	ldrb.w	ip, [ip]
 801c598:	b2bf      	uxth	r7, r7
 801c59a:	435d      	muls	r5, r3
 801c59c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c59e:	fb08 550b 	mla	r5, r8, fp, r5
 801c5a2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c5a6:	fb01 550b 	mla	r5, r1, fp, r5
 801c5aa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c5ae:	fb09 550b 	mla	r5, r9, fp, r5
 801c5b2:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801c5b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c5ba:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801c5be:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c5c2:	fa5f fe8e 	uxtb.w	lr, lr
 801c5c6:	fb1b fb03 	smulbb	fp, fp, r3
 801c5ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c5cc:	fb03 f30c 	mul.w	r3, r3, ip
 801c5d0:	f892 c000 	ldrb.w	ip, [r2]
 801c5d4:	fb05 b506 	mla	r5, r5, r6, fp
 801c5d8:	fb08 330a 	mla	r3, r8, sl, r3
 801c5dc:	b2ad      	uxth	r5, r5
 801c5de:	fb01 330c 	mla	r3, r1, ip, r3
 801c5e2:	f890 c000 	ldrb.w	ip, [r0]
 801c5e6:	f105 0b01 	add.w	fp, r5, #1
 801c5ea:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5f0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c5f4:	fb1e fe03 	smulbb	lr, lr, r3
 801c5f8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801c5fc:	1c7b      	adds	r3, r7, #1
 801c5fe:	096d      	lsrs	r5, r5, #5
 801c600:	fb0c e606 	mla	r6, ip, r6, lr
 801c604:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801c608:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801c60c:	b2b6      	uxth	r6, r6
 801c60e:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 801c612:	1c77      	adds	r7, r6, #1
 801c614:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801c618:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c61c:	431f      	orrs	r7, r3
 801c61e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c620:	433d      	orrs	r5, r7
 801c622:	801d      	strh	r5, [r3, #0]
 801c624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c626:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c628:	3302      	adds	r3, #2
 801c62a:	930c      	str	r3, [sp, #48]	@ 0x30
 801c62c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c62e:	4413      	add	r3, r2
 801c630:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c632:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c634:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c636:	4413      	add	r3, r2
 801c638:	9320      	str	r3, [sp, #128]	@ 0x80
 801c63a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c63c:	3b01      	subs	r3, #1
 801c63e:	9311      	str	r3, [sp, #68]	@ 0x44
 801c640:	e732      	b.n	801c4a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c642:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c644:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801c646:	4433      	add	r3, r6
 801c648:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801c64a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c64c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c64e:	4433      	add	r3, r6
 801c650:	9320      	str	r3, [sp, #128]	@ 0x80
 801c652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c654:	3b01      	subs	r3, #1
 801c656:	9309      	str	r3, [sp, #36]	@ 0x24
 801c658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c65a:	3302      	adds	r3, #2
 801c65c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c65e:	e702      	b.n	801c466 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c660:	d027      	beq.n	801c6b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801c662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c664:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801c666:	3b01      	subs	r3, #1
 801c668:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801c66a:	fb00 5003 	mla	r0, r0, r3, r5
 801c66e:	1400      	asrs	r0, r0, #16
 801c670:	f53f af16 	bmi.w	801c4a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c674:	3901      	subs	r1, #1
 801c676:	4288      	cmp	r0, r1
 801c678:	f6bf af12 	bge.w	801c4a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c67c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801c67e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801c680:	fb01 0303 	mla	r3, r1, r3, r0
 801c684:	141b      	asrs	r3, r3, #16
 801c686:	f53f af0b 	bmi.w	801c4a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c68a:	3a01      	subs	r2, #1
 801c68c:	4293      	cmp	r3, r2
 801c68e:	f6bf af07 	bge.w	801c4a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c694:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 801c698:	9311      	str	r3, [sp, #68]	@ 0x44
 801c69a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c69c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c69e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	dc70      	bgt.n	801c786 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801c6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 801c6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	f340 8124 	ble.w	801c902 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801c6ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c6be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c6c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6c8:	eef0 6a62 	vmov.f32	s13, s5
 801c6cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c6d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6d8:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801c6dc:	eef0 6a43 	vmov.f32	s13, s6
 801c6e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6e4:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 801c6e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c700:	ee12 2a90 	vmov	r2, s5
 801c704:	eef0 2a47 	vmov.f32	s5, s14
 801c708:	fb92 f3f3 	sdiv	r3, r2, r3
 801c70c:	ee13 2a10 	vmov	r2, s6
 801c710:	9321      	str	r3, [sp, #132]	@ 0x84
 801c712:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c714:	eeb0 3a67 	vmov.f32	s6, s15
 801c718:	fb92 f3f3 	sdiv	r3, r2, r3
 801c71c:	9322      	str	r3, [sp, #136]	@ 0x88
 801c71e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c720:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c722:	3b01      	subs	r3, #1
 801c724:	930e      	str	r3, [sp, #56]	@ 0x38
 801c726:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c728:	bf08      	it	eq
 801c72a:	4613      	moveq	r3, r2
 801c72c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c72e:	e68c      	b.n	801c44a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c730:	b149      	cbz	r1, 801c746 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801c732:	5cb2      	ldrb	r2, [r6, r2]
 801c734:	4628      	mov	r0, r5
 801c736:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c73a:	4422      	add	r2, r4
 801c73c:	46ac      	mov	ip, r5
 801c73e:	e6f1      	b.n	801c524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c740:	4628      	mov	r0, r5
 801c742:	462a      	mov	r2, r5
 801c744:	e6ee      	b.n	801c524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c746:	4628      	mov	r0, r5
 801c748:	462a      	mov	r2, r5
 801c74a:	e7f7      	b.n	801c73c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801c74c:	1c47      	adds	r7, r0, #1
 801c74e:	f53f af69 	bmi.w	801c624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c752:	42ba      	cmp	r2, r7
 801c754:	f6ff af66 	blt.w	801c624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c758:	1c6f      	adds	r7, r5, #1
 801c75a:	f53f af63 	bmi.w	801c624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c75e:	42be      	cmp	r6, r7
 801c760:	f6ff af60 	blt.w	801c624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c764:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c766:	b236      	sxth	r6, r6
 801c768:	b212      	sxth	r2, r2
 801c76a:	9002      	str	r0, [sp, #8]
 801c76c:	9601      	str	r6, [sp, #4]
 801c76e:	9200      	str	r2, [sp, #0]
 801c770:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c772:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801c776:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c77a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 801c77e:	4623      	mov	r3, r4
 801c780:	f7ff fd59 	bl	801c236 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801c784:	e74e      	b.n	801c624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c786:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c788:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801c78a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c78e:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 801c790:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c792:	1400      	asrs	r0, r0, #16
 801c794:	142d      	asrs	r5, r5, #16
 801c796:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c798:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c79c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c7a0:	fb02 5000 	mla	r0, r2, r0, r5
 801c7a4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c7a6:	f815 9000 	ldrb.w	r9, [r5, r0]
 801c7aa:	182e      	adds	r6, r5, r0
 801c7ac:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c7b0:	eb04 0509 	add.w	r5, r4, r9
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	f000 8096 	beq.w	801c8e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801c7ba:	7877      	ldrb	r7, [r6, #1]
 801c7bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c7c0:	4427      	add	r7, r4
 801c7c2:	2900      	cmp	r1, #0
 801c7c4:	f000 8097 	beq.w	801c8f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801c7c8:	18b0      	adds	r0, r6, r2
 801c7ca:	5cb2      	ldrb	r2, [r6, r2]
 801c7cc:	7840      	ldrb	r0, [r0, #1]
 801c7ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c7d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c7d6:	4422      	add	r2, r4
 801c7d8:	4420      	add	r0, r4
 801c7da:	b29b      	uxth	r3, r3
 801c7dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c7de:	b289      	uxth	r1, r1
 801c7e0:	f895 b002 	ldrb.w	fp, [r5, #2]
 801c7e4:	f8b6 c000 	ldrh.w	ip, [r6]
 801c7e8:	fb03 f801 	mul.w	r8, r3, r1
 801c7ec:	011b      	lsls	r3, r3, #4
 801c7ee:	78be      	ldrb	r6, [r7, #2]
 801c7f0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801c7f4:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801c7f8:	eba3 0308 	sub.w	r3, r3, r8
 801c7fc:	f814 9009 	ldrb.w	r9, [r4, r9]
 801c800:	b289      	uxth	r1, r1
 801c802:	b29b      	uxth	r3, r3
 801c804:	ebae 0e01 	sub.w	lr, lr, r1
 801c808:	435e      	muls	r6, r3
 801c80a:	fa1f fe8e 	uxth.w	lr, lr
 801c80e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c812:	fb0e 660b 	mla	r6, lr, fp, r6
 801c816:	f892 b002 	ldrb.w	fp, [r2, #2]
 801c81a:	fb01 660b 	mla	r6, r1, fp, r6
 801c81e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c822:	fb08 660b 	mla	r6, r8, fp, r6
 801c826:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801c82a:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 801c82e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c832:	fb1b fb03 	smulbb	fp, fp, r3
 801c836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c838:	fb06 b60a 	mla	r6, r6, sl, fp
 801c83c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801c840:	787d      	ldrb	r5, [r7, #1]
 801c842:	783f      	ldrb	r7, [r7, #0]
 801c844:	b2b6      	uxth	r6, r6
 801c846:	435d      	muls	r5, r3
 801c848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c84a:	fb0e 550b 	mla	r5, lr, fp, r5
 801c84e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c852:	fb01 550b 	mla	r5, r1, fp, r5
 801c856:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c85a:	fb08 550b 	mla	r5, r8, fp, r5
 801c85e:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801c862:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c866:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801c86a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801c86e:	fa5f fc8c 	uxtb.w	ip, ip
 801c872:	fb1b fb03 	smulbb	fp, fp, r3
 801c876:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c878:	437b      	muls	r3, r7
 801c87a:	7817      	ldrb	r7, [r2, #0]
 801c87c:	fb05 b50a 	mla	r5, r5, sl, fp
 801c880:	fb0e 3309 	mla	r3, lr, r9, r3
 801c884:	b2ad      	uxth	r5, r5
 801c886:	fb01 3307 	mla	r3, r1, r7, r3
 801c88a:	7807      	ldrb	r7, [r0, #0]
 801c88c:	f105 0b01 	add.w	fp, r5, #1
 801c890:	fb08 3707 	mla	r7, r8, r7, r3
 801c894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c896:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801c89a:	fb1c fc03 	smulbb	ip, ip, r3
 801c89e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c8a2:	1c73      	adds	r3, r6, #1
 801c8a4:	096d      	lsrs	r5, r5, #5
 801c8a6:	fb07 c70a 	mla	r7, r7, sl, ip
 801c8aa:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c8ae:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801c8b2:	b2bf      	uxth	r7, r7
 801c8b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8b6:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801c8ba:	1c7a      	adds	r2, r7, #1
 801c8bc:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801c8c0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c8c4:	4316      	orrs	r6, r2
 801c8c6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c8c8:	432e      	orrs	r6, r5
 801c8ca:	f823 6b02 	strh.w	r6, [r3], #2
 801c8ce:	930c      	str	r3, [sp, #48]	@ 0x30
 801c8d0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c8d2:	4413      	add	r3, r2
 801c8d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c8d6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c8d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c8da:	4413      	add	r3, r2
 801c8dc:	9320      	str	r3, [sp, #128]	@ 0x80
 801c8de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c8e0:	3b01      	subs	r3, #1
 801c8e2:	9311      	str	r3, [sp, #68]	@ 0x44
 801c8e4:	e6db      	b.n	801c69e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801c8e6:	b149      	cbz	r1, 801c8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801c8e8:	5cb2      	ldrb	r2, [r6, r2]
 801c8ea:	4628      	mov	r0, r5
 801c8ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8f0:	4422      	add	r2, r4
 801c8f2:	462f      	mov	r7, r5
 801c8f4:	e771      	b.n	801c7da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	462a      	mov	r2, r5
 801c8fa:	e76e      	b.n	801c7da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801c8fc:	4628      	mov	r0, r5
 801c8fe:	462a      	mov	r2, r5
 801c900:	e7f7      	b.n	801c8f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801c902:	b015      	add	sp, #84	@ 0x54
 801c904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c908 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801c908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c90c:	880f      	ldrh	r7, [r1, #0]
 801c90e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801c912:	023c      	lsls	r4, r7, #8
 801c914:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801c918:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 801c91c:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 801c920:	017c      	lsls	r4, r7, #5
 801c922:	00ff      	lsls	r7, r7, #3
 801c924:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801c928:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 801c92c:	b2ff      	uxtb	r7, r7
 801c92e:	ea4b 0404 	orr.w	r4, fp, r4
 801c932:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 801c936:	4327      	orrs	r7, r4
 801c938:	fb05 ca0e 	mla	sl, r5, lr, ip
 801c93c:	2d00      	cmp	r5, #0
 801c93e:	9701      	str	r7, [sp, #4]
 801c940:	eb02 080a 	add.w	r8, r2, sl
 801c944:	db7e      	blt.n	801ca44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801c946:	45a9      	cmp	r9, r5
 801c948:	dd7c      	ble.n	801ca44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801c94a:	f1bc 0f00 	cmp.w	ip, #0
 801c94e:	db77      	blt.n	801ca40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801c950:	45e6      	cmp	lr, ip
 801c952:	dd75      	ble.n	801ca40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801c954:	f812 700a 	ldrb.w	r7, [r2, sl]
 801c958:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c95c:	441f      	add	r7, r3
 801c95e:	f11c 0201 	adds.w	r2, ip, #1
 801c962:	d472      	bmi.n	801ca4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801c964:	4596      	cmp	lr, r2
 801c966:	dd70      	ble.n	801ca4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801c968:	2800      	cmp	r0, #0
 801c96a:	d06e      	beq.n	801ca4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801c96c:	f898 4001 	ldrb.w	r4, [r8, #1]
 801c970:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c974:	441c      	add	r4, r3
 801c976:	3501      	adds	r5, #1
 801c978:	d46b      	bmi.n	801ca52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801c97a:	45a9      	cmp	r9, r5
 801c97c:	dd69      	ble.n	801ca52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801c97e:	2e00      	cmp	r6, #0
 801c980:	d067      	beq.n	801ca52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801c982:	f1bc 0f00 	cmp.w	ip, #0
 801c986:	db62      	blt.n	801ca4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801c988:	45e6      	cmp	lr, ip
 801c98a:	dd60      	ble.n	801ca4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801c98c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c994:	441d      	add	r5, r3
 801c996:	f11c 0201 	adds.w	r2, ip, #1
 801c99a:	d45d      	bmi.n	801ca58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801c99c:	4596      	cmp	lr, r2
 801c99e:	dd5b      	ble.n	801ca58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	d059      	beq.n	801ca58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801c9a4:	44c6      	add	lr, r8
 801c9a6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c9aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c9ae:	4413      	add	r3, r2
 801c9b0:	b280      	uxth	r0, r0
 801c9b2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801c9b6:	b2b2      	uxth	r2, r6
 801c9b8:	f897 9000 	ldrb.w	r9, [r7]
 801c9bc:	787f      	ldrb	r7, [r7, #1]
 801c9be:	fb00 f602 	mul.w	r6, r0, r2
 801c9c2:	0100      	lsls	r0, r0, #4
 801c9c4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801c9c8:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 801c9cc:	1b80      	subs	r0, r0, r6
 801c9ce:	fa1f fc82 	uxth.w	ip, r2
 801c9d2:	b282      	uxth	r2, r0
 801c9d4:	78a0      	ldrb	r0, [r4, #2]
 801c9d6:	eba8 080c 	sub.w	r8, r8, ip
 801c9da:	4350      	muls	r0, r2
 801c9dc:	fa1f f888 	uxth.w	r8, r8
 801c9e0:	fb08 0e0e 	mla	lr, r8, lr, r0
 801c9e4:	78a8      	ldrb	r0, [r5, #2]
 801c9e6:	fb0c e000 	mla	r0, ip, r0, lr
 801c9ea:	f893 e002 	ldrb.w	lr, [r3, #2]
 801c9ee:	fb06 0e0e 	mla	lr, r6, lr, r0
 801c9f2:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 801c9f6:	f894 e000 	ldrb.w	lr, [r4]
 801c9fa:	fb02 fe0e 	mul.w	lr, r2, lr
 801c9fe:	fb08 e909 	mla	r9, r8, r9, lr
 801ca02:	f895 e000 	ldrb.w	lr, [r5]
 801ca06:	fb0c 990e 	mla	r9, ip, lr, r9
 801ca0a:	f893 e000 	ldrb.w	lr, [r3]
 801ca0e:	785b      	ldrb	r3, [r3, #1]
 801ca10:	fb06 9e0e 	mla	lr, r6, lr, r9
 801ca14:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ca18:	ea4e 0e00 	orr.w	lr, lr, r0
 801ca1c:	7860      	ldrb	r0, [r4, #1]
 801ca1e:	4350      	muls	r0, r2
 801ca20:	786a      	ldrb	r2, [r5, #1]
 801ca22:	fb08 0007 	mla	r0, r8, r7, r0
 801ca26:	fb0c 0202 	mla	r2, ip, r2, r0
 801ca2a:	fb06 2303 	mla	r3, r6, r3, r2
 801ca2e:	095b      	lsrs	r3, r3, #5
 801ca30:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ca34:	ea4e 0303 	orr.w	r3, lr, r3
 801ca38:	800b      	strh	r3, [r1, #0]
 801ca3a:	b003      	add	sp, #12
 801ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca40:	af01      	add	r7, sp, #4
 801ca42:	e78c      	b.n	801c95e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801ca44:	ac01      	add	r4, sp, #4
 801ca46:	4627      	mov	r7, r4
 801ca48:	e795      	b.n	801c976 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801ca4a:	ac01      	add	r4, sp, #4
 801ca4c:	e793      	b.n	801c976 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801ca4e:	ad01      	add	r5, sp, #4
 801ca50:	e7a1      	b.n	801c996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801ca52:	ab01      	add	r3, sp, #4
 801ca54:	461d      	mov	r5, r3
 801ca56:	e7ab      	b.n	801c9b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801ca58:	ab01      	add	r3, sp, #4
 801ca5a:	e7a9      	b.n	801c9b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801ca5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca60:	b08f      	sub	sp, #60	@ 0x3c
 801ca62:	920c      	str	r2, [sp, #48]	@ 0x30
 801ca64:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ca66:	900d      	str	r0, [sp, #52]	@ 0x34
 801ca68:	910a      	str	r1, [sp, #40]	@ 0x28
 801ca6a:	6850      	ldr	r0, [r2, #4]
 801ca6c:	9306      	str	r3, [sp, #24]
 801ca6e:	6812      	ldr	r2, [r2, #0]
 801ca70:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 801ca74:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 801ca78:	fb00 1303 	mla	r3, r0, r3, r1
 801ca7c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ca80:	9307      	str	r3, [sp, #28]
 801ca82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	9308      	str	r3, [sp, #32]
 801ca88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca8a:	685c      	ldr	r4, [r3, #4]
 801ca8c:	3404      	adds	r4, #4
 801ca8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	dc03      	bgt.n	801ca9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ca94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	f340 81d5 	ble.w	801ce46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801ca9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801caa2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801caa6:	1e48      	subs	r0, r1, #1
 801caa8:	1e56      	subs	r6, r2, #1
 801caaa:	9b06      	ldr	r3, [sp, #24]
 801caac:	2b00      	cmp	r3, #0
 801caae:	f340 80b6 	ble.w	801cc1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801cab2:	ea5f 472b 	movs.w	r7, fp, asr #16
 801cab6:	ea4f 4325 	mov.w	r3, r5, asr #16
 801caba:	d406      	bmi.n	801caca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cabc:	4287      	cmp	r7, r0
 801cabe:	da04      	bge.n	801caca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	db02      	blt.n	801caca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cac4:	42b3      	cmp	r3, r6
 801cac6:	f2c0 80ab 	blt.w	801cc20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801caca:	3701      	adds	r7, #1
 801cacc:	f100 809c 	bmi.w	801cc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cad0:	42b9      	cmp	r1, r7
 801cad2:	f2c0 8099 	blt.w	801cc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cad6:	3301      	adds	r3, #1
 801cad8:	f100 8096 	bmi.w	801cc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cadc:	429a      	cmp	r2, r3
 801cade:	f2c0 8093 	blt.w	801cc08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cae2:	9b06      	ldr	r3, [sp, #24]
 801cae4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cae6:	9b07      	ldr	r3, [sp, #28]
 801cae8:	9309      	str	r3, [sp, #36]	@ 0x24
 801caea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801caec:	2b00      	cmp	r3, #0
 801caee:	f340 80b4 	ble.w	801cc5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801caf2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801caf4:	142e      	asrs	r6, r5, #16
 801caf6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801caf8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cafc:	68c7      	ldr	r7, [r0, #12]
 801cafe:	ea5f 402b 	movs.w	r0, fp, asr #16
 801cb02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cb06:	6892      	ldr	r2, [r2, #8]
 801cb08:	f100 80fb 	bmi.w	801cd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cb0c:	f102 3cff 	add.w	ip, r2, #4294967295
 801cb10:	4560      	cmp	r0, ip
 801cb12:	f280 80f6 	bge.w	801cd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cb16:	2e00      	cmp	r6, #0
 801cb18:	f2c0 80f3 	blt.w	801cd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cb1c:	f107 3cff 	add.w	ip, r7, #4294967295
 801cb20:	4566      	cmp	r6, ip
 801cb22:	f280 80ee 	bge.w	801cd02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cb26:	b212      	sxth	r2, r2
 801cb28:	fb06 0002 	mla	r0, r6, r2, r0
 801cb2c:	9e08      	ldr	r6, [sp, #32]
 801cb2e:	1837      	adds	r7, r6, r0
 801cb30:	5c30      	ldrb	r0, [r6, r0]
 801cb32:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801cb36:	eb04 0c08 	add.w	ip, r4, r8
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f000 80d3 	beq.w	801cce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801cb40:	787e      	ldrb	r6, [r7, #1]
 801cb42:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cb46:	4426      	add	r6, r4
 801cb48:	2900      	cmp	r1, #0
 801cb4a:	f000 80d4 	beq.w	801ccf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cb4e:	18b8      	adds	r0, r7, r2
 801cb50:	5cba      	ldrb	r2, [r7, r2]
 801cb52:	7840      	ldrb	r0, [r0, #1]
 801cb54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cb5c:	4422      	add	r2, r4
 801cb5e:	4420      	add	r0, r4
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	78b7      	ldrb	r7, [r6, #2]
 801cb64:	b289      	uxth	r1, r1
 801cb66:	f89c a002 	ldrb.w	sl, [ip, #2]
 801cb6a:	f89c c001 	ldrb.w	ip, [ip, #1]
 801cb6e:	fb03 f901 	mul.w	r9, r3, r1
 801cb72:	011b      	lsls	r3, r3, #4
 801cb74:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cb78:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801cb7c:	eba3 0309 	sub.w	r3, r3, r9
 801cb80:	b289      	uxth	r1, r1
 801cb82:	b29b      	uxth	r3, r3
 801cb84:	ebae 0e01 	sub.w	lr, lr, r1
 801cb88:	435f      	muls	r7, r3
 801cb8a:	fa1f fe8e 	uxth.w	lr, lr
 801cb8e:	fb0e 770a 	mla	r7, lr, sl, r7
 801cb92:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cb96:	fb01 770a 	mla	r7, r1, sl, r7
 801cb9a:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cb9e:	fb09 7a0a 	mla	sl, r9, sl, r7
 801cba2:	f814 7008 	ldrb.w	r7, [r4, r8]
 801cba6:	f896 8000 	ldrb.w	r8, [r6]
 801cbaa:	7876      	ldrb	r6, [r6, #1]
 801cbac:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801cbb0:	fb03 f808 	mul.w	r8, r3, r8
 801cbb4:	4373      	muls	r3, r6
 801cbb6:	fb0e 8807 	mla	r8, lr, r7, r8
 801cbba:	7817      	ldrb	r7, [r2, #0]
 801cbbc:	fb0e 330c 	mla	r3, lr, ip, r3
 801cbc0:	fb01 8807 	mla	r8, r1, r7, r8
 801cbc4:	7807      	ldrb	r7, [r0, #0]
 801cbc6:	fb09 8707 	mla	r7, r9, r7, r8
 801cbca:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cbce:	ea47 070a 	orr.w	r7, r7, sl
 801cbd2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cbd6:	fb01 310a 	mla	r1, r1, sl, r3
 801cbda:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbe0:	fb09 1a0a 	mla	sl, r9, sl, r1
 801cbe4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cbe8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cbec:	ea47 070a 	orr.w	r7, r7, sl
 801cbf0:	801f      	strh	r7, [r3, #0]
 801cbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbf4:	3302      	adds	r3, #2
 801cbf6:	9309      	str	r3, [sp, #36]	@ 0x24
 801cbf8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cbfa:	449b      	add	fp, r3
 801cbfc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cbfe:	441d      	add	r5, r3
 801cc00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc02:	3b01      	subs	r3, #1
 801cc04:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc06:	e770      	b.n	801caea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cc08:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cc0a:	449b      	add	fp, r3
 801cc0c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cc0e:	441d      	add	r5, r3
 801cc10:	9b06      	ldr	r3, [sp, #24]
 801cc12:	3b01      	subs	r3, #1
 801cc14:	9306      	str	r3, [sp, #24]
 801cc16:	9b07      	ldr	r3, [sp, #28]
 801cc18:	3302      	adds	r3, #2
 801cc1a:	9307      	str	r3, [sp, #28]
 801cc1c:	e745      	b.n	801caaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cc1e:	d023      	beq.n	801cc68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801cc20:	9b06      	ldr	r3, [sp, #24]
 801cc22:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801cc24:	3b01      	subs	r3, #1
 801cc26:	fb00 b003 	mla	r0, r0, r3, fp
 801cc2a:	1400      	asrs	r0, r0, #16
 801cc2c:	f53f af59 	bmi.w	801cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cc30:	3901      	subs	r1, #1
 801cc32:	4288      	cmp	r0, r1
 801cc34:	f6bf af55 	bge.w	801cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cc38:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801cc3a:	fb01 5303 	mla	r3, r1, r3, r5
 801cc3e:	141b      	asrs	r3, r3, #16
 801cc40:	f53f af4f 	bmi.w	801cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cc44:	3a01      	subs	r2, #1
 801cc46:	4293      	cmp	r3, r2
 801cc48:	f6bf af4b 	bge.w	801cae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cc4c:	9b06      	ldr	r3, [sp, #24]
 801cc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc50:	9b07      	ldr	r3, [sp, #28]
 801cc52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	dc70      	bgt.n	801cd3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801cc5a:	9b06      	ldr	r3, [sp, #24]
 801cc5c:	9a07      	ldr	r2, [sp, #28]
 801cc5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cc66:	9307      	str	r3, [sp, #28]
 801cc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	f340 80eb 	ble.w	801ce46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801cc70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cc74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cc76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc7e:	eef0 6a62 	vmov.f32	s13, s5
 801cc82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cc86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc8e:	ee16 ba90 	vmov	fp, s13
 801cc92:	eef0 6a43 	vmov.f32	s13, s6
 801cc96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc9a:	ee16 5a90 	vmov	r5, s13
 801cc9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ccaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ccae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ccb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ccb6:	ee12 2a90 	vmov	r2, s5
 801ccba:	eef0 2a47 	vmov.f32	s5, s14
 801ccbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccc2:	ee13 2a10 	vmov	r2, s6
 801ccc6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ccc8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ccca:	eeb0 3a67 	vmov.f32	s6, s15
 801ccce:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccd2:	931c      	str	r3, [sp, #112]	@ 0x70
 801ccd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ccd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ccd8:	3b01      	subs	r3, #1
 801ccda:	930a      	str	r3, [sp, #40]	@ 0x28
 801ccdc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ccde:	bf08      	it	eq
 801cce0:	4613      	moveq	r3, r2
 801cce2:	9306      	str	r3, [sp, #24]
 801cce4:	e6d3      	b.n	801ca8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cce6:	b149      	cbz	r1, 801ccfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cce8:	5cba      	ldrb	r2, [r7, r2]
 801ccea:	4660      	mov	r0, ip
 801ccec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ccf0:	4422      	add	r2, r4
 801ccf2:	4666      	mov	r6, ip
 801ccf4:	e734      	b.n	801cb60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ccf6:	4660      	mov	r0, ip
 801ccf8:	4662      	mov	r2, ip
 801ccfa:	e731      	b.n	801cb60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ccfc:	4660      	mov	r0, ip
 801ccfe:	4662      	mov	r2, ip
 801cd00:	e7f7      	b.n	801ccf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801cd02:	f110 0c01 	adds.w	ip, r0, #1
 801cd06:	f53f af74 	bmi.w	801cbf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801cd0a:	4562      	cmp	r2, ip
 801cd0c:	f6ff af71 	blt.w	801cbf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801cd10:	f116 0c01 	adds.w	ip, r6, #1
 801cd14:	f53f af6d 	bmi.w	801cbf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801cd18:	4567      	cmp	r7, ip
 801cd1a:	f6ff af6a 	blt.w	801cbf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801cd1e:	b23f      	sxth	r7, r7
 801cd20:	b212      	sxth	r2, r2
 801cd22:	9701      	str	r7, [sp, #4]
 801cd24:	9200      	str	r2, [sp, #0]
 801cd26:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801cd2a:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801cd2e:	4623      	mov	r3, r4
 801cd30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801cd32:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cd36:	f7ff fde7 	bl	801c908 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801cd3a:	e75a      	b.n	801cbf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801cd3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cd3e:	ea4f 462b 	mov.w	r6, fp, asr #16
 801cd42:	1428      	asrs	r0, r5, #16
 801cd44:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cd48:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cd4c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cd50:	fb02 6000 	mla	r0, r2, r0, r6
 801cd54:	9e08      	ldr	r6, [sp, #32]
 801cd56:	f816 8000 	ldrb.w	r8, [r6, r0]
 801cd5a:	1837      	adds	r7, r6, r0
 801cd5c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cd60:	eb04 0c08 	add.w	ip, r4, r8
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d060      	beq.n	801ce2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801cd68:	787e      	ldrb	r6, [r7, #1]
 801cd6a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd6e:	4426      	add	r6, r4
 801cd70:	2900      	cmp	r1, #0
 801cd72:	d062      	beq.n	801ce3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801cd74:	18b8      	adds	r0, r7, r2
 801cd76:	5cba      	ldrb	r2, [r7, r2]
 801cd78:	7840      	ldrb	r0, [r0, #1]
 801cd7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cd82:	4422      	add	r2, r4
 801cd84:	4420      	add	r0, r4
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	78b7      	ldrb	r7, [r6, #2]
 801cd8a:	b289      	uxth	r1, r1
 801cd8c:	f89c a002 	ldrb.w	sl, [ip, #2]
 801cd90:	f89c c001 	ldrb.w	ip, [ip, #1]
 801cd94:	fb03 f901 	mul.w	r9, r3, r1
 801cd98:	011b      	lsls	r3, r3, #4
 801cd9a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cd9e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801cda2:	eba3 0309 	sub.w	r3, r3, r9
 801cda6:	b289      	uxth	r1, r1
 801cda8:	b29b      	uxth	r3, r3
 801cdaa:	ebae 0e01 	sub.w	lr, lr, r1
 801cdae:	435f      	muls	r7, r3
 801cdb0:	fa1f fe8e 	uxth.w	lr, lr
 801cdb4:	fb0e 770a 	mla	r7, lr, sl, r7
 801cdb8:	f892 a002 	ldrb.w	sl, [r2, #2]
 801cdbc:	fb01 770a 	mla	r7, r1, sl, r7
 801cdc0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cdc4:	fb09 7a0a 	mla	sl, r9, sl, r7
 801cdc8:	f814 7008 	ldrb.w	r7, [r4, r8]
 801cdcc:	f896 8000 	ldrb.w	r8, [r6]
 801cdd0:	7876      	ldrb	r6, [r6, #1]
 801cdd2:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 801cdd6:	fb03 f808 	mul.w	r8, r3, r8
 801cdda:	4373      	muls	r3, r6
 801cddc:	7856      	ldrb	r6, [r2, #1]
 801cdde:	fb0e 8807 	mla	r8, lr, r7, r8
 801cde2:	7817      	ldrb	r7, [r2, #0]
 801cde4:	fb0e 330c 	mla	r3, lr, ip, r3
 801cde8:	fb01 8807 	mla	r8, r1, r7, r8
 801cdec:	7807      	ldrb	r7, [r0, #0]
 801cdee:	fb01 3306 	mla	r3, r1, r6, r3
 801cdf2:	fb09 8707 	mla	r7, r9, r7, r8
 801cdf6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801cdfa:	ea47 070a 	orr.w	r7, r7, sl
 801cdfe:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ce02:	fb09 3a0a 	mla	sl, r9, sl, r3
 801ce06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce08:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ce0c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ce10:	ea47 070a 	orr.w	r7, r7, sl
 801ce14:	f823 7b02 	strh.w	r7, [r3], #2
 801ce18:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce1a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ce1c:	449b      	add	fp, r3
 801ce1e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ce20:	441d      	add	r5, r3
 801ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce24:	3b01      	subs	r3, #1
 801ce26:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce28:	e714      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801ce2a:	b149      	cbz	r1, 801ce40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801ce2c:	5cba      	ldrb	r2, [r7, r2]
 801ce2e:	4660      	mov	r0, ip
 801ce30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce34:	4422      	add	r2, r4
 801ce36:	4666      	mov	r6, ip
 801ce38:	e7a5      	b.n	801cd86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801ce3a:	4660      	mov	r0, ip
 801ce3c:	4662      	mov	r2, ip
 801ce3e:	e7a2      	b.n	801cd86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801ce40:	4660      	mov	r0, ip
 801ce42:	4662      	mov	r2, ip
 801ce44:	e7f7      	b.n	801ce36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801ce46:	b00f      	add	sp, #60	@ 0x3c
 801ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801ce4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce50:	b085      	sub	sp, #20
 801ce52:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 801ce56:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 801ce5a:	9102      	str	r1, [sp, #8]
 801ce5c:	2c00      	cmp	r4, #0
 801ce5e:	fb04 710c 	mla	r1, r4, ip, r7
 801ce62:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801ce66:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 801ce6a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801ce6e:	eb02 0e01 	add.w	lr, r2, r1
 801ce72:	f2c0 8122 	blt.w	801d0ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801ce76:	45a0      	cmp	r8, r4
 801ce78:	f340 811f 	ble.w	801d0ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801ce7c:	2f00      	cmp	r7, #0
 801ce7e:	f2c0 811a 	blt.w	801d0b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801ce82:	45bc      	cmp	ip, r7
 801ce84:	f340 8117 	ble.w	801d0b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801ce88:	5c52      	ldrb	r2, [r2, r1]
 801ce8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ce8e:	1c7a      	adds	r2, r7, #1
 801ce90:	f100 8116 	bmi.w	801d0c0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801ce94:	4594      	cmp	ip, r2
 801ce96:	f340 8113 	ble.w	801d0c0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801ce9a:	2e00      	cmp	r6, #0
 801ce9c:	f000 8112 	beq.w	801d0c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801cea0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cea8:	3401      	adds	r4, #1
 801ceaa:	f100 810f 	bmi.w	801d0cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ceae:	45a0      	cmp	r8, r4
 801ceb0:	f340 810c 	ble.w	801d0cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	f000 810c 	beq.w	801d0d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801ceba:	2f00      	cmp	r7, #0
 801cebc:	f2c0 8104 	blt.w	801d0c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801cec0:	45bc      	cmp	ip, r7
 801cec2:	f340 8101 	ble.w	801d0c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801cec6:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801ceca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801cece:	3701      	adds	r7, #1
 801ced0:	f100 8102 	bmi.w	801d0d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ced4:	45bc      	cmp	ip, r7
 801ced6:	f340 80ff 	ble.w	801d0d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ceda:	2e00      	cmp	r6, #0
 801cedc:	f000 80fe 	beq.w	801d0dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801cee0:	44f4      	add	ip, lr
 801cee2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801cee6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ceea:	b2b6      	uxth	r6, r6
 801ceec:	b280      	uxth	r0, r0
 801ceee:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801cef2:	fb00 fe06 	mul.w	lr, r0, r6
 801cef6:	0136      	lsls	r6, r6, #4
 801cef8:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801cefc:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801cf00:	eba6 070e 	sub.w	r7, r6, lr
 801cf04:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 801cf08:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801cf0c:	b280      	uxth	r0, r0
 801cf0e:	b2bf      	uxth	r7, r7
 801cf10:	1a1b      	subs	r3, r3, r0
 801cf12:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cf16:	fb0a f607 	mul.w	r6, sl, r7
 801cf1a:	b29b      	uxth	r3, r3
 801cf1c:	fb0b 6603 	mla	r6, fp, r3, r6
 801cf20:	fb00 6609 	mla	r6, r0, r9, r6
 801cf24:	fb0e 6608 	mla	r6, lr, r8, r6
 801cf28:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801cf2c:	9600      	str	r6, [sp, #0]
 801cf2e:	2e00      	cmp	r6, #0
 801cf30:	f000 80be 	beq.w	801d0b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801cf34:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 801cf38:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801cf3c:	9e02      	ldr	r6, [sp, #8]
 801cf3e:	fb0b fc0c 	mul.w	ip, fp, ip
 801cf42:	fb0b f505 	mul.w	r5, fp, r5
 801cf46:	8836      	ldrh	r6, [r6, #0]
 801cf48:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cf4c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cf50:	9501      	str	r5, [sp, #4]
 801cf52:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801cf56:	44dc      	add	ip, fp
 801cf58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf5c:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 801cf60:	9503      	str	r5, [sp, #12]
 801cf62:	9d01      	ldr	r5, [sp, #4]
 801cf64:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 801cf68:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801cf6c:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 801cf70:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801cf74:	fb0a fc0c 	mul.w	ip, sl, ip
 801cf78:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801cf7c:	fb0a fa01 	mul.w	sl, sl, r1
 801cf80:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801cf84:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cf88:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 801cf8c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801cf90:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801cf94:	4465      	add	r5, ip
 801cf96:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801cf9a:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 801cf9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cfa2:	fb09 fc0c 	mul.w	ip, r9, ip
 801cfa6:	0a2d      	lsrs	r5, r5, #8
 801cfa8:	fb09 f904 	mul.w	r9, r9, r4
 801cfac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cfb0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801cfb4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801cfb8:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 801cfbc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cfc0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801cfc4:	437d      	muls	r5, r7
 801cfc6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801cfca:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 801cfce:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cfd2:	4461      	add	r1, ip
 801cfd4:	fb08 f404 	mul.w	r4, r8, r4
 801cfd8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cfdc:	fb08 f802 	mul.w	r8, r8, r2
 801cfe0:	0a09      	lsrs	r1, r1, #8
 801cfe2:	0a22      	lsrs	r2, r4, #8
 801cfe4:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 801cfe8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 801cfec:	fb07 f70a 	mul.w	r7, r7, sl
 801cff0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cff4:	4414      	add	r4, r2
 801cff6:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801cffa:	0a24      	lsrs	r4, r4, #8
 801cffc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d000:	9a03      	ldr	r2, [sp, #12]
 801d002:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 801d006:	fb02 5503 	mla	r5, r2, r3, r5
 801d00a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d00e:	9a00      	ldr	r2, [sp, #0]
 801d010:	fb04 540e 	mla	r4, r4, lr, r5
 801d014:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801d018:	1235      	asrs	r5, r6, #8
 801d01a:	fb01 4100 	mla	r1, r1, r0, r4
 801d01e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801d022:	0a09      	lsrs	r1, r1, #8
 801d024:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 801d028:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 801d02c:	fb03 7101 	mla	r1, r3, r1, r7
 801d030:	fb0e 1e08 	mla	lr, lr, r8, r1
 801d034:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 801d038:	fb00 e101 	mla	r1, r0, r1, lr
 801d03c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801d040:	b287      	uxth	r7, r0
 801d042:	0a09      	lsrs	r1, r1, #8
 801d044:	437a      	muls	r2, r7
 801d046:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801d04a:	1c53      	adds	r3, r2, #1
 801d04c:	4321      	orrs	r1, r4
 801d04e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d052:	0c0a      	lsrs	r2, r1, #16
 801d054:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801d058:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d05c:	b2c8      	uxtb	r0, r1
 801d05e:	fb12 f207 	smulbb	r2, r2, r7
 801d062:	fb14 f407 	smulbb	r4, r4, r7
 801d066:	b2db      	uxtb	r3, r3
 801d068:	fb10 f007 	smulbb	r0, r0, r7
 801d06c:	fb05 2503 	mla	r5, r5, r3, r2
 801d070:	10f2      	asrs	r2, r6, #3
 801d072:	00f6      	lsls	r6, r6, #3
 801d074:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801d078:	b2ad      	uxth	r5, r5
 801d07a:	b2f6      	uxtb	r6, r6
 801d07c:	fb02 4203 	mla	r2, r2, r3, r4
 801d080:	fb06 0303 	mla	r3, r6, r3, r0
 801d084:	b294      	uxth	r4, r2
 801d086:	b299      	uxth	r1, r3
 801d088:	1c6b      	adds	r3, r5, #1
 801d08a:	1c62      	adds	r2, r4, #1
 801d08c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d090:	1c4b      	adds	r3, r1, #1
 801d092:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d096:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d09a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801d09e:	0952      	lsrs	r2, r2, #5
 801d0a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d0a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d0a8:	432b      	orrs	r3, r5
 801d0aa:	4313      	orrs	r3, r2
 801d0ac:	9a02      	ldr	r2, [sp, #8]
 801d0ae:	8013      	strh	r3, [r2, #0]
 801d0b0:	b005      	add	sp, #20
 801d0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0b6:	2500      	movs	r5, #0
 801d0b8:	e6e9      	b.n	801ce8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801d0ba:	2100      	movs	r1, #0
 801d0bc:	460d      	mov	r5, r1
 801d0be:	e6f3      	b.n	801cea8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d0c0:	2100      	movs	r1, #0
 801d0c2:	e6f1      	b.n	801cea8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d0c4:	4631      	mov	r1, r6
 801d0c6:	e6ef      	b.n	801cea8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801d0c8:	2400      	movs	r4, #0
 801d0ca:	e700      	b.n	801cece <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801d0cc:	2200      	movs	r2, #0
 801d0ce:	4614      	mov	r4, r2
 801d0d0:	e70b      	b.n	801ceea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d0d2:	4602      	mov	r2, r0
 801d0d4:	4604      	mov	r4, r0
 801d0d6:	e708      	b.n	801ceea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d0d8:	2200      	movs	r2, #0
 801d0da:	e706      	b.n	801ceea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801d0dc:	4632      	mov	r2, r6
 801d0de:	e704      	b.n	801ceea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801d0e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e4:	b09f      	sub	sp, #124	@ 0x7c
 801d0e6:	921b      	str	r2, [sp, #108]	@ 0x6c
 801d0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0ea:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801d0ec:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801d0f0:	901d      	str	r0, [sp, #116]	@ 0x74
 801d0f2:	931c      	str	r3, [sp, #112]	@ 0x70
 801d0f4:	6850      	ldr	r0, [r2, #4]
 801d0f6:	9119      	str	r1, [sp, #100]	@ 0x64
 801d0f8:	6812      	ldr	r2, [r2, #0]
 801d0fa:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801d0fc:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801d100:	fb00 1303 	mla	r3, r0, r3, r1
 801d104:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d108:	930c      	str	r3, [sp, #48]	@ 0x30
 801d10a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	9312      	str	r3, [sp, #72]	@ 0x48
 801d110:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d112:	685e      	ldr	r6, [r3, #4]
 801d114:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801d118:	3604      	adds	r6, #4
 801d11a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d11c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d11e:	2b00      	cmp	r3, #0
 801d120:	dc03      	bgt.n	801d12a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d122:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d124:	2b00      	cmp	r3, #0
 801d126:	f340 8387 	ble.w	801d838 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801d12a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d12c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d130:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d134:	1e48      	subs	r0, r1, #1
 801d136:	1e57      	subs	r7, r2, #1
 801d138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	f340 8194 	ble.w	801d468 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801d140:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d142:	142b      	asrs	r3, r5, #16
 801d144:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d148:	d406      	bmi.n	801d158 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d14a:	4584      	cmp	ip, r0
 801d14c:	da04      	bge.n	801d158 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d14e:	2b00      	cmp	r3, #0
 801d150:	db02      	blt.n	801d158 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d152:	42bb      	cmp	r3, r7
 801d154:	f2c0 8189 	blt.w	801d46a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801d158:	f11c 0c01 	adds.w	ip, ip, #1
 801d15c:	f100 8177 	bmi.w	801d44e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d160:	4561      	cmp	r1, ip
 801d162:	f2c0 8174 	blt.w	801d44e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d166:	3301      	adds	r3, #1
 801d168:	f100 8171 	bmi.w	801d44e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d16c:	429a      	cmp	r2, r3
 801d16e:	f2c0 816e 	blt.w	801d44e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d174:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d176:	931a      	str	r3, [sp, #104]	@ 0x68
 801d178:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	f340 8193 	ble.w	801d4a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d180:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d182:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d186:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d18a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d18e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d190:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d194:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d196:	141b      	asrs	r3, r3, #16
 801d198:	f100 81d6 	bmi.w	801d548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d19c:	f100 38ff 	add.w	r8, r0, #4294967295
 801d1a0:	4543      	cmp	r3, r8
 801d1a2:	f280 81d1 	bge.w	801d548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d1a6:	f1bc 0f00 	cmp.w	ip, #0
 801d1aa:	f2c0 81cd 	blt.w	801d548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d1ae:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d1b2:	45c4      	cmp	ip, r8
 801d1b4:	f280 81c8 	bge.w	801d548 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801d1b8:	b200      	sxth	r0, r0
 801d1ba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d1bc:	fb0c 3300 	mla	r3, ip, r0, r3
 801d1c0:	eb04 0803 	add.w	r8, r4, r3
 801d1c4:	5ce3      	ldrb	r3, [r4, r3]
 801d1c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d1ca:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d1ce:	2a00      	cmp	r2, #0
 801d1d0:	f000 81af 	beq.w	801d532 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d1d4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d1d8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d1dc:	940e      	str	r4, [sp, #56]	@ 0x38
 801d1de:	0e24      	lsrs	r4, r4, #24
 801d1e0:	9415      	str	r4, [sp, #84]	@ 0x54
 801d1e2:	b179      	cbz	r1, 801d204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d1e4:	eb08 0c00 	add.w	ip, r8, r0
 801d1e8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d1ec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d1f0:	900a      	str	r0, [sp, #40]	@ 0x28
 801d1f2:	0e00      	lsrs	r0, r0, #24
 801d1f4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d1f6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d1fa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d1fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 801d200:	0e00      	lsrs	r0, r0, #24
 801d202:	9016      	str	r0, [sp, #88]	@ 0x58
 801d204:	b292      	uxth	r2, r2
 801d206:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d208:	b289      	uxth	r1, r1
 801d20a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d20c:	fb02 f901 	mul.w	r9, r2, r1
 801d210:	0112      	lsls	r2, r2, #4
 801d212:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d216:	eba2 0809 	sub.w	r8, r2, r9
 801d21a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d21e:	b289      	uxth	r1, r1
 801d220:	fa1f f888 	uxth.w	r8, r8
 801d224:	1a52      	subs	r2, r2, r1
 801d226:	fb08 f000 	mul.w	r0, r8, r0
 801d22a:	b292      	uxth	r2, r2
 801d22c:	fb02 000e 	mla	r0, r2, lr, r0
 801d230:	fb01 0004 	mla	r0, r1, r4, r0
 801d234:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d236:	fb09 0004 	mla	r0, r9, r4, r0
 801d23a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d23e:	2800      	cmp	r0, #0
 801d240:	f000 80fa 	beq.w	801d438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d244:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d248:	d01b      	beq.n	801d282 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801d24a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d24e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d252:	fb0e fa0a 	mul.w	sl, lr, sl
 801d256:	fb0e fe03 	mul.w	lr, lr, r3
 801d25a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d25e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d262:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d266:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d26a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d26e:	4453      	add	r3, sl
 801d270:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d274:	0a1b      	lsrs	r3, r3, #8
 801d276:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d27a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d27e:	ea43 030c 	orr.w	r3, r3, ip
 801d282:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d284:	2cff      	cmp	r4, #255	@ 0xff
 801d286:	d021      	beq.n	801d2cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d288:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d28a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d28e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d290:	fb04 fb0b 	mul.w	fp, r4, fp
 801d294:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d296:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d29a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d29c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d2a0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d2a4:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d2ac:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d2b0:	44de      	add	lr, fp
 801d2b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d2b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d2c2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d2c6:	ea4e 040a 	orr.w	r4, lr, sl
 801d2ca:	940e      	str	r4, [sp, #56]	@ 0x38
 801d2cc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d2ce:	2cff      	cmp	r4, #255	@ 0xff
 801d2d0:	d021      	beq.n	801d316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d2d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d2d4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d2d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d2da:	fb04 fb0b 	mul.w	fp, r4, fp
 801d2de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d2e0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d2e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d2e6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d2ea:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d2ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d2f6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d2fa:	44de      	add	lr, fp
 801d2fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d300:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d304:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d308:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d30c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d310:	ea4e 040a 	orr.w	r4, lr, sl
 801d314:	940a      	str	r4, [sp, #40]	@ 0x28
 801d316:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d318:	2cff      	cmp	r4, #255	@ 0xff
 801d31a:	d021      	beq.n	801d360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801d31c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d31e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d322:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d324:	fb04 fb0b 	mul.w	fp, r4, fp
 801d328:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d32a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d32e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d330:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d334:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d338:	fb04 fa0a 	mul.w	sl, r4, sl
 801d33c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d340:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d344:	44de      	add	lr, fp
 801d346:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d34a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d34e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d352:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d356:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d35a:	ea4e 040a 	orr.w	r4, lr, sl
 801d35e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d360:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d362:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801d366:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d36a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d36e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d370:	fb08 fc0c 	mul.w	ip, r8, ip
 801d374:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d378:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d37c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d37e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d382:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d386:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d388:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d38c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d390:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d392:	fb08 f80e 	mul.w	r8, r8, lr
 801d396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d39a:	fb02 8303 	mla	r3, r2, r3, r8
 801d39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d3a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d3a4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d3a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d3aa:	fb01 330a 	mla	r3, r1, sl, r3
 801d3ae:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801d3b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d3b4:	fb09 3901 	mla	r9, r9, r1, r3
 801d3b8:	883b      	ldrh	r3, [r7, #0]
 801d3ba:	4342      	muls	r2, r0
 801d3bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d3c0:	1c50      	adds	r0, r2, #1
 801d3c2:	1219      	asrs	r1, r3, #8
 801d3c4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d3c8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801d3cc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801d3d0:	ea4c 0c09 	orr.w	ip, ip, r9
 801d3d4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d3d8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801d3dc:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801d3e0:	b2c0      	uxtb	r0, r0
 801d3e2:	fb12 f204 	smulbb	r2, r2, r4
 801d3e6:	fa5f fc8c 	uxtb.w	ip, ip
 801d3ea:	fb1e fe04 	smulbb	lr, lr, r4
 801d3ee:	fb01 2100 	mla	r1, r1, r0, r2
 801d3f2:	10da      	asrs	r2, r3, #3
 801d3f4:	fb1c fc04 	smulbb	ip, ip, r4
 801d3f8:	00db      	lsls	r3, r3, #3
 801d3fa:	b289      	uxth	r1, r1
 801d3fc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801d400:	b2db      	uxtb	r3, r3
 801d402:	fb02 e200 	mla	r2, r2, r0, lr
 801d406:	fb03 c300 	mla	r3, r3, r0, ip
 801d40a:	b292      	uxth	r2, r2
 801d40c:	fa1f fc83 	uxth.w	ip, r3
 801d410:	1c4b      	adds	r3, r1, #1
 801d412:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d416:	f10c 0301 	add.w	r3, ip, #1
 801d41a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d41e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801d422:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d426:	430b      	orrs	r3, r1
 801d428:	1c51      	adds	r1, r2, #1
 801d42a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d42e:	0952      	lsrs	r2, r2, #5
 801d430:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d434:	4313      	orrs	r3, r2
 801d436:	803b      	strh	r3, [r7, #0]
 801d438:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d43a:	3702      	adds	r7, #2
 801d43c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d43e:	441a      	add	r2, r3
 801d440:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d442:	441d      	add	r5, r3
 801d444:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d446:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d448:	3b01      	subs	r3, #1
 801d44a:	931a      	str	r3, [sp, #104]	@ 0x68
 801d44c:	e694      	b.n	801d178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d44e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d450:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d452:	441c      	add	r4, r3
 801d454:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d456:	441d      	add	r5, r3
 801d458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d45a:	9429      	str	r4, [sp, #164]	@ 0xa4
 801d45c:	3b01      	subs	r3, #1
 801d45e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d462:	3302      	adds	r3, #2
 801d464:	930c      	str	r3, [sp, #48]	@ 0x30
 801d466:	e667      	b.n	801d138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d468:	d024      	beq.n	801d4b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801d46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d46c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801d46e:	3b01      	subs	r3, #1
 801d470:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d472:	fb00 4003 	mla	r0, r0, r3, r4
 801d476:	1400      	asrs	r0, r0, #16
 801d478:	f53f ae7b 	bmi.w	801d172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d47c:	3901      	subs	r1, #1
 801d47e:	4288      	cmp	r0, r1
 801d480:	f6bf ae77 	bge.w	801d172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d484:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801d486:	fb01 5303 	mla	r3, r1, r3, r5
 801d48a:	141b      	asrs	r3, r3, #16
 801d48c:	f53f ae71 	bmi.w	801d172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d490:	3a01      	subs	r2, #1
 801d492:	4293      	cmp	r3, r2
 801d494:	f6bf ae6d 	bge.w	801d172 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d498:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801d49c:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801d4a0:	f1bb 0f00 	cmp.w	fp, #0
 801d4a4:	dc70      	bgt.n	801d588 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801d4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d4ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4ae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d4b2:	930c      	str	r3, [sp, #48]	@ 0x30
 801d4b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	f340 81be 	ble.w	801d838 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801d4bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d4c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d4c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4ca:	eef0 6a62 	vmov.f32	s13, s5
 801d4ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4da:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801d4de:	eef0 6a43 	vmov.f32	s13, s6
 801d4e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4e6:	ee16 5a90 	vmov	r5, s13
 801d4ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d502:	ee12 2a90 	vmov	r2, s5
 801d506:	eef0 2a47 	vmov.f32	s5, s14
 801d50a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d50e:	ee13 2a10 	vmov	r2, s6
 801d512:	932b      	str	r3, [sp, #172]	@ 0xac
 801d514:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d516:	eeb0 3a67 	vmov.f32	s6, s15
 801d51a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d51e:	932c      	str	r3, [sp, #176]	@ 0xb0
 801d520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d524:	3b01      	subs	r3, #1
 801d526:	9319      	str	r3, [sp, #100]	@ 0x64
 801d528:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d52a:	bf08      	it	eq
 801d52c:	4613      	moveq	r3, r2
 801d52e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d530:	e5f4      	b.n	801d11c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d532:	2900      	cmp	r1, #0
 801d534:	f43f ae66 	beq.w	801d204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d538:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d53c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d540:	900a      	str	r0, [sp, #40]	@ 0x28
 801d542:	0e00      	lsrs	r0, r0, #24
 801d544:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d546:	e65d      	b.n	801d204 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d548:	f113 0801 	adds.w	r8, r3, #1
 801d54c:	f53f af74 	bmi.w	801d438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d550:	4540      	cmp	r0, r8
 801d552:	f6ff af71 	blt.w	801d438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d556:	f11c 0801 	adds.w	r8, ip, #1
 801d55a:	f53f af6d 	bmi.w	801d438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d55e:	45c6      	cmp	lr, r8
 801d560:	f6ff af6a 	blt.w	801d438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d564:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801d566:	b200      	sxth	r0, r0
 801d568:	9302      	str	r3, [sp, #8]
 801d56a:	fa0f f38e 	sxth.w	r3, lr
 801d56e:	9000      	str	r0, [sp, #0]
 801d570:	9301      	str	r3, [sp, #4]
 801d572:	4633      	mov	r3, r6
 801d574:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d576:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d57a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801d57e:	4639      	mov	r1, r7
 801d580:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d582:	f7ff fc63 	bl	801ce4c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801d586:	e757      	b.n	801d438 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d588:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d58a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d58e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801d590:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d594:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d596:	1427      	asrs	r7, r4, #16
 801d598:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d59a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d59e:	142b      	asrs	r3, r5, #16
 801d5a0:	fb01 7303 	mla	r3, r1, r3, r7
 801d5a4:	18e7      	adds	r7, r4, r3
 801d5a6:	5ce3      	ldrb	r3, [r4, r3]
 801d5a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d5ac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d5b0:	2a00      	cmp	r2, #0
 801d5b2:	f000 8137 	beq.w	801d824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801d5b6:	f897 e001 	ldrb.w	lr, [r7, #1]
 801d5ba:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801d5be:	9410      	str	r4, [sp, #64]	@ 0x40
 801d5c0:	0e24      	lsrs	r4, r4, #24
 801d5c2:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d5c4:	b170      	cbz	r0, 801d5e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d5c6:	eb07 0e01 	add.w	lr, r7, r1
 801d5ca:	5c79      	ldrb	r1, [r7, r1]
 801d5cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d5d2:	0e09      	lsrs	r1, r1, #24
 801d5d4:	9114      	str	r1, [sp, #80]	@ 0x50
 801d5d6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d5da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5de:	9111      	str	r1, [sp, #68]	@ 0x44
 801d5e0:	0e09      	lsrs	r1, r1, #24
 801d5e2:	9118      	str	r1, [sp, #96]	@ 0x60
 801d5e4:	b292      	uxth	r2, r2
 801d5e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d5e8:	b280      	uxth	r0, r0
 801d5ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d5ec:	fb02 f800 	mul.w	r8, r2, r0
 801d5f0:	0112      	lsls	r2, r2, #4
 801d5f2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d5f6:	eba2 0e08 	sub.w	lr, r2, r8
 801d5fa:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d5fe:	b280      	uxth	r0, r0
 801d600:	fa1f fe8e 	uxth.w	lr, lr
 801d604:	1a12      	subs	r2, r2, r0
 801d606:	fb0e f101 	mul.w	r1, lr, r1
 801d60a:	b292      	uxth	r2, r2
 801d60c:	fb02 110c 	mla	r1, r2, ip, r1
 801d610:	fb00 1104 	mla	r1, r0, r4, r1
 801d614:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d616:	fb08 1104 	mla	r1, r8, r4, r1
 801d61a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d61e:	2900      	cmp	r1, #0
 801d620:	f000 80f5 	beq.w	801d80e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801d624:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d628:	d019      	beq.n	801d65e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801d62a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d62e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d632:	fb0c fa0a 	mul.w	sl, ip, sl
 801d636:	fb0c fc03 	mul.w	ip, ip, r3
 801d63a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d63e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d642:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d646:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d64a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d64e:	4453      	add	r3, sl
 801d650:	0a3f      	lsrs	r7, r7, #8
 801d652:	0a1b      	lsrs	r3, r3, #8
 801d654:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d658:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d65c:	433b      	orrs	r3, r7
 801d65e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d660:	2cff      	cmp	r4, #255	@ 0xff
 801d662:	d020      	beq.n	801d6a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801d664:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d666:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d66a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d66c:	4367      	muls	r7, r4
 801d66e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d670:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d674:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d678:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d67a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d67e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d682:	fb04 fa0a 	mul.w	sl, r4, sl
 801d686:	44bc      	add	ip, r7
 801d688:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d68c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d690:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d694:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d698:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d69c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d6a0:	ea4c 040a 	orr.w	r4, ip, sl
 801d6a4:	9410      	str	r4, [sp, #64]	@ 0x40
 801d6a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d6a8:	2cff      	cmp	r4, #255	@ 0xff
 801d6aa:	d020      	beq.n	801d6ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801d6ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d6ae:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d6b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d6b4:	4367      	muls	r7, r4
 801d6b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d6b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d6bc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d6c0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d6c2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d6c6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d6ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801d6ce:	44bc      	add	ip, r7
 801d6d0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d6d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d6dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d6e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d6e8:	ea4c 040a 	orr.w	r4, ip, sl
 801d6ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d6ee:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d6f0:	2cff      	cmp	r4, #255	@ 0xff
 801d6f2:	d020      	beq.n	801d736 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801d6f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d6f6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d6fa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d6fc:	4367      	muls	r7, r4
 801d6fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d700:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d704:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d708:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801d70a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d70e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d712:	fb04 fa0a 	mul.w	sl, r4, sl
 801d716:	44bc      	add	ip, r7
 801d718:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d71c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d720:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d724:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d728:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d72c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d730:	ea4c 040a 	orr.w	r4, ip, sl
 801d734:	9411      	str	r4, [sp, #68]	@ 0x44
 801d736:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d738:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d73c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d740:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d744:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d746:	fb0e f707 	mul.w	r7, lr, r7
 801d74a:	fb02 770c 	mla	r7, r2, ip, r7
 801d74e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d752:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d754:	fb00 770c 	mla	r7, r0, ip, r7
 801d758:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d75c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d75e:	fb08 770c 	mla	r7, r8, ip, r7
 801d762:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d766:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d768:	fb0e fe0c 	mul.w	lr, lr, ip
 801d76c:	0a3f      	lsrs	r7, r7, #8
 801d76e:	fb02 e303 	mla	r3, r2, r3, lr
 801d772:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d774:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d778:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d77c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d77e:	fb00 330a 	mla	r3, r0, sl, r3
 801d782:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d786:	f8b9 0000 	ldrh.w	r0, [r9]
 801d78a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d78e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d790:	1202      	asrs	r2, r0, #8
 801d792:	434b      	muls	r3, r1
 801d794:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d798:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801d79c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d7a0:	1c59      	adds	r1, r3, #1
 801d7a2:	ea47 070c 	orr.w	r7, r7, ip
 801d7a6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d7aa:	0c3b      	lsrs	r3, r7, #16
 801d7ac:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d7b0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801d7b4:	b2ff      	uxtb	r7, r7
 801d7b6:	fb13 f304 	smulbb	r3, r3, r4
 801d7ba:	b2c9      	uxtb	r1, r1
 801d7bc:	fb1c fc04 	smulbb	ip, ip, r4
 801d7c0:	fb02 3201 	mla	r2, r2, r1, r3
 801d7c4:	10c3      	asrs	r3, r0, #3
 801d7c6:	fb17 f704 	smulbb	r7, r7, r4
 801d7ca:	00c0      	lsls	r0, r0, #3
 801d7cc:	b292      	uxth	r2, r2
 801d7ce:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801d7d2:	b2c0      	uxtb	r0, r0
 801d7d4:	fb03 c301 	mla	r3, r3, r1, ip
 801d7d8:	f102 0c01 	add.w	ip, r2, #1
 801d7dc:	fb00 7001 	mla	r0, r0, r1, r7
 801d7e0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d7e4:	b280      	uxth	r0, r0
 801d7e6:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 801d7ea:	b29b      	uxth	r3, r3
 801d7ec:	1c42      	adds	r2, r0, #1
 801d7ee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d7f2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d7f6:	ea42 020c 	orr.w	r2, r2, ip
 801d7fa:	f103 0c01 	add.w	ip, r3, #1
 801d7fe:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d802:	095b      	lsrs	r3, r3, #5
 801d804:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801d808:	431a      	orrs	r2, r3
 801d80a:	f8a9 2000 	strh.w	r2, [r9]
 801d80e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d810:	f109 0902 	add.w	r9, r9, #2
 801d814:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d816:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d81a:	441a      	add	r2, r3
 801d81c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d81e:	9229      	str	r2, [sp, #164]	@ 0xa4
 801d820:	441d      	add	r5, r3
 801d822:	e63d      	b.n	801d4a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d824:	2800      	cmp	r0, #0
 801d826:	f43f aedd 	beq.w	801d5e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d82a:	5c79      	ldrb	r1, [r7, r1]
 801d82c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d830:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d832:	0e09      	lsrs	r1, r1, #24
 801d834:	9114      	str	r1, [sp, #80]	@ 0x50
 801d836:	e6d5      	b.n	801d5e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801d838:	b01f      	add	sp, #124	@ 0x7c
 801d83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d83e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801d83e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d842:	b089      	sub	sp, #36	@ 0x24
 801d844:	9101      	str	r1, [sp, #4]
 801d846:	9801      	ldr	r0, [sp, #4]
 801d848:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 801d84c:	8800      	ldrh	r0, [r0, #0]
 801d84e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 801d852:	1206      	asrs	r6, r0, #8
 801d854:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 801d858:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 801d85c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d860:	9602      	str	r6, [sp, #8]
 801d862:	10c6      	asrs	r6, r0, #3
 801d864:	00c0      	lsls	r0, r0, #3
 801d866:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d86a:	b2c0      	uxtb	r0, r0
 801d86c:	9603      	str	r6, [sp, #12]
 801d86e:	9004      	str	r0, [sp, #16]
 801d870:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 801d874:	fb07 100c 	mla	r0, r7, ip, r1
 801d878:	2f00      	cmp	r7, #0
 801d87a:	eb02 0e00 	add.w	lr, r2, r0
 801d87e:	f2c0 810a 	blt.w	801da96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801d882:	45b8      	cmp	r8, r7
 801d884:	f340 8107 	ble.w	801da96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801d888:	2900      	cmp	r1, #0
 801d88a:	f2c0 8102 	blt.w	801da92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801d88e:	458c      	cmp	ip, r1
 801d890:	f340 80ff 	ble.w	801da92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801d894:	5c12      	ldrb	r2, [r2, r0]
 801d896:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d89a:	1c4a      	adds	r2, r1, #1
 801d89c:	f100 80fe 	bmi.w	801da9c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801d8a0:	4594      	cmp	ip, r2
 801d8a2:	f340 80fb 	ble.w	801da9c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801d8a6:	2d00      	cmp	r5, #0
 801d8a8:	f000 80fa 	beq.w	801daa0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801d8ac:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d8b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d8b4:	3701      	adds	r7, #1
 801d8b6:	f100 80f7 	bmi.w	801daa8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801d8ba:	45b8      	cmp	r8, r7
 801d8bc:	f340 80f4 	ble.w	801daa8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801d8c0:	2c00      	cmp	r4, #0
 801d8c2:	f000 80f4 	beq.w	801daae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801d8c6:	2900      	cmp	r1, #0
 801d8c8:	eb0e 020c 	add.w	r2, lr, ip
 801d8cc:	f2c0 80ea 	blt.w	801daa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801d8d0:	458c      	cmp	ip, r1
 801d8d2:	f340 80e7 	ble.w	801daa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801d8d6:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801d8da:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801d8de:	3101      	adds	r1, #1
 801d8e0:	f100 80e8 	bmi.w	801dab4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801d8e4:	458c      	cmp	ip, r1
 801d8e6:	f340 80e5 	ble.w	801dab4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801d8ea:	2d00      	cmp	r5, #0
 801d8ec:	f000 80e4 	beq.w	801dab8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801d8f0:	7852      	ldrb	r2, [r2, #1]
 801d8f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d8f6:	0e0b      	lsrs	r3, r1, #24
 801d8f8:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 801d8fc:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d900:	9300      	str	r3, [sp, #0]
 801d902:	b2a4      	uxth	r4, r4
 801d904:	b2ab      	uxth	r3, r5
 801d906:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801d90a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d90e:	fb03 f904 	mul.w	r9, r3, r4
 801d912:	011b      	lsls	r3, r3, #4
 801d914:	fb0a f505 	mul.w	r5, sl, r5
 801d918:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801d91c:	eba3 0e09 	sub.w	lr, r3, r9
 801d920:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 801d924:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 801d928:	0a28      	lsrs	r0, r5, #8
 801d92a:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801d92e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d932:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d936:	fb0a f303 	mul.w	r3, sl, r3
 801d93a:	fb08 f707 	mul.w	r7, r8, r7
 801d93e:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801d942:	4405      	add	r5, r0
 801d944:	fb08 fc0c 	mul.w	ip, r8, ip
 801d948:	b2a4      	uxth	r4, r4
 801d94a:	0a2d      	lsrs	r5, r5, #8
 801d94c:	fa1f fe8e 	uxth.w	lr, lr
 801d950:	1b12      	subs	r2, r2, r4
 801d952:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 801d956:	b292      	uxth	r2, r2
 801d958:	9005      	str	r0, [sp, #20]
 801d95a:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 801d95e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d962:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801d966:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d96a:	0a1b      	lsrs	r3, r3, #8
 801d96c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d970:	9306      	str	r3, [sp, #24]
 801d972:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 801d976:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d97a:	4460      	add	r0, ip
 801d97c:	fb0b f303 	mul.w	r3, fp, r3
 801d980:	fb0b f606 	mul.w	r6, fp, r6
 801d984:	0a00      	lsrs	r0, r0, #8
 801d986:	0a1d      	lsrs	r5, r3, #8
 801d988:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 801d98c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d990:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801d994:	441d      	add	r5, r3
 801d996:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 801d99a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d99e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801d9a2:	0a2d      	lsrs	r5, r5, #8
 801d9a4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801d9a8:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 801d9ac:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801d9b0:	0a36      	lsrs	r6, r6, #8
 801d9b2:	0a1b      	lsrs	r3, r3, #8
 801d9b4:	fb05 f50e 	mul.w	r5, r5, lr
 801d9b8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d9bc:	9307      	str	r3, [sp, #28]
 801d9be:	0e0b      	lsrs	r3, r1, #24
 801d9c0:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801d9c4:	fb0e f606 	mul.w	r6, lr, r6
 801d9c8:	435f      	muls	r7, r3
 801d9ca:	4359      	muls	r1, r3
 801d9cc:	9b05      	ldr	r3, [sp, #20]
 801d9ce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d9d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d9d6:	fb03 5502 	mla	r5, r3, r2, r5
 801d9da:	9b06      	ldr	r3, [sp, #24]
 801d9dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9e0:	fb0e fe0b 	mul.w	lr, lr, fp
 801d9e4:	44bc      	add	ip, r7
 801d9e6:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 801d9ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9ee:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801d9f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9f6:	0a09      	lsrs	r1, r1, #8
 801d9f8:	fb0c 5509 	mla	r5, ip, r9, r5
 801d9fc:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 801da00:	fb00 5504 	mla	r5, r0, r4, r5
 801da04:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 801da08:	9b07      	ldr	r3, [sp, #28]
 801da0a:	fb02 6000 	mla	r0, r2, r0, r6
 801da0e:	0a2d      	lsrs	r5, r5, #8
 801da10:	fb02 e20a 	mla	r2, r2, sl, lr
 801da14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801da18:	fb09 0001 	mla	r0, r9, r1, r0
 801da1c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801da20:	fb04 0003 	mla	r0, r4, r3, r0
 801da24:	9b00      	ldr	r3, [sp, #0]
 801da26:	fb04 2408 	mla	r4, r4, r8, r2
 801da2a:	9a04      	ldr	r2, [sp, #16]
 801da2c:	0a00      	lsrs	r0, r0, #8
 801da2e:	fb09 4903 	mla	r9, r9, r3, r4
 801da32:	9b02      	ldr	r3, [sp, #8]
 801da34:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801da38:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801da3c:	4305      	orrs	r5, r0
 801da3e:	fa5f f989 	uxtb.w	r9, r9
 801da42:	fb03 f109 	mul.w	r1, r3, r9
 801da46:	9b03      	ldr	r3, [sp, #12]
 801da48:	fb03 f309 	mul.w	r3, r3, r9
 801da4c:	fb02 f909 	mul.w	r9, r2, r9
 801da50:	1c4a      	adds	r2, r1, #1
 801da52:	1c58      	adds	r0, r3, #1
 801da54:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801da58:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801da5c:	0c2a      	lsrs	r2, r5, #16
 801da5e:	0a2b      	lsrs	r3, r5, #8
 801da60:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801da64:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801da68:	0212      	lsls	r2, r2, #8
 801da6a:	00db      	lsls	r3, r3, #3
 801da6c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801da70:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801da74:	4313      	orrs	r3, r2
 801da76:	f109 0201 	add.w	r2, r9, #1
 801da7a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801da7e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801da82:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801da86:	431d      	orrs	r5, r3
 801da88:	9b01      	ldr	r3, [sp, #4]
 801da8a:	801d      	strh	r5, [r3, #0]
 801da8c:	b009      	add	sp, #36	@ 0x24
 801da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da92:	2000      	movs	r0, #0
 801da94:	e701      	b.n	801d89a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801da96:	2600      	movs	r6, #0
 801da98:	4630      	mov	r0, r6
 801da9a:	e70b      	b.n	801d8b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801da9c:	2600      	movs	r6, #0
 801da9e:	e709      	b.n	801d8b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801daa0:	462e      	mov	r6, r5
 801daa2:	e707      	b.n	801d8b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801daa4:	2700      	movs	r7, #0
 801daa6:	e71a      	b.n	801d8de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801daa8:	2100      	movs	r1, #0
 801daaa:	460f      	mov	r7, r1
 801daac:	e723      	b.n	801d8f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801daae:	4621      	mov	r1, r4
 801dab0:	4627      	mov	r7, r4
 801dab2:	e720      	b.n	801d8f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801dab4:	2100      	movs	r1, #0
 801dab6:	e71e      	b.n	801d8f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801dab8:	4629      	mov	r1, r5
 801daba:	e71c      	b.n	801d8f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801dabc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac0:	b09b      	sub	sp, #108	@ 0x6c
 801dac2:	9218      	str	r2, [sp, #96]	@ 0x60
 801dac4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801dac6:	9019      	str	r0, [sp, #100]	@ 0x64
 801dac8:	9116      	str	r1, [sp, #88]	@ 0x58
 801daca:	6850      	ldr	r0, [r2, #4]
 801dacc:	9307      	str	r3, [sp, #28]
 801dace:	6812      	ldr	r2, [r2, #0]
 801dad0:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801dad2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801dad6:	fb00 1303 	mla	r3, r0, r3, r1
 801dada:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dade:	930a      	str	r3, [sp, #40]	@ 0x28
 801dae0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dae6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dae8:	685e      	ldr	r6, [r3, #4]
 801daea:	3604      	adds	r6, #4
 801daec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801daee:	2b00      	cmp	r3, #0
 801daf0:	dc03      	bgt.n	801dafa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801daf2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	f340 8373 	ble.w	801e1e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801dafa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dafc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db04:	1e48      	subs	r0, r1, #1
 801db06:	1e57      	subs	r7, r2, #1
 801db08:	9b07      	ldr	r3, [sp, #28]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	f340 818f 	ble.w	801de2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801db10:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801db12:	142b      	asrs	r3, r5, #16
 801db14:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801db18:	d406      	bmi.n	801db28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801db1a:	4584      	cmp	ip, r0
 801db1c:	da04      	bge.n	801db28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801db1e:	2b00      	cmp	r3, #0
 801db20:	db02      	blt.n	801db28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801db22:	42bb      	cmp	r3, r7
 801db24:	f2c0 8184 	blt.w	801de30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801db28:	f11c 0c01 	adds.w	ip, ip, #1
 801db2c:	f100 8172 	bmi.w	801de14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801db30:	4561      	cmp	r1, ip
 801db32:	f2c0 816f 	blt.w	801de14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801db36:	3301      	adds	r3, #1
 801db38:	f100 816c 	bmi.w	801de14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801db3c:	429a      	cmp	r2, r3
 801db3e:	f2c0 8169 	blt.w	801de14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801db42:	9b07      	ldr	r3, [sp, #28]
 801db44:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801db46:	9317      	str	r3, [sp, #92]	@ 0x5c
 801db48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	f340 818e 	ble.w	801de6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801db50:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db52:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801db56:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801db5a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801db5e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801db60:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801db64:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db66:	141b      	asrs	r3, r3, #16
 801db68:	f100 81d1 	bmi.w	801df0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801db6c:	f101 38ff 	add.w	r8, r1, #4294967295
 801db70:	4543      	cmp	r3, r8
 801db72:	f280 81cc 	bge.w	801df0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801db76:	f1bc 0f00 	cmp.w	ip, #0
 801db7a:	f2c0 81c8 	blt.w	801df0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801db7e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801db82:	45c4      	cmp	ip, r8
 801db84:	f280 81c3 	bge.w	801df0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801db88:	b209      	sxth	r1, r1
 801db8a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801db8c:	fb0c 3301 	mla	r3, ip, r1, r3
 801db90:	eb04 0803 	add.w	r8, r4, r3
 801db94:	5ce3      	ldrb	r3, [r4, r3]
 801db96:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801db9a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801db9e:	2a00      	cmp	r2, #0
 801dba0:	f000 81aa 	beq.w	801def8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801dba4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dba8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dbac:	940b      	str	r4, [sp, #44]	@ 0x2c
 801dbae:	0e24      	lsrs	r4, r4, #24
 801dbb0:	9412      	str	r4, [sp, #72]	@ 0x48
 801dbb2:	b178      	cbz	r0, 801dbd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801dbb4:	eb08 0c01 	add.w	ip, r8, r1
 801dbb8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dbbc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dbc0:	9108      	str	r1, [sp, #32]
 801dbc2:	0e09      	lsrs	r1, r1, #24
 801dbc4:	9110      	str	r1, [sp, #64]	@ 0x40
 801dbc6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801dbca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dbce:	910c      	str	r1, [sp, #48]	@ 0x30
 801dbd0:	0e09      	lsrs	r1, r1, #24
 801dbd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 801dbd4:	b292      	uxth	r2, r2
 801dbd6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dbd8:	b280      	uxth	r0, r0
 801dbda:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dbdc:	fb02 f900 	mul.w	r9, r2, r0
 801dbe0:	0112      	lsls	r2, r2, #4
 801dbe2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dbe6:	eba2 0809 	sub.w	r8, r2, r9
 801dbea:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dbee:	b280      	uxth	r0, r0
 801dbf0:	fa1f f888 	uxth.w	r8, r8
 801dbf4:	1a12      	subs	r2, r2, r0
 801dbf6:	fb08 f101 	mul.w	r1, r8, r1
 801dbfa:	b292      	uxth	r2, r2
 801dbfc:	fb02 110e 	mla	r1, r2, lr, r1
 801dc00:	fb00 1104 	mla	r1, r0, r4, r1
 801dc04:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dc06:	fb09 1104 	mla	r1, r9, r4, r1
 801dc0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dc0e:	2900      	cmp	r1, #0
 801dc10:	f000 80f5 	beq.w	801ddfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801dc14:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dc18:	d01b      	beq.n	801dc52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801dc1a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dc1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dc22:	fb0e fa0a 	mul.w	sl, lr, sl
 801dc26:	fb0e fe03 	mul.w	lr, lr, r3
 801dc2a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dc2e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dc32:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dc36:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc3a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dc3e:	4453      	add	r3, sl
 801dc40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc44:	0a1b      	lsrs	r3, r3, #8
 801dc46:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dc4a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc4e:	ea43 030c 	orr.w	r3, r3, ip
 801dc52:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dc54:	2cff      	cmp	r4, #255	@ 0xff
 801dc56:	d021      	beq.n	801dc9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dc58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dc5a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dc5e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dc60:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dc66:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dc6a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dc6c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dc70:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dc74:	fb04 fa0a 	mul.w	sl, r4, sl
 801dc78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dc7c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dc80:	44de      	add	lr, fp
 801dc82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dc86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dc92:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dc96:	ea4e 040a 	orr.w	r4, lr, sl
 801dc9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801dc9c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dc9e:	2cff      	cmp	r4, #255	@ 0xff
 801dca0:	d021      	beq.n	801dce6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801dca2:	9c08      	ldr	r4, [sp, #32]
 801dca4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dca8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dcaa:	fb04 fb0b 	mul.w	fp, r4, fp
 801dcae:	9c08      	ldr	r4, [sp, #32]
 801dcb0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dcb4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dcb6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcba:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dcbe:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcc2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcc6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dcca:	44de      	add	lr, fp
 801dccc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcd8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcdc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dce0:	ea4e 040a 	orr.w	r4, lr, sl
 801dce4:	9408      	str	r4, [sp, #32]
 801dce6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dce8:	2cff      	cmp	r4, #255	@ 0xff
 801dcea:	d021      	beq.n	801dd30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801dcec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dcee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dcf2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dcf4:	fb04 fb0b 	mul.w	fp, r4, fp
 801dcf8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dcfa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dcfe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd08:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd10:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd14:	44de      	add	lr, fp
 801dd16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd2a:	ea4e 040a 	orr.w	r4, lr, sl
 801dd2e:	940c      	str	r4, [sp, #48]	@ 0x30
 801dd30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd32:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801dd36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dd3a:	43c9      	mvns	r1, r1
 801dd3c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd40:	9c08      	ldr	r4, [sp, #32]
 801dd42:	fb08 fc0c 	mul.w	ip, r8, ip
 801dd46:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dd4a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dd4e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dd50:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dd54:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dd58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd5a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dd5e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801dd62:	fb08 f80e 	mul.w	r8, r8, lr
 801dd66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd6a:	fa5f fe81 	uxtb.w	lr, r1
 801dd6e:	fb02 8303 	mla	r3, r2, r3, r8
 801dd72:	9a08      	ldr	r2, [sp, #32]
 801dd74:	f8b7 8000 	ldrh.w	r8, [r7]
 801dd78:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dd7c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801dd80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801dd86:	fb00 330a 	mla	r3, r0, sl, r3
 801dd8a:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801dd8e:	ea4f 2228 	mov.w	r2, r8, asr #8
 801dd92:	fb09 3900 	mla	r9, r9, r0, r3
 801dd96:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801dd9a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801dd9e:	b2c9      	uxtb	r1, r1
 801dda0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dda4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801dda8:	fb02 f20e 	mul.w	r2, r2, lr
 801ddac:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801ddb0:	fb00 f00e 	mul.w	r0, r0, lr
 801ddb4:	1c53      	adds	r3, r2, #1
 801ddb6:	fb01 f10e 	mul.w	r1, r1, lr
 801ddba:	ea4c 0c09 	orr.w	ip, ip, r9
 801ddbe:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ddc2:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801ddc6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ddca:	4a60      	ldr	r2, [pc, #384]	@ (801df4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801ddcc:	b2db      	uxtb	r3, r3
 801ddce:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801ddd2:	1c43      	adds	r3, r0, #1
 801ddd4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ddd8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801dddc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801dde0:	00db      	lsls	r3, r3, #3
 801dde2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801dde6:	4313      	orrs	r3, r2
 801dde8:	1c4a      	adds	r2, r1, #1
 801ddea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ddee:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ddf2:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801ddf6:	ea4c 0c03 	orr.w	ip, ip, r3
 801ddfa:	f8a7 c000 	strh.w	ip, [r7]
 801ddfe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801de00:	3702      	adds	r7, #2
 801de02:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801de04:	441a      	add	r2, r3
 801de06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de08:	441d      	add	r5, r3
 801de0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801de0c:	9225      	str	r2, [sp, #148]	@ 0x94
 801de0e:	3b01      	subs	r3, #1
 801de10:	9317      	str	r3, [sp, #92]	@ 0x5c
 801de12:	e699      	b.n	801db48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801de14:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801de16:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801de18:	441c      	add	r4, r3
 801de1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de1c:	441d      	add	r5, r3
 801de1e:	9b07      	ldr	r3, [sp, #28]
 801de20:	9425      	str	r4, [sp, #148]	@ 0x94
 801de22:	3b01      	subs	r3, #1
 801de24:	9307      	str	r3, [sp, #28]
 801de26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de28:	3302      	adds	r3, #2
 801de2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801de2c:	e66c      	b.n	801db08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801de2e:	d024      	beq.n	801de7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801de30:	9b07      	ldr	r3, [sp, #28]
 801de32:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801de34:	3b01      	subs	r3, #1
 801de36:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801de38:	fb00 4003 	mla	r0, r0, r3, r4
 801de3c:	1400      	asrs	r0, r0, #16
 801de3e:	f53f ae80 	bmi.w	801db42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801de42:	3901      	subs	r1, #1
 801de44:	4288      	cmp	r0, r1
 801de46:	f6bf ae7c 	bge.w	801db42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801de4a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801de4c:	fb01 5303 	mla	r3, r1, r3, r5
 801de50:	141b      	asrs	r3, r3, #16
 801de52:	f53f ae76 	bmi.w	801db42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801de56:	3a01      	subs	r2, #1
 801de58:	4293      	cmp	r3, r2
 801de5a:	f6bf ae72 	bge.w	801db42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801de5e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801de62:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801de66:	f1bb 0f00 	cmp.w	fp, #0
 801de6a:	dc71      	bgt.n	801df50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801de6c:	9b07      	ldr	r3, [sp, #28]
 801de6e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801de72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de74:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801de78:	930a      	str	r3, [sp, #40]	@ 0x28
 801de7a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	f340 81af 	ble.w	801e1e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801de82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801de86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de90:	eef0 6a62 	vmov.f32	s13, s5
 801de94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de98:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dea0:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 801dea4:	eef0 6a43 	vmov.f32	s13, s6
 801dea8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801deac:	ee16 5a90 	vmov	r5, s13
 801deb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801deb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801deb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801debc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dec0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dec4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dec8:	ee12 2a90 	vmov	r2, s5
 801decc:	eef0 2a47 	vmov.f32	s5, s14
 801ded0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ded4:	ee13 2a10 	vmov	r2, s6
 801ded8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801deda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dedc:	eeb0 3a67 	vmov.f32	s6, s15
 801dee0:	fb92 f3f3 	sdiv	r3, r2, r3
 801dee4:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dee6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dee8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801deea:	3b01      	subs	r3, #1
 801deec:	9316      	str	r3, [sp, #88]	@ 0x58
 801deee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801def0:	bf08      	it	eq
 801def2:	4613      	moveq	r3, r2
 801def4:	9307      	str	r3, [sp, #28]
 801def6:	e5f9      	b.n	801daec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801def8:	2800      	cmp	r0, #0
 801defa:	f43f ae6b 	beq.w	801dbd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801defe:	f818 1001 	ldrb.w	r1, [r8, r1]
 801df02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df06:	9108      	str	r1, [sp, #32]
 801df08:	0e09      	lsrs	r1, r1, #24
 801df0a:	9110      	str	r1, [sp, #64]	@ 0x40
 801df0c:	e662      	b.n	801dbd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801df0e:	f113 0801 	adds.w	r8, r3, #1
 801df12:	f53f af74 	bmi.w	801ddfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801df16:	4541      	cmp	r1, r8
 801df18:	f6ff af71 	blt.w	801ddfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801df1c:	f11c 0801 	adds.w	r8, ip, #1
 801df20:	f53f af6d 	bmi.w	801ddfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801df24:	45c6      	cmp	lr, r8
 801df26:	f6ff af6a 	blt.w	801ddfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801df2a:	b209      	sxth	r1, r1
 801df2c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801df30:	fa0f f38e 	sxth.w	r3, lr
 801df34:	9100      	str	r1, [sp, #0]
 801df36:	4639      	mov	r1, r7
 801df38:	9301      	str	r3, [sp, #4]
 801df3a:	4633      	mov	r3, r6
 801df3c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801df40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801df42:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801df44:	f7ff fc7b 	bl	801d83e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801df48:	e759      	b.n	801ddfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801df4a:	bf00      	nop
 801df4c:	fffff800 	.word	0xfffff800
 801df50:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df52:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801df56:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801df58:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df5c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801df5e:	1427      	asrs	r7, r4, #16
 801df60:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801df62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df66:	142b      	asrs	r3, r5, #16
 801df68:	fb01 7303 	mla	r3, r1, r3, r7
 801df6c:	18e7      	adds	r7, r4, r3
 801df6e:	5ce3      	ldrb	r3, [r4, r3]
 801df70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801df74:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801df78:	2a00      	cmp	r2, #0
 801df7a:	f000 8127 	beq.w	801e1cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801df7e:	f897 e001 	ldrb.w	lr, [r7, #1]
 801df82:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801df86:	940d      	str	r4, [sp, #52]	@ 0x34
 801df88:	0e24      	lsrs	r4, r4, #24
 801df8a:	9414      	str	r4, [sp, #80]	@ 0x50
 801df8c:	b170      	cbz	r0, 801dfac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801df8e:	eb07 0e01 	add.w	lr, r7, r1
 801df92:	5c79      	ldrb	r1, [r7, r1]
 801df94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801df98:	9109      	str	r1, [sp, #36]	@ 0x24
 801df9a:	0e09      	lsrs	r1, r1, #24
 801df9c:	9111      	str	r1, [sp, #68]	@ 0x44
 801df9e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801dfa2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dfa6:	910e      	str	r1, [sp, #56]	@ 0x38
 801dfa8:	0e09      	lsrs	r1, r1, #24
 801dfaa:	9115      	str	r1, [sp, #84]	@ 0x54
 801dfac:	b292      	uxth	r2, r2
 801dfae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dfb0:	b280      	uxth	r0, r0
 801dfb2:	fb02 f800 	mul.w	r8, r2, r0
 801dfb6:	0112      	lsls	r2, r2, #4
 801dfb8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801dfbc:	eba2 0e08 	sub.w	lr, r2, r8
 801dfc0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801dfc4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dfc6:	b280      	uxth	r0, r0
 801dfc8:	fa1f fe8e 	uxth.w	lr, lr
 801dfcc:	1a09      	subs	r1, r1, r0
 801dfce:	fb0e f202 	mul.w	r2, lr, r2
 801dfd2:	b289      	uxth	r1, r1
 801dfd4:	fb01 220c 	mla	r2, r1, ip, r2
 801dfd8:	fb00 2204 	mla	r2, r0, r4, r2
 801dfdc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dfde:	fb08 2204 	mla	r2, r8, r4, r2
 801dfe2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801dfe6:	2a00      	cmp	r2, #0
 801dfe8:	f000 80e5 	beq.w	801e1b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801dfec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801dff0:	d019      	beq.n	801e026 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801dff2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dff6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dffa:	fb0c fa0a 	mul.w	sl, ip, sl
 801dffe:	fb0c fc03 	mul.w	ip, ip, r3
 801e002:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e006:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e00a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e00e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e012:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e016:	4453      	add	r3, sl
 801e018:	0a3f      	lsrs	r7, r7, #8
 801e01a:	0a1b      	lsrs	r3, r3, #8
 801e01c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e020:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e024:	433b      	orrs	r3, r7
 801e026:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e028:	2cff      	cmp	r4, #255	@ 0xff
 801e02a:	d020      	beq.n	801e06e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801e02c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e02e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e032:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e034:	4367      	muls	r7, r4
 801e036:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e038:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e03c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e040:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e042:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e046:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e04a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e04e:	44bc      	add	ip, r7
 801e050:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e054:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e058:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e05c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e060:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e064:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e068:	ea4c 040a 	orr.w	r4, ip, sl
 801e06c:	940d      	str	r4, [sp, #52]	@ 0x34
 801e06e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e070:	2cff      	cmp	r4, #255	@ 0xff
 801e072:	d020      	beq.n	801e0b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801e074:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e076:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e07a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e07c:	4367      	muls	r7, r4
 801e07e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e080:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e084:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e088:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e08a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e08e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e092:	fb04 fa0a 	mul.w	sl, r4, sl
 801e096:	44bc      	add	ip, r7
 801e098:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e09c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0b0:	ea4c 040a 	orr.w	r4, ip, sl
 801e0b4:	9409      	str	r4, [sp, #36]	@ 0x24
 801e0b6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e0b8:	2cff      	cmp	r4, #255	@ 0xff
 801e0ba:	d020      	beq.n	801e0fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801e0bc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e0be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e0c2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e0c4:	4367      	muls	r7, r4
 801e0c6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e0c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0d0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e0d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e0d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0da:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0de:	44bc      	add	ip, r7
 801e0e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e0e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0f8:	ea4c 040a 	orr.w	r4, ip, sl
 801e0fc:	940e      	str	r4, [sp, #56]	@ 0x38
 801e0fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e100:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e104:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e108:	43d2      	mvns	r2, r2
 801e10a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e10e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e110:	b2d2      	uxtb	r2, r2
 801e112:	fb0e f707 	mul.w	r7, lr, r7
 801e116:	fb01 770c 	mla	r7, r1, ip, r7
 801e11a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e11e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e120:	fb00 770c 	mla	r7, r0, ip, r7
 801e124:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e128:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e12a:	fb08 770c 	mla	r7, r8, ip, r7
 801e12e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e132:	fb0e fe0c 	mul.w	lr, lr, ip
 801e136:	0a3f      	lsrs	r7, r7, #8
 801e138:	fb01 e303 	mla	r3, r1, r3, lr
 801e13c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e13e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e142:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801e146:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e148:	fb00 330a 	mla	r3, r0, sl, r3
 801e14c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801e150:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e154:	f8b9 3000 	ldrh.w	r3, [r9]
 801e158:	1218      	asrs	r0, r3, #8
 801e15a:	10d9      	asrs	r1, r3, #3
 801e15c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e160:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801e164:	00db      	lsls	r3, r3, #3
 801e166:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e16a:	4350      	muls	r0, r2
 801e16c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e170:	b2db      	uxtb	r3, r3
 801e172:	4351      	muls	r1, r2
 801e174:	ea47 070c 	orr.w	r7, r7, ip
 801e178:	4353      	muls	r3, r2
 801e17a:	1c42      	adds	r2, r0, #1
 801e17c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e180:	0c3a      	lsrs	r2, r7, #16
 801e182:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e186:	4a18      	ldr	r2, [pc, #96]	@ (801e1e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801e188:	b2c0      	uxtb	r0, r0
 801e18a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801e18e:	1c4a      	adds	r2, r1, #1
 801e190:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e194:	0a3a      	lsrs	r2, r7, #8
 801e196:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e19a:	00c9      	lsls	r1, r1, #3
 801e19c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e1a0:	4301      	orrs	r1, r0
 801e1a2:	1c58      	adds	r0, r3, #1
 801e1a4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e1a8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801e1ac:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801e1b0:	4308      	orrs	r0, r1
 801e1b2:	f8a9 0000 	strh.w	r0, [r9]
 801e1b6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e1b8:	f109 0902 	add.w	r9, r9, #2
 801e1bc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e1be:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e1c2:	441a      	add	r2, r3
 801e1c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e1c6:	9225      	str	r2, [sp, #148]	@ 0x94
 801e1c8:	441d      	add	r5, r3
 801e1ca:	e64c      	b.n	801de66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e1cc:	2800      	cmp	r0, #0
 801e1ce:	f43f aeed 	beq.w	801dfac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e1d2:	5c79      	ldrb	r1, [r7, r1]
 801e1d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e1d8:	9109      	str	r1, [sp, #36]	@ 0x24
 801e1da:	0e09      	lsrs	r1, r1, #24
 801e1dc:	9111      	str	r1, [sp, #68]	@ 0x44
 801e1de:	e6e5      	b.n	801dfac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801e1e0:	b01b      	add	sp, #108	@ 0x6c
 801e1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1e6:	bf00      	nop
 801e1e8:	fffff800 	.word	0xfffff800

0801e1ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f0:	b085      	sub	sp, #20
 801e1f2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801e1f6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 801e1fa:	2800      	cmp	r0, #0
 801e1fc:	9103      	str	r1, [sp, #12]
 801e1fe:	fb00 7406 	mla	r4, r0, r6, r7
 801e202:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 801e206:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801e20a:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801e20e:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 801e212:	eb03 0904 	add.w	r9, r3, r4
 801e216:	9501      	str	r5, [sp, #4]
 801e218:	f2c0 8150 	blt.w	801e4bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801e21c:	4583      	cmp	fp, r0
 801e21e:	f340 814d 	ble.w	801e4bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801e222:	2f00      	cmp	r7, #0
 801e224:	f2c0 8146 	blt.w	801e4b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801e228:	42be      	cmp	r6, r7
 801e22a:	f340 8143 	ble.w	801e4b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801e22e:	f813 c004 	ldrb.w	ip, [r3, r4]
 801e232:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801e236:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 801e23a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e23e:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 801e242:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e246:	4355      	muls	r5, r2
 801e248:	fb0c f203 	mul.w	r2, ip, r3
 801e24c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801e250:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 801e254:	441d      	add	r5, r3
 801e256:	f102 0320 	add.w	r3, r2, #32
 801e25a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e25e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801e262:	0a1b      	lsrs	r3, r3, #8
 801e264:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801e268:	431c      	orrs	r4, r3
 801e26a:	1c7b      	adds	r3, r7, #1
 801e26c:	f100 812b 	bmi.w	801e4c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801e270:	429e      	cmp	r6, r3
 801e272:	f340 8128 	ble.w	801e4c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801e276:	2900      	cmp	r1, #0
 801e278:	f000 8128 	beq.w	801e4cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801e27c:	9a01      	ldr	r2, [sp, #4]
 801e27e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801e282:	8855      	ldrh	r5, [r2, #2]
 801e284:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801e288:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 801e28c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e290:	fb08 f802 	mul.w	r8, r8, r2
 801e294:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 801e298:	435d      	muls	r5, r3
 801e29a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801e29e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801e2a2:	44d0      	add	r8, sl
 801e2a4:	f105 0a20 	add.w	sl, r5, #32
 801e2a8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e2ac:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801e2b0:	0a2d      	lsrs	r5, r5, #8
 801e2b2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e2b6:	432a      	orrs	r2, r5
 801e2b8:	3001      	adds	r0, #1
 801e2ba:	f100 810d 	bmi.w	801e4d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801e2be:	4583      	cmp	fp, r0
 801e2c0:	f340 810a 	ble.w	801e4d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801e2c4:	f1be 0f00 	cmp.w	lr, #0
 801e2c8:	f000 810b 	beq.w	801e4e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801e2cc:	2f00      	cmp	r7, #0
 801e2ce:	f2c0 8100 	blt.w	801e4d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801e2d2:	42be      	cmp	r6, r7
 801e2d4:	f340 80fd 	ble.w	801e4d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801e2d8:	9801      	ldr	r0, [sp, #4]
 801e2da:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 801e2de:	f819 5006 	ldrb.w	r5, [r9, r6]
 801e2e2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801e2e6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e2ea:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 801e2ee:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e2f2:	fb0a fa00 	mul.w	sl, sl, r0
 801e2f6:	fb05 f808 	mul.w	r8, r5, r8
 801e2fa:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801e2fe:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 801e302:	4482      	add	sl, r0
 801e304:	f108 0020 	add.w	r0, r8, #32
 801e308:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e30c:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801e310:	0a00      	lsrs	r0, r0, #8
 801e312:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e316:	ea4b 0b00 	orr.w	fp, fp, r0
 801e31a:	3701      	adds	r7, #1
 801e31c:	f100 80e6 	bmi.w	801e4ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801e320:	42be      	cmp	r6, r7
 801e322:	f340 80e3 	ble.w	801e4ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801e326:	2900      	cmp	r1, #0
 801e328:	f000 80e3 	beq.w	801e4f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801e32c:	3601      	adds	r6, #1
 801e32e:	9801      	ldr	r0, [sp, #4]
 801e330:	f819 7006 	ldrb.w	r7, [r9, r6]
 801e334:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801e338:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801e33c:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 801e340:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e344:	fb09 f906 	mul.w	r9, r9, r6
 801e348:	fb07 f800 	mul.w	r8, r7, r0
 801e34c:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 801e350:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801e354:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 801e358:	44d1      	add	r9, sl
 801e35a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801e35e:	f108 0020 	add.w	r0, r8, #32
 801e362:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e366:	0a00      	lsrs	r0, r0, #8
 801e368:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e36c:	4330      	orrs	r0, r6
 801e36e:	b28e      	uxth	r6, r1
 801e370:	fa1f f98e 	uxth.w	r9, lr
 801e374:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801e378:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801e37c:	fb06 f809 	mul.w	r8, r6, r9
 801e380:	0136      	lsls	r6, r6, #4
 801e382:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801e386:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801e38a:	9601      	str	r6, [sp, #4]
 801e38c:	ea4a 0404 	orr.w	r4, sl, r4
 801e390:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e394:	fa1f f689 	uxth.w	r6, r9
 801e398:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801e39c:	fb11 f90e 	smulbb	r9, r1, lr
 801e3a0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801e3a4:	9602      	str	r6, [sp, #8]
 801e3a6:	4626      	mov	r6, r4
 801e3a8:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801e3ac:	f1ce 0410 	rsb	r4, lr, #16
 801e3b0:	ea4a 0202 	orr.w	r2, sl, r2
 801e3b4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e3b8:	1a64      	subs	r4, r4, r1
 801e3ba:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801e3be:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801e3c2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e3c6:	434a      	muls	r2, r1
 801e3c8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801e3cc:	ea4a 0000 	orr.w	r0, sl, r0
 801e3d0:	9903      	ldr	r1, [sp, #12]
 801e3d2:	fb04 2406 	mla	r4, r4, r6, r2
 801e3d6:	9e02      	ldr	r6, [sp, #8]
 801e3d8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801e3dc:	fb09 4200 	mla	r2, r9, r0, r4
 801e3e0:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801e3e4:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801e3e8:	8808      	ldrh	r0, [r1, #0]
 801e3ea:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801e3ee:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 801e3f2:	ea44 0b0b 	orr.w	fp, r4, fp
 801e3f6:	9c01      	ldr	r4, [sp, #4]
 801e3f8:	b289      	uxth	r1, r1
 801e3fa:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 801e3fe:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801e402:	1ba4      	subs	r4, r4, r6
 801e404:	9e01      	ldr	r6, [sp, #4]
 801e406:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e40a:	eba6 0608 	sub.w	r6, r6, r8
 801e40e:	b2a4      	uxth	r4, r4
 801e410:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e414:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e418:	b2b6      	uxth	r6, r6
 801e41a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801e41e:	4373      	muls	r3, r6
 801e420:	ea42 0e0e 	orr.w	lr, r2, lr
 801e424:	fb0c 3304 	mla	r3, ip, r4, r3
 801e428:	9c02      	ldr	r4, [sp, #8]
 801e42a:	fa1f f28e 	uxth.w	r2, lr
 801e42e:	fb04 3505 	mla	r5, r4, r5, r3
 801e432:	10d4      	asrs	r4, r2, #3
 801e434:	fb08 5707 	mla	r7, r8, r7, r5
 801e438:	1215      	asrs	r5, r2, #8
 801e43a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801e43e:	00d2      	lsls	r2, r2, #3
 801e440:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e444:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e448:	b2d2      	uxtb	r2, r2
 801e44a:	434f      	muls	r7, r1
 801e44c:	1c7b      	adds	r3, r7, #1
 801e44e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e452:	1203      	asrs	r3, r0, #8
 801e454:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801e458:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801e45c:	b2ff      	uxtb	r7, r7
 801e45e:	fb13 f307 	smulbb	r3, r3, r7
 801e462:	fb05 3501 	mla	r5, r5, r1, r3
 801e466:	10c3      	asrs	r3, r0, #3
 801e468:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801e46c:	b2ad      	uxth	r5, r5
 801e46e:	fb13 f307 	smulbb	r3, r3, r7
 801e472:	fb04 3401 	mla	r4, r4, r1, r3
 801e476:	00c3      	lsls	r3, r0, #3
 801e478:	b2db      	uxtb	r3, r3
 801e47a:	b2a4      	uxth	r4, r4
 801e47c:	fb13 f307 	smulbb	r3, r3, r7
 801e480:	fb02 3101 	mla	r1, r2, r1, r3
 801e484:	1c6b      	adds	r3, r5, #1
 801e486:	1c62      	adds	r2, r4, #1
 801e488:	b289      	uxth	r1, r1
 801e48a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e48e:	1c4b      	adds	r3, r1, #1
 801e490:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e494:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801e498:	9a03      	ldr	r2, [sp, #12]
 801e49a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e49e:	0964      	lsrs	r4, r4, #5
 801e4a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e4a4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801e4a8:	432b      	orrs	r3, r5
 801e4aa:	4323      	orrs	r3, r4
 801e4ac:	8013      	strh	r3, [r2, #0]
 801e4ae:	b005      	add	sp, #20
 801e4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4b4:	f04f 0c00 	mov.w	ip, #0
 801e4b8:	4664      	mov	r4, ip
 801e4ba:	e6d6      	b.n	801e26a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801e4bc:	2300      	movs	r3, #0
 801e4be:	469c      	mov	ip, r3
 801e4c0:	461a      	mov	r2, r3
 801e4c2:	461c      	mov	r4, r3
 801e4c4:	e6f8      	b.n	801e2b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e4c6:	2300      	movs	r3, #0
 801e4c8:	461a      	mov	r2, r3
 801e4ca:	e6f5      	b.n	801e2b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e4cc:	460b      	mov	r3, r1
 801e4ce:	460a      	mov	r2, r1
 801e4d0:	e6f2      	b.n	801e2b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801e4d2:	2500      	movs	r5, #0
 801e4d4:	46ab      	mov	fp, r5
 801e4d6:	e720      	b.n	801e31a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801e4d8:	2700      	movs	r7, #0
 801e4da:	463d      	mov	r5, r7
 801e4dc:	4638      	mov	r0, r7
 801e4de:	46bb      	mov	fp, r7
 801e4e0:	e745      	b.n	801e36e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e4e2:	4677      	mov	r7, lr
 801e4e4:	4675      	mov	r5, lr
 801e4e6:	4670      	mov	r0, lr
 801e4e8:	46f3      	mov	fp, lr
 801e4ea:	e740      	b.n	801e36e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e4ec:	2700      	movs	r7, #0
 801e4ee:	4638      	mov	r0, r7
 801e4f0:	e73d      	b.n	801e36e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801e4f2:	460f      	mov	r7, r1
 801e4f4:	4608      	mov	r0, r1
 801e4f6:	e73a      	b.n	801e36e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801e4f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4fc:	b097      	sub	sp, #92	@ 0x5c
 801e4fe:	9214      	str	r2, [sp, #80]	@ 0x50
 801e500:	9308      	str	r3, [sp, #32]
 801e502:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e504:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801e508:	9015      	str	r0, [sp, #84]	@ 0x54
 801e50a:	9312      	str	r3, [sp, #72]	@ 0x48
 801e50c:	6850      	ldr	r0, [r2, #4]
 801e50e:	9111      	str	r1, [sp, #68]	@ 0x44
 801e510:	6812      	ldr	r2, [r2, #0]
 801e512:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801e516:	fb00 1303 	mla	r3, r0, r3, r1
 801e51a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e51e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e520:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e526:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e528:	685b      	ldr	r3, [r3, #4]
 801e52a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e52c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801e530:	930a      	str	r3, [sp, #40]	@ 0x28
 801e532:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e534:	2b00      	cmp	r3, #0
 801e536:	dc03      	bgt.n	801e540 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e538:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	f340 83cd 	ble.w	801ecda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801e540:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e542:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e546:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e54a:	1e48      	subs	r0, r1, #1
 801e54c:	1e55      	subs	r5, r2, #1
 801e54e:	9b08      	ldr	r3, [sp, #32]
 801e550:	2b00      	cmp	r3, #0
 801e552:	f340 81a5 	ble.w	801e8a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801e556:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 801e558:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e55a:	1436      	asrs	r6, r6, #16
 801e55c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e560:	d406      	bmi.n	801e570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e562:	4286      	cmp	r6, r0
 801e564:	da04      	bge.n	801e570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e566:	2b00      	cmp	r3, #0
 801e568:	db02      	blt.n	801e570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e56a:	42ab      	cmp	r3, r5
 801e56c:	f2c0 8199 	blt.w	801e8a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e570:	3601      	adds	r6, #1
 801e572:	f100 8186 	bmi.w	801e882 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e576:	42b1      	cmp	r1, r6
 801e578:	f2c0 8183 	blt.w	801e882 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e57c:	3301      	adds	r3, #1
 801e57e:	f100 8180 	bmi.w	801e882 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e582:	429a      	cmp	r2, r3
 801e584:	f2c0 817d 	blt.w	801e882 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e588:	9b08      	ldr	r3, [sp, #32]
 801e58a:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801e58e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e590:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e592:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e594:	2b00      	cmp	r3, #0
 801e596:	f340 81a6 	ble.w	801e8e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e59a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e59c:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 801e59e:	1418      	asrs	r0, r3, #16
 801e5a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e5a2:	142d      	asrs	r5, r5, #16
 801e5a4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e5a8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e5aa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801e5ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e5b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e5b4:	f100 81fa 	bmi.w	801e9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e5b8:	f102 3eff 	add.w	lr, r2, #4294967295
 801e5bc:	4575      	cmp	r5, lr
 801e5be:	f280 81f5 	bge.w	801e9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e5c2:	2800      	cmp	r0, #0
 801e5c4:	f2c0 81f2 	blt.w	801e9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e5c8:	f103 3eff 	add.w	lr, r3, #4294967295
 801e5cc:	4570      	cmp	r0, lr
 801e5ce:	f280 81ed 	bge.w	801e9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e5d2:	b212      	sxth	r2, r2
 801e5d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e5d6:	fa1f fe81 	uxth.w	lr, r1
 801e5da:	fb00 5002 	mla	r0, r0, r2, r5
 801e5de:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801e5e2:	eb03 0a00 	add.w	sl, r3, r0
 801e5e6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801e5ea:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 801e5ee:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e5f2:	b29b      	uxth	r3, r3
 801e5f4:	f1bc 0f00 	cmp.w	ip, #0
 801e5f8:	f000 81bb 	beq.w	801e972 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801e5fc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801e600:	eb0a 0b02 	add.w	fp, sl, r2
 801e604:	fa1f fa8c 	uxth.w	sl, ip
 801e608:	940d      	str	r4, [sp, #52]	@ 0x34
 801e60a:	fb0a fe0e 	mul.w	lr, sl, lr
 801e60e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e612:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801e616:	eba5 050e 	sub.w	r5, r5, lr
 801e61a:	940e      	str	r4, [sp, #56]	@ 0x38
 801e61c:	fa1f fa8a 	uxth.w	sl, sl
 801e620:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e622:	b2ad      	uxth	r5, r5
 801e624:	eba3 030a 	sub.w	r3, r3, sl
 801e628:	fb08 f505 	mul.w	r5, r8, r5
 801e62c:	b29b      	uxth	r3, r3
 801e62e:	fb09 5303 	mla	r3, r9, r3, r5
 801e632:	fb0a 3304 	mla	r3, sl, r4, r3
 801e636:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e638:	fb0e 3304 	mla	r3, lr, r4, r3
 801e63c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e640:	2b00      	cmp	r3, #0
 801e642:	f000 8111 	beq.w	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e646:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e648:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801e64c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801e650:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801e654:	f000 8192 	beq.w	801e97c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801e658:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801e65c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e660:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e664:	fb0a fe0e 	mul.w	lr, sl, lr
 801e668:	fb09 f000 	mul.w	r0, r9, r0
 801e66c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801e670:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801e674:	f100 0b20 	add.w	fp, r0, #32
 801e678:	44ce      	add	lr, r9
 801e67a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801e67e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e682:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e686:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e68a:	ea4e 0909 	orr.w	r9, lr, r9
 801e68e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801e692:	8868      	ldrh	r0, [r5, #2]
 801e694:	d019      	beq.n	801e6ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e696:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801e69a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e69e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e6a2:	fb0a fe0e 	mul.w	lr, sl, lr
 801e6a6:	fb08 f800 	mul.w	r8, r8, r0
 801e6aa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801e6ae:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801e6b2:	f108 0b20 	add.w	fp, r8, #32
 801e6b6:	4486      	add	lr, r0
 801e6b8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801e6bc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e6c0:	0a00      	lsrs	r0, r0, #8
 801e6c2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e6c6:	ea4e 0000 	orr.w	r0, lr, r0
 801e6ca:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e6ce:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801e6d2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e6d6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801e6da:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801e6de:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801e6e2:	ea4e 0909 	orr.w	r9, lr, r9
 801e6e6:	ea4a 0000 	orr.w	r0, sl, r0
 801e6ea:	f1bc 0f00 	cmp.w	ip, #0
 801e6ee:	f000 8147 	beq.w	801e980 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e6f2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801e6f6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e6f8:	3a01      	subs	r2, #1
 801e6fa:	2cff      	cmp	r4, #255	@ 0xff
 801e6fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e700:	f102 0202 	add.w	r2, r2, #2
 801e704:	eb05 0e02 	add.w	lr, r5, r2
 801e708:	5aaa      	ldrh	r2, [r5, r2]
 801e70a:	d018      	beq.n	801e73e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801e70c:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 801e710:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e714:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e718:	fb04 fa02 	mul.w	sl, r4, r2
 801e71c:	fb08 f805 	mul.w	r8, r8, r5
 801e720:	f10a 0520 	add.w	r5, sl, #32
 801e724:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801e728:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801e72c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801e730:	4442      	add	r2, r8
 801e732:	0a2d      	lsrs	r5, r5, #8
 801e734:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801e738:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e73c:	432a      	orrs	r2, r5
 801e73e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e740:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801e744:	2cff      	cmp	r4, #255	@ 0xff
 801e746:	d01a      	beq.n	801e77e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801e748:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 801e74c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e750:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e754:	fb04 fa05 	mul.w	sl, r4, r5
 801e758:	fb08 f80e 	mul.w	r8, r8, lr
 801e75c:	f10a 0e20 	add.w	lr, sl, #32
 801e760:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801e764:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801e768:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801e76c:	4445      	add	r5, r8
 801e76e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e772:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801e776:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 801e77a:	ea45 050e 	orr.w	r5, r5, lr
 801e77e:	fb1c fe01 	smulbb	lr, ip, r1
 801e782:	f1cc 0810 	rsb	r8, ip, #16
 801e786:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e78a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801e78e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801e792:	eba8 0801 	sub.w	r8, r8, r1
 801e796:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801e79a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801e79e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801e7a2:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801e7a6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801e7aa:	ea4a 0202 	orr.w	r2, sl, r2
 801e7ae:	4341      	muls	r1, r0
 801e7b0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801e7b4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801e7b8:	fb09 1108 	mla	r1, r9, r8, r1
 801e7bc:	ea4b 0505 	orr.w	r5, fp, r5
 801e7c0:	fb0c 1102 	mla	r1, ip, r2, r1
 801e7c4:	fb0e 1e05 	mla	lr, lr, r5, r1
 801e7c8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e7cc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e7d0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e7d4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801e7d8:	ea42 0e0e 	orr.w	lr, r2, lr
 801e7dc:	fa1f f28e 	uxth.w	r2, lr
 801e7e0:	2bff      	cmp	r3, #255	@ 0xff
 801e7e2:	d103      	bne.n	801e7ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e7e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e7e6:	29ff      	cmp	r1, #255	@ 0xff
 801e7e8:	f000 80de 	beq.w	801e9a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801e7ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e7ee:	1215      	asrs	r5, r2, #8
 801e7f0:	8838      	ldrh	r0, [r7, #0]
 801e7f2:	434b      	muls	r3, r1
 801e7f4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801e7f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e7fa:	f103 0c01 	add.w	ip, r3, #1
 801e7fe:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801e802:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801e806:	fa5f fc83 	uxtb.w	ip, r3
 801e80a:	1203      	asrs	r3, r0, #8
 801e80c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801e810:	fb13 f30c 	smulbb	r3, r3, ip
 801e814:	fb05 3501 	mla	r5, r5, r1, r3
 801e818:	10c3      	asrs	r3, r0, #3
 801e81a:	10d1      	asrs	r1, r2, #3
 801e81c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801e820:	00d2      	lsls	r2, r2, #3
 801e822:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e826:	b2ad      	uxth	r5, r5
 801e828:	fb13 f30c 	smulbb	r3, r3, ip
 801e82c:	b2d2      	uxtb	r2, r2
 801e82e:	fb01 3104 	mla	r1, r1, r4, r3
 801e832:	00c3      	lsls	r3, r0, #3
 801e834:	b2db      	uxtb	r3, r3
 801e836:	b289      	uxth	r1, r1
 801e838:	fb13 f30c 	smulbb	r3, r3, ip
 801e83c:	fb02 3304 	mla	r3, r2, r4, r3
 801e840:	b29a      	uxth	r2, r3
 801e842:	1c6b      	adds	r3, r5, #1
 801e844:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e848:	1c53      	adds	r3, r2, #1
 801e84a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e84e:	1c4a      	adds	r2, r1, #1
 801e850:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801e854:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e858:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e85c:	0949      	lsrs	r1, r1, #5
 801e85e:	432b      	orrs	r3, r5
 801e860:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801e864:	430b      	orrs	r3, r1
 801e866:	803b      	strh	r3, [r7, #0]
 801e868:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e86a:	3702      	adds	r7, #2
 801e86c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e86e:	4413      	add	r3, r2
 801e870:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801e872:	9321      	str	r3, [sp, #132]	@ 0x84
 801e874:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e876:	441a      	add	r2, r3
 801e878:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e87a:	3b01      	subs	r3, #1
 801e87c:	9222      	str	r2, [sp, #136]	@ 0x88
 801e87e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e880:	e687      	b.n	801e592 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e882:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e884:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801e886:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 801e888:	4433      	add	r3, r6
 801e88a:	9321      	str	r3, [sp, #132]	@ 0x84
 801e88c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e88e:	441c      	add	r4, r3
 801e890:	9b08      	ldr	r3, [sp, #32]
 801e892:	3b01      	subs	r3, #1
 801e894:	9422      	str	r4, [sp, #136]	@ 0x88
 801e896:	9308      	str	r3, [sp, #32]
 801e898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e89a:	3302      	adds	r3, #2
 801e89c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e89e:	e656      	b.n	801e54e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e8a0:	d028      	beq.n	801e8f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801e8a2:	9b08      	ldr	r3, [sp, #32]
 801e8a4:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e8a6:	3b01      	subs	r3, #1
 801e8a8:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 801e8aa:	fb00 5003 	mla	r0, r0, r3, r5
 801e8ae:	1400      	asrs	r0, r0, #16
 801e8b0:	f53f ae6a 	bmi.w	801e588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8b4:	3901      	subs	r1, #1
 801e8b6:	4288      	cmp	r0, r1
 801e8b8:	f6bf ae66 	bge.w	801e588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8bc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801e8be:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801e8c0:	fb01 0303 	mla	r3, r1, r3, r0
 801e8c4:	141b      	asrs	r3, r3, #16
 801e8c6:	f53f ae5f 	bmi.w	801e588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8ca:	3a01      	subs	r2, #1
 801e8cc:	4293      	cmp	r3, r2
 801e8ce:	f6bf ae5b 	bge.w	801e588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8d2:	9b08      	ldr	r3, [sp, #32]
 801e8d4:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801e8d8:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 801e8dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e8de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	f300 8082 	bgt.w	801e9ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801e8e6:	9b08      	ldr	r3, [sp, #32]
 801e8e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8ee:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	f340 81ef 	ble.w	801ecda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801e8fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e900:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e902:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e906:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e90a:	eef0 6a62 	vmov.f32	s13, s5
 801e90e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e912:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e91a:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 801e91e:	eef0 6a43 	vmov.f32	s13, s6
 801e922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e926:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 801e92a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e92e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e932:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e93a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e93e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e942:	ee12 2a90 	vmov	r2, s5
 801e946:	eef0 2a47 	vmov.f32	s5, s14
 801e94a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e94e:	ee13 2a10 	vmov	r2, s6
 801e952:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e954:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e956:	eeb0 3a67 	vmov.f32	s6, s15
 801e95a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e95e:	9324      	str	r3, [sp, #144]	@ 0x90
 801e960:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e962:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e964:	3b01      	subs	r3, #1
 801e966:	9311      	str	r3, [sp, #68]	@ 0x44
 801e968:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e96a:	bf08      	it	eq
 801e96c:	4613      	moveq	r3, r2
 801e96e:	9308      	str	r3, [sp, #32]
 801e970:	e5df      	b.n	801e532 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e972:	fb08 f505 	mul.w	r5, r8, r5
 801e976:	fb09 5303 	mla	r3, r9, r3, r5
 801e97a:	e65f      	b.n	801e63c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801e97c:	4681      	mov	r9, r0
 801e97e:	e686      	b.n	801e68e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801e980:	f1c1 0210 	rsb	r2, r1, #16
 801e984:	4341      	muls	r1, r0
 801e986:	fb09 1902 	mla	r9, r9, r2, r1
 801e98a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e98e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801e992:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e996:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e99a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801e99e:	ea42 0909 	orr.w	r9, r2, r9
 801e9a2:	fa1f f289 	uxth.w	r2, r9
 801e9a6:	e71b      	b.n	801e7e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801e9a8:	803a      	strh	r2, [r7, #0]
 801e9aa:	e75d      	b.n	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e9ac:	f115 0e01 	adds.w	lr, r5, #1
 801e9b0:	f53f af5a 	bmi.w	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e9b4:	4572      	cmp	r2, lr
 801e9b6:	f6ff af57 	blt.w	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e9ba:	f110 0e01 	adds.w	lr, r0, #1
 801e9be:	f53f af53 	bmi.w	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e9c2:	4573      	cmp	r3, lr
 801e9c4:	f6ff af50 	blt.w	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e9c8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e9ca:	b21b      	sxth	r3, r3
 801e9cc:	b212      	sxth	r2, r2
 801e9ce:	9502      	str	r5, [sp, #8]
 801e9d0:	9301      	str	r3, [sp, #4]
 801e9d2:	9200      	str	r2, [sp, #0]
 801e9d4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801e9d8:	e9cd c405 	strd	ip, r4, [sp, #20]
 801e9dc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 801e9e0:	4639      	mov	r1, r7
 801e9e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e9e4:	f7ff fc02 	bl	801e1ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801e9e8:	e73e      	b.n	801e868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e9ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e9ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e9f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e9f2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801e9f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e9f8:	fa1f fc82 	uxth.w	ip, r2
 801e9fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ea00:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ea02:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801ea06:	141f      	asrs	r7, r3, #16
 801ea08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ea0a:	141b      	asrs	r3, r3, #16
 801ea0c:	fb01 3707 	mla	r7, r1, r7, r3
 801ea10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea12:	eb03 0a07 	add.w	sl, r3, r7
 801ea16:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ea1a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801ea1e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ea22:	b29b      	uxth	r3, r3
 801ea24:	2d00      	cmp	r5, #0
 801ea26:	f000 813d 	beq.w	801eca4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801ea2a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ea2e:	eb0a 0b01 	add.w	fp, sl, r1
 801ea32:	fa1f fa85 	uxth.w	sl, r5
 801ea36:	940f      	str	r4, [sp, #60]	@ 0x3c
 801ea38:	fb0a fc0c 	mul.w	ip, sl, ip
 801ea3c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ea40:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801ea44:	eba0 000c 	sub.w	r0, r0, ip
 801ea48:	9410      	str	r4, [sp, #64]	@ 0x40
 801ea4a:	fa1f fa8a 	uxth.w	sl, sl
 801ea4e:	b280      	uxth	r0, r0
 801ea50:	eba3 030a 	sub.w	r3, r3, sl
 801ea54:	fb08 f000 	mul.w	r0, r8, r0
 801ea58:	b29b      	uxth	r3, r3
 801ea5a:	fb09 0303 	mla	r3, r9, r3, r0
 801ea5e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ea60:	fb0a 3300 	mla	r3, sl, r0, r3
 801ea64:	fb0c 3304 	mla	r3, ip, r4, r3
 801ea68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	f000 810b 	beq.w	801ec88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801ea72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ea74:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ea78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ea7a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801ea7e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801ea82:	f000 8114 	beq.w	801ecae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801ea86:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801ea8a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ea8e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801ea92:	fb0a fc0c 	mul.w	ip, sl, ip
 801ea96:	fb09 f707 	mul.w	r7, r9, r7
 801ea9a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801ea9e:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801eaa2:	f107 0b20 	add.w	fp, r7, #32
 801eaa6:	44cc      	add	ip, r9
 801eaa8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801eaac:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801eab0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eab4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801eab8:	ea4c 0909 	orr.w	r9, ip, r9
 801eabc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801eac0:	8847      	ldrh	r7, [r0, #2]
 801eac2:	d019      	beq.n	801eaf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801eac4:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801eac8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801eacc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801ead0:	fb0a fc0c 	mul.w	ip, sl, ip
 801ead4:	fb08 f807 	mul.w	r8, r8, r7
 801ead8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801eadc:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801eae0:	f108 0b20 	add.w	fp, r8, #32
 801eae4:	44bc      	add	ip, r7
 801eae6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801eaea:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801eaee:	0a3f      	lsrs	r7, r7, #8
 801eaf0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801eaf4:	ea4c 0707 	orr.w	r7, ip, r7
 801eaf8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801eafc:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801eb00:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801eb04:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801eb08:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801eb0c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801eb10:	ea4c 0909 	orr.w	r9, ip, r9
 801eb14:	ea4a 0707 	orr.w	r7, sl, r7
 801eb18:	2d00      	cmp	r5, #0
 801eb1a:	f000 80ca 	beq.w	801ecb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801eb1e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801eb22:	3901      	subs	r1, #1
 801eb24:	0049      	lsls	r1, r1, #1
 801eb26:	3102      	adds	r1, #2
 801eb28:	eb00 0c01 	add.w	ip, r0, r1
 801eb2c:	5a41      	ldrh	r1, [r0, r1]
 801eb2e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801eb30:	28ff      	cmp	r0, #255	@ 0xff
 801eb32:	d019      	beq.n	801eb68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801eb34:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 801eb38:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801eb3a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801eb3e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801eb42:	fb04 fa01 	mul.w	sl, r4, r1
 801eb46:	fb08 f800 	mul.w	r8, r8, r0
 801eb4a:	f10a 0020 	add.w	r0, sl, #32
 801eb4e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801eb52:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801eb56:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801eb5a:	4441      	add	r1, r8
 801eb5c:	0a00      	lsrs	r0, r0, #8
 801eb5e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801eb62:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801eb66:	4301      	orrs	r1, r0
 801eb68:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801eb6a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801eb6e:	2cff      	cmp	r4, #255	@ 0xff
 801eb70:	d01a      	beq.n	801eba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801eb72:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 801eb76:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801eb7a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801eb7e:	fb04 fa00 	mul.w	sl, r4, r0
 801eb82:	fb08 f80c 	mul.w	r8, r8, ip
 801eb86:	f10a 0c20 	add.w	ip, sl, #32
 801eb8a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801eb8e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801eb92:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801eb96:	4440      	add	r0, r8
 801eb98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb9c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801eba0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801eba4:	ea40 000c 	orr.w	r0, r0, ip
 801eba8:	fb15 fc02 	smulbb	ip, r5, r2
 801ebac:	f1c5 0810 	rsb	r8, r5, #16
 801ebb0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ebb4:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801ebb8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801ebbc:	eba8 0802 	sub.w	r8, r8, r2
 801ebc0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ebc4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801ebc8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801ebcc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801ebd0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801ebd4:	ea4a 0101 	orr.w	r1, sl, r1
 801ebd8:	437a      	muls	r2, r7
 801ebda:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801ebde:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801ebe2:	fb09 2208 	mla	r2, r9, r8, r2
 801ebe6:	ea4b 0000 	orr.w	r0, fp, r0
 801ebea:	fb05 2201 	mla	r2, r5, r1, r2
 801ebee:	fb0c 2200 	mla	r2, ip, r0, r2
 801ebf2:	0d57      	lsrs	r7, r2, #21
 801ebf4:	0952      	lsrs	r2, r2, #5
 801ebf6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801ebfa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ebfe:	433a      	orrs	r2, r7
 801ec00:	2bff      	cmp	r3, #255	@ 0xff
 801ec02:	b292      	uxth	r2, r2
 801ec04:	d102      	bne.n	801ec0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801ec06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ec08:	29ff      	cmp	r1, #255	@ 0xff
 801ec0a:	d063      	beq.n	801ecd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801ec0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ec0e:	1215      	asrs	r5, r2, #8
 801ec10:	f8be 1000 	ldrh.w	r1, [lr]
 801ec14:	4343      	muls	r3, r0
 801ec16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ec18:	10cf      	asrs	r7, r1, #3
 801ec1a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801ec1e:	1c58      	adds	r0, r3, #1
 801ec20:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ec24:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801ec28:	1208      	asrs	r0, r1, #8
 801ec2a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801ec2e:	00c9      	lsls	r1, r1, #3
 801ec30:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801ec34:	b2db      	uxtb	r3, r3
 801ec36:	b2c9      	uxtb	r1, r1
 801ec38:	fb10 f003 	smulbb	r0, r0, r3
 801ec3c:	fb11 f103 	smulbb	r1, r1, r3
 801ec40:	fb05 0504 	mla	r5, r5, r4, r0
 801ec44:	10d0      	asrs	r0, r2, #3
 801ec46:	fb17 f703 	smulbb	r7, r7, r3
 801ec4a:	00d2      	lsls	r2, r2, #3
 801ec4c:	b2ad      	uxth	r5, r5
 801ec4e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801ec52:	b2d2      	uxtb	r2, r2
 801ec54:	fb00 7004 	mla	r0, r0, r4, r7
 801ec58:	1c6b      	adds	r3, r5, #1
 801ec5a:	fb02 1204 	mla	r2, r2, r4, r1
 801ec5e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ec62:	b292      	uxth	r2, r2
 801ec64:	b280      	uxth	r0, r0
 801ec66:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801ec6a:	1c57      	adds	r7, r2, #1
 801ec6c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ec70:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ec74:	433d      	orrs	r5, r7
 801ec76:	1c47      	adds	r7, r0, #1
 801ec78:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801ec7c:	097f      	lsrs	r7, r7, #5
 801ec7e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801ec82:	433d      	orrs	r5, r7
 801ec84:	f8ae 5000 	strh.w	r5, [lr]
 801ec88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ec8a:	f10e 0e02 	add.w	lr, lr, #2
 801ec8e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ec90:	4413      	add	r3, r2
 801ec92:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ec94:	9321      	str	r3, [sp, #132]	@ 0x84
 801ec96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec98:	441a      	add	r2, r3
 801ec9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ec9c:	3b01      	subs	r3, #1
 801ec9e:	9222      	str	r2, [sp, #136]	@ 0x88
 801eca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eca2:	e61c      	b.n	801e8de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801eca4:	fb08 f000 	mul.w	r0, r8, r0
 801eca8:	fb09 0303 	mla	r3, r9, r3, r0
 801ecac:	e6dc      	b.n	801ea68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801ecae:	46b9      	mov	r9, r7
 801ecb0:	e704      	b.n	801eabc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801ecb2:	f1c2 0110 	rsb	r1, r2, #16
 801ecb6:	437a      	muls	r2, r7
 801ecb8:	fb09 2901 	mla	r9, r9, r1, r2
 801ecbc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ecc0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801ecc4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801ecc8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801eccc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ecd0:	4302      	orrs	r2, r0
 801ecd2:	e795      	b.n	801ec00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801ecd4:	f8ae 2000 	strh.w	r2, [lr]
 801ecd8:	e7d6      	b.n	801ec88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801ecda:	b017      	add	sp, #92	@ 0x5c
 801ecdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ece0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ece4:	b085      	sub	sp, #20
 801ece6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801ecea:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 801ecee:	2800      	cmp	r0, #0
 801ecf0:	9103      	str	r1, [sp, #12]
 801ecf2:	fb00 7406 	mla	r4, r0, r6, r7
 801ecf6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 801ecfa:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 801ecfe:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801ed02:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 801ed06:	eb02 0904 	add.w	r9, r2, r4
 801ed0a:	9501      	str	r5, [sp, #4]
 801ed0c:	f2c0 8141 	blt.w	801ef92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801ed10:	4583      	cmp	fp, r0
 801ed12:	f340 813e 	ble.w	801ef92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801ed16:	2f00      	cmp	r7, #0
 801ed18:	f2c0 8137 	blt.w	801ef8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801ed1c:	42be      	cmp	r6, r7
 801ed1e:	f340 8134 	ble.w	801ef8a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801ed22:	f812 c004 	ldrb.w	ip, [r2, r4]
 801ed26:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801ed2a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 801ed2e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ed32:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 801ed36:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ed3a:	4355      	muls	r5, r2
 801ed3c:	fb0c f203 	mul.w	r2, ip, r3
 801ed40:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801ed44:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 801ed48:	441d      	add	r5, r3
 801ed4a:	f102 0320 	add.w	r3, r2, #32
 801ed4e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ed52:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801ed56:	0a1b      	lsrs	r3, r3, #8
 801ed58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ed5c:	431c      	orrs	r4, r3
 801ed5e:	1c7b      	adds	r3, r7, #1
 801ed60:	f100 811c 	bmi.w	801ef9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801ed64:	429e      	cmp	r6, r3
 801ed66:	f340 8119 	ble.w	801ef9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801ed6a:	2900      	cmp	r1, #0
 801ed6c:	f000 8119 	beq.w	801efa2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801ed70:	9a01      	ldr	r2, [sp, #4]
 801ed72:	f899 3001 	ldrb.w	r3, [r9, #1]
 801ed76:	8855      	ldrh	r5, [r2, #2]
 801ed78:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801ed7c:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 801ed80:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ed84:	fb08 f802 	mul.w	r8, r8, r2
 801ed88:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 801ed8c:	435d      	muls	r5, r3
 801ed8e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801ed92:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801ed96:	44d0      	add	r8, sl
 801ed98:	f105 0a20 	add.w	sl, r5, #32
 801ed9c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801eda0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801eda4:	0a2d      	lsrs	r5, r5, #8
 801eda6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801edaa:	432a      	orrs	r2, r5
 801edac:	3001      	adds	r0, #1
 801edae:	f100 80fe 	bmi.w	801efae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801edb2:	4583      	cmp	fp, r0
 801edb4:	f340 80fb 	ble.w	801efae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801edb8:	f1be 0f00 	cmp.w	lr, #0
 801edbc:	f000 80fc 	beq.w	801efb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801edc0:	2f00      	cmp	r7, #0
 801edc2:	f2c0 80f1 	blt.w	801efa8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801edc6:	42be      	cmp	r6, r7
 801edc8:	f340 80ee 	ble.w	801efa8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801edcc:	9801      	ldr	r0, [sp, #4]
 801edce:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 801edd2:	f819 5006 	ldrb.w	r5, [r9, r6]
 801edd6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801edda:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801edde:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 801ede2:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801ede6:	fb0a fa00 	mul.w	sl, sl, r0
 801edea:	fb05 f808 	mul.w	r8, r5, r8
 801edee:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801edf2:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 801edf6:	4482      	add	sl, r0
 801edf8:	f108 0020 	add.w	r0, r8, #32
 801edfc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ee00:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801ee04:	0a00      	lsrs	r0, r0, #8
 801ee06:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ee0a:	ea4b 0b00 	orr.w	fp, fp, r0
 801ee0e:	3701      	adds	r7, #1
 801ee10:	f100 80d7 	bmi.w	801efc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801ee14:	42be      	cmp	r6, r7
 801ee16:	f340 80d4 	ble.w	801efc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801ee1a:	2900      	cmp	r1, #0
 801ee1c:	f000 80d4 	beq.w	801efc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801ee20:	3601      	adds	r6, #1
 801ee22:	9801      	ldr	r0, [sp, #4]
 801ee24:	f819 7006 	ldrb.w	r7, [r9, r6]
 801ee28:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801ee2c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801ee30:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 801ee34:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ee38:	fb09 f906 	mul.w	r9, r9, r6
 801ee3c:	fb07 f800 	mul.w	r8, r7, r0
 801ee40:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 801ee44:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801ee48:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 801ee4c:	44d1      	add	r9, sl
 801ee4e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801ee52:	f108 0020 	add.w	r0, r8, #32
 801ee56:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801ee5a:	0a00      	lsrs	r0, r0, #8
 801ee5c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ee60:	4330      	orrs	r0, r6
 801ee62:	b28e      	uxth	r6, r1
 801ee64:	fa1f f98e 	uxth.w	r9, lr
 801ee68:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801ee6c:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 801ee70:	fb06 f809 	mul.w	r8, r6, r9
 801ee74:	0136      	lsls	r6, r6, #4
 801ee76:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801ee7a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801ee7e:	9601      	str	r6, [sp, #4]
 801ee80:	ea4a 0404 	orr.w	r4, sl, r4
 801ee84:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ee88:	fa1f f689 	uxth.w	r6, r9
 801ee8c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ee90:	fb11 f90e 	smulbb	r9, r1, lr
 801ee94:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801ee98:	9602      	str	r6, [sp, #8]
 801ee9a:	4626      	mov	r6, r4
 801ee9c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801eea0:	f1ce 0410 	rsb	r4, lr, #16
 801eea4:	ea4a 0202 	orr.w	r2, sl, r2
 801eea8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801eeac:	1a64      	subs	r4, r4, r1
 801eeae:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801eeb2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801eeb6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801eeba:	434a      	muls	r2, r1
 801eebc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801eec0:	ea4a 0000 	orr.w	r0, sl, r0
 801eec4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801eec8:	fb04 2406 	mla	r4, r4, r6, r2
 801eecc:	9903      	ldr	r1, [sp, #12]
 801eece:	fb09 4200 	mla	r2, r9, r0, r4
 801eed2:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801eed6:	9801      	ldr	r0, [sp, #4]
 801eed8:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801eedc:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801eee0:	8809      	ldrh	r1, [r1, #0]
 801eee2:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 801eee6:	ea44 0b0b 	orr.w	fp, r4, fp
 801eeea:	9c02      	ldr	r4, [sp, #8]
 801eeec:	1b00      	subs	r0, r0, r4
 801eeee:	9c01      	ldr	r4, [sp, #4]
 801eef0:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801eef4:	eba4 0608 	sub.w	r6, r4, r8
 801eef8:	b280      	uxth	r0, r0
 801eefa:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801eefe:	b2b6      	uxth	r6, r6
 801ef00:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ef04:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ef08:	4373      	muls	r3, r6
 801ef0a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801ef0e:	fb0c 3300 	mla	r3, ip, r0, r3
 801ef12:	9802      	ldr	r0, [sp, #8]
 801ef14:	ea42 0e0e 	orr.w	lr, r2, lr
 801ef18:	fb00 3505 	mla	r5, r0, r5, r3
 801ef1c:	120b      	asrs	r3, r1, #8
 801ef1e:	10c8      	asrs	r0, r1, #3
 801ef20:	fb08 5707 	mla	r7, r8, r7, r5
 801ef24:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801ef28:	00c9      	lsls	r1, r1, #3
 801ef2a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801ef2e:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801ef32:	fa1f f28e 	uxth.w	r2, lr
 801ef36:	b2c9      	uxtb	r1, r1
 801ef38:	b2ff      	uxtb	r7, r7
 801ef3a:	437b      	muls	r3, r7
 801ef3c:	4378      	muls	r0, r7
 801ef3e:	434f      	muls	r7, r1
 801ef40:	1c59      	adds	r1, r3, #1
 801ef42:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ef46:	1213      	asrs	r3, r2, #8
 801ef48:	f023 0307 	bic.w	r3, r3, #7
 801ef4c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ef50:	1c41      	adds	r1, r0, #1
 801ef52:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801ef56:	10d1      	asrs	r1, r2, #3
 801ef58:	021b      	lsls	r3, r3, #8
 801ef5a:	f021 0103 	bic.w	r1, r1, #3
 801ef5e:	00d2      	lsls	r2, r2, #3
 801ef60:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801ef64:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801ef68:	00c9      	lsls	r1, r1, #3
 801ef6a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ef6e:	430b      	orrs	r3, r1
 801ef70:	1c79      	adds	r1, r7, #1
 801ef72:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ef76:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801ef7a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ef7e:	431a      	orrs	r2, r3
 801ef80:	9b03      	ldr	r3, [sp, #12]
 801ef82:	801a      	strh	r2, [r3, #0]
 801ef84:	b005      	add	sp, #20
 801ef86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef8a:	f04f 0c00 	mov.w	ip, #0
 801ef8e:	4664      	mov	r4, ip
 801ef90:	e6e5      	b.n	801ed5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801ef92:	2300      	movs	r3, #0
 801ef94:	469c      	mov	ip, r3
 801ef96:	461a      	mov	r2, r3
 801ef98:	461c      	mov	r4, r3
 801ef9a:	e707      	b.n	801edac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	461a      	mov	r2, r3
 801efa0:	e704      	b.n	801edac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801efa2:	460b      	mov	r3, r1
 801efa4:	460a      	mov	r2, r1
 801efa6:	e701      	b.n	801edac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801efa8:	2500      	movs	r5, #0
 801efaa:	46ab      	mov	fp, r5
 801efac:	e72f      	b.n	801ee0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801efae:	2700      	movs	r7, #0
 801efb0:	463d      	mov	r5, r7
 801efb2:	4638      	mov	r0, r7
 801efb4:	46bb      	mov	fp, r7
 801efb6:	e754      	b.n	801ee62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801efb8:	4677      	mov	r7, lr
 801efba:	4675      	mov	r5, lr
 801efbc:	4670      	mov	r0, lr
 801efbe:	46f3      	mov	fp, lr
 801efc0:	e74f      	b.n	801ee62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801efc2:	2700      	movs	r7, #0
 801efc4:	4638      	mov	r0, r7
 801efc6:	e74c      	b.n	801ee62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801efc8:	460f      	mov	r7, r1
 801efca:	4608      	mov	r0, r1
 801efcc:	e749      	b.n	801ee62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801efd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd4:	b093      	sub	sp, #76	@ 0x4c
 801efd6:	9210      	str	r2, [sp, #64]	@ 0x40
 801efd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801efda:	9011      	str	r0, [sp, #68]	@ 0x44
 801efdc:	910e      	str	r1, [sp, #56]	@ 0x38
 801efde:	6850      	ldr	r0, [r2, #4]
 801efe0:	9306      	str	r3, [sp, #24]
 801efe2:	6812      	ldr	r2, [r2, #0]
 801efe4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801efe8:	fb00 1303 	mla	r3, r0, r3, r1
 801efec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eff0:	9307      	str	r3, [sp, #28]
 801eff2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	9308      	str	r3, [sp, #32]
 801eff8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801effa:	685b      	ldr	r3, [r3, #4]
 801effc:	9309      	str	r3, [sp, #36]	@ 0x24
 801effe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f000:	2b00      	cmp	r3, #0
 801f002:	dc03      	bgt.n	801f00c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f004:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f006:	2b00      	cmp	r3, #0
 801f008:	f340 83b6 	ble.w	801f778 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801f00c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f00e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f012:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f016:	1e48      	subs	r0, r1, #1
 801f018:	1e55      	subs	r5, r2, #1
 801f01a:	9b06      	ldr	r3, [sp, #24]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	f340 8165 	ble.w	801f2ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f022:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801f024:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f026:	1436      	asrs	r6, r6, #16
 801f028:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f02c:	d406      	bmi.n	801f03c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f02e:	4286      	cmp	r6, r0
 801f030:	da04      	bge.n	801f03c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f032:	2b00      	cmp	r3, #0
 801f034:	db02      	blt.n	801f03c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f036:	42ab      	cmp	r3, r5
 801f038:	f2c0 8159 	blt.w	801f2ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f03c:	3601      	adds	r6, #1
 801f03e:	f100 8146 	bmi.w	801f2ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f042:	42b1      	cmp	r1, r6
 801f044:	f2c0 8143 	blt.w	801f2ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f048:	3301      	adds	r3, #1
 801f04a:	f100 8140 	bmi.w	801f2ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f04e:	429a      	cmp	r2, r3
 801f050:	f2c0 813d 	blt.w	801f2ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801f054:	9b06      	ldr	r3, [sp, #24]
 801f056:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801f05a:	9f07      	ldr	r7, [sp, #28]
 801f05c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f05e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f060:	2b00      	cmp	r3, #0
 801f062:	f340 8166 	ble.w	801f332 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801f066:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f068:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f06a:	1418      	asrs	r0, r3, #16
 801f06c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f06e:	142d      	asrs	r5, r5, #16
 801f070:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f074:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f076:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f07a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f07c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f080:	f100 81f0 	bmi.w	801f464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f084:	f102 3eff 	add.w	lr, r2, #4294967295
 801f088:	4575      	cmp	r5, lr
 801f08a:	f280 81eb 	bge.w	801f464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f08e:	2800      	cmp	r0, #0
 801f090:	f2c0 81e8 	blt.w	801f464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f094:	f103 3eff 	add.w	lr, r3, #4294967295
 801f098:	4570      	cmp	r0, lr
 801f09a:	f280 81e3 	bge.w	801f464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801f09e:	b212      	sxth	r2, r2
 801f0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0a2:	fa1f fe81 	uxth.w	lr, r1
 801f0a6:	fb00 5002 	mla	r0, r0, r2, r5
 801f0aa:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f0ae:	eb03 0a00 	add.w	sl, r3, r0
 801f0b2:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f0b6:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 801f0ba:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f0be:	b29b      	uxth	r3, r3
 801f0c0:	f1bc 0f00 	cmp.w	ip, #0
 801f0c4:	f000 817b 	beq.w	801f3be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f0c8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f0cc:	eb0a 0b02 	add.w	fp, sl, r2
 801f0d0:	fa1f fa8c 	uxth.w	sl, ip
 801f0d4:	940a      	str	r4, [sp, #40]	@ 0x28
 801f0d6:	fb0a fe0e 	mul.w	lr, sl, lr
 801f0da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f0de:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f0e2:	eba5 050e 	sub.w	r5, r5, lr
 801f0e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f0e8:	fa1f fa8a 	uxth.w	sl, sl
 801f0ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f0ee:	b2ad      	uxth	r5, r5
 801f0f0:	eba3 030a 	sub.w	r3, r3, sl
 801f0f4:	fb08 f505 	mul.w	r5, r8, r5
 801f0f8:	b29b      	uxth	r3, r3
 801f0fa:	fb09 5303 	mla	r3, r9, r3, r5
 801f0fe:	fb0a 3304 	mla	r3, sl, r4, r3
 801f102:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f104:	fb0e 3304 	mla	r3, lr, r4, r3
 801f108:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	f000 80d1 	beq.w	801f2b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f112:	9c08      	ldr	r4, [sp, #32]
 801f114:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f118:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f11c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f120:	f000 8152 	beq.w	801f3c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801f124:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801f128:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f12c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f130:	fb0a fe0e 	mul.w	lr, sl, lr
 801f134:	fb09 f000 	mul.w	r0, r9, r0
 801f138:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f13c:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801f140:	f100 0b20 	add.w	fp, r0, #32
 801f144:	44ce      	add	lr, r9
 801f146:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f14a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f14e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f152:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f156:	ea4e 0909 	orr.w	r9, lr, r9
 801f15a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f15e:	8868      	ldrh	r0, [r5, #2]
 801f160:	d019      	beq.n	801f196 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801f162:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 801f166:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f16a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f16e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f172:	fb08 f800 	mul.w	r8, r8, r0
 801f176:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f17a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 801f17e:	f108 0b20 	add.w	fp, r8, #32
 801f182:	4486      	add	lr, r0
 801f184:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f188:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f18c:	0a00      	lsrs	r0, r0, #8
 801f18e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f192:	ea4e 0000 	orr.w	r0, lr, r0
 801f196:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f19a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801f19e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f1a2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801f1a6:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801f1aa:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f1ae:	ea4e 0909 	orr.w	r9, lr, r9
 801f1b2:	ea4a 0000 	orr.w	r0, sl, r0
 801f1b6:	f1bc 0f00 	cmp.w	ip, #0
 801f1ba:	f000 8107 	beq.w	801f3cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f1be:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 801f1c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f1c4:	3a01      	subs	r2, #1
 801f1c6:	2cff      	cmp	r4, #255	@ 0xff
 801f1c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f1cc:	f102 0202 	add.w	r2, r2, #2
 801f1d0:	eb05 0e02 	add.w	lr, r5, r2
 801f1d4:	5aaa      	ldrh	r2, [r5, r2]
 801f1d6:	d018      	beq.n	801f20a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801f1d8:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 801f1dc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f1e0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f1e4:	fb04 fa02 	mul.w	sl, r4, r2
 801f1e8:	fb08 f805 	mul.w	r8, r8, r5
 801f1ec:	f10a 0520 	add.w	r5, sl, #32
 801f1f0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f1f4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f1f8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f1fc:	4442      	add	r2, r8
 801f1fe:	0a2d      	lsrs	r5, r5, #8
 801f200:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f204:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f208:	432a      	orrs	r2, r5
 801f20a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f20c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f210:	2cff      	cmp	r4, #255	@ 0xff
 801f212:	d01a      	beq.n	801f24a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f214:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 801f218:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f21c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f220:	fb04 fa05 	mul.w	sl, r4, r5
 801f224:	fb08 f80e 	mul.w	r8, r8, lr
 801f228:	f10a 0e20 	add.w	lr, sl, #32
 801f22c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f230:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f234:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f238:	4445      	add	r5, r8
 801f23a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f23e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f242:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 801f246:	ea45 050e 	orr.w	r5, r5, lr
 801f24a:	fb1c fe01 	smulbb	lr, ip, r1
 801f24e:	f1cc 0810 	rsb	r8, ip, #16
 801f252:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f256:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f25a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f25e:	eba8 0801 	sub.w	r8, r8, r1
 801f262:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f266:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f26a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f26e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801f272:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f276:	ea4a 0202 	orr.w	r2, sl, r2
 801f27a:	4341      	muls	r1, r0
 801f27c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f280:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801f284:	fb09 1108 	mla	r1, r9, r8, r1
 801f288:	ea4b 0505 	orr.w	r5, fp, r5
 801f28c:	fb0c 1102 	mla	r1, ip, r2, r1
 801f290:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f294:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f298:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f29c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f2a0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801f2a4:	ea42 0e0e 	orr.w	lr, r2, lr
 801f2a8:	fa1f f28e 	uxth.w	r2, lr
 801f2ac:	2bff      	cmp	r3, #255	@ 0xff
 801f2ae:	f040 80a1 	bne.w	801f3f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801f2b2:	803a      	strh	r2, [r7, #0]
 801f2b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f2b6:	3702      	adds	r7, #2
 801f2b8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f2ba:	4413      	add	r3, r2
 801f2bc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f2be:	931d      	str	r3, [sp, #116]	@ 0x74
 801f2c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f2c2:	441a      	add	r2, r3
 801f2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2c6:	3b01      	subs	r3, #1
 801f2c8:	921e      	str	r2, [sp, #120]	@ 0x78
 801f2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f2cc:	e6c7      	b.n	801f05e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f2ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f2d0:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801f2d2:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 801f2d4:	4433      	add	r3, r6
 801f2d6:	931d      	str	r3, [sp, #116]	@ 0x74
 801f2d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f2da:	441c      	add	r4, r3
 801f2dc:	9b06      	ldr	r3, [sp, #24]
 801f2de:	3b01      	subs	r3, #1
 801f2e0:	941e      	str	r4, [sp, #120]	@ 0x78
 801f2e2:	9306      	str	r3, [sp, #24]
 801f2e4:	9b07      	ldr	r3, [sp, #28]
 801f2e6:	3302      	adds	r3, #2
 801f2e8:	9307      	str	r3, [sp, #28]
 801f2ea:	e696      	b.n	801f01a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f2ec:	d028      	beq.n	801f340 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f2ee:	9b06      	ldr	r3, [sp, #24]
 801f2f0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801f2f2:	3b01      	subs	r3, #1
 801f2f4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f2f6:	fb00 5003 	mla	r0, r0, r3, r5
 801f2fa:	1400      	asrs	r0, r0, #16
 801f2fc:	f53f aeaa 	bmi.w	801f054 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f300:	3901      	subs	r1, #1
 801f302:	4288      	cmp	r0, r1
 801f304:	f6bf aea6 	bge.w	801f054 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f308:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801f30a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f30c:	fb01 0303 	mla	r3, r1, r3, r0
 801f310:	141b      	asrs	r3, r3, #16
 801f312:	f53f ae9f 	bmi.w	801f054 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f316:	3a01      	subs	r2, #1
 801f318:	4293      	cmp	r3, r2
 801f31a:	f6bf ae9b 	bge.w	801f054 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f31e:	9b06      	ldr	r3, [sp, #24]
 801f320:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 801f324:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801f328:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f32a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	f300 80b6 	bgt.w	801f49e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801f332:	9b06      	ldr	r3, [sp, #24]
 801f334:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f338:	9b07      	ldr	r3, [sp, #28]
 801f33a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f33e:	9307      	str	r3, [sp, #28]
 801f340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f342:	2b00      	cmp	r3, #0
 801f344:	f340 8218 	ble.w	801f778 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801f348:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f34c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f34e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f352:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f356:	eef0 6a62 	vmov.f32	s13, s5
 801f35a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f35e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f362:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f366:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801f36a:	eef0 6a43 	vmov.f32	s13, s6
 801f36e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f372:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801f376:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f37a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f37e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f382:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f386:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f38a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f38e:	ee12 2a90 	vmov	r2, s5
 801f392:	eef0 2a47 	vmov.f32	s5, s14
 801f396:	fb92 f3f3 	sdiv	r3, r2, r3
 801f39a:	ee13 2a10 	vmov	r2, s6
 801f39e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f3a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f3a2:	eeb0 3a67 	vmov.f32	s6, s15
 801f3a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3aa:	9320      	str	r3, [sp, #128]	@ 0x80
 801f3ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f3b0:	3b01      	subs	r3, #1
 801f3b2:	930e      	str	r3, [sp, #56]	@ 0x38
 801f3b4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f3b6:	bf08      	it	eq
 801f3b8:	4613      	moveq	r3, r2
 801f3ba:	9306      	str	r3, [sp, #24]
 801f3bc:	e61f      	b.n	801effe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f3be:	fb08 f505 	mul.w	r5, r8, r5
 801f3c2:	fb09 5303 	mla	r3, r9, r3, r5
 801f3c6:	e69f      	b.n	801f108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f3c8:	4681      	mov	r9, r0
 801f3ca:	e6c6      	b.n	801f15a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f3cc:	f1c1 0210 	rsb	r2, r1, #16
 801f3d0:	4341      	muls	r1, r0
 801f3d2:	fb09 1902 	mla	r9, r9, r2, r1
 801f3d6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f3da:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f3de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f3e2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f3e6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801f3ea:	ea42 0909 	orr.w	r9, r2, r9
 801f3ee:	fa1f f289 	uxth.w	r2, r9
 801f3f2:	e75b      	b.n	801f2ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 801f3f4:	f8b7 c000 	ldrh.w	ip, [r7]
 801f3f8:	43db      	mvns	r3, r3
 801f3fa:	ea4f 202c 	mov.w	r0, ip, asr #8
 801f3fe:	fa5f fe83 	uxtb.w	lr, r3
 801f402:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f406:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f40a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801f40e:	fb00 f00e 	mul.w	r0, r0, lr
 801f412:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f416:	b2db      	uxtb	r3, r3
 801f418:	1c41      	adds	r1, r0, #1
 801f41a:	fb05 f50e 	mul.w	r5, r5, lr
 801f41e:	fb03 f30e 	mul.w	r3, r3, lr
 801f422:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801f426:	1211      	asrs	r1, r2, #8
 801f428:	f021 0107 	bic.w	r1, r1, #7
 801f42c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f430:	48d3      	ldr	r0, [pc, #844]	@ (801f780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801f432:	b2c9      	uxtb	r1, r1
 801f434:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801f438:	1c69      	adds	r1, r5, #1
 801f43a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f43e:	10d1      	asrs	r1, r2, #3
 801f440:	00d2      	lsls	r2, r2, #3
 801f442:	f021 0103 	bic.w	r1, r1, #3
 801f446:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f44a:	00c9      	lsls	r1, r1, #3
 801f44c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f450:	4301      	orrs	r1, r0
 801f452:	1c58      	adds	r0, r3, #1
 801f454:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f458:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f45c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f460:	430a      	orrs	r2, r1
 801f462:	e726      	b.n	801f2b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801f464:	f115 0e01 	adds.w	lr, r5, #1
 801f468:	f53f af24 	bmi.w	801f2b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f46c:	4572      	cmp	r2, lr
 801f46e:	f6ff af21 	blt.w	801f2b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f472:	f110 0e01 	adds.w	lr, r0, #1
 801f476:	f53f af1d 	bmi.w	801f2b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f47a:	4573      	cmp	r3, lr
 801f47c:	f6ff af1a 	blt.w	801f2b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f480:	b21b      	sxth	r3, r3
 801f482:	b212      	sxth	r2, r2
 801f484:	9301      	str	r3, [sp, #4]
 801f486:	9200      	str	r2, [sp, #0]
 801f488:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801f48c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801f490:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801f494:	4639      	mov	r1, r7
 801f496:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f498:	f7ff fc22 	bl	801ece0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f49c:	e70a      	b.n	801f2b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f49e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f4a0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f4a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f4a6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f4aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f4ac:	fa1f fc82 	uxth.w	ip, r2
 801f4b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f4b4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f4b6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f4ba:	141f      	asrs	r7, r3, #16
 801f4bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f4be:	141b      	asrs	r3, r3, #16
 801f4c0:	fb01 3707 	mla	r7, r1, r7, r3
 801f4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4c6:	eb03 0a07 	add.w	sl, r3, r7
 801f4ca:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f4ce:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801f4d2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f4d6:	b29b      	uxth	r3, r3
 801f4d8:	2d00      	cmp	r5, #0
 801f4da:	f000 80fe 	beq.w	801f6da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 801f4de:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f4e2:	eb0a 0b01 	add.w	fp, sl, r1
 801f4e6:	fa1f fa85 	uxth.w	sl, r5
 801f4ea:	940c      	str	r4, [sp, #48]	@ 0x30
 801f4ec:	fb0a fc0c 	mul.w	ip, sl, ip
 801f4f0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f4f4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f4f8:	eba0 000c 	sub.w	r0, r0, ip
 801f4fc:	940d      	str	r4, [sp, #52]	@ 0x34
 801f4fe:	fa1f fa8a 	uxth.w	sl, sl
 801f502:	b280      	uxth	r0, r0
 801f504:	eba3 030a 	sub.w	r3, r3, sl
 801f508:	fb08 f000 	mul.w	r0, r8, r0
 801f50c:	b29b      	uxth	r3, r3
 801f50e:	fb09 0303 	mla	r3, r9, r3, r0
 801f512:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f514:	fb0a 3300 	mla	r3, sl, r0, r3
 801f518:	fb0c 3304 	mla	r3, ip, r4, r3
 801f51c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f520:	2b00      	cmp	r3, #0
 801f522:	f000 80cc 	beq.w	801f6be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801f526:	9808      	ldr	r0, [sp, #32]
 801f528:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f52c:	9c08      	ldr	r4, [sp, #32]
 801f52e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f532:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f536:	f000 80d5 	beq.w	801f6e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801f53a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801f53e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f542:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f546:	fb0a fc0c 	mul.w	ip, sl, ip
 801f54a:	fb09 f707 	mul.w	r7, r9, r7
 801f54e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f552:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801f556:	f107 0b20 	add.w	fp, r7, #32
 801f55a:	44cc      	add	ip, r9
 801f55c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f560:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f564:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f568:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f56c:	ea4c 0909 	orr.w	r9, ip, r9
 801f570:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f574:	8847      	ldrh	r7, [r0, #2]
 801f576:	d019      	beq.n	801f5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 801f578:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 801f57c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f580:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f584:	fb0a fc0c 	mul.w	ip, sl, ip
 801f588:	fb08 f807 	mul.w	r8, r8, r7
 801f58c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f590:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 801f594:	f108 0b20 	add.w	fp, r8, #32
 801f598:	44bc      	add	ip, r7
 801f59a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f59e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f5a2:	0a3f      	lsrs	r7, r7, #8
 801f5a4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f5a8:	ea4c 0707 	orr.w	r7, ip, r7
 801f5ac:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f5b0:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 801f5b4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f5b8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801f5bc:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 801f5c0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f5c4:	ea4c 0909 	orr.w	r9, ip, r9
 801f5c8:	ea4a 0707 	orr.w	r7, sl, r7
 801f5cc:	2d00      	cmp	r5, #0
 801f5ce:	f000 808b 	beq.w	801f6e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f5d2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801f5d6:	3901      	subs	r1, #1
 801f5d8:	0049      	lsls	r1, r1, #1
 801f5da:	3102      	adds	r1, #2
 801f5dc:	eb00 0c01 	add.w	ip, r0, r1
 801f5e0:	5a41      	ldrh	r1, [r0, r1]
 801f5e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f5e4:	28ff      	cmp	r0, #255	@ 0xff
 801f5e6:	d019      	beq.n	801f61c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801f5e8:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 801f5ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f5ee:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f5f2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f5f6:	fb04 fa01 	mul.w	sl, r4, r1
 801f5fa:	fb08 f800 	mul.w	r8, r8, r0
 801f5fe:	f10a 0020 	add.w	r0, sl, #32
 801f602:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f606:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f60a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f60e:	4441      	add	r1, r8
 801f610:	0a00      	lsrs	r0, r0, #8
 801f612:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f616:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f61a:	4301      	orrs	r1, r0
 801f61c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f61e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f622:	2cff      	cmp	r4, #255	@ 0xff
 801f624:	d01a      	beq.n	801f65c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 801f626:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 801f62a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f62e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f632:	fb04 fa00 	mul.w	sl, r4, r0
 801f636:	fb08 f80c 	mul.w	r8, r8, ip
 801f63a:	f10a 0c20 	add.w	ip, sl, #32
 801f63e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f642:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 801f646:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f64a:	4440      	add	r0, r8
 801f64c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f650:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f654:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801f658:	ea40 000c 	orr.w	r0, r0, ip
 801f65c:	fb15 fc02 	smulbb	ip, r5, r2
 801f660:	f1c5 0810 	rsb	r8, r5, #16
 801f664:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f668:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801f66c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f670:	eba8 0802 	sub.w	r8, r8, r2
 801f674:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f678:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801f67c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f680:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801f684:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f688:	ea4a 0101 	orr.w	r1, sl, r1
 801f68c:	437a      	muls	r2, r7
 801f68e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f692:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801f696:	fb09 2208 	mla	r2, r9, r8, r2
 801f69a:	ea4b 0000 	orr.w	r0, fp, r0
 801f69e:	fb05 2201 	mla	r2, r5, r1, r2
 801f6a2:	fb0c 2200 	mla	r2, ip, r0, r2
 801f6a6:	0d57      	lsrs	r7, r2, #21
 801f6a8:	0952      	lsrs	r2, r2, #5
 801f6aa:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 801f6ae:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f6b2:	433a      	orrs	r2, r7
 801f6b4:	2bff      	cmp	r3, #255	@ 0xff
 801f6b6:	b292      	uxth	r2, r2
 801f6b8:	d127      	bne.n	801f70a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 801f6ba:	f8ae 2000 	strh.w	r2, [lr]
 801f6be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f6c0:	f10e 0e02 	add.w	lr, lr, #2
 801f6c4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f6c6:	4413      	add	r3, r2
 801f6c8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f6ca:	931d      	str	r3, [sp, #116]	@ 0x74
 801f6cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f6ce:	441a      	add	r2, r3
 801f6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6d2:	3b01      	subs	r3, #1
 801f6d4:	921e      	str	r2, [sp, #120]	@ 0x78
 801f6d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f6d8:	e627      	b.n	801f32a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801f6da:	fb08 f000 	mul.w	r0, r8, r0
 801f6de:	fb09 0303 	mla	r3, r9, r3, r0
 801f6e2:	e71b      	b.n	801f51c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 801f6e4:	46b9      	mov	r9, r7
 801f6e6:	e743      	b.n	801f570 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 801f6e8:	f1c2 0110 	rsb	r1, r2, #16
 801f6ec:	437a      	muls	r2, r7
 801f6ee:	fb09 2901 	mla	r9, r9, r1, r2
 801f6f2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f6f6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801f6fa:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801f6fe:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f702:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f706:	4302      	orrs	r2, r0
 801f708:	e7d4      	b.n	801f6b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 801f70a:	f8be 7000 	ldrh.w	r7, [lr]
 801f70e:	43db      	mvns	r3, r3
 801f710:	4c1b      	ldr	r4, [pc, #108]	@ (801f780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 801f712:	1238      	asrs	r0, r7, #8
 801f714:	fa5f fc83 	uxtb.w	ip, r3
 801f718:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f71c:	10fd      	asrs	r5, r7, #3
 801f71e:	00fb      	lsls	r3, r7, #3
 801f720:	fb00 f00c 	mul.w	r0, r0, ip
 801f724:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f728:	b2db      	uxtb	r3, r3
 801f72a:	fb05 f10c 	mul.w	r1, r5, ip
 801f72e:	1c45      	adds	r5, r0, #1
 801f730:	fb03 f30c 	mul.w	r3, r3, ip
 801f734:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f738:	1215      	asrs	r5, r2, #8
 801f73a:	f025 0507 	bic.w	r5, r5, #7
 801f73e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f742:	1c4d      	adds	r5, r1, #1
 801f744:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f748:	10d1      	asrs	r1, r2, #3
 801f74a:	b2c0      	uxtb	r0, r0
 801f74c:	f021 0103 	bic.w	r1, r1, #3
 801f750:	00d2      	lsls	r2, r2, #3
 801f752:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801f756:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801f75a:	00c9      	lsls	r1, r1, #3
 801f75c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f760:	4308      	orrs	r0, r1
 801f762:	1c59      	adds	r1, r3, #1
 801f764:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f768:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f76c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f770:	4318      	orrs	r0, r3
 801f772:	f8ae 0000 	strh.w	r0, [lr]
 801f776:	e7a2      	b.n	801f6be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 801f778:	b013      	add	sp, #76	@ 0x4c
 801f77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f77e:	bf00      	nop
 801f780:	fffff800 	.word	0xfffff800

0801f784 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801f784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f788:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 801f78c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801f790:	fb05 4c03 	mla	ip, r5, r3, r4
 801f794:	2d00      	cmp	r5, #0
 801f796:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801f79a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 801f79e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801f7a2:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 801f7a6:	8808      	ldrh	r0, [r1, #0]
 801f7a8:	f2c0 80a7 	blt.w	801f8fa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801f7ac:	45aa      	cmp	sl, r5
 801f7ae:	f340 80a4 	ble.w	801f8fa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801f7b2:	2c00      	cmp	r4, #0
 801f7b4:	f2c0 809f 	blt.w	801f8f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801f7b8:	42a3      	cmp	r3, r4
 801f7ba:	f340 809c 	ble.w	801f8f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801f7be:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801f7c2:	1c62      	adds	r2, r4, #1
 801f7c4:	f100 809c 	bmi.w	801f900 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f7c8:	4293      	cmp	r3, r2
 801f7ca:	f340 8099 	ble.w	801f900 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f7ce:	f1b9 0f00 	cmp.w	r9, #0
 801f7d2:	f000 8095 	beq.w	801f900 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801f7d6:	f8be c002 	ldrh.w	ip, [lr, #2]
 801f7da:	3501      	adds	r5, #1
 801f7dc:	f100 8094 	bmi.w	801f908 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f7e0:	45aa      	cmp	sl, r5
 801f7e2:	f340 8091 	ble.w	801f908 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f7e6:	2f00      	cmp	r7, #0
 801f7e8:	f000 808e 	beq.w	801f908 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801f7ec:	2c00      	cmp	r4, #0
 801f7ee:	f2c0 8089 	blt.w	801f904 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801f7f2:	42a3      	cmp	r3, r4
 801f7f4:	f340 8086 	ble.w	801f904 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801f7f8:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801f7fc:	3401      	adds	r4, #1
 801f7fe:	f100 8086 	bmi.w	801f90e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f802:	42a3      	cmp	r3, r4
 801f804:	f340 8083 	ble.w	801f90e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f808:	f1b9 0f00 	cmp.w	r9, #0
 801f80c:	d07f      	beq.n	801f90e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801f80e:	3301      	adds	r3, #1
 801f810:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801f814:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f818:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 801f81c:	fb19 fe07 	smulbb	lr, r9, r7
 801f820:	f1c7 0210 	rsb	r2, r7, #16
 801f824:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801f828:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f82c:	eba2 0209 	sub.w	r2, r2, r9
 801f830:	ea44 0808 	orr.w	r8, r4, r8
 801f834:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f838:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801f83c:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801f840:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 801f844:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801f848:	ea44 0c0c 	orr.w	ip, r4, ip
 801f84c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f850:	fb04 f40c 	mul.w	r4, r4, ip
 801f854:	fb02 4808 	mla	r8, r2, r8, r4
 801f858:	041a      	lsls	r2, r3, #16
 801f85a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801f85e:	b2b4      	uxth	r4, r6
 801f860:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801f864:	43f6      	mvns	r6, r6
 801f866:	4313      	orrs	r3, r2
 801f868:	042a      	lsls	r2, r5, #16
 801f86a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 801f86e:	b2f6      	uxtb	r6, r6
 801f870:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801f874:	fb0e 8303 	mla	r3, lr, r3, r8
 801f878:	432a      	orrs	r2, r5
 801f87a:	fb07 3202 	mla	r2, r7, r2, r3
 801f87e:	10c7      	asrs	r7, r0, #3
 801f880:	0d53      	lsrs	r3, r2, #21
 801f882:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f886:	0952      	lsrs	r2, r2, #5
 801f888:	fb17 f706 	smulbb	r7, r7, r6
 801f88c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f890:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801f894:	431a      	orrs	r2, r3
 801f896:	b293      	uxth	r3, r2
 801f898:	1202      	asrs	r2, r0, #8
 801f89a:	121d      	asrs	r5, r3, #8
 801f89c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f8a0:	00c0      	lsls	r0, r0, #3
 801f8a2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f8a6:	fb12 f206 	smulbb	r2, r2, r6
 801f8aa:	b2c0      	uxtb	r0, r0
 801f8ac:	fb05 2504 	mla	r5, r5, r4, r2
 801f8b0:	10da      	asrs	r2, r3, #3
 801f8b2:	fb10 f006 	smulbb	r0, r0, r6
 801f8b6:	00db      	lsls	r3, r3, #3
 801f8b8:	b2ad      	uxth	r5, r5
 801f8ba:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801f8be:	b2db      	uxtb	r3, r3
 801f8c0:	fb02 7204 	mla	r2, r2, r4, r7
 801f8c4:	fb03 0004 	mla	r0, r3, r4, r0
 801f8c8:	1c6b      	adds	r3, r5, #1
 801f8ca:	b292      	uxth	r2, r2
 801f8cc:	b280      	uxth	r0, r0
 801f8ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f8d2:	1c43      	adds	r3, r0, #1
 801f8d4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801f8d8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f8dc:	1c50      	adds	r0, r2, #1
 801f8de:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f8e2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f8e6:	0952      	lsrs	r2, r2, #5
 801f8e8:	432b      	orrs	r3, r5
 801f8ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f8ee:	4313      	orrs	r3, r2
 801f8f0:	800b      	strh	r3, [r1, #0]
 801f8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8f6:	4680      	mov	r8, r0
 801f8f8:	e763      	b.n	801f7c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801f8fa:	4684      	mov	ip, r0
 801f8fc:	4680      	mov	r8, r0
 801f8fe:	e76c      	b.n	801f7da <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801f900:	4684      	mov	ip, r0
 801f902:	e76a      	b.n	801f7da <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801f904:	4605      	mov	r5, r0
 801f906:	e779      	b.n	801f7fc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801f908:	4603      	mov	r3, r0
 801f90a:	4605      	mov	r5, r0
 801f90c:	e782      	b.n	801f814 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801f90e:	4603      	mov	r3, r0
 801f910:	e780      	b.n	801f814 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801f912 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f916:	b093      	sub	sp, #76	@ 0x4c
 801f918:	461d      	mov	r5, r3
 801f91a:	9210      	str	r2, [sp, #64]	@ 0x40
 801f91c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f91e:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801f922:	910a      	str	r1, [sp, #40]	@ 0x28
 801f924:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f926:	6859      	ldr	r1, [r3, #4]
 801f928:	681b      	ldr	r3, [r3, #0]
 801f92a:	9011      	str	r0, [sp, #68]	@ 0x44
 801f92c:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 801f930:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 801f934:	fb01 2707 	mla	r7, r1, r7, r2
 801f938:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801f93c:	9307      	str	r3, [sp, #28]
 801f93e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	9309      	str	r3, [sp, #36]	@ 0x24
 801f944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f946:	43db      	mvns	r3, r3
 801f948:	b2db      	uxtb	r3, r3
 801f94a:	9308      	str	r3, [sp, #32]
 801f94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f94e:	2b00      	cmp	r3, #0
 801f950:	dc03      	bgt.n	801f95a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f952:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f954:	2b00      	cmp	r3, #0
 801f956:	f340 8205 	ble.w	801fd64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801f95a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f95c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f960:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f964:	1e48      	subs	r0, r1, #1
 801f966:	f102 3cff 	add.w	ip, r2, #4294967295
 801f96a:	2d00      	cmp	r5, #0
 801f96c:	f340 80da 	ble.w	801fb24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801f970:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f974:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f978:	d406      	bmi.n	801f988 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f97a:	4586      	cmp	lr, r0
 801f97c:	da04      	bge.n	801f988 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f97e:	2b00      	cmp	r3, #0
 801f980:	db02      	blt.n	801f988 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f982:	4563      	cmp	r3, ip
 801f984:	f2c0 80cf 	blt.w	801fb26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f988:	f11e 0e01 	adds.w	lr, lr, #1
 801f98c:	f100 80c1 	bmi.w	801fb12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f990:	4571      	cmp	r1, lr
 801f992:	f2c0 80be 	blt.w	801fb12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f996:	3301      	adds	r3, #1
 801f998:	f100 80bb 	bmi.w	801fb12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f99c:	429a      	cmp	r2, r3
 801f99e:	f2c0 80b8 	blt.w	801fb12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f9a2:	46a9      	mov	r9, r5
 801f9a4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f9a8:	f1b9 0f00 	cmp.w	r9, #0
 801f9ac:	f340 80d8 	ble.w	801fb60 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801f9b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f9b2:	1421      	asrs	r1, r4, #16
 801f9b4:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f9b8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f9bc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f9c0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f9c4:	f100 8112 	bmi.w	801fbec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f9c8:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f9cc:	4551      	cmp	r1, sl
 801f9ce:	f280 810d 	bge.w	801fbec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f9d2:	2800      	cmp	r0, #0
 801f9d4:	f2c0 810a 	blt.w	801fbec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f9d8:	f103 3aff 	add.w	sl, r3, #4294967295
 801f9dc:	4550      	cmp	r0, sl
 801f9de:	f280 8105 	bge.w	801fbec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f9e2:	fa0f f38e 	sxth.w	r3, lr
 801f9e6:	fb00 1103 	mla	r1, r0, r3, r1
 801f9ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9ec:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801f9f0:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801f9f4:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801f9f8:	f1bc 0f00 	cmp.w	ip, #0
 801f9fc:	d007      	beq.n	801fa0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f9fe:	005b      	lsls	r3, r3, #1
 801fa00:	eb0a 0003 	add.w	r0, sl, r3
 801fa04:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801fa08:	930c      	str	r3, [sp, #48]	@ 0x30
 801fa0a:	8843      	ldrh	r3, [r0, #2]
 801fa0c:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa0e:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801fa12:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 801fa16:	fb12 f30c 	smulbb	r3, r2, ip
 801fa1a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801fa1e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801fa22:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801fa26:	10db      	asrs	r3, r3, #3
 801fa28:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 801fa2c:	ea40 000e 	orr.w	r0, r0, lr
 801fa30:	f1cc 0e10 	rsb	lr, ip, #16
 801fa34:	ea4a 0101 	orr.w	r1, sl, r1
 801fa38:	9f08      	ldr	r7, [sp, #32]
 801fa3a:	ebae 0e02 	sub.w	lr, lr, r2
 801fa3e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fa42:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801fa46:	4351      	muls	r1, r2
 801fa48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa4a:	fb0e 1e00 	mla	lr, lr, r0, r1
 801fa4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fa50:	0410      	lsls	r0, r2, #16
 801fa52:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801fa56:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801fa5a:	4310      	orrs	r0, r2
 801fa5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fa5e:	0412      	lsls	r2, r2, #16
 801fa60:	fb03 e000 	mla	r0, r3, r0, lr
 801fa64:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 801fa68:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801fa6c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801fa70:	ea42 020e 	orr.w	r2, r2, lr
 801fa74:	fb03 0302 	mla	r3, r3, r2, r0
 801fa78:	f8b8 0000 	ldrh.w	r0, [r8]
 801fa7c:	0d5a      	lsrs	r2, r3, #21
 801fa7e:	095b      	lsrs	r3, r3, #5
 801fa80:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fa84:	1201      	asrs	r1, r0, #8
 801fa86:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801fa8a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fa8e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801fa92:	00c0      	lsls	r0, r0, #3
 801fa94:	4313      	orrs	r3, r2
 801fa96:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801fa9a:	fb11 f107 	smulbb	r1, r1, r7
 801fa9e:	b2c0      	uxtb	r0, r0
 801faa0:	b29b      	uxth	r3, r3
 801faa2:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801faa6:	fb10 f007 	smulbb	r0, r0, r7
 801faaa:	fb1e fe07 	smulbb	lr, lr, r7
 801faae:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801fab2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fab6:	fb0c 1c02 	mla	ip, ip, r2, r1
 801faba:	10d9      	asrs	r1, r3, #3
 801fabc:	00db      	lsls	r3, r3, #3
 801fabe:	fa1f fc8c 	uxth.w	ip, ip
 801fac2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801fac6:	b2db      	uxtb	r3, r3
 801fac8:	fb01 e102 	mla	r1, r1, r2, lr
 801facc:	fb03 0302 	mla	r3, r3, r2, r0
 801fad0:	b289      	uxth	r1, r1
 801fad2:	b29a      	uxth	r2, r3
 801fad4:	f10c 0301 	add.w	r3, ip, #1
 801fad8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fadc:	1c53      	adds	r3, r2, #1
 801fade:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fae2:	1c4a      	adds	r2, r1, #1
 801fae4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fae8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801faec:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801faf0:	0949      	lsrs	r1, r1, #5
 801faf2:	ea43 030c 	orr.w	r3, r3, ip
 801faf6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801fafa:	430b      	orrs	r3, r1
 801fafc:	f8a8 3000 	strh.w	r3, [r8]
 801fb00:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fb02:	f108 0802 	add.w	r8, r8, #2
 801fb06:	f109 39ff 	add.w	r9, r9, #4294967295
 801fb0a:	441c      	add	r4, r3
 801fb0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fb0e:	441e      	add	r6, r3
 801fb10:	e74a      	b.n	801f9a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fb12:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fb14:	3d01      	subs	r5, #1
 801fb16:	441c      	add	r4, r3
 801fb18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fb1a:	441e      	add	r6, r3
 801fb1c:	9b07      	ldr	r3, [sp, #28]
 801fb1e:	3302      	adds	r3, #2
 801fb20:	9307      	str	r3, [sp, #28]
 801fb22:	e722      	b.n	801f96a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fb24:	d022      	beq.n	801fb6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801fb26:	1e6b      	subs	r3, r5, #1
 801fb28:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801fb2a:	fb00 4003 	mla	r0, r0, r3, r4
 801fb2e:	1400      	asrs	r0, r0, #16
 801fb30:	f53f af37 	bmi.w	801f9a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb34:	3901      	subs	r1, #1
 801fb36:	4288      	cmp	r0, r1
 801fb38:	f6bf af33 	bge.w	801f9a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801fb3e:	fb01 6303 	mla	r3, r1, r3, r6
 801fb42:	141b      	asrs	r3, r3, #16
 801fb44:	f53f af2d 	bmi.w	801f9a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb48:	3a01      	subs	r2, #1
 801fb4a:	4293      	cmp	r3, r2
 801fb4c:	f6bf af29 	bge.w	801f9a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fb50:	46a8      	mov	r8, r5
 801fb52:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801fb56:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 801fb5a:	f1b8 0f00 	cmp.w	r8, #0
 801fb5e:	dc60      	bgt.n	801fc22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801fb60:	9b07      	ldr	r3, [sp, #28]
 801fb62:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801fb66:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fb6a:	9307      	str	r3, [sp, #28]
 801fb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	f340 80f8 	ble.w	801fd64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fb74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fb78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fb7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb82:	eef0 6a62 	vmov.f32	s13, s5
 801fb86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fb8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb92:	ee16 4a90 	vmov	r4, s13
 801fb96:	eef0 6a43 	vmov.f32	s13, s6
 801fb9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb9e:	ee16 6a90 	vmov	r6, s13
 801fba2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fba6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbaa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fbba:	ee12 2a90 	vmov	r2, s5
 801fbbe:	eef0 2a47 	vmov.f32	s5, s14
 801fbc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbc6:	ee13 2a10 	vmov	r2, s6
 801fbca:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fbcc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fbce:	eeb0 3a67 	vmov.f32	s6, s15
 801fbd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbd6:	9320      	str	r3, [sp, #128]	@ 0x80
 801fbd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fbda:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fbdc:	3b01      	subs	r3, #1
 801fbde:	930a      	str	r3, [sp, #40]	@ 0x28
 801fbe0:	bf08      	it	eq
 801fbe2:	4615      	moveq	r5, r2
 801fbe4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fbe6:	bf18      	it	ne
 801fbe8:	461d      	movne	r5, r3
 801fbea:	e6af      	b.n	801f94c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fbec:	f111 0a01 	adds.w	sl, r1, #1
 801fbf0:	d486      	bmi.n	801fb00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fbf2:	45d6      	cmp	lr, sl
 801fbf4:	db84      	blt.n	801fb00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fbf6:	f110 0a01 	adds.w	sl, r0, #1
 801fbfa:	d481      	bmi.n	801fb00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fbfc:	4553      	cmp	r3, sl
 801fbfe:	f6ff af7f 	blt.w	801fb00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fc02:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc04:	b21b      	sxth	r3, r3
 801fc06:	9101      	str	r1, [sp, #4]
 801fc08:	4641      	mov	r1, r8
 801fc0a:	9300      	str	r3, [sp, #0]
 801fc0c:	fa0f f38e 	sxth.w	r3, lr
 801fc10:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801fc14:	e9cd c704 	strd	ip, r7, [sp, #16]
 801fc18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fc1c:	f7ff fdb2 	bl	801f784 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801fc20:	e76e      	b.n	801fb00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fc22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fc24:	1430      	asrs	r0, r6, #16
 801fc26:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801fc28:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801fc2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fc30:	1423      	asrs	r3, r4, #16
 801fc32:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fc36:	fb01 3000 	mla	r0, r1, r0, r3
 801fc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc3c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801fc40:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801fc44:	8858      	ldrh	r0, [r3, #2]
 801fc46:	f1be 0f00 	cmp.w	lr, #0
 801fc4a:	d00b      	beq.n	801fc64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801fc4c:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 801fc50:	3901      	subs	r1, #1
 801fc52:	0049      	lsls	r1, r1, #1
 801fc54:	3102      	adds	r1, #2
 801fc56:	eb03 0b01 	add.w	fp, r3, r1
 801fc5a:	5a5b      	ldrh	r3, [r3, r1]
 801fc5c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fc5e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801fc62:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fc64:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801fc68:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801fc6c:	fb12 f30e 	smulbb	r3, r2, lr
 801fc70:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801fc74:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 801fc78:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801fc7c:	10db      	asrs	r3, r3, #3
 801fc7e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801fc82:	ea41 010c 	orr.w	r1, r1, ip
 801fc86:	f1ce 0c10 	rsb	ip, lr, #16
 801fc8a:	ea4b 0000 	orr.w	r0, fp, r0
 801fc8e:	9f08      	ldr	r7, [sp, #32]
 801fc90:	ebac 0c02 	sub.w	ip, ip, r2
 801fc94:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801fc98:	f108 38ff 	add.w	r8, r8, #4294967295
 801fc9c:	4350      	muls	r0, r2
 801fc9e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801fca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fca4:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fca8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801fcaa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801fcae:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 801fcb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fcb4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801fcb8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801fcbc:	0412      	lsls	r2, r2, #16
 801fcbe:	ea4b 0101 	orr.w	r1, fp, r1
 801fcc2:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801fcc6:	fb03 c101 	mla	r1, r3, r1, ip
 801fcca:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801fcce:	4302      	orrs	r2, r0
 801fcd0:	fb03 1202 	mla	r2, r3, r2, r1
 801fcd4:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801fcd8:	0952      	lsrs	r2, r2, #5
 801fcda:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fcde:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 801fce2:	f8b9 2000 	ldrh.w	r2, [r9]
 801fce6:	ea4b 0303 	orr.w	r3, fp, r3
 801fcea:	1211      	asrs	r1, r2, #8
 801fcec:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801fcf0:	b29b      	uxth	r3, r3
 801fcf2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801fcf6:	00d2      	lsls	r2, r2, #3
 801fcf8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801fcfc:	fb11 f107 	smulbb	r1, r1, r7
 801fd00:	1218      	asrs	r0, r3, #8
 801fd02:	fb1c fc07 	smulbb	ip, ip, r7
 801fd06:	b2d2      	uxtb	r2, r2
 801fd08:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801fd0c:	fb12 f207 	smulbb	r2, r2, r7
 801fd10:	fb00 100a 	mla	r0, r0, sl, r1
 801fd14:	10d9      	asrs	r1, r3, #3
 801fd16:	00db      	lsls	r3, r3, #3
 801fd18:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801fd1c:	b280      	uxth	r0, r0
 801fd1e:	b2db      	uxtb	r3, r3
 801fd20:	fb01 c10a 	mla	r1, r1, sl, ip
 801fd24:	fb03 230a 	mla	r3, r3, sl, r2
 801fd28:	1c42      	adds	r2, r0, #1
 801fd2a:	b289      	uxth	r1, r1
 801fd2c:	b29b      	uxth	r3, r3
 801fd2e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fd32:	f101 0c01 	add.w	ip, r1, #1
 801fd36:	1c5a      	adds	r2, r3, #1
 801fd38:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801fd3c:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801fd40:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fd44:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fd46:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fd4a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fd4e:	441c      	add	r4, r3
 801fd50:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801fd54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fd56:	4310      	orrs	r0, r2
 801fd58:	441e      	add	r6, r3
 801fd5a:	ea40 000c 	orr.w	r0, r0, ip
 801fd5e:	f829 0b02 	strh.w	r0, [r9], #2
 801fd62:	e6fa      	b.n	801fb5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fd64:	b013      	add	sp, #76	@ 0x4c
 801fd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801fd6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd6e:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801fd72:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801fd76:	fb0e 4703 	mla	r7, lr, r3, r4
 801fd7a:	f1be 0f00 	cmp.w	lr, #0
 801fd7e:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801fd82:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 801fd86:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801fd8a:	8808      	ldrh	r0, [r1, #0]
 801fd8c:	db60      	blt.n	801fe50 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801fd8e:	45f1      	cmp	r9, lr
 801fd90:	dd5e      	ble.n	801fe50 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801fd92:	2c00      	cmp	r4, #0
 801fd94:	db5a      	blt.n	801fe4c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801fd96:	42a3      	cmp	r3, r4
 801fd98:	dd58      	ble.n	801fe4c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801fd9a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801fd9e:	1c62      	adds	r2, r4, #1
 801fda0:	d459      	bmi.n	801fe56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fda2:	4293      	cmp	r3, r2
 801fda4:	dd57      	ble.n	801fe56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fda6:	2d00      	cmp	r5, #0
 801fda8:	d055      	beq.n	801fe56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801fdaa:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801fdae:	f11e 0e01 	adds.w	lr, lr, #1
 801fdb2:	d454      	bmi.n	801fe5e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801fdb4:	45f1      	cmp	r9, lr
 801fdb6:	dd52      	ble.n	801fe5e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801fdb8:	2e00      	cmp	r6, #0
 801fdba:	d050      	beq.n	801fe5e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801fdbc:	2c00      	cmp	r4, #0
 801fdbe:	db4c      	blt.n	801fe5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801fdc0:	42a3      	cmp	r3, r4
 801fdc2:	dd4a      	ble.n	801fe5a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801fdc4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801fdc8:	3401      	adds	r4, #1
 801fdca:	d405      	bmi.n	801fdd8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fdcc:	42a3      	cmp	r3, r4
 801fdce:	dd03      	ble.n	801fdd8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fdd0:	b115      	cbz	r5, 801fdd8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801fdd2:	3301      	adds	r3, #1
 801fdd4:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801fdd8:	fb15 f406 	smulbb	r4, r5, r6
 801fddc:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801fde0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801fde4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 801fde8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801fdec:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801fdf0:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 801fdf4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 801fdf8:	ea43 0c0c 	orr.w	ip, r3, ip
 801fdfc:	f1c6 0310 	rsb	r3, r6, #16
 801fe00:	ea4e 0707 	orr.w	r7, lr, r7
 801fe04:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801fe08:	1b5b      	subs	r3, r3, r5
 801fe0a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801fe0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801fe12:	437d      	muls	r5, r7
 801fe14:	fb03 5c0c 	mla	ip, r3, ip, r5
 801fe18:	0403      	lsls	r3, r0, #16
 801fe1a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801fe1e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801fe22:	4318      	orrs	r0, r3
 801fe24:	0413      	lsls	r3, r2, #16
 801fe26:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801fe2a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 801fe2e:	fb04 c000 	mla	r0, r4, r0, ip
 801fe32:	4313      	orrs	r3, r2
 801fe34:	fb06 0003 	mla	r0, r6, r3, r0
 801fe38:	0d43      	lsrs	r3, r0, #21
 801fe3a:	0940      	lsrs	r0, r0, #5
 801fe3c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fe40:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 801fe44:	4318      	orrs	r0, r3
 801fe46:	8008      	strh	r0, [r1, #0]
 801fe48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe4c:	4684      	mov	ip, r0
 801fe4e:	e7a6      	b.n	801fd9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801fe50:	4607      	mov	r7, r0
 801fe52:	4684      	mov	ip, r0
 801fe54:	e7ab      	b.n	801fdae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801fe56:	4607      	mov	r7, r0
 801fe58:	e7a9      	b.n	801fdae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801fe5a:	4602      	mov	r2, r0
 801fe5c:	e7b4      	b.n	801fdc8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801fe5e:	4602      	mov	r2, r0
 801fe60:	e7ba      	b.n	801fdd8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801fe62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe66:	b08f      	sub	sp, #60	@ 0x3c
 801fe68:	461d      	mov	r5, r3
 801fe6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fe6c:	9107      	str	r1, [sp, #28]
 801fe6e:	920c      	str	r2, [sp, #48]	@ 0x30
 801fe70:	6859      	ldr	r1, [r3, #4]
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	900d      	str	r0, [sp, #52]	@ 0x34
 801fe76:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 801fe7a:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 801fe7e:	fb01 2707 	mla	r7, r1, r7, r2
 801fe82:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801fe86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fe88:	f8d3 8000 	ldr.w	r8, [r3]
 801fe8c:	9b07      	ldr	r3, [sp, #28]
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	dc03      	bgt.n	801fe9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fe92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	f340 8182 	ble.w	802019e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 801fe9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fe9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fea0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fea4:	1e48      	subs	r0, r1, #1
 801fea6:	f102 3cff 	add.w	ip, r2, #4294967295
 801feaa:	2d00      	cmp	r5, #0
 801feac:	f340 809b 	ble.w	801ffe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801feb0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801feb4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801feb8:	d406      	bmi.n	801fec8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801feba:	4586      	cmp	lr, r0
 801febc:	da04      	bge.n	801fec8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801febe:	2b00      	cmp	r3, #0
 801fec0:	db02      	blt.n	801fec8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fec2:	4563      	cmp	r3, ip
 801fec4:	f2c0 8090 	blt.w	801ffe8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fec8:	f11e 0e01 	adds.w	lr, lr, #1
 801fecc:	f100 8084 	bmi.w	801ffd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fed0:	4571      	cmp	r1, lr
 801fed2:	f2c0 8081 	blt.w	801ffd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fed6:	3301      	adds	r3, #1
 801fed8:	d47e      	bmi.n	801ffd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801feda:	429a      	cmp	r2, r3
 801fedc:	db7c      	blt.n	801ffd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fede:	46aa      	mov	sl, r5
 801fee0:	46b9      	mov	r9, r7
 801fee2:	f1ba 0f00 	cmp.w	sl, #0
 801fee6:	f340 8099 	ble.w	802001c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801feea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801feec:	1421      	asrs	r1, r4, #16
 801feee:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fef2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fef6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fefa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fefe:	f100 80d1 	bmi.w	80200a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff02:	f10e 3bff 	add.w	fp, lr, #4294967295
 801ff06:	4559      	cmp	r1, fp
 801ff08:	f280 80cc 	bge.w	80200a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff0c:	2800      	cmp	r0, #0
 801ff0e:	f2c0 80c9 	blt.w	80200a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff12:	f103 3bff 	add.w	fp, r3, #4294967295
 801ff16:	4558      	cmp	r0, fp
 801ff18:	f280 80c4 	bge.w	80200a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff1c:	fa0f fe8e 	sxth.w	lr, lr
 801ff20:	fb00 110e 	mla	r1, r0, lr, r1
 801ff24:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801ff28:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801ff2c:	8841      	ldrh	r1, [r0, #2]
 801ff2e:	f1bc 0f00 	cmp.w	ip, #0
 801ff32:	d00b      	beq.n	801ff4c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801ff34:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 801ff38:	3b01      	subs	r3, #1
 801ff3a:	005b      	lsls	r3, r3, #1
 801ff3c:	3302      	adds	r3, #2
 801ff3e:	eb00 0e03 	add.w	lr, r0, r3
 801ff42:	5ac3      	ldrh	r3, [r0, r3]
 801ff44:	9308      	str	r3, [sp, #32]
 801ff46:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801ff4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff4c:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801ff50:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 801ff54:	fb12 f30c 	smulbb	r3, r2, ip
 801ff58:	f1cc 0e10 	rsb	lr, ip, #16
 801ff5c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801ff60:	10db      	asrs	r3, r3, #3
 801ff62:	ebae 0e02 	sub.w	lr, lr, r2
 801ff66:	ea40 000b 	orr.w	r0, r0, fp
 801ff6a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ff6e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 801ff72:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801ff76:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 801ff7a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801ff7e:	ea4b 0101 	orr.w	r1, fp, r1
 801ff82:	4351      	muls	r1, r2
 801ff84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff86:	fb0e 1e00 	mla	lr, lr, r0, r1
 801ff8a:	0410      	lsls	r0, r2, #16
 801ff8c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 801ff90:	9908      	ldr	r1, [sp, #32]
 801ff92:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 801ff96:	4310      	orrs	r0, r2
 801ff98:	9a08      	ldr	r2, [sp, #32]
 801ff9a:	0412      	lsls	r2, r2, #16
 801ff9c:	fb03 e000 	mla	r0, r3, r0, lr
 801ffa0:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 801ffa4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801ffa8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 801ffac:	ea42 020e 	orr.w	r2, r2, lr
 801ffb0:	fb03 0302 	mla	r3, r3, r2, r0
 801ffb4:	0d5a      	lsrs	r2, r3, #21
 801ffb6:	095b      	lsrs	r3, r3, #5
 801ffb8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ffbc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 801ffc0:	4313      	orrs	r3, r2
 801ffc2:	f8a9 3000 	strh.w	r3, [r9]
 801ffc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ffc8:	f109 0902 	add.w	r9, r9, #2
 801ffcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ffd0:	441c      	add	r4, r3
 801ffd2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ffd4:	441e      	add	r6, r3
 801ffd6:	e784      	b.n	801fee2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ffd8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ffda:	3d01      	subs	r5, #1
 801ffdc:	3702      	adds	r7, #2
 801ffde:	441c      	add	r4, r3
 801ffe0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ffe2:	441e      	add	r6, r3
 801ffe4:	e761      	b.n	801feaa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ffe6:	d01d      	beq.n	8020024 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801ffe8:	1e6b      	subs	r3, r5, #1
 801ffea:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801ffec:	fb00 4003 	mla	r0, r0, r3, r4
 801fff0:	1400      	asrs	r0, r0, #16
 801fff2:	f53f af74 	bmi.w	801fede <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fff6:	3901      	subs	r1, #1
 801fff8:	4288      	cmp	r0, r1
 801fffa:	f6bf af70 	bge.w	801fede <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fffe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020000:	fb01 6303 	mla	r3, r1, r3, r6
 8020004:	141b      	asrs	r3, r3, #16
 8020006:	f53f af6a 	bmi.w	801fede <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802000a:	3a01      	subs	r2, #1
 802000c:	4293      	cmp	r3, r2
 802000e:	f6bf af66 	bge.w	801fede <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020012:	46a9      	mov	r9, r5
 8020014:	46ba      	mov	sl, r7
 8020016:	f1b9 0f00 	cmp.w	r9, #0
 802001a:	dc5b      	bgt.n	80200d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802001c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020020:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020024:	9b07      	ldr	r3, [sp, #28]
 8020026:	2b00      	cmp	r3, #0
 8020028:	f340 80b9 	ble.w	802019e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802002c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020030:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020032:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020036:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802003a:	eef0 6a62 	vmov.f32	s13, s5
 802003e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020042:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020046:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802004a:	ee16 4a90 	vmov	r4, s13
 802004e:	eef0 6a43 	vmov.f32	s13, s6
 8020052:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020056:	ee16 6a90 	vmov	r6, s13
 802005a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802005e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020062:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020066:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802006a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802006e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020072:	ee12 2a90 	vmov	r2, s5
 8020076:	eef0 2a47 	vmov.f32	s5, s14
 802007a:	fb92 f3f3 	sdiv	r3, r2, r3
 802007e:	ee13 2a10 	vmov	r2, s6
 8020082:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020084:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020086:	eeb0 3a67 	vmov.f32	s6, s15
 802008a:	fb92 f3f3 	sdiv	r3, r2, r3
 802008e:	931c      	str	r3, [sp, #112]	@ 0x70
 8020090:	9b07      	ldr	r3, [sp, #28]
 8020092:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020094:	3b01      	subs	r3, #1
 8020096:	9307      	str	r3, [sp, #28]
 8020098:	bf08      	it	eq
 802009a:	4615      	moveq	r5, r2
 802009c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802009e:	bf18      	it	ne
 80200a0:	461d      	movne	r5, r3
 80200a2:	e6f3      	b.n	801fe8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80200a4:	f111 0b01 	adds.w	fp, r1, #1
 80200a8:	d48d      	bmi.n	801ffc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80200aa:	45de      	cmp	lr, fp
 80200ac:	db8b      	blt.n	801ffc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80200ae:	f110 0b01 	adds.w	fp, r0, #1
 80200b2:	d488      	bmi.n	801ffc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80200b4:	455b      	cmp	r3, fp
 80200b6:	db86      	blt.n	801ffc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80200b8:	b21b      	sxth	r3, r3
 80200ba:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80200be:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80200c2:	9300      	str	r3, [sp, #0]
 80200c4:	4642      	mov	r2, r8
 80200c6:	fa0f f38e 	sxth.w	r3, lr
 80200ca:	4649      	mov	r1, r9
 80200cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80200ce:	f7ff fe4c 	bl	801fd6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80200d2:	e778      	b.n	801ffc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80200d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80200d6:	1420      	asrs	r0, r4, #16
 80200d8:	1431      	asrs	r1, r6, #16
 80200da:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80200de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80200e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80200e6:	fb03 0101 	mla	r1, r3, r1, r0
 80200ea:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80200ee:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80200f2:	8841      	ldrh	r1, [r0, #2]
 80200f4:	f1be 0f00 	cmp.w	lr, #0
 80200f8:	d00b      	beq.n	8020112 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80200fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80200fe:	3b01      	subs	r3, #1
 8020100:	005b      	lsls	r3, r3, #1
 8020102:	3302      	adds	r3, #2
 8020104:	eb00 0b03 	add.w	fp, r0, r3
 8020108:	5ac3      	ldrh	r3, [r0, r3]
 802010a:	930a      	str	r3, [sp, #40]	@ 0x28
 802010c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020112:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020116:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802011a:	fb12 f30e 	smulbb	r3, r2, lr
 802011e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020122:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8020126:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802012a:	10db      	asrs	r3, r3, #3
 802012c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020130:	ea40 000c 	orr.w	r0, r0, ip
 8020134:	f1ce 0c10 	rsb	ip, lr, #16
 8020138:	ea4b 0101 	orr.w	r1, fp, r1
 802013c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020140:	ebac 0c02 	sub.w	ip, ip, r2
 8020144:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020148:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802014c:	4351      	muls	r1, r2
 802014e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020150:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020154:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020156:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802015a:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 802015e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020160:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8020164:	0412      	lsls	r2, r2, #16
 8020166:	ea4b 0000 	orr.w	r0, fp, r0
 802016a:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 802016e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8020172:	fb03 c000 	mla	r0, r3, r0, ip
 8020176:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802017a:	ea42 0b0b 	orr.w	fp, r2, fp
 802017e:	fb03 000b 	mla	r0, r3, fp, r0
 8020182:	0d43      	lsrs	r3, r0, #21
 8020184:	0940      	lsrs	r0, r0, #5
 8020186:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802018a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802018e:	4318      	orrs	r0, r3
 8020190:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020192:	441c      	add	r4, r3
 8020194:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020196:	f82a 0b02 	strh.w	r0, [sl], #2
 802019a:	441e      	add	r6, r3
 802019c:	e73b      	b.n	8020016 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802019e:	b00f      	add	sp, #60	@ 0x3c
 80201a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80201a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a8:	b085      	sub	sp, #20
 80201aa:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80201ae:	9102      	str	r1, [sp, #8]
 80201b0:	2c00      	cmp	r4, #0
 80201b2:	fb04 7103 	mla	r1, r4, r3, r7
 80201b6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80201ba:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80201be:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80201c2:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80201c6:	f2c0 811b 	blt.w	8020400 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80201ca:	45a6      	cmp	lr, r4
 80201cc:	f340 8118 	ble.w	8020400 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80201d0:	2f00      	cmp	r7, #0
 80201d2:	f2c0 8113 	blt.w	80203fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80201d6:	42bb      	cmp	r3, r7
 80201d8:	f340 8110 	ble.w	80203fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80201dc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80201e0:	1c7a      	adds	r2, r7, #1
 80201e2:	f100 8110 	bmi.w	8020406 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80201e6:	4293      	cmp	r3, r2
 80201e8:	f340 810d 	ble.w	8020406 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80201ec:	2e00      	cmp	r6, #0
 80201ee:	f000 810c 	beq.w	802040a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80201f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80201f6:	3401      	adds	r4, #1
 80201f8:	f100 810b 	bmi.w	8020412 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80201fc:	45a6      	cmp	lr, r4
 80201fe:	f340 8108 	ble.w	8020412 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020202:	2800      	cmp	r0, #0
 8020204:	f000 8108 	beq.w	8020418 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8020208:	2f00      	cmp	r7, #0
 802020a:	f2c0 8100 	blt.w	802040e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802020e:	42bb      	cmp	r3, r7
 8020210:	f340 80fd 	ble.w	802040e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020214:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020218:	3701      	adds	r7, #1
 802021a:	f100 8100 	bmi.w	802041e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802021e:	42bb      	cmp	r3, r7
 8020220:	f340 80fd 	ble.w	802041e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020224:	2e00      	cmp	r6, #0
 8020226:	f000 80fc 	beq.w	8020422 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802022a:	3301      	adds	r3, #1
 802022c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020230:	b2b6      	uxth	r6, r6
 8020232:	b280      	uxth	r0, r0
 8020234:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020238:	fb00 fe06 	mul.w	lr, r0, r6
 802023c:	0136      	lsls	r6, r6, #4
 802023e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020242:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020246:	eba6 070e 	sub.w	r7, r6, lr
 802024a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802024e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020252:	b280      	uxth	r0, r0
 8020254:	b2bf      	uxth	r7, r7
 8020256:	1a1b      	subs	r3, r3, r0
 8020258:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802025c:	fb0a f607 	mul.w	r6, sl, r7
 8020260:	b29b      	uxth	r3, r3
 8020262:	fb0b 6603 	mla	r6, fp, r3, r6
 8020266:	fb00 6609 	mla	r6, r0, r9, r6
 802026a:	fb0e 6608 	mla	r6, lr, r8, r6
 802026e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020272:	9600      	str	r6, [sp, #0]
 8020274:	2e00      	cmp	r6, #0
 8020276:	f000 80be 	beq.w	80203f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802027a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802027e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020282:	9e02      	ldr	r6, [sp, #8]
 8020284:	fb0b fc0c 	mul.w	ip, fp, ip
 8020288:	fb0b f505 	mul.w	r5, fp, r5
 802028c:	8836      	ldrh	r6, [r6, #0]
 802028e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020292:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020296:	9501      	str	r5, [sp, #4]
 8020298:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802029c:	44dc      	add	ip, fp
 802029e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202a2:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80202a6:	9503      	str	r5, [sp, #12]
 80202a8:	9d01      	ldr	r5, [sp, #4]
 80202aa:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80202ae:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80202b2:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80202b6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80202ba:	fb0a fc0c 	mul.w	ip, sl, ip
 80202be:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80202c2:	fb0a fa01 	mul.w	sl, sl, r1
 80202c6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80202ca:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80202ce:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80202d2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80202d6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80202da:	4465      	add	r5, ip
 80202dc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80202e0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80202e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202e8:	fb09 fc0c 	mul.w	ip, r9, ip
 80202ec:	0a2d      	lsrs	r5, r5, #8
 80202ee:	fb09 f904 	mul.w	r9, r9, r4
 80202f2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80202f6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80202fa:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80202fe:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8020302:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020306:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802030a:	437d      	muls	r5, r7
 802030c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020310:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8020314:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020318:	4461      	add	r1, ip
 802031a:	fb08 f404 	mul.w	r4, r8, r4
 802031e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020322:	fb08 f802 	mul.w	r8, r8, r2
 8020326:	0a09      	lsrs	r1, r1, #8
 8020328:	0a22      	lsrs	r2, r4, #8
 802032a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802032e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8020332:	fb07 f70a 	mul.w	r7, r7, sl
 8020336:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802033a:	4414      	add	r4, r2
 802033c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020340:	0a24      	lsrs	r4, r4, #8
 8020342:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020346:	9a03      	ldr	r2, [sp, #12]
 8020348:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802034c:	fb02 5503 	mla	r5, r2, r3, r5
 8020350:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020354:	9a00      	ldr	r2, [sp, #0]
 8020356:	fb04 540e 	mla	r4, r4, lr, r5
 802035a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802035e:	1235      	asrs	r5, r6, #8
 8020360:	fb01 4100 	mla	r1, r1, r0, r4
 8020364:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020368:	0a09      	lsrs	r1, r1, #8
 802036a:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802036e:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8020372:	fb03 7101 	mla	r1, r3, r1, r7
 8020376:	fb0e 1e08 	mla	lr, lr, r8, r1
 802037a:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802037e:	fb00 e101 	mla	r1, r0, r1, lr
 8020382:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8020386:	b287      	uxth	r7, r0
 8020388:	0a09      	lsrs	r1, r1, #8
 802038a:	437a      	muls	r2, r7
 802038c:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8020390:	1c53      	adds	r3, r2, #1
 8020392:	4321      	orrs	r1, r4
 8020394:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020398:	0c0a      	lsrs	r2, r1, #16
 802039a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802039e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80203a2:	b2c8      	uxtb	r0, r1
 80203a4:	fb12 f207 	smulbb	r2, r2, r7
 80203a8:	fb14 f407 	smulbb	r4, r4, r7
 80203ac:	b2db      	uxtb	r3, r3
 80203ae:	fb10 f007 	smulbb	r0, r0, r7
 80203b2:	fb05 2503 	mla	r5, r5, r3, r2
 80203b6:	10f2      	asrs	r2, r6, #3
 80203b8:	00f6      	lsls	r6, r6, #3
 80203ba:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80203be:	b2ad      	uxth	r5, r5
 80203c0:	b2f6      	uxtb	r6, r6
 80203c2:	fb02 4203 	mla	r2, r2, r3, r4
 80203c6:	fb06 0303 	mla	r3, r6, r3, r0
 80203ca:	b294      	uxth	r4, r2
 80203cc:	b299      	uxth	r1, r3
 80203ce:	1c6b      	adds	r3, r5, #1
 80203d0:	1c62      	adds	r2, r4, #1
 80203d2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80203d6:	1c4b      	adds	r3, r1, #1
 80203d8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80203dc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80203e0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80203e4:	0952      	lsrs	r2, r2, #5
 80203e6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80203ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80203ee:	432b      	orrs	r3, r5
 80203f0:	4313      	orrs	r3, r2
 80203f2:	9a02      	ldr	r2, [sp, #8]
 80203f4:	8013      	strh	r3, [r2, #0]
 80203f6:	b005      	add	sp, #20
 80203f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203fc:	2500      	movs	r5, #0
 80203fe:	e6ef      	b.n	80201e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8020400:	2100      	movs	r1, #0
 8020402:	460d      	mov	r5, r1
 8020404:	e6f7      	b.n	80201f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8020406:	2100      	movs	r1, #0
 8020408:	e6f5      	b.n	80201f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802040a:	4631      	mov	r1, r6
 802040c:	e6f3      	b.n	80201f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802040e:	2400      	movs	r4, #0
 8020410:	e702      	b.n	8020218 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8020412:	2200      	movs	r2, #0
 8020414:	4614      	mov	r4, r2
 8020416:	e70b      	b.n	8020230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020418:	4602      	mov	r2, r0
 802041a:	4604      	mov	r4, r0
 802041c:	e708      	b.n	8020230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802041e:	2200      	movs	r2, #0
 8020420:	e706      	b.n	8020230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8020422:	4632      	mov	r2, r6
 8020424:	e704      	b.n	8020230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08020426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802042a:	b09d      	sub	sp, #116	@ 0x74
 802042c:	9219      	str	r2, [sp, #100]	@ 0x64
 802042e:	9307      	str	r3, [sp, #28]
 8020430:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8020432:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8020436:	901b      	str	r0, [sp, #108]	@ 0x6c
 8020438:	931a      	str	r3, [sp, #104]	@ 0x68
 802043a:	6850      	ldr	r0, [r2, #4]
 802043c:	9117      	str	r1, [sp, #92]	@ 0x5c
 802043e:	6812      	ldr	r2, [r2, #0]
 8020440:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8020444:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8020448:	fb00 1303 	mla	r3, r0, r3, r1
 802044c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020450:	930a      	str	r3, [sp, #40]	@ 0x28
 8020452:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	9310      	str	r3, [sp, #64]	@ 0x40
 8020458:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802045c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802045e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020460:	2b00      	cmp	r3, #0
 8020462:	dc03      	bgt.n	802046c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020466:	2b00      	cmp	r3, #0
 8020468:	f340 8375 	ble.w	8020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802046c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802046e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020472:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020476:	1e48      	subs	r0, r1, #1
 8020478:	1e57      	subs	r7, r2, #1
 802047a:	9b07      	ldr	r3, [sp, #28]
 802047c:	2b00      	cmp	r3, #0
 802047e:	f340 818e 	ble.w	802079e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8020482:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020486:	ea4f 4326 	mov.w	r3, r6, asr #16
 802048a:	d406      	bmi.n	802049a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802048c:	4584      	cmp	ip, r0
 802048e:	da04      	bge.n	802049a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020490:	2b00      	cmp	r3, #0
 8020492:	db02      	blt.n	802049a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020494:	42bb      	cmp	r3, r7
 8020496:	f2c0 8183 	blt.w	80207a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802049a:	f11c 0c01 	adds.w	ip, ip, #1
 802049e:	f100 8173 	bmi.w	8020788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80204a2:	4561      	cmp	r1, ip
 80204a4:	f2c0 8170 	blt.w	8020788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80204a8:	3301      	adds	r3, #1
 80204aa:	f100 816d 	bmi.w	8020788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80204ae:	429a      	cmp	r2, r3
 80204b0:	f2c0 816a 	blt.w	8020788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80204b4:	9b07      	ldr	r3, [sp, #28]
 80204b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80204b8:	9318      	str	r3, [sp, #96]	@ 0x60
 80204ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80204bc:	2b00      	cmp	r3, #0
 80204be:	f340 818c 	ble.w	80207da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80204c2:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80204c4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80204c8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80204ca:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80204ce:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80204d2:	1422      	asrs	r2, r4, #16
 80204d4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80204d8:	689b      	ldr	r3, [r3, #8]
 80204da:	f100 81cd 	bmi.w	8020878 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80204de:	f103 38ff 	add.w	r8, r3, #4294967295
 80204e2:	4542      	cmp	r2, r8
 80204e4:	f280 81c8 	bge.w	8020878 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80204e8:	f1bc 0f00 	cmp.w	ip, #0
 80204ec:	f2c0 81c4 	blt.w	8020878 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80204f0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80204f4:	45c4      	cmp	ip, r8
 80204f6:	f280 81bf 	bge.w	8020878 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80204fa:	b21b      	sxth	r3, r3
 80204fc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80204fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8020502:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020506:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802050a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802050e:	2800      	cmp	r0, #0
 8020510:	f000 81a9 	beq.w	8020866 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8020514:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020518:	950c      	str	r5, [sp, #48]	@ 0x30
 802051a:	0e2d      	lsrs	r5, r5, #24
 802051c:	9513      	str	r5, [sp, #76]	@ 0x4c
 802051e:	b181      	cbz	r1, 8020542 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8020524:	3b01      	subs	r3, #1
 8020526:	009b      	lsls	r3, r3, #2
 8020528:	3304      	adds	r3, #4
 802052a:	eb08 0c03 	add.w	ip, r8, r3
 802052e:	f858 3003 	ldr.w	r3, [r8, r3]
 8020532:	9308      	str	r3, [sp, #32]
 8020534:	0e1b      	lsrs	r3, r3, #24
 8020536:	9311      	str	r3, [sp, #68]	@ 0x44
 8020538:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802053c:	930d      	str	r3, [sp, #52]	@ 0x34
 802053e:	0e1b      	lsrs	r3, r3, #24
 8020540:	9314      	str	r3, [sp, #80]	@ 0x50
 8020542:	b280      	uxth	r0, r0
 8020544:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020546:	b289      	uxth	r1, r1
 8020548:	fb00 f901 	mul.w	r9, r0, r1
 802054c:	0100      	lsls	r0, r0, #4
 802054e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020552:	eba0 0809 	sub.w	r8, r0, r9
 8020556:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802055a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802055c:	b289      	uxth	r1, r1
 802055e:	fa1f f888 	uxth.w	r8, r8
 8020562:	1a5b      	subs	r3, r3, r1
 8020564:	fb08 f000 	mul.w	r0, r8, r0
 8020568:	b29b      	uxth	r3, r3
 802056a:	fb03 000e 	mla	r0, r3, lr, r0
 802056e:	fb01 0005 	mla	r0, r1, r5, r0
 8020572:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020574:	fb09 0005 	mla	r0, r9, r5, r0
 8020578:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802057c:	2800      	cmp	r0, #0
 802057e:	f000 80fa 	beq.w	8020776 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020582:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020586:	d01b      	beq.n	80205c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020588:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802058c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020590:	fb0e fa0a 	mul.w	sl, lr, sl
 8020594:	fb0e fe02 	mul.w	lr, lr, r2
 8020598:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802059c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80205a0:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80205a4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80205a8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205ac:	4452      	add	r2, sl
 80205ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205b2:	0a12      	lsrs	r2, r2, #8
 80205b4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80205b8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80205bc:	ea42 020c 	orr.w	r2, r2, ip
 80205c0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80205c2:	2dff      	cmp	r5, #255	@ 0xff
 80205c4:	d021      	beq.n	802060a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80205c6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80205c8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80205cc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80205ce:	fb05 fb0b 	mul.w	fp, r5, fp
 80205d2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80205d4:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80205d8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80205da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205de:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80205e2:	fb05 fa0a 	mul.w	sl, r5, sl
 80205e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80205ea:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80205ee:	44de      	add	lr, fp
 80205f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80205f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020600:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020604:	ea4e 050a 	orr.w	r5, lr, sl
 8020608:	950c      	str	r5, [sp, #48]	@ 0x30
 802060a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802060c:	2dff      	cmp	r5, #255	@ 0xff
 802060e:	d021      	beq.n	8020654 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020610:	9d08      	ldr	r5, [sp, #32]
 8020612:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020616:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020618:	fb05 fb0b 	mul.w	fp, r5, fp
 802061c:	9d08      	ldr	r5, [sp, #32]
 802061e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8020622:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020624:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020628:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802062c:	fb05 fa0a 	mul.w	sl, r5, sl
 8020630:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020634:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020638:	44de      	add	lr, fp
 802063a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802063e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020642:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020646:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802064a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802064e:	ea4e 050a 	orr.w	r5, lr, sl
 8020652:	9508      	str	r5, [sp, #32]
 8020654:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020656:	2dff      	cmp	r5, #255	@ 0xff
 8020658:	d021      	beq.n	802069e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802065a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802065c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020660:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020662:	fb05 fb0b 	mul.w	fp, r5, fp
 8020666:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8020668:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802066c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802066e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020672:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020676:	fb05 fa0a 	mul.w	sl, r5, sl
 802067a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802067e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020682:	44de      	add	lr, fp
 8020684:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020688:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802068c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020690:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020694:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020698:	ea4e 050a 	orr.w	r5, lr, sl
 802069c:	950d      	str	r5, [sp, #52]	@ 0x34
 802069e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80206a0:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80206a4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80206a8:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80206ac:	9d08      	ldr	r5, [sp, #32]
 80206ae:	fb08 fc0c 	mul.w	ip, r8, ip
 80206b2:	fb03 cc0e 	mla	ip, r3, lr, ip
 80206b6:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80206ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80206bc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80206c0:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80206c4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80206c6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80206ca:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80206ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80206d0:	fb08 f80e 	mul.w	r8, r8, lr
 80206d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206d8:	fb03 8202 	mla	r2, r3, r2, r8
 80206dc:	9b08      	ldr	r3, [sp, #32]
 80206de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80206e2:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80206e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80206e8:	fb01 220a 	mla	r2, r1, sl, r2
 80206ec:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80206f0:	883b      	ldrh	r3, [r7, #0]
 80206f2:	fb09 2901 	mla	r9, r9, r1, r2
 80206f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80206f8:	1219      	asrs	r1, r3, #8
 80206fa:	4342      	muls	r2, r0
 80206fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020700:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020704:	1c50      	adds	r0, r2, #1
 8020706:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802070a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802070e:	ea4c 0c09 	orr.w	ip, ip, r9
 8020712:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020716:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802071a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802071e:	fa5f fc8c 	uxtb.w	ip, ip
 8020722:	fb12 f205 	smulbb	r2, r2, r5
 8020726:	b2c0      	uxtb	r0, r0
 8020728:	fb1c fc05 	smulbb	ip, ip, r5
 802072c:	fb01 2100 	mla	r1, r1, r0, r2
 8020730:	10da      	asrs	r2, r3, #3
 8020732:	fb1e fe05 	smulbb	lr, lr, r5
 8020736:	00db      	lsls	r3, r3, #3
 8020738:	b289      	uxth	r1, r1
 802073a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802073e:	b2db      	uxtb	r3, r3
 8020740:	fb02 e200 	mla	r2, r2, r0, lr
 8020744:	fb03 c300 	mla	r3, r3, r0, ip
 8020748:	b292      	uxth	r2, r2
 802074a:	fa1f fc83 	uxth.w	ip, r3
 802074e:	1c4b      	adds	r3, r1, #1
 8020750:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020754:	f10c 0301 	add.w	r3, ip, #1
 8020758:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802075c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8020760:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020764:	430b      	orrs	r3, r1
 8020766:	1c51      	adds	r1, r2, #1
 8020768:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802076c:	0952      	lsrs	r2, r2, #5
 802076e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020772:	4313      	orrs	r3, r2
 8020774:	803b      	strh	r3, [r7, #0]
 8020776:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020778:	3702      	adds	r7, #2
 802077a:	441c      	add	r4, r3
 802077c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802077e:	441e      	add	r6, r3
 8020780:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020782:	3b01      	subs	r3, #1
 8020784:	9318      	str	r3, [sp, #96]	@ 0x60
 8020786:	e698      	b.n	80204ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020788:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802078a:	441c      	add	r4, r3
 802078c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802078e:	441e      	add	r6, r3
 8020790:	9b07      	ldr	r3, [sp, #28]
 8020792:	3b01      	subs	r3, #1
 8020794:	9307      	str	r3, [sp, #28]
 8020796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020798:	3302      	adds	r3, #2
 802079a:	930a      	str	r3, [sp, #40]	@ 0x28
 802079c:	e66d      	b.n	802047a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802079e:	d023      	beq.n	80207e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80207a0:	9b07      	ldr	r3, [sp, #28]
 80207a2:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80207a4:	3b01      	subs	r3, #1
 80207a6:	fb00 4003 	mla	r0, r0, r3, r4
 80207aa:	1400      	asrs	r0, r0, #16
 80207ac:	f53f ae82 	bmi.w	80204b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207b0:	3901      	subs	r1, #1
 80207b2:	4288      	cmp	r0, r1
 80207b4:	f6bf ae7e 	bge.w	80204b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207b8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80207ba:	fb01 6303 	mla	r3, r1, r3, r6
 80207be:	141b      	asrs	r3, r3, #16
 80207c0:	f53f ae78 	bmi.w	80204b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207c4:	3a01      	subs	r2, #1
 80207c6:	4293      	cmp	r3, r2
 80207c8:	f6bf ae74 	bge.w	80204b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207cc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80207d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80207d4:	f1bb 0f00 	cmp.w	fp, #0
 80207d8:	dc6c      	bgt.n	80208b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80207da:	9b07      	ldr	r3, [sp, #28]
 80207dc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80207e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80207e2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80207e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80207e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	f340 81b3 	ble.w	8020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80207f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80207f4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80207f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80207fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80207fe:	eef0 6a62 	vmov.f32	s13, s5
 8020802:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020806:	ee31 1a05 	vadd.f32	s2, s2, s10
 802080a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802080e:	ee16 4a90 	vmov	r4, s13
 8020812:	eef0 6a43 	vmov.f32	s13, s6
 8020816:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802081a:	ee16 6a90 	vmov	r6, s13
 802081e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020822:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020826:	ee77 2a62 	vsub.f32	s5, s14, s5
 802082a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802082e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020832:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020836:	ee12 2a90 	vmov	r2, s5
 802083a:	eef0 2a47 	vmov.f32	s5, s14
 802083e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020842:	ee13 2a10 	vmov	r2, s6
 8020846:	9329      	str	r3, [sp, #164]	@ 0xa4
 8020848:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802084a:	eeb0 3a67 	vmov.f32	s6, s15
 802084e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020852:	932a      	str	r3, [sp, #168]	@ 0xa8
 8020854:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020856:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020858:	3b01      	subs	r3, #1
 802085a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802085c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802085e:	bf08      	it	eq
 8020860:	4613      	moveq	r3, r2
 8020862:	9307      	str	r3, [sp, #28]
 8020864:	e5fb      	b.n	802045e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020866:	2900      	cmp	r1, #0
 8020868:	f43f ae6b 	beq.w	8020542 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802086c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020870:	9308      	str	r3, [sp, #32]
 8020872:	0e1b      	lsrs	r3, r3, #24
 8020874:	9311      	str	r3, [sp, #68]	@ 0x44
 8020876:	e664      	b.n	8020542 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020878:	f112 0801 	adds.w	r8, r2, #1
 802087c:	f53f af7b 	bmi.w	8020776 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020880:	4543      	cmp	r3, r8
 8020882:	f6ff af78 	blt.w	8020776 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020886:	f11c 0801 	adds.w	r8, ip, #1
 802088a:	f53f af74 	bmi.w	8020776 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802088e:	45c6      	cmp	lr, r8
 8020890:	f6ff af71 	blt.w	8020776 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020894:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8020896:	b21b      	sxth	r3, r3
 8020898:	9201      	str	r2, [sp, #4]
 802089a:	fa0f f28e 	sxth.w	r2, lr
 802089e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80208a2:	e9cd c002 	strd	ip, r0, [sp, #8]
 80208a6:	9200      	str	r2, [sp, #0]
 80208a8:	4639      	mov	r1, r7
 80208aa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80208ac:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80208ae:	f7ff fc79 	bl	80201a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80208b2:	e760      	b.n	8020776 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80208b4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80208b6:	1427      	asrs	r7, r4, #16
 80208b8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80208ba:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80208be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208c2:	1433      	asrs	r3, r6, #16
 80208c4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80208c8:	fb01 7303 	mla	r3, r1, r3, r7
 80208cc:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80208d0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80208d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80208d8:	2a00      	cmp	r2, #0
 80208da:	f000 8133 	beq.w	8020b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80208de:	687d      	ldr	r5, [r7, #4]
 80208e0:	950e      	str	r5, [sp, #56]	@ 0x38
 80208e2:	0e2d      	lsrs	r5, r5, #24
 80208e4:	9515      	str	r5, [sp, #84]	@ 0x54
 80208e6:	b178      	cbz	r0, 8020908 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80208e8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80208ec:	3901      	subs	r1, #1
 80208ee:	0089      	lsls	r1, r1, #2
 80208f0:	3104      	adds	r1, #4
 80208f2:	eb07 0e01 	add.w	lr, r7, r1
 80208f6:	5879      	ldr	r1, [r7, r1]
 80208f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80208fa:	0e09      	lsrs	r1, r1, #24
 80208fc:	9112      	str	r1, [sp, #72]	@ 0x48
 80208fe:	f8de 1004 	ldr.w	r1, [lr, #4]
 8020902:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020904:	0e09      	lsrs	r1, r1, #24
 8020906:	9116      	str	r1, [sp, #88]	@ 0x58
 8020908:	b292      	uxth	r2, r2
 802090a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802090c:	b280      	uxth	r0, r0
 802090e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020910:	fb02 f800 	mul.w	r8, r2, r0
 8020914:	0112      	lsls	r2, r2, #4
 8020916:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802091a:	eba2 0e08 	sub.w	lr, r2, r8
 802091e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020922:	b280      	uxth	r0, r0
 8020924:	fa1f fe8e 	uxth.w	lr, lr
 8020928:	1a12      	subs	r2, r2, r0
 802092a:	fb0e f101 	mul.w	r1, lr, r1
 802092e:	b292      	uxth	r2, r2
 8020930:	fb02 110c 	mla	r1, r2, ip, r1
 8020934:	fb00 1105 	mla	r1, r0, r5, r1
 8020938:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802093a:	fb08 1105 	mla	r1, r8, r5, r1
 802093e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020942:	2900      	cmp	r1, #0
 8020944:	f000 80f5 	beq.w	8020b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8020948:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802094c:	d019      	beq.n	8020982 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802094e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020952:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020956:	fb0c fa0a 	mul.w	sl, ip, sl
 802095a:	fb0c fc03 	mul.w	ip, ip, r3
 802095e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020962:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020966:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802096a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802096e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020972:	4453      	add	r3, sl
 8020974:	0a3f      	lsrs	r7, r7, #8
 8020976:	0a1b      	lsrs	r3, r3, #8
 8020978:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802097c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020980:	433b      	orrs	r3, r7
 8020982:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8020984:	2dff      	cmp	r5, #255	@ 0xff
 8020986:	d020      	beq.n	80209ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8020988:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802098a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802098e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8020990:	436f      	muls	r7, r5
 8020992:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8020994:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020998:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802099c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802099e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80209a2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80209a6:	fb05 fa0a 	mul.w	sl, r5, sl
 80209aa:	44bc      	add	ip, r7
 80209ac:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80209b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80209bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209c0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80209c4:	ea4c 050a 	orr.w	r5, ip, sl
 80209c8:	950e      	str	r5, [sp, #56]	@ 0x38
 80209ca:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80209cc:	2dff      	cmp	r5, #255	@ 0xff
 80209ce:	d020      	beq.n	8020a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80209d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80209d2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80209d6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80209d8:	436f      	muls	r7, r5
 80209da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80209dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80209e0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80209e4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80209e6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80209ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80209ee:	fb05 fa0a 	mul.w	sl, r5, sl
 80209f2:	44bc      	add	ip, r7
 80209f4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80209f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a00:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a08:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a0c:	ea4c 050a 	orr.w	r5, ip, sl
 8020a10:	9509      	str	r5, [sp, #36]	@ 0x24
 8020a12:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020a14:	2dff      	cmp	r5, #255	@ 0xff
 8020a16:	d020      	beq.n	8020a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8020a18:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020a1a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8020a1e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020a20:	436f      	muls	r7, r5
 8020a22:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020a24:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a28:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8020a2c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020a2e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020a32:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a36:	fb05 fa0a 	mul.w	sl, r5, sl
 8020a3a:	44bc      	add	ip, r7
 8020a3c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020a40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a44:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a48:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a50:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a54:	ea4c 050a 	orr.w	r5, ip, sl
 8020a58:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020a5a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8020a5c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020a60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020a64:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8020a68:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8020a6a:	fb0e f707 	mul.w	r7, lr, r7
 8020a6e:	fb02 770c 	mla	r7, r2, ip, r7
 8020a72:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8020a76:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020a78:	fb00 770c 	mla	r7, r0, ip, r7
 8020a7c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8020a80:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8020a82:	fb08 770c 	mla	r7, r8, ip, r7
 8020a86:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8020a8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020a8c:	fb0e fe0c 	mul.w	lr, lr, ip
 8020a90:	0a3f      	lsrs	r7, r7, #8
 8020a92:	fb02 e303 	mla	r3, r2, r3, lr
 8020a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a98:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020a9c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020aa0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020aa2:	fb00 330a 	mla	r3, r0, sl, r3
 8020aa6:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8020aaa:	f8b9 0000 	ldrh.w	r0, [r9]
 8020aae:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ab4:	1202      	asrs	r2, r0, #8
 8020ab6:	4359      	muls	r1, r3
 8020ab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020abc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020ac0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020ac4:	1c4b      	adds	r3, r1, #1
 8020ac6:	ea47 070c 	orr.w	r7, r7, ip
 8020aca:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020ace:	0c3b      	lsrs	r3, r7, #16
 8020ad0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020ad4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020ad8:	b2ff      	uxtb	r7, r7
 8020ada:	fb13 f305 	smulbb	r3, r3, r5
 8020ade:	b2c9      	uxtb	r1, r1
 8020ae0:	fb17 f705 	smulbb	r7, r7, r5
 8020ae4:	fb02 3201 	mla	r2, r2, r1, r3
 8020ae8:	10c3      	asrs	r3, r0, #3
 8020aea:	fb1c fc05 	smulbb	ip, ip, r5
 8020aee:	00c0      	lsls	r0, r0, #3
 8020af0:	b292      	uxth	r2, r2
 8020af2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020af6:	b2c0      	uxtb	r0, r0
 8020af8:	fb03 c301 	mla	r3, r3, r1, ip
 8020afc:	fb00 7001 	mla	r0, r0, r1, r7
 8020b00:	1c51      	adds	r1, r2, #1
 8020b02:	b29b      	uxth	r3, r3
 8020b04:	b280      	uxth	r0, r0
 8020b06:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020b0a:	f100 0c01 	add.w	ip, r0, #1
 8020b0e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8020b12:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8020b16:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020b1a:	ea4c 0202 	orr.w	r2, ip, r2
 8020b1e:	f103 0c01 	add.w	ip, r3, #1
 8020b22:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020b26:	095b      	lsrs	r3, r3, #5
 8020b28:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020b2c:	431a      	orrs	r2, r3
 8020b2e:	f8a9 2000 	strh.w	r2, [r9]
 8020b32:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020b34:	f109 0902 	add.w	r9, r9, #2
 8020b38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b3c:	441c      	add	r4, r3
 8020b3e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020b40:	441e      	add	r6, r3
 8020b42:	e647      	b.n	80207d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020b44:	2800      	cmp	r0, #0
 8020b46:	f43f aedf 	beq.w	8020908 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020b4a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8020b4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8020b50:	0e09      	lsrs	r1, r1, #24
 8020b52:	9112      	str	r1, [sp, #72]	@ 0x48
 8020b54:	e6d8      	b.n	8020908 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020b56:	b01d      	add	sp, #116	@ 0x74
 8020b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8020b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b60:	b085      	sub	sp, #20
 8020b62:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8020b66:	9102      	str	r1, [sp, #8]
 8020b68:	2c00      	cmp	r4, #0
 8020b6a:	fb04 7103 	mla	r1, r4, r3, r7
 8020b6e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8020b72:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8020b76:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020b7a:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8020b7e:	f2c0 810c 	blt.w	8020d9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020b82:	45a6      	cmp	lr, r4
 8020b84:	f340 8109 	ble.w	8020d9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020b88:	2f00      	cmp	r7, #0
 8020b8a:	f2c0 8104 	blt.w	8020d96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020b8e:	42bb      	cmp	r3, r7
 8020b90:	f340 8101 	ble.w	8020d96 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020b94:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020b98:	1c7a      	adds	r2, r7, #1
 8020b9a:	f100 8101 	bmi.w	8020da0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020b9e:	4293      	cmp	r3, r2
 8020ba0:	f340 80fe 	ble.w	8020da0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020ba4:	2e00      	cmp	r6, #0
 8020ba6:	f000 80fd 	beq.w	8020da4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8020baa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020bae:	3401      	adds	r4, #1
 8020bb0:	f100 80fc 	bmi.w	8020dac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020bb4:	45a6      	cmp	lr, r4
 8020bb6:	f340 80f9 	ble.w	8020dac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020bba:	2800      	cmp	r0, #0
 8020bbc:	f000 80f9 	beq.w	8020db2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8020bc0:	2f00      	cmp	r7, #0
 8020bc2:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8020bc6:	f2c0 80ef 	blt.w	8020da8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020bca:	42bb      	cmp	r3, r7
 8020bcc:	f340 80ec 	ble.w	8020da8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020bd0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020bd4:	3701      	adds	r7, #1
 8020bd6:	f100 80ef 	bmi.w	8020db8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020bda:	42bb      	cmp	r3, r7
 8020bdc:	f340 80ec 	ble.w	8020db8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020be0:	2e00      	cmp	r6, #0
 8020be2:	f000 80eb 	beq.w	8020dbc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8020be6:	6852      	ldr	r2, [r2, #4]
 8020be8:	b2b6      	uxth	r6, r6
 8020bea:	b280      	uxth	r0, r0
 8020bec:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020bf0:	fb00 fe06 	mul.w	lr, r0, r6
 8020bf4:	0136      	lsls	r6, r6, #4
 8020bf6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020bfa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020bfe:	eba6 070e 	sub.w	r7, r6, lr
 8020c02:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8020c06:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020c0a:	b280      	uxth	r0, r0
 8020c0c:	b2bf      	uxth	r7, r7
 8020c0e:	1a1b      	subs	r3, r3, r0
 8020c10:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020c14:	fb07 f60a 	mul.w	r6, r7, sl
 8020c18:	b29b      	uxth	r3, r3
 8020c1a:	fb0b 6603 	mla	r6, fp, r3, r6
 8020c1e:	fb00 6609 	mla	r6, r0, r9, r6
 8020c22:	fb0e 6608 	mla	r6, lr, r8, r6
 8020c26:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020c2a:	9600      	str	r6, [sp, #0]
 8020c2c:	2e00      	cmp	r6, #0
 8020c2e:	f000 80af 	beq.w	8020d90 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8020c32:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8020c36:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020c3a:	9e02      	ldr	r6, [sp, #8]
 8020c3c:	fb0b fc0c 	mul.w	ip, fp, ip
 8020c40:	fb0b f505 	mul.w	r5, fp, r5
 8020c44:	8836      	ldrh	r6, [r6, #0]
 8020c46:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020c4a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020c4e:	9501      	str	r5, [sp, #4]
 8020c50:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8020c54:	44dc      	add	ip, fp
 8020c56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c5a:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8020c5e:	9503      	str	r5, [sp, #12]
 8020c60:	9d01      	ldr	r5, [sp, #4]
 8020c62:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8020c66:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020c6a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8020c6e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8020c72:	fb0a fc0c 	mul.w	ip, sl, ip
 8020c76:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020c7a:	fb0a fa01 	mul.w	sl, sl, r1
 8020c7e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020c82:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020c86:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8020c8a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020c8e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020c92:	4465      	add	r5, ip
 8020c94:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020c98:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8020c9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ca0:	fb09 fc0c 	mul.w	ip, r9, ip
 8020ca4:	0a2d      	lsrs	r5, r5, #8
 8020ca6:	fb09 f904 	mul.w	r9, r9, r4
 8020caa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020cae:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020cb2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020cb6:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8020cba:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020cbe:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8020cc2:	437d      	muls	r5, r7
 8020cc4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020cc8:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8020ccc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020cd0:	4461      	add	r1, ip
 8020cd2:	fb08 f404 	mul.w	r4, r8, r4
 8020cd6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020cda:	fb08 f802 	mul.w	r8, r8, r2
 8020cde:	0a09      	lsrs	r1, r1, #8
 8020ce0:	0a22      	lsrs	r2, r4, #8
 8020ce2:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8020ce6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8020cea:	fb07 f70a 	mul.w	r7, r7, sl
 8020cee:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020cf2:	4414      	add	r4, r2
 8020cf4:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020cf8:	0a24      	lsrs	r4, r4, #8
 8020cfa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020cfe:	9a03      	ldr	r2, [sp, #12]
 8020d00:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8020d04:	fb02 5503 	mla	r5, r2, r3, r5
 8020d08:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020d0c:	fb04 540e 	mla	r4, r4, lr, r5
 8020d10:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020d14:	fb01 4100 	mla	r1, r1, r0, r4
 8020d18:	0a09      	lsrs	r1, r1, #8
 8020d1a:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8020d1e:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8020d22:	fb03 7101 	mla	r1, r3, r1, r7
 8020d26:	9b00      	ldr	r3, [sp, #0]
 8020d28:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020d2c:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8020d30:	43da      	mvns	r2, r3
 8020d32:	1233      	asrs	r3, r6, #8
 8020d34:	fb00 e101 	mla	r1, r0, r1, lr
 8020d38:	10f0      	asrs	r0, r6, #3
 8020d3a:	b2d2      	uxtb	r2, r2
 8020d3c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8020d40:	0a09      	lsrs	r1, r1, #8
 8020d42:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8020d46:	00f6      	lsls	r6, r6, #3
 8020d48:	4353      	muls	r3, r2
 8020d4a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8020d4e:	4350      	muls	r0, r2
 8020d50:	b2f6      	uxtb	r6, r6
 8020d52:	4321      	orrs	r1, r4
 8020d54:	4356      	muls	r6, r2
 8020d56:	1c5a      	adds	r2, r3, #1
 8020d58:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020d5c:	0c0b      	lsrs	r3, r1, #16
 8020d5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020d62:	1c42      	adds	r2, r0, #1
 8020d64:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020d68:	0a0a      	lsrs	r2, r1, #8
 8020d6a:	021b      	lsls	r3, r3, #8
 8020d6c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020d70:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8020d74:	00d2      	lsls	r2, r2, #3
 8020d76:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020d7a:	4313      	orrs	r3, r2
 8020d7c:	1c72      	adds	r2, r6, #1
 8020d7e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020d82:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8020d86:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020d8a:	4319      	orrs	r1, r3
 8020d8c:	9b02      	ldr	r3, [sp, #8]
 8020d8e:	8019      	strh	r1, [r3, #0]
 8020d90:	b005      	add	sp, #20
 8020d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d96:	2500      	movs	r5, #0
 8020d98:	e6fe      	b.n	8020b98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8020d9a:	2100      	movs	r1, #0
 8020d9c:	460d      	mov	r5, r1
 8020d9e:	e706      	b.n	8020bae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020da0:	2100      	movs	r1, #0
 8020da2:	e704      	b.n	8020bae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020da4:	4631      	mov	r1, r6
 8020da6:	e702      	b.n	8020bae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020da8:	2400      	movs	r4, #0
 8020daa:	e713      	b.n	8020bd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8020dac:	2200      	movs	r2, #0
 8020dae:	4614      	mov	r4, r2
 8020db0:	e71a      	b.n	8020be8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020db2:	4602      	mov	r2, r0
 8020db4:	4604      	mov	r4, r0
 8020db6:	e717      	b.n	8020be8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020db8:	2200      	movs	r2, #0
 8020dba:	e715      	b.n	8020be8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020dbc:	4632      	mov	r2, r6
 8020dbe:	e713      	b.n	8020be8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08020dc0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc4:	b09b      	sub	sp, #108	@ 0x6c
 8020dc6:	9218      	str	r2, [sp, #96]	@ 0x60
 8020dc8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020dca:	9019      	str	r0, [sp, #100]	@ 0x64
 8020dcc:	9116      	str	r1, [sp, #88]	@ 0x58
 8020dce:	6850      	ldr	r0, [r2, #4]
 8020dd0:	9307      	str	r3, [sp, #28]
 8020dd2:	6812      	ldr	r2, [r2, #0]
 8020dd4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8020dd8:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8020ddc:	fb00 1303 	mla	r3, r0, r3, r1
 8020de0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8020de6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020dec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	dc03      	bgt.n	8020dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020df2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	f340 8387 	ble.w	8021508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8020dfa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020dfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e04:	1e48      	subs	r0, r1, #1
 8020e06:	1e57      	subs	r7, r2, #1
 8020e08:	9b07      	ldr	r3, [sp, #28]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	f340 8166 	ble.w	80210dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020e10:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020e14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020e18:	d406      	bmi.n	8020e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020e1a:	4584      	cmp	ip, r0
 8020e1c:	da04      	bge.n	8020e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	db02      	blt.n	8020e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020e22:	42bb      	cmp	r3, r7
 8020e24:	f2c0 815b 	blt.w	80210de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020e28:	f11c 0c01 	adds.w	ip, ip, #1
 8020e2c:	f100 814b 	bmi.w	80210c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020e30:	4561      	cmp	r1, ip
 8020e32:	f2c0 8148 	blt.w	80210c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020e36:	3301      	adds	r3, #1
 8020e38:	f100 8145 	bmi.w	80210c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020e3c:	429a      	cmp	r2, r3
 8020e3e:	f2c0 8142 	blt.w	80210c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020e42:	9b07      	ldr	r3, [sp, #28]
 8020e44:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020e46:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020e48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	f340 8165 	ble.w	802111a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020e50:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8020e52:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020e56:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020e58:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020e5c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020e60:	1422      	asrs	r2, r4, #16
 8020e62:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020e66:	689b      	ldr	r3, [r3, #8]
 8020e68:	f100 81d5 	bmi.w	8021216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020e6c:	f103 38ff 	add.w	r8, r3, #4294967295
 8020e70:	4542      	cmp	r2, r8
 8020e72:	f280 81d0 	bge.w	8021216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020e76:	f1bc 0f00 	cmp.w	ip, #0
 8020e7a:	f2c0 81cc 	blt.w	8021216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020e7e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020e82:	45c4      	cmp	ip, r8
 8020e84:	f280 81c7 	bge.w	8021216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020e88:	b21b      	sxth	r3, r3
 8020e8a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020e8c:	fb0c 2203 	mla	r2, ip, r3, r2
 8020e90:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020e94:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020e98:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020e9c:	2900      	cmp	r1, #0
 8020e9e:	f000 8182 	beq.w	80211a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020ea2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020ea6:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020ea8:	0e2d      	lsrs	r5, r5, #24
 8020eaa:	9512      	str	r5, [sp, #72]	@ 0x48
 8020eac:	b180      	cbz	r0, 8020ed0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020eae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8020eb2:	3b01      	subs	r3, #1
 8020eb4:	009b      	lsls	r3, r3, #2
 8020eb6:	3304      	adds	r3, #4
 8020eb8:	eb08 0c03 	add.w	ip, r8, r3
 8020ebc:	f858 3003 	ldr.w	r3, [r8, r3]
 8020ec0:	9308      	str	r3, [sp, #32]
 8020ec2:	0e1b      	lsrs	r3, r3, #24
 8020ec4:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ec6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020eca:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ecc:	0e1b      	lsrs	r3, r3, #24
 8020ece:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020ed0:	b289      	uxth	r1, r1
 8020ed2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020ed4:	b280      	uxth	r0, r0
 8020ed6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020ed8:	fb01 f900 	mul.w	r9, r1, r0
 8020edc:	0109      	lsls	r1, r1, #4
 8020ede:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020ee2:	eba1 0809 	sub.w	r8, r1, r9
 8020ee6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8020eea:	b280      	uxth	r0, r0
 8020eec:	fa1f f888 	uxth.w	r8, r8
 8020ef0:	1a09      	subs	r1, r1, r0
 8020ef2:	fb08 f303 	mul.w	r3, r8, r3
 8020ef6:	b289      	uxth	r1, r1
 8020ef8:	fb01 330e 	mla	r3, r1, lr, r3
 8020efc:	fb00 3305 	mla	r3, r0, r5, r3
 8020f00:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020f02:	fb09 3305 	mla	r3, r9, r5, r3
 8020f06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	f000 80d2 	beq.w	80210b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020f10:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020f14:	d01b      	beq.n	8020f4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8020f16:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8020f1a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020f1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f22:	fb0e fe02 	mul.w	lr, lr, r2
 8020f26:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020f2a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020f2e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020f32:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020f36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f3a:	4452      	add	r2, sl
 8020f3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f40:	0a12      	lsrs	r2, r2, #8
 8020f42:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020f46:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020f4a:	ea42 020c 	orr.w	r2, r2, ip
 8020f4e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020f50:	2dff      	cmp	r5, #255	@ 0xff
 8020f52:	d021      	beq.n	8020f98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020f54:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020f56:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020f5a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020f5c:	fb05 fb0b 	mul.w	fp, r5, fp
 8020f60:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020f62:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8020f66:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020f68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f6c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020f70:	fb05 fa0a 	mul.w	sl, r5, sl
 8020f74:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020f78:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020f7c:	44de      	add	lr, fp
 8020f7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f8a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020f8e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020f92:	ea4e 050a 	orr.w	r5, lr, sl
 8020f96:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020f98:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020f9a:	2dff      	cmp	r5, #255	@ 0xff
 8020f9c:	d021      	beq.n	8020fe2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8020f9e:	9d08      	ldr	r5, [sp, #32]
 8020fa0:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020fa4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020fa6:	fb05 fb0b 	mul.w	fp, r5, fp
 8020faa:	9d08      	ldr	r5, [sp, #32]
 8020fac:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8020fb0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020fb2:	fb05 fa0e 	mul.w	sl, r5, lr
 8020fb6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fba:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020fbe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020fc2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020fc6:	44de      	add	lr, fp
 8020fc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fd4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020fd8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020fdc:	ea4e 050a 	orr.w	r5, lr, sl
 8020fe0:	9508      	str	r5, [sp, #32]
 8020fe2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020fe4:	2dff      	cmp	r5, #255	@ 0xff
 8020fe6:	d021      	beq.n	802102c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020fe8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020fea:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020fee:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020ff0:	fb05 fb0b 	mul.w	fp, r5, fp
 8020ff4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020ff6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8020ffa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020ffc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021000:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021004:	fb05 fa0a 	mul.w	sl, r5, sl
 8021008:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802100c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021010:	44de      	add	lr, fp
 8021012:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021016:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802101a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802101e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021022:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021026:	ea4e 050a 	orr.w	r5, lr, sl
 802102a:	950c      	str	r5, [sp, #48]	@ 0x30
 802102c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802102e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8021032:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021036:	2bff      	cmp	r3, #255	@ 0xff
 8021038:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802103c:	9d08      	ldr	r5, [sp, #32]
 802103e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021042:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021046:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802104a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802104c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021050:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8021054:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8021056:	fb09 cc0e 	mla	ip, r9, lr, ip
 802105a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802105e:	fb08 f80e 	mul.w	r8, r8, lr
 8021062:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021066:	fb01 8202 	mla	r2, r1, r2, r8
 802106a:	9908      	ldr	r1, [sp, #32]
 802106c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021070:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8021074:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021076:	fb00 220a 	mla	r2, r0, sl, r2
 802107a:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802107e:	fb09 2900 	mla	r9, r9, r0, r2
 8021082:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021086:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802108a:	ea4c 0c09 	orr.w	ip, ip, r9
 802108e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8021092:	f040 8091 	bne.w	80211b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021096:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802109a:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 802109e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80210a2:	f022 0207 	bic.w	r2, r2, #7
 80210a6:	431a      	orrs	r2, r3
 80210a8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80210ac:	ea4c 0c02 	orr.w	ip, ip, r2
 80210b0:	f8a7 c000 	strh.w	ip, [r7]
 80210b4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80210b6:	3702      	adds	r7, #2
 80210b8:	441c      	add	r4, r3
 80210ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80210bc:	441e      	add	r6, r3
 80210be:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210c0:	3b01      	subs	r3, #1
 80210c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80210c4:	e6c0      	b.n	8020e48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80210c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80210c8:	441c      	add	r4, r3
 80210ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80210cc:	441e      	add	r6, r3
 80210ce:	9b07      	ldr	r3, [sp, #28]
 80210d0:	3b01      	subs	r3, #1
 80210d2:	9307      	str	r3, [sp, #28]
 80210d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80210d6:	3302      	adds	r3, #2
 80210d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80210da:	e695      	b.n	8020e08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80210dc:	d024      	beq.n	8021128 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80210de:	9b07      	ldr	r3, [sp, #28]
 80210e0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80210e2:	3b01      	subs	r3, #1
 80210e4:	fb00 4003 	mla	r0, r0, r3, r4
 80210e8:	1400      	asrs	r0, r0, #16
 80210ea:	f53f aeaa 	bmi.w	8020e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80210ee:	3901      	subs	r1, #1
 80210f0:	4288      	cmp	r0, r1
 80210f2:	f6bf aea6 	bge.w	8020e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80210f6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80210f8:	fb01 6303 	mla	r3, r1, r3, r6
 80210fc:	141b      	asrs	r3, r3, #16
 80210fe:	f53f aea0 	bmi.w	8020e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021102:	3a01      	subs	r2, #1
 8021104:	4293      	cmp	r3, r2
 8021106:	f6bf ae9c 	bge.w	8020e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802110a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802110e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8021112:	f1bb 0f00 	cmp.w	fp, #0
 8021116:	f300 809a 	bgt.w	802124e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802111a:	9b07      	ldr	r3, [sp, #28]
 802111c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021122:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021126:	930a      	str	r3, [sp, #40]	@ 0x28
 8021128:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802112a:	2b00      	cmp	r3, #0
 802112c:	f340 81ec 	ble.w	8021508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021134:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021136:	ee30 0a04 	vadd.f32	s0, s0, s8
 802113a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802113e:	eef0 6a62 	vmov.f32	s13, s5
 8021142:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021146:	ee31 1a05 	vadd.f32	s2, s2, s10
 802114a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802114e:	ee16 4a90 	vmov	r4, s13
 8021152:	eef0 6a43 	vmov.f32	s13, s6
 8021156:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802115a:	ee16 6a90 	vmov	r6, s13
 802115e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021162:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021166:	ee77 2a62 	vsub.f32	s5, s14, s5
 802116a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802116e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021172:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021176:	ee12 2a90 	vmov	r2, s5
 802117a:	eef0 2a47 	vmov.f32	s5, s14
 802117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021182:	ee13 2a10 	vmov	r2, s6
 8021186:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021188:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802118a:	eeb0 3a67 	vmov.f32	s6, s15
 802118e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021192:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021196:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021198:	3b01      	subs	r3, #1
 802119a:	9316      	str	r3, [sp, #88]	@ 0x58
 802119c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802119e:	bf08      	it	eq
 80211a0:	4613      	moveq	r3, r2
 80211a2:	9307      	str	r3, [sp, #28]
 80211a4:	e622      	b.n	8020dec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80211a6:	2800      	cmp	r0, #0
 80211a8:	f43f ae92 	beq.w	8020ed0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80211ac:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80211b0:	9308      	str	r3, [sp, #32]
 80211b2:	0e1b      	lsrs	r3, r3, #24
 80211b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80211b6:	e68b      	b.n	8020ed0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80211b8:	8839      	ldrh	r1, [r7, #0]
 80211ba:	43db      	mvns	r3, r3
 80211bc:	4dd4      	ldr	r5, [pc, #848]	@ (8021510 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80211be:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80211c2:	fa5f f883 	uxtb.w	r8, r3
 80211c6:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80211ca:	10c8      	asrs	r0, r1, #3
 80211cc:	00cb      	lsls	r3, r1, #3
 80211ce:	fb0e fe08 	mul.w	lr, lr, r8
 80211d2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80211d6:	b2db      	uxtb	r3, r3
 80211d8:	f10e 0101 	add.w	r1, lr, #1
 80211dc:	fb00 f008 	mul.w	r0, r0, r8
 80211e0:	fb03 f308 	mul.w	r3, r3, r8
 80211e4:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80211e8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80211ec:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80211f0:	f100 0e01 	add.w	lr, r0, #1
 80211f4:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80211f8:	b2c9      	uxtb	r1, r1
 80211fa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80211fe:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8021202:	00d2      	lsls	r2, r2, #3
 8021204:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021208:	430a      	orrs	r2, r1
 802120a:	1c59      	adds	r1, r3, #1
 802120c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021210:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021214:	e748      	b.n	80210a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021216:	f112 0801 	adds.w	r8, r2, #1
 802121a:	f53f af4b 	bmi.w	80210b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802121e:	4543      	cmp	r3, r8
 8021220:	f6ff af48 	blt.w	80210b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021224:	f11c 0801 	adds.w	r8, ip, #1
 8021228:	f53f af44 	bmi.w	80210b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802122c:	45c6      	cmp	lr, r8
 802122e:	f6ff af41 	blt.w	80210b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021232:	b21b      	sxth	r3, r3
 8021234:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021238:	fa0f f28e 	sxth.w	r2, lr
 802123c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021240:	9200      	str	r2, [sp, #0]
 8021242:	4639      	mov	r1, r7
 8021244:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021246:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021248:	f7ff fc88 	bl	8020b5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802124c:	e732      	b.n	80210b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802124e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021250:	1421      	asrs	r1, r4, #16
 8021252:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021254:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021258:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802125c:	1433      	asrs	r3, r6, #16
 802125e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021262:	fb07 1303 	mla	r3, r7, r3, r1
 8021266:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021268:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802126c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021270:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021274:	2a00      	cmp	r2, #0
 8021276:	f000 8108 	beq.w	802148a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802127a:	684d      	ldr	r5, [r1, #4]
 802127c:	950d      	str	r5, [sp, #52]	@ 0x34
 802127e:	0e2d      	lsrs	r5, r5, #24
 8021280:	9514      	str	r5, [sp, #80]	@ 0x50
 8021282:	b178      	cbz	r0, 80212a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021284:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8021288:	3f01      	subs	r7, #1
 802128a:	00bf      	lsls	r7, r7, #2
 802128c:	3704      	adds	r7, #4
 802128e:	eb01 0e07 	add.w	lr, r1, r7
 8021292:	59c9      	ldr	r1, [r1, r7]
 8021294:	9109      	str	r1, [sp, #36]	@ 0x24
 8021296:	0e09      	lsrs	r1, r1, #24
 8021298:	9111      	str	r1, [sp, #68]	@ 0x44
 802129a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802129e:	910e      	str	r1, [sp, #56]	@ 0x38
 80212a0:	0e09      	lsrs	r1, r1, #24
 80212a2:	9115      	str	r1, [sp, #84]	@ 0x54
 80212a4:	b292      	uxth	r2, r2
 80212a6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80212a8:	b280      	uxth	r0, r0
 80212aa:	fb02 f900 	mul.w	r9, r2, r0
 80212ae:	0112      	lsls	r2, r2, #4
 80212b0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80212b4:	eba2 0e09 	sub.w	lr, r2, r9
 80212b8:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80212bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80212be:	b280      	uxth	r0, r0
 80212c0:	fa1f fe8e 	uxth.w	lr, lr
 80212c4:	1a09      	subs	r1, r1, r0
 80212c6:	fb0e f202 	mul.w	r2, lr, r2
 80212ca:	b289      	uxth	r1, r1
 80212cc:	fb01 220c 	mla	r2, r1, ip, r2
 80212d0:	fb00 2205 	mla	r2, r0, r5, r2
 80212d4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80212d6:	fb09 2205 	mla	r2, r9, r5, r2
 80212da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80212de:	2a00      	cmp	r2, #0
 80212e0:	f000 80ca 	beq.w	8021478 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80212e4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80212e8:	d019      	beq.n	802131e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80212ea:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80212ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80212f2:	fb0c fa0a 	mul.w	sl, ip, sl
 80212f6:	fb0c fc03 	mul.w	ip, ip, r3
 80212fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80212fe:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021302:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8021306:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802130a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802130e:	4453      	add	r3, sl
 8021310:	0a3f      	lsrs	r7, r7, #8
 8021312:	0a1b      	lsrs	r3, r3, #8
 8021314:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021318:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802131c:	433b      	orrs	r3, r7
 802131e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021320:	2dff      	cmp	r5, #255	@ 0xff
 8021322:	d020      	beq.n	8021366 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8021324:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021326:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802132a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802132c:	436f      	muls	r7, r5
 802132e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021330:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021334:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8021338:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802133a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802133e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021342:	fb05 fa0a 	mul.w	sl, r5, sl
 8021346:	44bc      	add	ip, r7
 8021348:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802134c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021350:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021354:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021358:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802135c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021360:	ea4c 050a 	orr.w	r5, ip, sl
 8021364:	950d      	str	r5, [sp, #52]	@ 0x34
 8021366:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021368:	2dff      	cmp	r5, #255	@ 0xff
 802136a:	d020      	beq.n	80213ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802136c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802136e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021372:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021374:	436f      	muls	r7, r5
 8021376:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021378:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802137c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802137e:	fb05 fa0c 	mul.w	sl, r5, ip
 8021382:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021386:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802138a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802138e:	44bc      	add	ip, r7
 8021390:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021394:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021398:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802139c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80213a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80213a8:	ea4c 050a 	orr.w	r5, ip, sl
 80213ac:	9509      	str	r5, [sp, #36]	@ 0x24
 80213ae:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80213b0:	2dff      	cmp	r5, #255	@ 0xff
 80213b2:	d020      	beq.n	80213f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80213b4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80213b6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80213ba:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80213bc:	436f      	muls	r7, r5
 80213be:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80213c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213c4:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80213c8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80213ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80213ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80213d2:	fb05 fa0a 	mul.w	sl, r5, sl
 80213d6:	44bc      	add	ip, r7
 80213d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80213dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80213e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80213f0:	ea4c 050a 	orr.w	r5, ip, sl
 80213f4:	950e      	str	r5, [sp, #56]	@ 0x38
 80213f6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80213f8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80213fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021400:	2aff      	cmp	r2, #255	@ 0xff
 8021402:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8021406:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021408:	fb0e f707 	mul.w	r7, lr, r7
 802140c:	fb01 770c 	mla	r7, r1, ip, r7
 8021410:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8021414:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021416:	fb00 770c 	mla	r7, r0, ip, r7
 802141a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802141e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021420:	fb09 770c 	mla	r7, r9, ip, r7
 8021424:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8021428:	fb0e fe0c 	mul.w	lr, lr, ip
 802142c:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8021430:	fb01 e303 	mla	r3, r1, r3, lr
 8021434:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021436:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802143a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802143e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021440:	fb00 330a 	mla	r3, r0, sl, r3
 8021444:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8021448:	fb09 3c0c 	mla	ip, r9, ip, r3
 802144c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021450:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021454:	ea47 070c 	orr.w	r7, r7, ip
 8021458:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802145c:	d11e      	bne.n	802149c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802145e:	097a      	lsrs	r2, r7, #5
 8021460:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8021464:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8021468:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802146c:	f023 0307 	bic.w	r3, r3, #7
 8021470:	4313      	orrs	r3, r2
 8021472:	431f      	orrs	r7, r3
 8021474:	f8a8 7000 	strh.w	r7, [r8]
 8021478:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802147a:	f108 0802 	add.w	r8, r8, #2
 802147e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021482:	441c      	add	r4, r3
 8021484:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021486:	441e      	add	r6, r3
 8021488:	e643      	b.n	8021112 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802148a:	2800      	cmp	r0, #0
 802148c:	f43f af0a 	beq.w	80212a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021490:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8021494:	9109      	str	r1, [sp, #36]	@ 0x24
 8021496:	0e09      	lsrs	r1, r1, #24
 8021498:	9111      	str	r1, [sp, #68]	@ 0x44
 802149a:	e703      	b.n	80212a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802149c:	f8b8 1000 	ldrh.w	r1, [r8]
 80214a0:	43d2      	mvns	r2, r2
 80214a2:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80214a6:	fa5f fe82 	uxtb.w	lr, r2
 80214aa:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80214ae:	10c8      	asrs	r0, r1, #3
 80214b0:	00ca      	lsls	r2, r1, #3
 80214b2:	fb0c fc0e 	mul.w	ip, ip, lr
 80214b6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80214ba:	b2d2      	uxtb	r2, r2
 80214bc:	f10c 0101 	add.w	r1, ip, #1
 80214c0:	fb00 f00e 	mul.w	r0, r0, lr
 80214c4:	fb02 f20e 	mul.w	r2, r2, lr
 80214c8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80214cc:	0c39      	lsrs	r1, r7, #16
 80214ce:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80214d2:	490f      	ldr	r1, [pc, #60]	@ (8021510 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80214d4:	fa5f fc8c 	uxtb.w	ip, ip
 80214d8:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80214dc:	1c41      	adds	r1, r0, #1
 80214de:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80214e2:	1c51      	adds	r1, r2, #1
 80214e4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80214e8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80214ec:	00c0      	lsls	r0, r0, #3
 80214ee:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80214f2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80214f6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80214fa:	ea4c 0c00 	orr.w	ip, ip, r0
 80214fe:	ea47 0c0c 	orr.w	ip, r7, ip
 8021502:	f8a8 c000 	strh.w	ip, [r8]
 8021506:	e7b7      	b.n	8021478 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021508:	b01b      	add	sp, #108	@ 0x6c
 802150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802150e:	bf00      	nop
 8021510:	fffff800 	.word	0xfffff800

08021514 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8021514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021518:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802151c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021520:	2d00      	cmp	r5, #0
 8021522:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021526:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802152a:	fb05 0e03 	mla	lr, r5, r3, r0
 802152e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8021532:	f2c0 808c 	blt.w	802164e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8021536:	45a9      	cmp	r9, r5
 8021538:	f340 8089 	ble.w	802164e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802153c:	2800      	cmp	r0, #0
 802153e:	f2c0 8084 	blt.w	802164a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021542:	4580      	cmp	r8, r0
 8021544:	f340 8081 	ble.w	802164a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8021548:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802154c:	f01e 0f01 	tst.w	lr, #1
 8021550:	5d16      	ldrb	r6, [r2, r4]
 8021552:	bf0c      	ite	eq
 8021554:	f006 060f 	andeq.w	r6, r6, #15
 8021558:	1136      	asrne	r6, r6, #4
 802155a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802155e:	b2f6      	uxtb	r6, r6
 8021560:	1c44      	adds	r4, r0, #1
 8021562:	d477      	bmi.n	8021654 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021564:	45a0      	cmp	r8, r4
 8021566:	dd75      	ble.n	8021654 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8021568:	2f00      	cmp	r7, #0
 802156a:	d075      	beq.n	8021658 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802156c:	f10e 0a01 	add.w	sl, lr, #1
 8021570:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021574:	f01a 0f01 	tst.w	sl, #1
 8021578:	5d14      	ldrb	r4, [r2, r4]
 802157a:	bf0c      	ite	eq
 802157c:	f004 040f 	andeq.w	r4, r4, #15
 8021580:	1124      	asrne	r4, r4, #4
 8021582:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021586:	b2e4      	uxtb	r4, r4
 8021588:	3501      	adds	r5, #1
 802158a:	d469      	bmi.n	8021660 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802158c:	45a9      	cmp	r9, r5
 802158e:	dd67      	ble.n	8021660 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8021590:	f1bc 0f00 	cmp.w	ip, #0
 8021594:	d067      	beq.n	8021666 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8021596:	2800      	cmp	r0, #0
 8021598:	db60      	blt.n	802165c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802159a:	4580      	cmp	r8, r0
 802159c:	dd5e      	ble.n	802165c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802159e:	eb03 090e 	add.w	r9, r3, lr
 80215a2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80215a6:	f019 0f01 	tst.w	r9, #1
 80215aa:	5d55      	ldrb	r5, [r2, r5]
 80215ac:	bf0c      	ite	eq
 80215ae:	f005 050f 	andeq.w	r5, r5, #15
 80215b2:	112d      	asrne	r5, r5, #4
 80215b4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80215b8:	b2ed      	uxtb	r5, r5
 80215ba:	3001      	adds	r0, #1
 80215bc:	d456      	bmi.n	802166c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80215be:	4580      	cmp	r8, r0
 80215c0:	dd54      	ble.n	802166c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80215c2:	2f00      	cmp	r7, #0
 80215c4:	d054      	beq.n	8021670 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80215c6:	3301      	adds	r3, #1
 80215c8:	449e      	add	lr, r3
 80215ca:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80215ce:	f01e 0f01 	tst.w	lr, #1
 80215d2:	5cd0      	ldrb	r0, [r2, r3]
 80215d4:	bf0c      	ite	eq
 80215d6:	f000 000f 	andeq.w	r0, r0, #15
 80215da:	1100      	asrne	r0, r0, #4
 80215dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80215e0:	b2c3      	uxtb	r3, r0
 80215e2:	b2ba      	uxth	r2, r7
 80215e4:	fa1f fc8c 	uxth.w	ip, ip
 80215e8:	fb02 f00c 	mul.w	r0, r2, ip
 80215ec:	0112      	lsls	r2, r2, #4
 80215ee:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80215f2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80215f6:	1a12      	subs	r2, r2, r0
 80215f8:	fa1f fc8c 	uxth.w	ip, ip
 80215fc:	b292      	uxth	r2, r2
 80215fe:	eba7 070c 	sub.w	r7, r7, ip
 8021602:	4362      	muls	r2, r4
 8021604:	b2bf      	uxth	r7, r7
 8021606:	fb06 2207 	mla	r2, r6, r7, r2
 802160a:	fb0c 2505 	mla	r5, ip, r5, r2
 802160e:	fb00 5303 	mla	r3, r0, r3, r5
 8021612:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021616:	b1b3      	cbz	r3, 8021646 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8021618:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 802161c:	435a      	muls	r2, r3
 802161e:	1c53      	adds	r3, r2, #1
 8021620:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021624:	4a2d      	ldr	r2, [pc, #180]	@ (80216dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8021626:	121b      	asrs	r3, r3, #8
 8021628:	6812      	ldr	r2, [r2, #0]
 802162a:	2bff      	cmp	r3, #255	@ 0xff
 802162c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021630:	d120      	bne.n	8021674 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8021632:	0950      	lsrs	r0, r2, #5
 8021634:	4b2a      	ldr	r3, [pc, #168]	@ (80216e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8021636:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802163a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802163e:	4033      	ands	r3, r6
 8021640:	4318      	orrs	r0, r3
 8021642:	4302      	orrs	r2, r0
 8021644:	800a      	strh	r2, [r1, #0]
 8021646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802164a:	2600      	movs	r6, #0
 802164c:	e788      	b.n	8021560 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802164e:	2400      	movs	r4, #0
 8021650:	4626      	mov	r6, r4
 8021652:	e799      	b.n	8021588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021654:	2400      	movs	r4, #0
 8021656:	e797      	b.n	8021588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8021658:	463c      	mov	r4, r7
 802165a:	e795      	b.n	8021588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802165c:	2500      	movs	r5, #0
 802165e:	e7ac      	b.n	80215ba <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8021660:	2300      	movs	r3, #0
 8021662:	461d      	mov	r5, r3
 8021664:	e7bd      	b.n	80215e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021666:	4663      	mov	r3, ip
 8021668:	4665      	mov	r5, ip
 802166a:	e7ba      	b.n	80215e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802166c:	2300      	movs	r3, #0
 802166e:	e7b8      	b.n	80215e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021670:	463b      	mov	r3, r7
 8021672:	e7b6      	b.n	80215e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8021674:	880d      	ldrh	r5, [r1, #0]
 8021676:	b29f      	uxth	r7, r3
 8021678:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802167c:	43db      	mvns	r3, r3
 802167e:	122c      	asrs	r4, r5, #8
 8021680:	fb10 f007 	smulbb	r0, r0, r7
 8021684:	b2db      	uxtb	r3, r3
 8021686:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802168a:	b2f6      	uxtb	r6, r6
 802168c:	b2d2      	uxtb	r2, r2
 802168e:	fb04 0403 	mla	r4, r4, r3, r0
 8021692:	10e8      	asrs	r0, r5, #3
 8021694:	fb12 f207 	smulbb	r2, r2, r7
 8021698:	00ed      	lsls	r5, r5, #3
 802169a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802169e:	b2a4      	uxth	r4, r4
 80216a0:	fb16 f607 	smulbb	r6, r6, r7
 80216a4:	b2ed      	uxtb	r5, r5
 80216a6:	fb00 6603 	mla	r6, r0, r3, r6
 80216aa:	fb05 2303 	mla	r3, r5, r3, r2
 80216ae:	b2b0      	uxth	r0, r6
 80216b0:	b29a      	uxth	r2, r3
 80216b2:	1c63      	adds	r3, r4, #1
 80216b4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80216b8:	1c53      	adds	r3, r2, #1
 80216ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80216be:	1c42      	adds	r2, r0, #1
 80216c0:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80216c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80216c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80216cc:	0940      	lsrs	r0, r0, #5
 80216ce:	4323      	orrs	r3, r4
 80216d0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80216d4:	4303      	orrs	r3, r0
 80216d6:	800b      	strh	r3, [r1, #0]
 80216d8:	e7b5      	b.n	8021646 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80216da:	bf00      	nop
 80216dc:	2400aa8c 	.word	0x2400aa8c
 80216e0:	00fff800 	.word	0x00fff800

080216e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80216e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216e8:	b097      	sub	sp, #92	@ 0x5c
 80216ea:	9214      	str	r2, [sp, #80]	@ 0x50
 80216ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80216ee:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80216f0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80216f4:	9015      	str	r0, [sp, #84]	@ 0x54
 80216f6:	910d      	str	r1, [sp, #52]	@ 0x34
 80216f8:	6850      	ldr	r0, [r2, #4]
 80216fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216fc:	6812      	ldr	r2, [r2, #0]
 80216fe:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8021702:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8021706:	fb00 1303 	mla	r3, r0, r3, r1
 802170a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802170e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021710:	689b      	ldr	r3, [r3, #8]
 8021712:	3301      	adds	r3, #1
 8021714:	f023 0301 	bic.w	r3, r3, #1
 8021718:	930a      	str	r3, [sp, #40]	@ 0x28
 802171a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802171c:	681f      	ldr	r7, [r3, #0]
 802171e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021720:	2b00      	cmp	r3, #0
 8021722:	dc03      	bgt.n	802172c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021724:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021726:	2b00      	cmp	r3, #0
 8021728:	f340 8289 	ble.w	8021c3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802172c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802172e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021732:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021736:	1e48      	subs	r0, r1, #1
 8021738:	f102 3cff 	add.w	ip, r2, #4294967295
 802173c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802173e:	2b00      	cmp	r3, #0
 8021740:	f340 80c5 	ble.w	80218ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021744:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021748:	ea4f 4326 	mov.w	r3, r6, asr #16
 802174c:	d406      	bmi.n	802175c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802174e:	4586      	cmp	lr, r0
 8021750:	da04      	bge.n	802175c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021752:	2b00      	cmp	r3, #0
 8021754:	db02      	blt.n	802175c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021756:	4563      	cmp	r3, ip
 8021758:	f2c0 80ba 	blt.w	80218d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802175c:	f11e 0e01 	adds.w	lr, lr, #1
 8021760:	f100 80ab 	bmi.w	80218ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021764:	4571      	cmp	r1, lr
 8021766:	f2c0 80a8 	blt.w	80218ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802176a:	3301      	adds	r3, #1
 802176c:	f100 80a5 	bmi.w	80218ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021770:	429a      	cmp	r2, r3
 8021772:	f2c0 80a2 	blt.w	80218ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8021776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021778:	46c8      	mov	r8, r9
 802177a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 802177e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021780:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021782:	2b00      	cmp	r3, #0
 8021784:	f340 80c4 	ble.w	8021910 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021788:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802178a:	1430      	asrs	r0, r6, #16
 802178c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021790:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021794:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021798:	1423      	asrs	r3, r4, #16
 802179a:	f100 814f 	bmi.w	8021a3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802179e:	f10c 3bff 	add.w	fp, ip, #4294967295
 80217a2:	455b      	cmp	r3, fp
 80217a4:	f280 814a 	bge.w	8021a3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217a8:	2800      	cmp	r0, #0
 80217aa:	f2c0 8147 	blt.w	8021a3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217ae:	f10e 3bff 	add.w	fp, lr, #4294967295
 80217b2:	4558      	cmp	r0, fp
 80217b4:	f280 8142 	bge.w	8021a3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80217ba:	fb00 3305 	mla	r3, r0, r5, r3
 80217be:	0858      	lsrs	r0, r3, #1
 80217c0:	07dd      	lsls	r5, r3, #31
 80217c2:	f817 c000 	ldrb.w	ip, [r7, r0]
 80217c6:	bf54      	ite	pl
 80217c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80217cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80217d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80217d4:	fa5f fc8c 	uxtb.w	ip, ip
 80217d8:	2a00      	cmp	r2, #0
 80217da:	f000 80dd 	beq.w	8021998 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80217de:	1c58      	adds	r0, r3, #1
 80217e0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80217e4:	07c0      	lsls	r0, r0, #31
 80217e6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80217ea:	bf54      	ite	pl
 80217ec:	f00e 0e0f 	andpl.w	lr, lr, #15
 80217f0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80217f4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80217f8:	fa5f f08e 	uxtb.w	r0, lr
 80217fc:	9010      	str	r0, [sp, #64]	@ 0x40
 80217fe:	b1d9      	cbz	r1, 8021838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021800:	4453      	add	r3, sl
 8021802:	0858      	lsrs	r0, r3, #1
 8021804:	07dd      	lsls	r5, r3, #31
 8021806:	f103 0301 	add.w	r3, r3, #1
 802180a:	5c38      	ldrb	r0, [r7, r0]
 802180c:	bf54      	ite	pl
 802180e:	f000 000f 	andpl.w	r0, r0, #15
 8021812:	1100      	asrmi	r0, r0, #4
 8021814:	07dd      	lsls	r5, r3, #31
 8021816:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802181a:	b2c0      	uxtb	r0, r0
 802181c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802181e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8021822:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021826:	bf54      	ite	pl
 8021828:	f00e 030f 	andpl.w	r3, lr, #15
 802182c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8021830:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021834:	b2db      	uxtb	r3, r3
 8021836:	9311      	str	r3, [sp, #68]	@ 0x44
 8021838:	b292      	uxth	r2, r2
 802183a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802183c:	b289      	uxth	r1, r1
 802183e:	fb02 f301 	mul.w	r3, r2, r1
 8021842:	0112      	lsls	r2, r2, #4
 8021844:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021848:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802184c:	1ad2      	subs	r2, r2, r3
 802184e:	b289      	uxth	r1, r1
 8021850:	b292      	uxth	r2, r2
 8021852:	1a40      	subs	r0, r0, r1
 8021854:	436a      	muls	r2, r5
 8021856:	b280      	uxth	r0, r0
 8021858:	fb0c 2c00 	mla	ip, ip, r0, r2
 802185c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802185e:	fb01 c102 	mla	r1, r1, r2, ip
 8021862:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021864:	fb03 1302 	mla	r3, r3, r2, r1
 8021868:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802186c:	b1db      	cbz	r3, 80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802186e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021870:	4353      	muls	r3, r2
 8021872:	1c5a      	adds	r2, r3, #1
 8021874:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021878:	4ac6      	ldr	r2, [pc, #792]	@ (8021b94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802187a:	121b      	asrs	r3, r3, #8
 802187c:	6812      	ldr	r2, [r2, #0]
 802187e:	2bff      	cmp	r3, #255	@ 0xff
 8021880:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021884:	f040 8099 	bne.w	80219ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021888:	0953      	lsrs	r3, r2, #5
 802188a:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802188e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021892:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021896:	f02c 0c07 	bic.w	ip, ip, #7
 802189a:	ea43 0c0c 	orr.w	ip, r3, ip
 802189e:	ea4c 0202 	orr.w	r2, ip, r2
 80218a2:	f8a8 2000 	strh.w	r2, [r8]
 80218a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80218a8:	f108 0802 	add.w	r8, r8, #2
 80218ac:	441c      	add	r4, r3
 80218ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80218b0:	441e      	add	r6, r3
 80218b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218b4:	3b01      	subs	r3, #1
 80218b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80218b8:	e762      	b.n	8021780 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80218ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80218bc:	f109 0902 	add.w	r9, r9, #2
 80218c0:	441c      	add	r4, r3
 80218c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80218c4:	441e      	add	r6, r3
 80218c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218c8:	3b01      	subs	r3, #1
 80218ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80218cc:	e736      	b.n	802173c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80218ce:	d024      	beq.n	802191a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80218d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218d2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80218d4:	3b01      	subs	r3, #1
 80218d6:	fb00 4003 	mla	r0, r0, r3, r4
 80218da:	1400      	asrs	r0, r0, #16
 80218dc:	f53f af4b 	bmi.w	8021776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80218e0:	3901      	subs	r1, #1
 80218e2:	4288      	cmp	r0, r1
 80218e4:	f6bf af47 	bge.w	8021776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80218e8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80218ea:	fb01 6303 	mla	r3, r1, r3, r6
 80218ee:	141b      	asrs	r3, r3, #16
 80218f0:	f53f af41 	bmi.w	8021776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80218f4:	3a01      	subs	r2, #1
 80218f6:	4293      	cmp	r3, r2
 80218f8:	f6bf af3d 	bge.w	8021776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80218fc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8021900:	46c8      	mov	r8, r9
 8021902:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021906:	930e      	str	r3, [sp, #56]	@ 0x38
 8021908:	f1bb 0f00 	cmp.w	fp, #0
 802190c:	f300 80b7 	bgt.w	8021a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8021910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021912:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021916:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802191a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802191c:	2b00      	cmp	r3, #0
 802191e:	f340 818e 	ble.w	8021c3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8021922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021926:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021928:	ee30 0a04 	vadd.f32	s0, s0, s8
 802192c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021930:	eef0 6a62 	vmov.f32	s13, s5
 8021934:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021938:	ee31 1a05 	vadd.f32	s2, s2, s10
 802193c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021940:	ee16 4a90 	vmov	r4, s13
 8021944:	eef0 6a43 	vmov.f32	s13, s6
 8021948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802194c:	ee16 6a90 	vmov	r6, s13
 8021950:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021954:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021958:	ee77 2a62 	vsub.f32	s5, s14, s5
 802195c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021960:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021964:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021968:	ee12 2a90 	vmov	r2, s5
 802196c:	eef0 2a47 	vmov.f32	s5, s14
 8021970:	fb92 f3f3 	sdiv	r3, r2, r3
 8021974:	ee13 2a10 	vmov	r2, s6
 8021978:	9323      	str	r3, [sp, #140]	@ 0x8c
 802197a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802197c:	eeb0 3a67 	vmov.f32	s6, s15
 8021980:	fb92 f3f3 	sdiv	r3, r2, r3
 8021984:	9324      	str	r3, [sp, #144]	@ 0x90
 8021986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021988:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802198a:	3b01      	subs	r3, #1
 802198c:	930d      	str	r3, [sp, #52]	@ 0x34
 802198e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021990:	bf08      	it	eq
 8021992:	4613      	moveq	r3, r2
 8021994:	9309      	str	r3, [sp, #36]	@ 0x24
 8021996:	e6c2      	b.n	802171e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021998:	2900      	cmp	r1, #0
 802199a:	f43f af4d 	beq.w	8021838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802199e:	eb0a 0003 	add.w	r0, sl, r3
 80219a2:	0843      	lsrs	r3, r0, #1
 80219a4:	07c0      	lsls	r0, r0, #31
 80219a6:	5cfb      	ldrb	r3, [r7, r3]
 80219a8:	bf54      	ite	pl
 80219aa:	f003 030f 	andpl.w	r3, r3, #15
 80219ae:	111b      	asrmi	r3, r3, #4
 80219b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80219b4:	b2db      	uxtb	r3, r3
 80219b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80219b8:	e73e      	b.n	8021838 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80219ba:	f8b8 e000 	ldrh.w	lr, [r8]
 80219be:	fa1f fb83 	uxth.w	fp, r3
 80219c2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80219c6:	43db      	mvns	r3, r3
 80219c8:	ea4f 202e 	mov.w	r0, lr, asr #8
 80219cc:	fb11 f10b 	smulbb	r1, r1, fp
 80219d0:	b2db      	uxtb	r3, r3
 80219d2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80219d6:	fa5f fc8c 	uxtb.w	ip, ip
 80219da:	b2d2      	uxtb	r2, r2
 80219dc:	fb00 1003 	mla	r0, r0, r3, r1
 80219e0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80219e4:	fb1c fc0b 	smulbb	ip, ip, fp
 80219e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80219ec:	b280      	uxth	r0, r0
 80219ee:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80219f2:	fb12 fb0b 	smulbb	fp, r2, fp
 80219f6:	fa5f fe8e 	uxtb.w	lr, lr
 80219fa:	fb01 cc03 	mla	ip, r1, r3, ip
 80219fe:	fb0e bb03 	mla	fp, lr, r3, fp
 8021a02:	1c43      	adds	r3, r0, #1
 8021a04:	fa1f fc8c 	uxth.w	ip, ip
 8021a08:	fa1f fb8b 	uxth.w	fp, fp
 8021a0c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021a10:	f10c 0101 	add.w	r1, ip, #1
 8021a14:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8021a18:	f10b 0001 	add.w	r0, fp, #1
 8021a1c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021a20:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021a24:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021a28:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021a2c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8021a30:	4318      	orrs	r0, r3
 8021a32:	ea40 000c 	orr.w	r0, r0, ip
 8021a36:	f8a8 0000 	strh.w	r0, [r8]
 8021a3a:	e734      	b.n	80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a3c:	f113 0b01 	adds.w	fp, r3, #1
 8021a40:	f53f af31 	bmi.w	80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a44:	45dc      	cmp	ip, fp
 8021a46:	f6ff af2e 	blt.w	80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a4a:	f110 0b01 	adds.w	fp, r0, #1
 8021a4e:	f53f af2a 	bmi.w	80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a52:	45de      	cmp	lr, fp
 8021a54:	f6ff af27 	blt.w	80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a58:	9302      	str	r3, [sp, #8]
 8021a5a:	fa0f f38e 	sxth.w	r3, lr
 8021a5e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021a60:	9301      	str	r3, [sp, #4]
 8021a62:	fa0f f38c 	sxth.w	r3, ip
 8021a66:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021a6a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021a6e:	9300      	str	r3, [sp, #0]
 8021a70:	463a      	mov	r2, r7
 8021a72:	4653      	mov	r3, sl
 8021a74:	4641      	mov	r1, r8
 8021a76:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021a78:	f7ff fd4c 	bl	8021514 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8021a7c:	e713      	b.n	80218a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021a7e:	1422      	asrs	r2, r4, #16
 8021a80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021a82:	1433      	asrs	r3, r6, #16
 8021a84:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021a88:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021a8c:	fb05 2303 	mla	r3, r5, r3, r2
 8021a90:	085a      	lsrs	r2, r3, #1
 8021a92:	07dd      	lsls	r5, r3, #31
 8021a94:	5cba      	ldrb	r2, [r7, r2]
 8021a96:	bf54      	ite	pl
 8021a98:	f002 020f 	andpl.w	r2, r2, #15
 8021a9c:	1112      	asrmi	r2, r2, #4
 8021a9e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021aa2:	b2d2      	uxtb	r2, r2
 8021aa4:	2900      	cmp	r1, #0
 8021aa6:	d077      	beq.n	8021b98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021aa8:	f103 0e01 	add.w	lr, r3, #1
 8021aac:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021ab0:	f01e 0f01 	tst.w	lr, #1
 8021ab4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021ab8:	bf0c      	ite	eq
 8021aba:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021abe:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021ac2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021ac6:	fa5f f58c 	uxtb.w	r5, ip
 8021aca:	9512      	str	r5, [sp, #72]	@ 0x48
 8021acc:	b308      	cbz	r0, 8021b12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021ace:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021ad0:	442b      	add	r3, r5
 8021ad2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021ad6:	07dd      	lsls	r5, r3, #31
 8021ad8:	f103 0301 	add.w	r3, r3, #1
 8021adc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021ae0:	bf54      	ite	pl
 8021ae2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021ae6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021aea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021aee:	fa5f f58c 	uxtb.w	r5, ip
 8021af2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021af6:	950c      	str	r5, [sp, #48]	@ 0x30
 8021af8:	07dd      	lsls	r5, r3, #31
 8021afa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021afe:	bf54      	ite	pl
 8021b00:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021b04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021b08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021b0c:	fa5f f38c 	uxtb.w	r3, ip
 8021b10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021b12:	b289      	uxth	r1, r1
 8021b14:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8021b16:	b280      	uxth	r0, r0
 8021b18:	fb01 f300 	mul.w	r3, r1, r0
 8021b1c:	0109      	lsls	r1, r1, #4
 8021b1e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021b22:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8021b26:	1ac9      	subs	r1, r1, r3
 8021b28:	b280      	uxth	r0, r0
 8021b2a:	b289      	uxth	r1, r1
 8021b2c:	ebac 0c00 	sub.w	ip, ip, r0
 8021b30:	4369      	muls	r1, r5
 8021b32:	fa1f fc8c 	uxth.w	ip, ip
 8021b36:	fb02 120c 	mla	r2, r2, ip, r1
 8021b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021b3c:	fb00 2001 	mla	r0, r0, r1, r2
 8021b40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021b42:	fb03 0302 	mla	r3, r3, r2, r0
 8021b46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021b4a:	b1d3      	cbz	r3, 8021b82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021b4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021b4e:	4353      	muls	r3, r2
 8021b50:	1c5a      	adds	r2, r3, #1
 8021b52:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021b56:	4a0f      	ldr	r2, [pc, #60]	@ (8021b94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021b58:	121b      	asrs	r3, r3, #8
 8021b5a:	6812      	ldr	r2, [r2, #0]
 8021b5c:	2bff      	cmp	r3, #255	@ 0xff
 8021b5e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021b62:	d12d      	bne.n	8021bc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021b64:	0953      	lsrs	r3, r2, #5
 8021b66:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8021b6a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021b6e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021b72:	f02c 0c07 	bic.w	ip, ip, #7
 8021b76:	ea43 0c0c 	orr.w	ip, r3, ip
 8021b7a:	ea4c 0202 	orr.w	r2, ip, r2
 8021b7e:	f8a8 2000 	strh.w	r2, [r8]
 8021b82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021b84:	f108 0802 	add.w	r8, r8, #2
 8021b88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021b8c:	441c      	add	r4, r3
 8021b8e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021b90:	441e      	add	r6, r3
 8021b92:	e6b9      	b.n	8021908 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021b94:	2400aa8c 	.word	0x2400aa8c
 8021b98:	2800      	cmp	r0, #0
 8021b9a:	d0ba      	beq.n	8021b12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021b9c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021b9e:	442b      	add	r3, r5
 8021ba0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021ba4:	07db      	lsls	r3, r3, #31
 8021ba6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021baa:	bf54      	ite	pl
 8021bac:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021bb0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021bb4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021bb8:	fa5f f38c 	uxtb.w	r3, ip
 8021bbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8021bbe:	e7a8      	b.n	8021b12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8021bc0:	f8b8 e000 	ldrh.w	lr, [r8]
 8021bc4:	fa1f fa83 	uxth.w	sl, r3
 8021bc8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021bcc:	43db      	mvns	r3, r3
 8021bce:	ea4f 202e 	mov.w	r0, lr, asr #8
 8021bd2:	fb11 f10a 	smulbb	r1, r1, sl
 8021bd6:	b2db      	uxtb	r3, r3
 8021bd8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021bdc:	b2d2      	uxtb	r2, r2
 8021bde:	fa5f fc8c 	uxtb.w	ip, ip
 8021be2:	fb00 1003 	mla	r0, r0, r3, r1
 8021be6:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021bea:	fb12 f20a 	smulbb	r2, r2, sl
 8021bee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021bf2:	b280      	uxth	r0, r0
 8021bf4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021bf8:	fb1c fc0a 	smulbb	ip, ip, sl
 8021bfc:	fa5f fe8e 	uxtb.w	lr, lr
 8021c00:	fb0e 2203 	mla	r2, lr, r3, r2
 8021c04:	fb01 cc03 	mla	ip, r1, r3, ip
 8021c08:	1c43      	adds	r3, r0, #1
 8021c0a:	b292      	uxth	r2, r2
 8021c0c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021c10:	1c51      	adds	r1, r2, #1
 8021c12:	fa1f fc8c 	uxth.w	ip, ip
 8021c16:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8021c1a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021c1e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8021c22:	4308      	orrs	r0, r1
 8021c24:	f10c 0101 	add.w	r1, ip, #1
 8021c28:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8021c2c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021c30:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8021c34:	ea40 000c 	orr.w	r0, r0, ip
 8021c38:	f8a8 0000 	strh.w	r0, [r8]
 8021c3c:	e7a1      	b.n	8021b82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021c3e:	b017      	add	sp, #92	@ 0x5c
 8021c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c44 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8021c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c48:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8021c4c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8021c50:	2d00      	cmp	r5, #0
 8021c52:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021c56:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8021c5a:	fb05 0e03 	mla	lr, r5, r3, r0
 8021c5e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8021c62:	f2c0 80b0 	blt.w	8021dc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021c66:	45a9      	cmp	r9, r5
 8021c68:	f340 80ad 	ble.w	8021dc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021c6c:	2800      	cmp	r0, #0
 8021c6e:	f2c0 80a8 	blt.w	8021dc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021c72:	4580      	cmp	r8, r0
 8021c74:	f340 80a5 	ble.w	8021dc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021c78:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021c7c:	f01e 0f01 	tst.w	lr, #1
 8021c80:	5d16      	ldrb	r6, [r2, r4]
 8021c82:	bf0c      	ite	eq
 8021c84:	f006 060f 	andeq.w	r6, r6, #15
 8021c88:	1136      	asrne	r6, r6, #4
 8021c8a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021c8e:	b2f6      	uxtb	r6, r6
 8021c90:	1c44      	adds	r4, r0, #1
 8021c92:	f100 809b 	bmi.w	8021dcc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021c96:	45a0      	cmp	r8, r4
 8021c98:	f340 8098 	ble.w	8021dcc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021c9c:	2f00      	cmp	r7, #0
 8021c9e:	f000 8097 	beq.w	8021dd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8021ca2:	f10e 0a01 	add.w	sl, lr, #1
 8021ca6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021caa:	f01a 0f01 	tst.w	sl, #1
 8021cae:	5d14      	ldrb	r4, [r2, r4]
 8021cb0:	bf0c      	ite	eq
 8021cb2:	f004 040f 	andeq.w	r4, r4, #15
 8021cb6:	1124      	asrne	r4, r4, #4
 8021cb8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021cbc:	b2e4      	uxtb	r4, r4
 8021cbe:	3501      	adds	r5, #1
 8021cc0:	f100 808a 	bmi.w	8021dd8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021cc4:	45a9      	cmp	r9, r5
 8021cc6:	f340 8087 	ble.w	8021dd8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021cca:	f1bc 0f00 	cmp.w	ip, #0
 8021cce:	f000 8086 	beq.w	8021dde <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8021cd2:	2800      	cmp	r0, #0
 8021cd4:	db7e      	blt.n	8021dd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021cd6:	4580      	cmp	r8, r0
 8021cd8:	dd7c      	ble.n	8021dd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021cda:	eb03 090e 	add.w	r9, r3, lr
 8021cde:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8021ce2:	f019 0f01 	tst.w	r9, #1
 8021ce6:	5d55      	ldrb	r5, [r2, r5]
 8021ce8:	bf0c      	ite	eq
 8021cea:	f005 050f 	andeq.w	r5, r5, #15
 8021cee:	112d      	asrne	r5, r5, #4
 8021cf0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021cf4:	b2ed      	uxtb	r5, r5
 8021cf6:	3001      	adds	r0, #1
 8021cf8:	d474      	bmi.n	8021de4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021cfa:	4580      	cmp	r8, r0
 8021cfc:	dd72      	ble.n	8021de4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8021cfe:	2f00      	cmp	r7, #0
 8021d00:	d072      	beq.n	8021de8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8021d02:	3301      	adds	r3, #1
 8021d04:	449e      	add	lr, r3
 8021d06:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021d0a:	f01e 0f01 	tst.w	lr, #1
 8021d0e:	5cd0      	ldrb	r0, [r2, r3]
 8021d10:	bf0c      	ite	eq
 8021d12:	f000 000f 	andeq.w	r0, r0, #15
 8021d16:	1100      	asrne	r0, r0, #4
 8021d18:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021d1c:	b2c3      	uxtb	r3, r0
 8021d1e:	b2ba      	uxth	r2, r7
 8021d20:	fa1f fc8c 	uxth.w	ip, ip
 8021d24:	fb02 f00c 	mul.w	r0, r2, ip
 8021d28:	0112      	lsls	r2, r2, #4
 8021d2a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021d2e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8021d32:	1a12      	subs	r2, r2, r0
 8021d34:	fa1f fc8c 	uxth.w	ip, ip
 8021d38:	b292      	uxth	r2, r2
 8021d3a:	eba7 070c 	sub.w	r7, r7, ip
 8021d3e:	4362      	muls	r2, r4
 8021d40:	b2bf      	uxth	r7, r7
 8021d42:	fb06 2207 	mla	r2, r6, r7, r2
 8021d46:	fb0c 2505 	mla	r5, ip, r5, r2
 8021d4a:	fb00 5303 	mla	r3, r0, r3, r5
 8021d4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d52:	b3a3      	cbz	r3, 8021dbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8021d54:	4a25      	ldr	r2, [pc, #148]	@ (8021dec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8021d56:	880e      	ldrh	r6, [r1, #0]
 8021d58:	6815      	ldr	r5, [r2, #0]
 8021d5a:	b29a      	uxth	r2, r3
 8021d5c:	1234      	asrs	r4, r6, #8
 8021d5e:	43db      	mvns	r3, r3
 8021d60:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8021d64:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8021d68:	b2db      	uxtb	r3, r3
 8021d6a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021d6e:	fb10 f002 	smulbb	r0, r0, r2
 8021d72:	b2ed      	uxtb	r5, r5
 8021d74:	fb17 f702 	smulbb	r7, r7, r2
 8021d78:	fb04 0403 	mla	r4, r4, r3, r0
 8021d7c:	10f0      	asrs	r0, r6, #3
 8021d7e:	fb15 f202 	smulbb	r2, r5, r2
 8021d82:	00f6      	lsls	r6, r6, #3
 8021d84:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021d88:	b2a4      	uxth	r4, r4
 8021d8a:	b2f6      	uxtb	r6, r6
 8021d8c:	fb00 7003 	mla	r0, r0, r3, r7
 8021d90:	fb06 2303 	mla	r3, r6, r3, r2
 8021d94:	b280      	uxth	r0, r0
 8021d96:	b29a      	uxth	r2, r3
 8021d98:	1c63      	adds	r3, r4, #1
 8021d9a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021d9e:	1c53      	adds	r3, r2, #1
 8021da0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021da4:	1c42      	adds	r2, r0, #1
 8021da6:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8021daa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021dae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021db2:	0940      	lsrs	r0, r0, #5
 8021db4:	4323      	orrs	r3, r4
 8021db6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021dba:	4303      	orrs	r3, r0
 8021dbc:	800b      	strh	r3, [r1, #0]
 8021dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021dc2:	2600      	movs	r6, #0
 8021dc4:	e764      	b.n	8021c90 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8021dc6:	2400      	movs	r4, #0
 8021dc8:	4626      	mov	r6, r4
 8021dca:	e778      	b.n	8021cbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021dcc:	2400      	movs	r4, #0
 8021dce:	e776      	b.n	8021cbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021dd0:	463c      	mov	r4, r7
 8021dd2:	e774      	b.n	8021cbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021dd4:	2500      	movs	r5, #0
 8021dd6:	e78e      	b.n	8021cf6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8021dd8:	2300      	movs	r3, #0
 8021dda:	461d      	mov	r5, r3
 8021ddc:	e79f      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021dde:	4663      	mov	r3, ip
 8021de0:	4665      	mov	r5, ip
 8021de2:	e79c      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021de4:	2300      	movs	r3, #0
 8021de6:	e79a      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021de8:	463b      	mov	r3, r7
 8021dea:	e798      	b.n	8021d1e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021dec:	2400aa8c 	.word	0x2400aa8c

08021df0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021df4:	b093      	sub	sp, #76	@ 0x4c
 8021df6:	461d      	mov	r5, r3
 8021df8:	920c      	str	r2, [sp, #48]	@ 0x30
 8021dfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021dfc:	9011      	str	r0, [sp, #68]	@ 0x44
 8021dfe:	9107      	str	r1, [sp, #28]
 8021e00:	6850      	ldr	r0, [r2, #4]
 8021e02:	6812      	ldr	r2, [r2, #0]
 8021e04:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8021e08:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8021e0c:	fb00 1303 	mla	r3, r0, r3, r1
 8021e10:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021e14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e16:	689b      	ldr	r3, [r3, #8]
 8021e18:	3301      	adds	r3, #1
 8021e1a:	f023 0301 	bic.w	r3, r3, #1
 8021e1e:	9306      	str	r3, [sp, #24]
 8021e20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e22:	681f      	ldr	r7, [r3, #0]
 8021e24:	9b07      	ldr	r3, [sp, #28]
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	dc03      	bgt.n	8021e32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021e2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	f340 8267 	ble.w	8022300 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8021e32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e38:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021e3c:	1e48      	subs	r0, r1, #1
 8021e3e:	f102 3cff 	add.w	ip, r2, #4294967295
 8021e42:	2d00      	cmp	r5, #0
 8021e44:	f340 80b7 	ble.w	8021fb6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021e48:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021e4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021e50:	d406      	bmi.n	8021e60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e52:	4586      	cmp	lr, r0
 8021e54:	da04      	bge.n	8021e60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	db02      	blt.n	8021e60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e5a:	4563      	cmp	r3, ip
 8021e5c:	f2c0 80ac 	blt.w	8021fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021e60:	f11e 0e01 	adds.w	lr, lr, #1
 8021e64:	f100 809f 	bmi.w	8021fa6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021e68:	4571      	cmp	r1, lr
 8021e6a:	f2c0 809c 	blt.w	8021fa6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021e6e:	3301      	adds	r3, #1
 8021e70:	f100 8099 	bmi.w	8021fa6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021e74:	429a      	cmp	r2, r3
 8021e76:	f2c0 8096 	blt.w	8021fa6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021e7a:	46c8      	mov	r8, r9
 8021e7c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8021e80:	9509      	str	r5, [sp, #36]	@ 0x24
 8021e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	f340 80b5 	ble.w	8021ff4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021e8a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021e8e:	1430      	asrs	r0, r6, #16
 8021e90:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021e94:	9308      	str	r3, [sp, #32]
 8021e96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e98:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021e9c:	1423      	asrs	r3, r4, #16
 8021e9e:	f100 813f 	bmi.w	8022120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021ea2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8021ea6:	455b      	cmp	r3, fp
 8021ea8:	f280 813a 	bge.w	8022120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021eac:	2800      	cmp	r0, #0
 8021eae:	f2c0 8137 	blt.w	8022120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021eb2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021eb6:	4558      	cmp	r0, fp
 8021eb8:	f280 8132 	bge.w	8022120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021ebc:	9a06      	ldr	r2, [sp, #24]
 8021ebe:	fb00 3302 	mla	r3, r0, r2, r3
 8021ec2:	0858      	lsrs	r0, r3, #1
 8021ec4:	07da      	lsls	r2, r3, #31
 8021ec6:	9a08      	ldr	r2, [sp, #32]
 8021ec8:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021ecc:	bf54      	ite	pl
 8021ece:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021ed2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021ed6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021eda:	fa5f fc8c 	uxtb.w	ip, ip
 8021ede:	2a00      	cmp	r2, #0
 8021ee0:	f000 80cc 	beq.w	802207c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021ee4:	1c58      	adds	r0, r3, #1
 8021ee6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021eea:	07c0      	lsls	r0, r0, #31
 8021eec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021ef0:	bf54      	ite	pl
 8021ef2:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021ef6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021efa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021efe:	fa5f fe8e 	uxtb.w	lr, lr
 8021f02:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8021f06:	b1b9      	cbz	r1, 8021f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021f08:	4453      	add	r3, sl
 8021f0a:	0858      	lsrs	r0, r3, #1
 8021f0c:	07da      	lsls	r2, r3, #31
 8021f0e:	5c38      	ldrb	r0, [r7, r0]
 8021f10:	bf54      	ite	pl
 8021f12:	f000 000f 	andpl.w	r0, r0, #15
 8021f16:	1100      	asrmi	r0, r0, #4
 8021f18:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021f1c:	b2c0      	uxtb	r0, r0
 8021f1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021f20:	1c58      	adds	r0, r3, #1
 8021f22:	0843      	lsrs	r3, r0, #1
 8021f24:	07c2      	lsls	r2, r0, #31
 8021f26:	5cfb      	ldrb	r3, [r7, r3]
 8021f28:	bf54      	ite	pl
 8021f2a:	f003 030f 	andpl.w	r3, r3, #15
 8021f2e:	111b      	asrmi	r3, r3, #4
 8021f30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021f34:	b2db      	uxtb	r3, r3
 8021f36:	930e      	str	r3, [sp, #56]	@ 0x38
 8021f38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021f3c:	b289      	uxth	r1, r1
 8021f3e:	fb02 f301 	mul.w	r3, r2, r1
 8021f42:	0112      	lsls	r2, r2, #4
 8021f44:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021f48:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8021f4c:	1ad2      	subs	r2, r2, r3
 8021f4e:	b289      	uxth	r1, r1
 8021f50:	b292      	uxth	r2, r2
 8021f52:	1a40      	subs	r0, r0, r1
 8021f54:	fa1f fe80 	uxth.w	lr, r0
 8021f58:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021f5a:	4342      	muls	r2, r0
 8021f5c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8021f60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021f62:	fb01 c102 	mla	r1, r1, r2, ip
 8021f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021f68:	fb03 1302 	mla	r3, r3, r2, r1
 8021f6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f70:	2bff      	cmp	r3, #255	@ 0xff
 8021f72:	f040 8094 	bne.w	802209e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8021f76:	4bbf      	ldr	r3, [pc, #764]	@ (8022274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8021f78:	681a      	ldr	r2, [r3, #0]
 8021f7a:	4bbf      	ldr	r3, [pc, #764]	@ (8022278 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8021f7c:	0951      	lsrs	r1, r2, #5
 8021f7e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8021f82:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021f86:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021f8a:	430b      	orrs	r3, r1
 8021f8c:	4313      	orrs	r3, r2
 8021f8e:	f8a8 3000 	strh.w	r3, [r8]
 8021f92:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021f94:	f108 0802 	add.w	r8, r8, #2
 8021f98:	441c      	add	r4, r3
 8021f9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021f9c:	441e      	add	r6, r3
 8021f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021fa0:	3b01      	subs	r3, #1
 8021fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8021fa4:	e76d      	b.n	8021e82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021fa6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021fa8:	3d01      	subs	r5, #1
 8021faa:	f109 0902 	add.w	r9, r9, #2
 8021fae:	441c      	add	r4, r3
 8021fb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021fb2:	441e      	add	r6, r3
 8021fb4:	e745      	b.n	8021e42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021fb6:	d021      	beq.n	8021ffc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021fb8:	1e6b      	subs	r3, r5, #1
 8021fba:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8021fbc:	fb00 4003 	mla	r0, r0, r3, r4
 8021fc0:	1400      	asrs	r0, r0, #16
 8021fc2:	f53f af5a 	bmi.w	8021e7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021fc6:	3901      	subs	r1, #1
 8021fc8:	4288      	cmp	r0, r1
 8021fca:	f6bf af56 	bge.w	8021e7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021fce:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8021fd0:	fb01 6303 	mla	r3, r1, r3, r6
 8021fd4:	141b      	asrs	r3, r3, #16
 8021fd6:	f53f af50 	bmi.w	8021e7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021fda:	3a01      	subs	r2, #1
 8021fdc:	4293      	cmp	r3, r2
 8021fde:	f6bf af4c 	bge.w	8021e7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021fe2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8021fe6:	46a8      	mov	r8, r5
 8021fe8:	46ce      	mov	lr, r9
 8021fea:	9308      	str	r3, [sp, #32]
 8021fec:	f1b8 0f00 	cmp.w	r8, #0
 8021ff0:	f300 80b6 	bgt.w	8022160 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021ff4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021ff8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021ffc:	9b07      	ldr	r3, [sp, #28]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	f340 817e 	ble.w	8022300 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022008:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802200a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802200e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022012:	eef0 6a62 	vmov.f32	s13, s5
 8022016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802201a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802201e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022022:	ee16 4a90 	vmov	r4, s13
 8022026:	eef0 6a43 	vmov.f32	s13, s6
 802202a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802202e:	ee16 6a90 	vmov	r6, s13
 8022032:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022036:	ee61 7a27 	vmul.f32	s15, s2, s15
 802203a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802203e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022042:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022046:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802204a:	ee12 2a90 	vmov	r2, s5
 802204e:	eef0 2a47 	vmov.f32	s5, s14
 8022052:	fb92 f3f3 	sdiv	r3, r2, r3
 8022056:	ee13 2a10 	vmov	r2, s6
 802205a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802205c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802205e:	eeb0 3a67 	vmov.f32	s6, s15
 8022062:	fb92 f3f3 	sdiv	r3, r2, r3
 8022066:	9320      	str	r3, [sp, #128]	@ 0x80
 8022068:	9b07      	ldr	r3, [sp, #28]
 802206a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802206c:	3b01      	subs	r3, #1
 802206e:	9307      	str	r3, [sp, #28]
 8022070:	bf08      	it	eq
 8022072:	4615      	moveq	r5, r2
 8022074:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022076:	bf18      	it	ne
 8022078:	461d      	movne	r5, r3
 802207a:	e6d3      	b.n	8021e24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802207c:	2900      	cmp	r1, #0
 802207e:	f43f af5b 	beq.w	8021f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022082:	eb0a 0003 	add.w	r0, sl, r3
 8022086:	0843      	lsrs	r3, r0, #1
 8022088:	07c0      	lsls	r0, r0, #31
 802208a:	5cfb      	ldrb	r3, [r7, r3]
 802208c:	bf54      	ite	pl
 802208e:	f003 030f 	andpl.w	r3, r3, #15
 8022092:	111b      	asrmi	r3, r3, #4
 8022094:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022098:	b2db      	uxtb	r3, r3
 802209a:	930a      	str	r3, [sp, #40]	@ 0x28
 802209c:	e74c      	b.n	8021f38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802209e:	2b00      	cmp	r3, #0
 80220a0:	f43f af77 	beq.w	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80220a4:	4a73      	ldr	r2, [pc, #460]	@ (8022274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80220a6:	fa1f fe83 	uxth.w	lr, r3
 80220aa:	f8b8 c000 	ldrh.w	ip, [r8]
 80220ae:	43db      	mvns	r3, r3
 80220b0:	6810      	ldr	r0, [r2, #0]
 80220b2:	ea4f 212c 	mov.w	r1, ip, asr #8
 80220b6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80220ba:	b2db      	uxtb	r3, r3
 80220bc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80220c0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80220c4:	fb12 f20e 	smulbb	r2, r2, lr
 80220c8:	b2c0      	uxtb	r0, r0
 80220ca:	fb1b fb0e 	smulbb	fp, fp, lr
 80220ce:	fb01 2103 	mla	r1, r1, r3, r2
 80220d2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80220d6:	fb10 fe0e 	smulbb	lr, r0, lr
 80220da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80220de:	b289      	uxth	r1, r1
 80220e0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80220e4:	fa5f fc8c 	uxtb.w	ip, ip
 80220e8:	fb02 b203 	mla	r2, r2, r3, fp
 80220ec:	1c48      	adds	r0, r1, #1
 80220ee:	fb0c e303 	mla	r3, ip, r3, lr
 80220f2:	b292      	uxth	r2, r2
 80220f4:	b29b      	uxth	r3, r3
 80220f6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80220fa:	f102 0b01 	add.w	fp, r2, #1
 80220fe:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8022102:	1c59      	adds	r1, r3, #1
 8022104:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022108:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802210c:	0952      	lsrs	r2, r2, #5
 802210e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022112:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022116:	4301      	orrs	r1, r0
 8022118:	4311      	orrs	r1, r2
 802211a:	f8a8 1000 	strh.w	r1, [r8]
 802211e:	e738      	b.n	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022120:	f113 0b01 	adds.w	fp, r3, #1
 8022124:	f53f af35 	bmi.w	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022128:	45dc      	cmp	ip, fp
 802212a:	f6ff af32 	blt.w	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802212e:	f110 0b01 	adds.w	fp, r0, #1
 8022132:	f53f af2e 	bmi.w	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022136:	45de      	cmp	lr, fp
 8022138:	f6ff af2b 	blt.w	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802213c:	9302      	str	r3, [sp, #8]
 802213e:	fa0f f38e 	sxth.w	r3, lr
 8022142:	9a08      	ldr	r2, [sp, #32]
 8022144:	9301      	str	r3, [sp, #4]
 8022146:	fa0f f38c 	sxth.w	r3, ip
 802214a:	9105      	str	r1, [sp, #20]
 802214c:	4641      	mov	r1, r8
 802214e:	9300      	str	r3, [sp, #0]
 8022150:	4653      	mov	r3, sl
 8022152:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022156:	463a      	mov	r2, r7
 8022158:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802215a:	f7ff fd73 	bl	8021c44 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802215e:	e718      	b.n	8021f92 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022160:	1422      	asrs	r2, r4, #16
 8022162:	9906      	ldr	r1, [sp, #24]
 8022164:	1433      	asrs	r3, r6, #16
 8022166:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802216a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802216e:	fb01 2303 	mla	r3, r1, r3, r2
 8022172:	085a      	lsrs	r2, r3, #1
 8022174:	07d9      	lsls	r1, r3, #31
 8022176:	5cba      	ldrb	r2, [r7, r2]
 8022178:	bf54      	ite	pl
 802217a:	f002 020f 	andpl.w	r2, r2, #15
 802217e:	1112      	asrmi	r2, r2, #4
 8022180:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022184:	b2d2      	uxtb	r2, r2
 8022186:	2800      	cmp	r0, #0
 8022188:	d063      	beq.n	8022252 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802218a:	f103 0a01 	add.w	sl, r3, #1
 802218e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022192:	f01a 0f01 	tst.w	sl, #1
 8022196:	5c79      	ldrb	r1, [r7, r1]
 8022198:	bf0c      	ite	eq
 802219a:	f001 010f 	andeq.w	r1, r1, #15
 802219e:	1109      	asrne	r1, r1, #4
 80221a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80221a4:	b2c9      	uxtb	r1, r1
 80221a6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80221a8:	f1bc 0f00 	cmp.w	ip, #0
 80221ac:	d01a      	beq.n	80221e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80221ae:	9908      	ldr	r1, [sp, #32]
 80221b0:	440b      	add	r3, r1
 80221b2:	0859      	lsrs	r1, r3, #1
 80221b4:	f013 0f01 	tst.w	r3, #1
 80221b8:	f103 0301 	add.w	r3, r3, #1
 80221bc:	5c79      	ldrb	r1, [r7, r1]
 80221be:	bf0c      	ite	eq
 80221c0:	f001 010f 	andeq.w	r1, r1, #15
 80221c4:	1109      	asrne	r1, r1, #4
 80221c6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80221ca:	b2c9      	uxtb	r1, r1
 80221cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80221ce:	0859      	lsrs	r1, r3, #1
 80221d0:	07db      	lsls	r3, r3, #31
 80221d2:	5c79      	ldrb	r1, [r7, r1]
 80221d4:	bf54      	ite	pl
 80221d6:	f001 010f 	andpl.w	r1, r1, #15
 80221da:	1109      	asrmi	r1, r1, #4
 80221dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80221e0:	b2c9      	uxtb	r1, r1
 80221e2:	9110      	str	r1, [sp, #64]	@ 0x40
 80221e4:	b280      	uxth	r0, r0
 80221e6:	fa1f fc8c 	uxth.w	ip, ip
 80221ea:	fb00 f30c 	mul.w	r3, r0, ip
 80221ee:	0100      	lsls	r0, r0, #4
 80221f0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80221f4:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80221f8:	1ac0      	subs	r0, r0, r3
 80221fa:	fa1f fc8c 	uxth.w	ip, ip
 80221fe:	b280      	uxth	r0, r0
 8022200:	eba1 010c 	sub.w	r1, r1, ip
 8022204:	fa1f fa81 	uxth.w	sl, r1
 8022208:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802220a:	4348      	muls	r0, r1
 802220c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802220e:	fb02 020a 	mla	r2, r2, sl, r0
 8022212:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022216:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022218:	fb03 c302 	mla	r3, r3, r2, ip
 802221c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022220:	2bff      	cmp	r3, #255	@ 0xff
 8022222:	d12b      	bne.n	802227c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022224:	4b13      	ldr	r3, [pc, #76]	@ (8022274 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022226:	681a      	ldr	r2, [r3, #0]
 8022228:	4b13      	ldr	r3, [pc, #76]	@ (8022278 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802222a:	0951      	lsrs	r1, r2, #5
 802222c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022230:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022234:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022238:	430b      	orrs	r3, r1
 802223a:	4313      	orrs	r3, r2
 802223c:	f8ae 3000 	strh.w	r3, [lr]
 8022240:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022242:	f10e 0e02 	add.w	lr, lr, #2
 8022246:	f108 38ff 	add.w	r8, r8, #4294967295
 802224a:	441c      	add	r4, r3
 802224c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802224e:	441e      	add	r6, r3
 8022250:	e6cc      	b.n	8021fec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022252:	f1bc 0f00 	cmp.w	ip, #0
 8022256:	d0c5      	beq.n	80221e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022258:	9908      	ldr	r1, [sp, #32]
 802225a:	440b      	add	r3, r1
 802225c:	0859      	lsrs	r1, r3, #1
 802225e:	07db      	lsls	r3, r3, #31
 8022260:	5c79      	ldrb	r1, [r7, r1]
 8022262:	bf54      	ite	pl
 8022264:	f001 010f 	andpl.w	r1, r1, #15
 8022268:	1109      	asrmi	r1, r1, #4
 802226a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802226e:	b2c9      	uxtb	r1, r1
 8022270:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022272:	e7b7      	b.n	80221e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022274:	2400aa8c 	.word	0x2400aa8c
 8022278:	fffff800 	.word	0xfffff800
 802227c:	2b00      	cmp	r3, #0
 802227e:	d0df      	beq.n	8022240 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022280:	4a21      	ldr	r2, [pc, #132]	@ (8022308 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8022282:	fa1f fa83 	uxth.w	sl, r3
 8022286:	f8be c000 	ldrh.w	ip, [lr]
 802228a:	43db      	mvns	r3, r3
 802228c:	6810      	ldr	r0, [r2, #0]
 802228e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022292:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022296:	b2db      	uxtb	r3, r3
 8022298:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802229c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80222a0:	fb12 f20a 	smulbb	r2, r2, sl
 80222a4:	b2c0      	uxtb	r0, r0
 80222a6:	fb1b fb0a 	smulbb	fp, fp, sl
 80222aa:	fb01 2103 	mla	r1, r1, r3, r2
 80222ae:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80222b2:	fb10 f00a 	smulbb	r0, r0, sl
 80222b6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80222ba:	b289      	uxth	r1, r1
 80222bc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80222c0:	fa5f fc8c 	uxtb.w	ip, ip
 80222c4:	fb02 b203 	mla	r2, r2, r3, fp
 80222c8:	fb0c 0003 	mla	r0, ip, r3, r0
 80222cc:	1c4b      	adds	r3, r1, #1
 80222ce:	b292      	uxth	r2, r2
 80222d0:	b280      	uxth	r0, r0
 80222d2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80222d6:	f100 0b01 	add.w	fp, r0, #1
 80222da:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80222de:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80222e2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80222e6:	ea4b 0101 	orr.w	r1, fp, r1
 80222ea:	f102 0b01 	add.w	fp, r2, #1
 80222ee:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80222f2:	0952      	lsrs	r2, r2, #5
 80222f4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80222f8:	4311      	orrs	r1, r2
 80222fa:	f8ae 1000 	strh.w	r1, [lr]
 80222fe:	e79f      	b.n	8022240 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022300:	b013      	add	sp, #76	@ 0x4c
 8022302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022306:	bf00      	nop
 8022308:	2400aa8c 	.word	0x2400aa8c

0802230c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802230c:	b570      	push	{r4, r5, r6, lr}
 802230e:	1208      	asrs	r0, r1, #8
 8022310:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8022314:	b29e      	uxth	r6, r3
 8022316:	1213      	asrs	r3, r2, #8
 8022318:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802231c:	10cc      	asrs	r4, r1, #3
 802231e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8022322:	00c9      	lsls	r1, r1, #3
 8022324:	fb10 f006 	smulbb	r0, r0, r6
 8022328:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802232c:	fb13 f305 	smulbb	r3, r3, r5
 8022330:	fb14 f406 	smulbb	r4, r4, r6
 8022334:	4418      	add	r0, r3
 8022336:	10d3      	asrs	r3, r2, #3
 8022338:	00d2      	lsls	r2, r2, #3
 802233a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802233e:	b280      	uxth	r0, r0
 8022340:	b2d2      	uxtb	r2, r2
 8022342:	fb13 f305 	smulbb	r3, r3, r5
 8022346:	fb12 f205 	smulbb	r2, r2, r5
 802234a:	441c      	add	r4, r3
 802234c:	b2cb      	uxtb	r3, r1
 802234e:	fb13 f306 	smulbb	r3, r3, r6
 8022352:	b2a4      	uxth	r4, r4
 8022354:	4413      	add	r3, r2
 8022356:	1c42      	adds	r2, r0, #1
 8022358:	b29b      	uxth	r3, r3
 802235a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802235e:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8022362:	1c58      	adds	r0, r3, #1
 8022364:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022368:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802236c:	4310      	orrs	r0, r2
 802236e:	1c62      	adds	r2, r4, #1
 8022370:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022374:	0964      	lsrs	r4, r4, #5
 8022376:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802237a:	4320      	orrs	r0, r4
 802237c:	bd70      	pop	{r4, r5, r6, pc}
	...

08022380 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8022380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022384:	b08f      	sub	sp, #60	@ 0x3c
 8022386:	461c      	mov	r4, r3
 8022388:	460d      	mov	r5, r1
 802238a:	4616      	mov	r6, r2
 802238c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8022390:	9004      	str	r0, [sp, #16]
 8022392:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022394:	2f00      	cmp	r7, #0
 8022396:	f000 80f6 	beq.w	8022586 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 802239a:	6820      	ldr	r0, [r4, #0]
 802239c:	aa0a      	add	r2, sp, #40	@ 0x28
 802239e:	6861      	ldr	r1, [r4, #4]
 80223a0:	f04f 0802 	mov.w	r8, #2
 80223a4:	3604      	adds	r6, #4
 80223a6:	c203      	stmia	r2!, {r0, r1}
 80223a8:	6818      	ldr	r0, [r3, #0]
 80223aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80223ac:	6859      	ldr	r1, [r3, #4]
 80223ae:	c203      	stmia	r2!, {r0, r1}
 80223b0:	a80a      	add	r0, sp, #40	@ 0x28
 80223b2:	f7ef fb19 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223b6:	4621      	mov	r1, r4
 80223b8:	a80c      	add	r0, sp, #48	@ 0x30
 80223ba:	f7ef fb3d 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223be:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80223c2:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80223c6:	f002 0301 	and.w	r3, r2, #1
 80223ca:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80223ce:	9306      	str	r3, [sp, #24]
 80223d0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80223d4:	f003 0101 	and.w	r1, r3, #1
 80223d8:	9105      	str	r1, [sp, #20]
 80223da:	9805      	ldr	r0, [sp, #20]
 80223dc:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80223e0:	4403      	add	r3, r0
 80223e2:	fb01 2303 	mla	r3, r1, r3, r2
 80223e6:	fb93 f3f8 	sdiv	r3, r3, r8
 80223ea:	441d      	add	r5, r3
 80223ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80223f0:	441a      	add	r2, r3
 80223f2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80223f6:	4419      	add	r1, r3
 80223f8:	4b64      	ldr	r3, [pc, #400]	@ (802258c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80223fa:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80223fe:	6818      	ldr	r0, [r3, #0]
 8022400:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8022404:	6803      	ldr	r3, [r0, #0]
 8022406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022408:	4798      	blx	r3
 802240a:	4a61      	ldr	r2, [pc, #388]	@ (8022590 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802240c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8022410:	2fff      	cmp	r7, #255	@ 0xff
 8022412:	8813      	ldrh	r3, [r2, #0]
 8022414:	4611      	mov	r1, r2
 8022416:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802241a:	fb03 fb0b 	mul.w	fp, r3, fp
 802241e:	fb03 a404 	mla	r4, r3, r4, sl
 8022422:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022426:	d06b      	beq.n	8022500 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8022428:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802242c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8022430:	9303      	str	r3, [sp, #12]
 8022432:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8022436:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802243a:	9b07      	ldr	r3, [sp, #28]
 802243c:	42a3      	cmp	r3, r4
 802243e:	f240 809d 	bls.w	802257c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8022442:	9b06      	ldr	r3, [sp, #24]
 8022444:	2b00      	cmp	r3, #0
 8022446:	d039      	beq.n	80224bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8022448:	782b      	ldrb	r3, [r5, #0]
 802244a:	f105 0801 	add.w	r8, r5, #1
 802244e:	f109 3bff 	add.w	fp, r9, #4294967295
 8022452:	8822      	ldrh	r2, [r4, #0]
 8022454:	f003 030f 	and.w	r3, r3, #15
 8022458:	9804      	ldr	r0, [sp, #16]
 802245a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802245e:	9b03      	ldr	r3, [sp, #12]
 8022460:	9300      	str	r3, [sp, #0]
 8022462:	463b      	mov	r3, r7
 8022464:	f7ff ff52 	bl	802230c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8022468:	f824 0b02 	strh.w	r0, [r4], #2
 802246c:	f1bb 0f01 	cmp.w	fp, #1
 8022470:	46a2      	mov	sl, r4
 8022472:	f104 0404 	add.w	r4, r4, #4
 8022476:	dd24      	ble.n	80224c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8022478:	f898 3000 	ldrb.w	r3, [r8]
 802247c:	f1ab 0b02 	sub.w	fp, fp, #2
 8022480:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8022484:	091b      	lsrs	r3, r3, #4
 8022486:	9804      	ldr	r0, [sp, #16]
 8022488:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802248c:	9b03      	ldr	r3, [sp, #12]
 802248e:	9300      	str	r3, [sp, #0]
 8022490:	463b      	mov	r3, r7
 8022492:	f7ff ff3b 	bl	802230c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8022496:	f824 0c04 	strh.w	r0, [r4, #-4]
 802249a:	f818 3b01 	ldrb.w	r3, [r8], #1
 802249e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80224a2:	f003 030f 	and.w	r3, r3, #15
 80224a6:	9804      	ldr	r0, [sp, #16]
 80224a8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80224ac:	9b03      	ldr	r3, [sp, #12]
 80224ae:	9300      	str	r3, [sp, #0]
 80224b0:	463b      	mov	r3, r7
 80224b2:	f7ff ff2b 	bl	802230c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80224b6:	f824 0c02 	strh.w	r0, [r4, #-2]
 80224ba:	e7d7      	b.n	802246c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80224bc:	46a8      	mov	r8, r5
 80224be:	46cb      	mov	fp, r9
 80224c0:	e7d4      	b.n	802246c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80224c2:	d10e      	bne.n	80224e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 80224c4:	f898 3000 	ldrb.w	r3, [r8]
 80224c8:	f8ba 2000 	ldrh.w	r2, [sl]
 80224cc:	091b      	lsrs	r3, r3, #4
 80224ce:	9804      	ldr	r0, [sp, #16]
 80224d0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80224d4:	9b03      	ldr	r3, [sp, #12]
 80224d6:	9300      	str	r3, [sp, #0]
 80224d8:	463b      	mov	r3, r7
 80224da:	f7ff ff17 	bl	802230c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80224de:	f82a 0b02 	strh.w	r0, [sl], #2
 80224e2:	9b08      	ldr	r3, [sp, #32]
 80224e4:	9a05      	ldr	r2, [sp, #20]
 80224e6:	881c      	ldrh	r4, [r3, #0]
 80224e8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80224ec:	eba4 0409 	sub.w	r4, r4, r9
 80224f0:	4413      	add	r3, r2
 80224f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80224f4:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 80224f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80224fc:	441d      	add	r5, r3
 80224fe:	e79c      	b.n	802243a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8022500:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8022504:	45a3      	cmp	fp, r4
 8022506:	d939      	bls.n	802257c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8022508:	9b06      	ldr	r3, [sp, #24]
 802250a:	b1fb      	cbz	r3, 802254c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 802250c:	782b      	ldrb	r3, [r5, #0]
 802250e:	1c6a      	adds	r2, r5, #1
 8022510:	f109 30ff 	add.w	r0, r9, #4294967295
 8022514:	3402      	adds	r4, #2
 8022516:	f003 030f 	and.w	r3, r3, #15
 802251a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802251e:	f824 3c02 	strh.w	r3, [r4, #-2]
 8022522:	2801      	cmp	r0, #1
 8022524:	4623      	mov	r3, r4
 8022526:	f104 0404 	add.w	r4, r4, #4
 802252a:	dd12      	ble.n	8022552 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 802252c:	7813      	ldrb	r3, [r2, #0]
 802252e:	3802      	subs	r0, #2
 8022530:	091b      	lsrs	r3, r3, #4
 8022532:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022536:	f824 3c04 	strh.w	r3, [r4, #-4]
 802253a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802253e:	f003 030f 	and.w	r3, r3, #15
 8022542:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022546:	f824 3c02 	strh.w	r3, [r4, #-2]
 802254a:	e7ea      	b.n	8022522 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802254c:	462a      	mov	r2, r5
 802254e:	4648      	mov	r0, r9
 8022550:	e7e7      	b.n	8022522 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8022552:	d106      	bne.n	8022562 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8022554:	7812      	ldrb	r2, [r2, #0]
 8022556:	3302      	adds	r3, #2
 8022558:	0912      	lsrs	r2, r2, #4
 802255a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802255e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8022562:	880c      	ldrh	r4, [r1, #0]
 8022564:	9a05      	ldr	r2, [sp, #20]
 8022566:	eba4 0409 	sub.w	r4, r4, r9
 802256a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802256e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022572:	4413      	add	r3, r2
 8022574:	fb93 f3f8 	sdiv	r3, r3, r8
 8022578:	441d      	add	r5, r3
 802257a:	e7c3      	b.n	8022504 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802257c:	4b03      	ldr	r3, [pc, #12]	@ (802258c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802257e:	6818      	ldr	r0, [r3, #0]
 8022580:	6803      	ldr	r3, [r0, #0]
 8022582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022584:	4798      	blx	r3
 8022586:	b00f      	add	sp, #60	@ 0x3c
 8022588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802258c:	2400aa84 	.word	0x2400aa84
 8022590:	2400aa7e 	.word	0x2400aa7e

08022594 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8022594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022596:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802259a:	0a0f      	lsrs	r7, r1, #8
 802259c:	2dff      	cmp	r5, #255	@ 0xff
 802259e:	d10c      	bne.n	80225ba <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80225a0:	2bff      	cmp	r3, #255	@ 0xff
 80225a2:	d10a      	bne.n	80225ba <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80225a4:	0948      	lsrs	r0, r1, #5
 80225a6:	4b25      	ldr	r3, [pc, #148]	@ (802263c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80225a8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80225ac:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80225b0:	403b      	ands	r3, r7
 80225b2:	4318      	orrs	r0, r3
 80225b4:	4308      	orrs	r0, r1
 80225b6:	b280      	uxth	r0, r0
 80225b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225ba:	fb15 f503 	smulbb	r5, r5, r3
 80225be:	1214      	asrs	r4, r2, #8
 80225c0:	10d6      	asrs	r6, r2, #3
 80225c2:	b2ab      	uxth	r3, r5
 80225c4:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80225c8:	00d0      	lsls	r0, r2, #3
 80225ca:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80225ce:	1c5d      	adds	r5, r3, #1
 80225d0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80225d4:	b2c0      	uxtb	r0, r0
 80225d6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80225da:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 80225de:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80225e2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80225e6:	fa1f fc85 	uxth.w	ip, r5
 80225ea:	43ed      	mvns	r5, r5
 80225ec:	fb12 f20c 	smulbb	r2, r2, ip
 80225f0:	b2eb      	uxtb	r3, r5
 80225f2:	b2fd      	uxtb	r5, r7
 80225f4:	fb04 2403 	mla	r4, r4, r3, r2
 80225f8:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 80225fc:	fb15 f50c 	smulbb	r5, r5, ip
 8022600:	b2c8      	uxtb	r0, r1
 8022602:	b2a4      	uxth	r4, r4
 8022604:	fb10 f00c 	smulbb	r0, r0, ip
 8022608:	fb06 5503 	mla	r5, r6, r3, r5
 802260c:	fb02 0003 	mla	r0, r2, r3, r0
 8022610:	b2ad      	uxth	r5, r5
 8022612:	b283      	uxth	r3, r0
 8022614:	1c60      	adds	r0, r4, #1
 8022616:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802261a:	1c58      	adds	r0, r3, #1
 802261c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022620:	1c6b      	adds	r3, r5, #1
 8022622:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8022626:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802262a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802262e:	096d      	lsrs	r5, r5, #5
 8022630:	4320      	orrs	r0, r4
 8022632:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022636:	4328      	orrs	r0, r5
 8022638:	e7be      	b.n	80225b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802263a:	bf00      	nop
 802263c:	00fff800 	.word	0x00fff800

08022640 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8022640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022644:	461c      	mov	r4, r3
 8022646:	b08d      	sub	sp, #52	@ 0x34
 8022648:	460d      	mov	r5, r1
 802264a:	4616      	mov	r6, r2
 802264c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802264e:	4680      	mov	r8, r0
 8022650:	6861      	ldr	r1, [r4, #4]
 8022652:	aa08      	add	r2, sp, #32
 8022654:	6820      	ldr	r0, [r4, #0]
 8022656:	f04f 0a02 	mov.w	sl, #2
 802265a:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802265e:	3604      	adds	r6, #4
 8022660:	c203      	stmia	r2!, {r0, r1}
 8022662:	6818      	ldr	r0, [r3, #0]
 8022664:	aa0a      	add	r2, sp, #40	@ 0x28
 8022666:	6859      	ldr	r1, [r3, #4]
 8022668:	c203      	stmia	r2!, {r0, r1}
 802266a:	a808      	add	r0, sp, #32
 802266c:	f7ef f9bc 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022670:	4621      	mov	r1, r4
 8022672:	a80a      	add	r0, sp, #40	@ 0x28
 8022674:	f7ef f9e0 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022678:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802267c:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8022680:	f002 0301 	and.w	r3, r2, #1
 8022684:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8022688:	9303      	str	r3, [sp, #12]
 802268a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802268e:	f003 0101 	and.w	r1, r3, #1
 8022692:	9102      	str	r1, [sp, #8]
 8022694:	9802      	ldr	r0, [sp, #8]
 8022696:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802269a:	4403      	add	r3, r0
 802269c:	fb01 2303 	mla	r3, r1, r3, r2
 80226a0:	fb93 f3fa 	sdiv	r3, r3, sl
 80226a4:	441d      	add	r5, r3
 80226a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80226aa:	441a      	add	r2, r3
 80226ac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80226b0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80226b4:	4419      	add	r1, r3
 80226b6:	4a3e      	ldr	r2, [pc, #248]	@ (80227b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 80226b8:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 80226bc:	6810      	ldr	r0, [r2, #0]
 80226be:	9205      	str	r2, [sp, #20]
 80226c0:	6803      	ldr	r3, [r0, #0]
 80226c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80226c4:	4798      	blx	r3
 80226c6:	4b3b      	ldr	r3, [pc, #236]	@ (80227b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 80226c8:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 80226cc:	8819      	ldrh	r1, [r3, #0]
 80226ce:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 80226d2:	434f      	muls	r7, r1
 80226d4:	fb01 c404 	mla	r4, r1, r4, ip
 80226d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80226dc:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 80226e0:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 80226e4:	9204      	str	r2, [sp, #16]
 80226e6:	9b04      	ldr	r3, [sp, #16]
 80226e8:	429c      	cmp	r4, r3
 80226ea:	d258      	bcs.n	802279e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80226ec:	9b03      	ldr	r3, [sp, #12]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	d034      	beq.n	802275c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80226f2:	782b      	ldrb	r3, [r5, #0]
 80226f4:	1c6f      	adds	r7, r5, #1
 80226f6:	f003 030f 	and.w	r3, r3, #15
 80226fa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80226fe:	0e0b      	lsrs	r3, r1, #24
 8022700:	d006      	beq.n	8022710 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8022702:	8822      	ldrh	r2, [r4, #0]
 8022704:	4640      	mov	r0, r8
 8022706:	9300      	str	r3, [sp, #0]
 8022708:	464b      	mov	r3, r9
 802270a:	f7ff ff43 	bl	8022594 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802270e:	8020      	strh	r0, [r4, #0]
 8022710:	3402      	adds	r4, #2
 8022712:	f10b 3aff 	add.w	sl, fp, #4294967295
 8022716:	f1ba 0f01 	cmp.w	sl, #1
 802271a:	dd22      	ble.n	8022762 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802271c:	783b      	ldrb	r3, [r7, #0]
 802271e:	091b      	lsrs	r3, r3, #4
 8022720:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8022724:	0e0b      	lsrs	r3, r1, #24
 8022726:	d006      	beq.n	8022736 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8022728:	8822      	ldrh	r2, [r4, #0]
 802272a:	4640      	mov	r0, r8
 802272c:	9300      	str	r3, [sp, #0]
 802272e:	464b      	mov	r3, r9
 8022730:	f7ff ff30 	bl	8022594 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8022734:	8020      	strh	r0, [r4, #0]
 8022736:	f817 3b01 	ldrb.w	r3, [r7], #1
 802273a:	f003 030f 	and.w	r3, r3, #15
 802273e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8022742:	0e0b      	lsrs	r3, r1, #24
 8022744:	d006      	beq.n	8022754 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8022746:	8862      	ldrh	r2, [r4, #2]
 8022748:	4640      	mov	r0, r8
 802274a:	9300      	str	r3, [sp, #0]
 802274c:	464b      	mov	r3, r9
 802274e:	f7ff ff21 	bl	8022594 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8022752:	8060      	strh	r0, [r4, #2]
 8022754:	3404      	adds	r4, #4
 8022756:	f1aa 0a02 	sub.w	sl, sl, #2
 802275a:	e7dc      	b.n	8022716 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802275c:	462f      	mov	r7, r5
 802275e:	46da      	mov	sl, fp
 8022760:	e7d9      	b.n	8022716 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8022762:	d10d      	bne.n	8022780 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8022764:	783b      	ldrb	r3, [r7, #0]
 8022766:	091b      	lsrs	r3, r3, #4
 8022768:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802276c:	0e0b      	lsrs	r3, r1, #24
 802276e:	d006      	beq.n	802277e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8022770:	8822      	ldrh	r2, [r4, #0]
 8022772:	4640      	mov	r0, r8
 8022774:	9300      	str	r3, [sp, #0]
 8022776:	464b      	mov	r3, r9
 8022778:	f7ff ff0c 	bl	8022594 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802277c:	8020      	strh	r0, [r4, #0]
 802277e:	3402      	adds	r4, #2
 8022780:	9b06      	ldr	r3, [sp, #24]
 8022782:	9a02      	ldr	r2, [sp, #8]
 8022784:	881b      	ldrh	r3, [r3, #0]
 8022786:	eba3 030b 	sub.w	r3, r3, fp
 802278a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802278e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8022792:	4413      	add	r3, r2
 8022794:	9a07      	ldr	r2, [sp, #28]
 8022796:	fb93 f3f2 	sdiv	r3, r3, r2
 802279a:	441d      	add	r5, r3
 802279c:	e7a3      	b.n	80226e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802279e:	9b05      	ldr	r3, [sp, #20]
 80227a0:	6818      	ldr	r0, [r3, #0]
 80227a2:	6803      	ldr	r3, [r0, #0]
 80227a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227a6:	4798      	blx	r3
 80227a8:	b00d      	add	sp, #52	@ 0x34
 80227aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ae:	bf00      	nop
 80227b0:	2400aa84 	.word	0x2400aa84
 80227b4:	2400aa7e 	.word	0x2400aa7e

080227b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80227b8:	b570      	push	{r4, r5, r6, lr}
 80227ba:	1214      	asrs	r4, r2, #8
 80227bc:	788d      	ldrb	r5, [r1, #2]
 80227be:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80227c2:	10d0      	asrs	r0, r2, #3
 80227c4:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80227c8:	00d2      	lsls	r2, r2, #3
 80227ca:	fb15 f503 	smulbb	r5, r5, r3
 80227ce:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80227d2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80227d6:	b2d2      	uxtb	r2, r2
 80227d8:	fb04 5506 	mla	r5, r4, r6, r5
 80227dc:	784c      	ldrb	r4, [r1, #1]
 80227de:	7809      	ldrb	r1, [r1, #0]
 80227e0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80227e4:	fb14 f403 	smulbb	r4, r4, r3
 80227e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80227ec:	fb11 f303 	smulbb	r3, r1, r3
 80227f0:	b2ad      	uxth	r5, r5
 80227f2:	fb00 4406 	mla	r4, r0, r6, r4
 80227f6:	fb02 3306 	mla	r3, r2, r6, r3
 80227fa:	1c68      	adds	r0, r5, #1
 80227fc:	b2a4      	uxth	r4, r4
 80227fe:	b29b      	uxth	r3, r3
 8022800:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8022804:	1c62      	adds	r2, r4, #1
 8022806:	1c58      	adds	r0, r3, #1
 8022808:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802280c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022810:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022814:	0964      	lsrs	r4, r4, #5
 8022816:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802281a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802281e:	4328      	orrs	r0, r5
 8022820:	4320      	orrs	r0, r4
 8022822:	bd70      	pop	{r4, r5, r6, pc}

08022824 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8022824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022828:	b08f      	sub	sp, #60	@ 0x3c
 802282a:	461c      	mov	r4, r3
 802282c:	4682      	mov	sl, r0
 802282e:	460e      	mov	r6, r1
 8022830:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8022834:	4615      	mov	r5, r2
 8022836:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022838:	2f00      	cmp	r7, #0
 802283a:	f000 8141 	beq.w	8022ac0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802283e:	6820      	ldr	r0, [r4, #0]
 8022840:	aa0a      	add	r2, sp, #40	@ 0x28
 8022842:	6861      	ldr	r1, [r4, #4]
 8022844:	f04f 0802 	mov.w	r8, #2
 8022848:	3504      	adds	r5, #4
 802284a:	c203      	stmia	r2!, {r0, r1}
 802284c:	6818      	ldr	r0, [r3, #0]
 802284e:	aa0c      	add	r2, sp, #48	@ 0x30
 8022850:	6859      	ldr	r1, [r3, #4]
 8022852:	c203      	stmia	r2!, {r0, r1}
 8022854:	a80a      	add	r0, sp, #40	@ 0x28
 8022856:	f7ef f8c7 	bl	80119e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802285a:	4621      	mov	r1, r4
 802285c:	a80c      	add	r0, sp, #48	@ 0x30
 802285e:	f7ef f8eb 	bl	8011a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022862:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022866:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802286a:	f002 0301 	and.w	r3, r2, #1
 802286e:	9306      	str	r3, [sp, #24]
 8022870:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8022874:	f003 0101 	and.w	r1, r3, #1
 8022878:	9105      	str	r1, [sp, #20]
 802287a:	9805      	ldr	r0, [sp, #20]
 802287c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8022880:	4403      	add	r3, r0
 8022882:	fb01 2303 	mla	r3, r1, r3, r2
 8022886:	fb93 f3f8 	sdiv	r3, r3, r8
 802288a:	441e      	add	r6, r3
 802288c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8022890:	441a      	add	r2, r3
 8022892:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8022896:	4419      	add	r1, r3
 8022898:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802289c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80228a0:	9303      	str	r3, [sp, #12]
 80228a2:	4b89      	ldr	r3, [pc, #548]	@ (8022ac8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80228a4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80228a8:	6818      	ldr	r0, [r3, #0]
 80228aa:	6803      	ldr	r3, [r0, #0]
 80228ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80228ae:	4798      	blx	r3
 80228b0:	4a86      	ldr	r2, [pc, #536]	@ (8022acc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 80228b2:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80228b6:	2fff      	cmp	r7, #255	@ 0xff
 80228b8:	8813      	ldrh	r3, [r2, #0]
 80228ba:	4694      	mov	ip, r2
 80228bc:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 80228c0:	fb03 9404 	mla	r4, r3, r4, r9
 80228c4:	fb03 f30b 	mul.w	r3, r3, fp
 80228c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80228cc:	d071      	beq.n	80229b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 80228ce:	43f9      	mvns	r1, r7
 80228d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80228d4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80228d8:	b2c9      	uxtb	r1, r1
 80228da:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80228de:	9104      	str	r1, [sp, #16]
 80228e0:	9b07      	ldr	r3, [sp, #28]
 80228e2:	42a3      	cmp	r3, r4
 80228e4:	f240 80e7 	bls.w	8022ab6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 80228e8:	9b06      	ldr	r3, [sp, #24]
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d03d      	beq.n	802296a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 80228ee:	7831      	ldrb	r1, [r6, #0]
 80228f0:	4650      	mov	r0, sl
 80228f2:	9b04      	ldr	r3, [sp, #16]
 80228f4:	f106 0801 	add.w	r8, r6, #1
 80228f8:	f001 010f 	and.w	r1, r1, #15
 80228fc:	8822      	ldrh	r2, [r4, #0]
 80228fe:	9300      	str	r3, [sp, #0]
 8022900:	463b      	mov	r3, r7
 8022902:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022906:	4429      	add	r1, r5
 8022908:	f7ff ff56 	bl	80227b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802290c:	9b03      	ldr	r3, [sp, #12]
 802290e:	f824 0b02 	strh.w	r0, [r4], #2
 8022912:	f103 3bff 	add.w	fp, r3, #4294967295
 8022916:	f1bb 0f01 	cmp.w	fp, #1
 802291a:	46a1      	mov	r9, r4
 802291c:	f104 0404 	add.w	r4, r4, #4
 8022920:	dd27      	ble.n	8022972 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8022922:	f898 1000 	ldrb.w	r1, [r8]
 8022926:	4650      	mov	r0, sl
 8022928:	9b04      	ldr	r3, [sp, #16]
 802292a:	f1ab 0b02 	sub.w	fp, fp, #2
 802292e:	0909      	lsrs	r1, r1, #4
 8022930:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8022934:	9300      	str	r3, [sp, #0]
 8022936:	463b      	mov	r3, r7
 8022938:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802293c:	4429      	add	r1, r5
 802293e:	f7ff ff3b 	bl	80227b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8022942:	f824 0c04 	strh.w	r0, [r4, #-4]
 8022946:	f818 1b01 	ldrb.w	r1, [r8], #1
 802294a:	4650      	mov	r0, sl
 802294c:	9b04      	ldr	r3, [sp, #16]
 802294e:	f001 010f 	and.w	r1, r1, #15
 8022952:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8022956:	9300      	str	r3, [sp, #0]
 8022958:	463b      	mov	r3, r7
 802295a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802295e:	4429      	add	r1, r5
 8022960:	f7ff ff2a 	bl	80227b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8022964:	f824 0c02 	strh.w	r0, [r4, #-2]
 8022968:	e7d5      	b.n	8022916 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802296a:	46b0      	mov	r8, r6
 802296c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022970:	e7d1      	b.n	8022916 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8022972:	d10f      	bne.n	8022994 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8022974:	f898 1000 	ldrb.w	r1, [r8]
 8022978:	4650      	mov	r0, sl
 802297a:	9b04      	ldr	r3, [sp, #16]
 802297c:	0909      	lsrs	r1, r1, #4
 802297e:	f8b9 2000 	ldrh.w	r2, [r9]
 8022982:	9300      	str	r3, [sp, #0]
 8022984:	463b      	mov	r3, r7
 8022986:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802298a:	4429      	add	r1, r5
 802298c:	f7ff ff14 	bl	80227b8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8022990:	f829 0b02 	strh.w	r0, [r9], #2
 8022994:	9b08      	ldr	r3, [sp, #32]
 8022996:	9a05      	ldr	r2, [sp, #20]
 8022998:	881c      	ldrh	r4, [r3, #0]
 802299a:	9b03      	ldr	r3, [sp, #12]
 802299c:	1ae4      	subs	r4, r4, r3
 802299e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80229a2:	4413      	add	r3, r2
 80229a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80229a6:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80229aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80229ae:	441e      	add	r6, r3
 80229b0:	e796      	b.n	80228e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 80229b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80229b6:	4f46      	ldr	r7, [pc, #280]	@ (8022ad0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 80229b8:	42a3      	cmp	r3, r4
 80229ba:	d97c      	bls.n	8022ab6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 80229bc:	9a06      	ldr	r2, [sp, #24]
 80229be:	2a00      	cmp	r2, #0
 80229c0:	d054      	beq.n	8022a6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80229c2:	7830      	ldrb	r0, [r6, #0]
 80229c4:	1c71      	adds	r1, r6, #1
 80229c6:	f000 000f 	and.w	r0, r0, #15
 80229ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229ce:	eb05 0e00 	add.w	lr, r5, r0
 80229d2:	5c28      	ldrb	r0, [r5, r0]
 80229d4:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80229d8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80229dc:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80229e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80229e4:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80229e8:	ea42 020e 	orr.w	r2, r2, lr
 80229ec:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80229f0:	f824 2b02 	strh.w	r2, [r4], #2
 80229f4:	9a03      	ldr	r2, [sp, #12]
 80229f6:	f102 3eff 	add.w	lr, r2, #4294967295
 80229fa:	f1be 0f01 	cmp.w	lr, #1
 80229fe:	4620      	mov	r0, r4
 8022a00:	f104 0404 	add.w	r4, r4, #4
 8022a04:	dd36      	ble.n	8022a74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8022a06:	7808      	ldrb	r0, [r1, #0]
 8022a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8022a0c:	0900      	lsrs	r0, r0, #4
 8022a0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a12:	eb05 0a00 	add.w	sl, r5, r0
 8022a16:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022a1a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022a1e:	00d2      	lsls	r2, r2, #3
 8022a20:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8022a24:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022a28:	ea49 0202 	orr.w	r2, r9, r2
 8022a2c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022a30:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8022a34:	f824 2c04 	strh.w	r2, [r4, #-4]
 8022a38:	f811 0b01 	ldrb.w	r0, [r1], #1
 8022a3c:	f000 000f 	and.w	r0, r0, #15
 8022a40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a44:	eb05 0a00 	add.w	sl, r5, r0
 8022a48:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022a4c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022a50:	00d2      	lsls	r2, r2, #3
 8022a52:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8022a56:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022a5a:	ea49 0202 	orr.w	r2, r9, r2
 8022a5e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022a62:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8022a66:	f824 2c02 	strh.w	r2, [r4, #-2]
 8022a6a:	e7c6      	b.n	80229fa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8022a6c:	4631      	mov	r1, r6
 8022a6e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8022a72:	e7c2      	b.n	80229fa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8022a74:	d111      	bne.n	8022a9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8022a76:	7809      	ldrb	r1, [r1, #0]
 8022a78:	0909      	lsrs	r1, r1, #4
 8022a7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022a7e:	186c      	adds	r4, r5, r1
 8022a80:	5c69      	ldrb	r1, [r5, r1]
 8022a82:	78a2      	ldrb	r2, [r4, #2]
 8022a84:	7864      	ldrb	r4, [r4, #1]
 8022a86:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8022a8a:	00e4      	lsls	r4, r4, #3
 8022a8c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8022a90:	4322      	orrs	r2, r4
 8022a92:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8022a96:	f820 2b02 	strh.w	r2, [r0], #2
 8022a9a:	9a03      	ldr	r2, [sp, #12]
 8022a9c:	f8bc 4000 	ldrh.w	r4, [ip]
 8022aa0:	9905      	ldr	r1, [sp, #20]
 8022aa2:	1aa4      	subs	r4, r4, r2
 8022aa4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8022aa8:	440a      	add	r2, r1
 8022aaa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022aae:	fb92 f2f8 	sdiv	r2, r2, r8
 8022ab2:	4416      	add	r6, r2
 8022ab4:	e780      	b.n	80229b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8022ab6:	4b04      	ldr	r3, [pc, #16]	@ (8022ac8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8022ab8:	6818      	ldr	r0, [r3, #0]
 8022aba:	6803      	ldr	r3, [r0, #0]
 8022abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022abe:	4798      	blx	r3
 8022ac0:	b00f      	add	sp, #60	@ 0x3c
 8022ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ac6:	bf00      	nop
 8022ac8:	2400aa84 	.word	0x2400aa84
 8022acc:	2400aa7e 	.word	0x2400aa7e
 8022ad0:	fffff800 	.word	0xfffff800

08022ad4 <CRC_Lock>:
 8022ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8022b8c <CRC_Lock+0xb8>)
 8022ad6:	b530      	push	{r4, r5, lr}
 8022ad8:	6813      	ldr	r3, [r2, #0]
 8022ada:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8022ade:	f023 0301 	bic.w	r3, r3, #1
 8022ae2:	6013      	str	r3, [r2, #0]
 8022ae4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8022ae8:	4b29      	ldr	r3, [pc, #164]	@ (8022b90 <CRC_Lock+0xbc>)
 8022aea:	681c      	ldr	r4, [r3, #0]
 8022aec:	4014      	ands	r4, r2
 8022aee:	42ac      	cmp	r4, r5
 8022af0:	d005      	beq.n	8022afe <CRC_Lock+0x2a>
 8022af2:	681c      	ldr	r4, [r3, #0]
 8022af4:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8022af8:	4014      	ands	r4, r2
 8022afa:	42ac      	cmp	r4, r5
 8022afc:	d125      	bne.n	8022b4a <CRC_Lock+0x76>
 8022afe:	4b25      	ldr	r3, [pc, #148]	@ (8022b94 <CRC_Lock+0xc0>)
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d139      	bne.n	8022b7a <CRC_Lock+0xa6>
 8022b06:	4b24      	ldr	r3, [pc, #144]	@ (8022b98 <CRC_Lock+0xc4>)
 8022b08:	681a      	ldr	r2, [r3, #0]
 8022b0a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022b0e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8022b12:	d00d      	beq.n	8022b30 <CRC_Lock+0x5c>
 8022b14:	681a      	ldr	r2, [r3, #0]
 8022b16:	f240 4483 	movw	r4, #1155	@ 0x483
 8022b1a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022b1e:	42a2      	cmp	r2, r4
 8022b20:	d006      	beq.n	8022b30 <CRC_Lock+0x5c>
 8022b22:	681b      	ldr	r3, [r3, #0]
 8022b24:	f240 4285 	movw	r2, #1157	@ 0x485
 8022b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022b2c:	4293      	cmp	r3, r2
 8022b2e:	d124      	bne.n	8022b7a <CRC_Lock+0xa6>
 8022b30:	4b1a      	ldr	r3, [pc, #104]	@ (8022b9c <CRC_Lock+0xc8>)
 8022b32:	2201      	movs	r2, #1
 8022b34:	601a      	str	r2, [r3, #0]
 8022b36:	681a      	ldr	r2, [r3, #0]
 8022b38:	2a00      	cmp	r2, #0
 8022b3a:	d1fc      	bne.n	8022b36 <CRC_Lock+0x62>
 8022b3c:	4b18      	ldr	r3, [pc, #96]	@ (8022ba0 <CRC_Lock+0xcc>)
 8022b3e:	6018      	str	r0, [r3, #0]
 8022b40:	6818      	ldr	r0, [r3, #0]
 8022b42:	1a43      	subs	r3, r0, r1
 8022b44:	4258      	negs	r0, r3
 8022b46:	4158      	adcs	r0, r3
 8022b48:	e00e      	b.n	8022b68 <CRC_Lock+0x94>
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	4013      	ands	r3, r2
 8022b4e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8022b52:	4293      	cmp	r3, r2
 8022b54:	d111      	bne.n	8022b7a <CRC_Lock+0xa6>
 8022b56:	4b13      	ldr	r3, [pc, #76]	@ (8022ba4 <CRC_Lock+0xd0>)
 8022b58:	f240 4286 	movw	r2, #1158	@ 0x486
 8022b5c:	681b      	ldr	r3, [r3, #0]
 8022b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022b62:	4293      	cmp	r3, r2
 8022b64:	d001      	beq.n	8022b6a <CRC_Lock+0x96>
 8022b66:	2000      	movs	r0, #0
 8022b68:	bd30      	pop	{r4, r5, pc}
 8022b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8022ba8 <CRC_Lock+0xd4>)
 8022b6c:	2201      	movs	r2, #1
 8022b6e:	601a      	str	r2, [r3, #0]
 8022b70:	681a      	ldr	r2, [r3, #0]
 8022b72:	2a00      	cmp	r2, #0
 8022b74:	d1fc      	bne.n	8022b70 <CRC_Lock+0x9c>
 8022b76:	4b0d      	ldr	r3, [pc, #52]	@ (8022bac <CRC_Lock+0xd8>)
 8022b78:	e7e1      	b.n	8022b3e <CRC_Lock+0x6a>
 8022b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8022bb0 <CRC_Lock+0xdc>)
 8022b7c:	2201      	movs	r2, #1
 8022b7e:	601a      	str	r2, [r3, #0]
 8022b80:	681a      	ldr	r2, [r3, #0]
 8022b82:	2a00      	cmp	r2, #0
 8022b84:	d1fc      	bne.n	8022b80 <CRC_Lock+0xac>
 8022b86:	4b0b      	ldr	r3, [pc, #44]	@ (8022bb4 <CRC_Lock+0xe0>)
 8022b88:	e7d9      	b.n	8022b3e <CRC_Lock+0x6a>
 8022b8a:	bf00      	nop
 8022b8c:	e0002000 	.word	0xe0002000
 8022b90:	e000ed00 	.word	0xe000ed00
 8022b94:	e0042000 	.word	0xe0042000
 8022b98:	5c001000 	.word	0x5c001000
 8022b9c:	58024c08 	.word	0x58024c08
 8022ba0:	58024c00 	.word	0x58024c00
 8022ba4:	46008ff0 	.word	0x46008ff0
 8022ba8:	46024c08 	.word	0x46024c08
 8022bac:	46024c00 	.word	0x46024c00
 8022bb0:	40023008 	.word	0x40023008
 8022bb4:	40023000 	.word	0x40023000

08022bb8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022bb8:	6101      	str	r1, [r0, #16]
 8022bba:	4770      	bx	lr

08022bbc <_ZN8touchgfx8Gestures4tickEv>:
 8022bbc:	7b83      	ldrb	r3, [r0, #14]
 8022bbe:	b14b      	cbz	r3, 8022bd4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022bc0:	8903      	ldrh	r3, [r0, #8]
 8022bc2:	3301      	adds	r3, #1
 8022bc4:	b29b      	uxth	r3, r3
 8022bc6:	2b07      	cmp	r3, #7
 8022bc8:	8103      	strh	r3, [r0, #8]
 8022bca:	bf81      	itttt	hi
 8022bcc:	2300      	movhi	r3, #0
 8022bce:	8143      	strhhi	r3, [r0, #10]
 8022bd0:	8183      	strhhi	r3, [r0, #12]
 8022bd2:	7383      	strbhi	r3, [r0, #14]
 8022bd4:	4770      	bx	lr
	...

08022bd8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022bd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022bdc:	4698      	mov	r8, r3
 8022bde:	8883      	ldrh	r3, [r0, #4]
 8022be0:	4604      	mov	r4, r0
 8022be2:	4617      	mov	r7, r2
 8022be4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022be8:	eba8 0303 	sub.w	r3, r8, r3
 8022bec:	4a19      	ldr	r2, [pc, #100]	@ (8022c54 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8022bee:	460e      	mov	r6, r1
 8022bf0:	b21b      	sxth	r3, r3
 8022bf2:	88c1      	ldrh	r1, [r0, #6]
 8022bf4:	9200      	str	r2, [sp, #0]
 8022bf6:	2000      	movs	r0, #0
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	8aa2      	ldrh	r2, [r4, #20]
 8022bfc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8022c00:	bfb8      	it	lt
 8022c02:	425b      	neglt	r3, r3
 8022c04:	f88d 0004 	strb.w	r0, [sp, #4]
 8022c08:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022c0c:	b21b      	sxth	r3, r3
 8022c0e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022c12:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022c16:	4293      	cmp	r3, r2
 8022c18:	dc07      	bgt.n	8022c2a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8022c1a:	1a69      	subs	r1, r5, r1
 8022c1c:	b209      	sxth	r1, r1
 8022c1e:	2900      	cmp	r1, #0
 8022c20:	bfb8      	it	lt
 8022c22:	4249      	neglt	r1, r1
 8022c24:	b209      	sxth	r1, r1
 8022c26:	428a      	cmp	r2, r1
 8022c28:	da10      	bge.n	8022c4c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8022c2a:	6920      	ldr	r0, [r4, #16]
 8022c2c:	4669      	mov	r1, sp
 8022c2e:	eba8 0606 	sub.w	r6, r8, r6
 8022c32:	1bef      	subs	r7, r5, r7
 8022c34:	6803      	ldr	r3, [r0, #0]
 8022c36:	685b      	ldr	r3, [r3, #4]
 8022c38:	4798      	blx	r3
 8022c3a:	2300      	movs	r3, #0
 8022c3c:	2001      	movs	r0, #1
 8022c3e:	8166      	strh	r6, [r4, #10]
 8022c40:	8123      	strh	r3, [r4, #8]
 8022c42:	81a7      	strh	r7, [r4, #12]
 8022c44:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022c48:	80e5      	strh	r5, [r4, #6]
 8022c4a:	73a0      	strb	r0, [r4, #14]
 8022c4c:	b004      	add	sp, #16
 8022c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c52:	bf00      	nop
 8022c54:	08029a04 	.word	0x08029a04

08022c58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c5a:	461e      	mov	r6, r3
 8022c5c:	1e4b      	subs	r3, r1, #1
 8022c5e:	b085      	sub	sp, #20
 8022c60:	4604      	mov	r4, r0
 8022c62:	2b01      	cmp	r3, #1
 8022c64:	460d      	mov	r5, r1
 8022c66:	4617      	mov	r7, r2
 8022c68:	d84b      	bhi.n	8022d02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022c6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022c6e:	1cd3      	adds	r3, r2, #3
 8022c70:	b29b      	uxth	r3, r3
 8022c72:	2b06      	cmp	r3, #6
 8022c74:	d916      	bls.n	8022ca4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022c76:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8022d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022c7a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022c7e:	f8cd c004 	str.w	ip, [sp, #4]
 8022c82:	f04f 0c00 	mov.w	ip, #0
 8022c86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022c8a:	6900      	ldr	r0, [r0, #16]
 8022c8c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022c90:	a901      	add	r1, sp, #4
 8022c92:	f88d c008 	strb.w	ip, [sp, #8]
 8022c96:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022c9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022c9e:	6803      	ldr	r3, [r0, #0]
 8022ca0:	689b      	ldr	r3, [r3, #8]
 8022ca2:	4798      	blx	r3
 8022ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022ca8:	1cd3      	adds	r3, r2, #3
 8022caa:	b29b      	uxth	r3, r3
 8022cac:	2b06      	cmp	r3, #6
 8022cae:	d916      	bls.n	8022cde <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022cb0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8022d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022cb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022cb8:	f8cd c004 	str.w	ip, [sp, #4]
 8022cbc:	f04f 0c01 	mov.w	ip, #1
 8022cc0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022cc4:	6920      	ldr	r0, [r4, #16]
 8022cc6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022cca:	a901      	add	r1, sp, #4
 8022ccc:	f88d c008 	strb.w	ip, [sp, #8]
 8022cd0:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022cd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022cd8:	6803      	ldr	r3, [r0, #0]
 8022cda:	689b      	ldr	r3, [r3, #8]
 8022cdc:	4798      	blx	r3
 8022cde:	4b0d      	ldr	r3, [pc, #52]	@ (8022d14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8022ce0:	a901      	add	r1, sp, #4
 8022ce2:	6920      	ldr	r0, [r4, #16]
 8022ce4:	9301      	str	r3, [sp, #4]
 8022ce6:	2300      	movs	r3, #0
 8022ce8:	f88d 5008 	strb.w	r5, [sp, #8]
 8022cec:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022cf0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022cf4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022cf8:	6803      	ldr	r3, [r0, #0]
 8022cfa:	681b      	ldr	r3, [r3, #0]
 8022cfc:	4798      	blx	r3
 8022cfe:	b005      	add	sp, #20
 8022d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d02:	2900      	cmp	r1, #0
 8022d04:	d1eb      	bne.n	8022cde <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d06:	80a2      	strh	r2, [r4, #4]
 8022d08:	80c6      	strh	r6, [r0, #6]
 8022d0a:	60a1      	str	r1, [r4, #8]
 8022d0c:	81a1      	strh	r1, [r4, #12]
 8022d0e:	73a1      	strb	r1, [r4, #14]
 8022d10:	e7e5      	b.n	8022cde <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d12:	bf00      	nop
 8022d14:	080299f0 	.word	0x080299f0
 8022d18:	08029a18 	.word	0x08029a18

08022d1c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8022d1c:	790b      	ldrb	r3, [r1, #4]
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	bf0c      	ite	eq
 8022d22:	2301      	moveq	r3, #1
 8022d24:	2300      	movne	r3, #0
 8022d26:	b570      	push	{r4, r5, r6, lr}
 8022d28:	4604      	mov	r4, r0
 8022d2a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8022d2e:	460e      	mov	r6, r1
 8022d30:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8022d34:	d109      	bne.n	8022d4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8022d36:	b14d      	cbz	r5, 8022d4c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8022d38:	7933      	ldrb	r3, [r6, #4]
 8022d3a:	2b01      	cmp	r3, #1
 8022d3c:	d10c      	bne.n	8022d58 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8022d3e:	6823      	ldr	r3, [r4, #0]
 8022d40:	4620      	mov	r0, r4
 8022d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022d48:	4718      	bx	r3
 8022d4a:	b12d      	cbz	r5, 8022d58 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8022d4c:	6823      	ldr	r3, [r4, #0]
 8022d4e:	4620      	mov	r0, r4
 8022d50:	695b      	ldr	r3, [r3, #20]
 8022d52:	4798      	blx	r3
 8022d54:	2d00      	cmp	r5, #0
 8022d56:	d1ef      	bne.n	8022d38 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8022d58:	bd70      	pop	{r4, r5, r6, pc}

08022d5a <__aeabi_atexit>:
 8022d5a:	460b      	mov	r3, r1
 8022d5c:	4601      	mov	r1, r0
 8022d5e:	4618      	mov	r0, r3
 8022d60:	f000 b910 	b.w	8022f84 <__cxa_atexit>

08022d64 <_ZdlPvj>:
 8022d64:	f000 b812 	b.w	8022d8c <_ZdlPv>

08022d68 <__cxa_guard_acquire>:
 8022d68:	6802      	ldr	r2, [r0, #0]
 8022d6a:	07d2      	lsls	r2, r2, #31
 8022d6c:	4603      	mov	r3, r0
 8022d6e:	d405      	bmi.n	8022d7c <__cxa_guard_acquire+0x14>
 8022d70:	7842      	ldrb	r2, [r0, #1]
 8022d72:	b102      	cbz	r2, 8022d76 <__cxa_guard_acquire+0xe>
 8022d74:	deff      	udf	#255	@ 0xff
 8022d76:	2001      	movs	r0, #1
 8022d78:	7058      	strb	r0, [r3, #1]
 8022d7a:	4770      	bx	lr
 8022d7c:	2000      	movs	r0, #0
 8022d7e:	4770      	bx	lr

08022d80 <__cxa_guard_release>:
 8022d80:	2301      	movs	r3, #1
 8022d82:	6003      	str	r3, [r0, #0]
 8022d84:	4770      	bx	lr

08022d86 <__cxa_pure_virtual>:
 8022d86:	b508      	push	{r3, lr}
 8022d88:	f000 f80e 	bl	8022da8 <_ZSt9terminatev>

08022d8c <_ZdlPv>:
 8022d8c:	f000 b844 	b.w	8022e18 <free>

08022d90 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022d90:	b508      	push	{r3, lr}
 8022d92:	4780      	blx	r0
 8022d94:	f000 f80d 	bl	8022db2 <abort>

08022d98 <_ZSt13get_terminatev>:
 8022d98:	4b02      	ldr	r3, [pc, #8]	@ (8022da4 <_ZSt13get_terminatev+0xc>)
 8022d9a:	6818      	ldr	r0, [r3, #0]
 8022d9c:	f3bf 8f5b 	dmb	ish
 8022da0:	4770      	bx	lr
 8022da2:	bf00      	nop
 8022da4:	240000ac 	.word	0x240000ac

08022da8 <_ZSt9terminatev>:
 8022da8:	b508      	push	{r3, lr}
 8022daa:	f7ff fff5 	bl	8022d98 <_ZSt13get_terminatev>
 8022dae:	f7ff ffef 	bl	8022d90 <_ZN10__cxxabiv111__terminateEPFvvE>

08022db2 <abort>:
 8022db2:	b508      	push	{r3, lr}
 8022db4:	2006      	movs	r0, #6
 8022db6:	f001 f9a3 	bl	8024100 <raise>
 8022dba:	2001      	movs	r0, #1
 8022dbc:	f7de fdf2 	bl	80019a4 <_exit>

08022dc0 <__assert_func>:
 8022dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022dc2:	4614      	mov	r4, r2
 8022dc4:	461a      	mov	r2, r3
 8022dc6:	4b09      	ldr	r3, [pc, #36]	@ (8022dec <__assert_func+0x2c>)
 8022dc8:	681b      	ldr	r3, [r3, #0]
 8022dca:	4605      	mov	r5, r0
 8022dcc:	68d8      	ldr	r0, [r3, #12]
 8022dce:	b954      	cbnz	r4, 8022de6 <__assert_func+0x26>
 8022dd0:	4b07      	ldr	r3, [pc, #28]	@ (8022df0 <__assert_func+0x30>)
 8022dd2:	461c      	mov	r4, r3
 8022dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022dd8:	9100      	str	r1, [sp, #0]
 8022dda:	462b      	mov	r3, r5
 8022ddc:	4905      	ldr	r1, [pc, #20]	@ (8022df4 <__assert_func+0x34>)
 8022dde:	f000 ffc7 	bl	8023d70 <fiprintf>
 8022de2:	f7ff ffe6 	bl	8022db2 <abort>
 8022de6:	4b04      	ldr	r3, [pc, #16]	@ (8022df8 <__assert_func+0x38>)
 8022de8:	e7f4      	b.n	8022dd4 <__assert_func+0x14>
 8022dea:	bf00      	nop
 8022dec:	240000bc 	.word	0x240000bc
 8022df0:	08029d87 	.word	0x08029d87
 8022df4:	08029d59 	.word	0x08029d59
 8022df8:	08029d4c 	.word	0x08029d4c

08022dfc <atexit>:
 8022dfc:	2300      	movs	r3, #0
 8022dfe:	4601      	mov	r1, r0
 8022e00:	461a      	mov	r2, r3
 8022e02:	4618      	mov	r0, r3
 8022e04:	f001 ba34 	b.w	8024270 <__register_exitproc>

08022e08 <malloc>:
 8022e08:	4b02      	ldr	r3, [pc, #8]	@ (8022e14 <malloc+0xc>)
 8022e0a:	4601      	mov	r1, r0
 8022e0c:	6818      	ldr	r0, [r3, #0]
 8022e0e:	f000 b82d 	b.w	8022e6c <_malloc_r>
 8022e12:	bf00      	nop
 8022e14:	240000bc 	.word	0x240000bc

08022e18 <free>:
 8022e18:	4b02      	ldr	r3, [pc, #8]	@ (8022e24 <free+0xc>)
 8022e1a:	4601      	mov	r1, r0
 8022e1c:	6818      	ldr	r0, [r3, #0]
 8022e1e:	f002 b861 	b.w	8024ee4 <_free_r>
 8022e22:	bf00      	nop
 8022e24:	240000bc 	.word	0x240000bc

08022e28 <sbrk_aligned>:
 8022e28:	b570      	push	{r4, r5, r6, lr}
 8022e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8022e68 <sbrk_aligned+0x40>)
 8022e2c:	460c      	mov	r4, r1
 8022e2e:	6831      	ldr	r1, [r6, #0]
 8022e30:	4605      	mov	r5, r0
 8022e32:	b911      	cbnz	r1, 8022e3a <sbrk_aligned+0x12>
 8022e34:	f001 f9b8 	bl	80241a8 <_sbrk_r>
 8022e38:	6030      	str	r0, [r6, #0]
 8022e3a:	4621      	mov	r1, r4
 8022e3c:	4628      	mov	r0, r5
 8022e3e:	f001 f9b3 	bl	80241a8 <_sbrk_r>
 8022e42:	1c43      	adds	r3, r0, #1
 8022e44:	d103      	bne.n	8022e4e <sbrk_aligned+0x26>
 8022e46:	f04f 34ff 	mov.w	r4, #4294967295
 8022e4a:	4620      	mov	r0, r4
 8022e4c:	bd70      	pop	{r4, r5, r6, pc}
 8022e4e:	1cc4      	adds	r4, r0, #3
 8022e50:	f024 0403 	bic.w	r4, r4, #3
 8022e54:	42a0      	cmp	r0, r4
 8022e56:	d0f8      	beq.n	8022e4a <sbrk_aligned+0x22>
 8022e58:	1a21      	subs	r1, r4, r0
 8022e5a:	4628      	mov	r0, r5
 8022e5c:	f001 f9a4 	bl	80241a8 <_sbrk_r>
 8022e60:	3001      	adds	r0, #1
 8022e62:	d1f2      	bne.n	8022e4a <sbrk_aligned+0x22>
 8022e64:	e7ef      	b.n	8022e46 <sbrk_aligned+0x1e>
 8022e66:	bf00      	nop
 8022e68:	2400b4d8 	.word	0x2400b4d8

08022e6c <_malloc_r>:
 8022e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e70:	1ccd      	adds	r5, r1, #3
 8022e72:	f025 0503 	bic.w	r5, r5, #3
 8022e76:	3508      	adds	r5, #8
 8022e78:	2d0c      	cmp	r5, #12
 8022e7a:	bf38      	it	cc
 8022e7c:	250c      	movcc	r5, #12
 8022e7e:	2d00      	cmp	r5, #0
 8022e80:	4606      	mov	r6, r0
 8022e82:	db01      	blt.n	8022e88 <_malloc_r+0x1c>
 8022e84:	42a9      	cmp	r1, r5
 8022e86:	d904      	bls.n	8022e92 <_malloc_r+0x26>
 8022e88:	230c      	movs	r3, #12
 8022e8a:	6033      	str	r3, [r6, #0]
 8022e8c:	2000      	movs	r0, #0
 8022e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022f68 <_malloc_r+0xfc>
 8022e96:	f000 f869 	bl	8022f6c <__malloc_lock>
 8022e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8022e9e:	461c      	mov	r4, r3
 8022ea0:	bb44      	cbnz	r4, 8022ef4 <_malloc_r+0x88>
 8022ea2:	4629      	mov	r1, r5
 8022ea4:	4630      	mov	r0, r6
 8022ea6:	f7ff ffbf 	bl	8022e28 <sbrk_aligned>
 8022eaa:	1c43      	adds	r3, r0, #1
 8022eac:	4604      	mov	r4, r0
 8022eae:	d158      	bne.n	8022f62 <_malloc_r+0xf6>
 8022eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8022eb4:	4627      	mov	r7, r4
 8022eb6:	2f00      	cmp	r7, #0
 8022eb8:	d143      	bne.n	8022f42 <_malloc_r+0xd6>
 8022eba:	2c00      	cmp	r4, #0
 8022ebc:	d04b      	beq.n	8022f56 <_malloc_r+0xea>
 8022ebe:	6823      	ldr	r3, [r4, #0]
 8022ec0:	4639      	mov	r1, r7
 8022ec2:	4630      	mov	r0, r6
 8022ec4:	eb04 0903 	add.w	r9, r4, r3
 8022ec8:	f001 f96e 	bl	80241a8 <_sbrk_r>
 8022ecc:	4581      	cmp	r9, r0
 8022ece:	d142      	bne.n	8022f56 <_malloc_r+0xea>
 8022ed0:	6821      	ldr	r1, [r4, #0]
 8022ed2:	1a6d      	subs	r5, r5, r1
 8022ed4:	4629      	mov	r1, r5
 8022ed6:	4630      	mov	r0, r6
 8022ed8:	f7ff ffa6 	bl	8022e28 <sbrk_aligned>
 8022edc:	3001      	adds	r0, #1
 8022ede:	d03a      	beq.n	8022f56 <_malloc_r+0xea>
 8022ee0:	6823      	ldr	r3, [r4, #0]
 8022ee2:	442b      	add	r3, r5
 8022ee4:	6023      	str	r3, [r4, #0]
 8022ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8022eea:	685a      	ldr	r2, [r3, #4]
 8022eec:	bb62      	cbnz	r2, 8022f48 <_malloc_r+0xdc>
 8022eee:	f8c8 7000 	str.w	r7, [r8]
 8022ef2:	e00f      	b.n	8022f14 <_malloc_r+0xa8>
 8022ef4:	6822      	ldr	r2, [r4, #0]
 8022ef6:	1b52      	subs	r2, r2, r5
 8022ef8:	d420      	bmi.n	8022f3c <_malloc_r+0xd0>
 8022efa:	2a0b      	cmp	r2, #11
 8022efc:	d917      	bls.n	8022f2e <_malloc_r+0xc2>
 8022efe:	1961      	adds	r1, r4, r5
 8022f00:	42a3      	cmp	r3, r4
 8022f02:	6025      	str	r5, [r4, #0]
 8022f04:	bf18      	it	ne
 8022f06:	6059      	strne	r1, [r3, #4]
 8022f08:	6863      	ldr	r3, [r4, #4]
 8022f0a:	bf08      	it	eq
 8022f0c:	f8c8 1000 	streq.w	r1, [r8]
 8022f10:	5162      	str	r2, [r4, r5]
 8022f12:	604b      	str	r3, [r1, #4]
 8022f14:	4630      	mov	r0, r6
 8022f16:	f000 f82f 	bl	8022f78 <__malloc_unlock>
 8022f1a:	f104 000b 	add.w	r0, r4, #11
 8022f1e:	1d23      	adds	r3, r4, #4
 8022f20:	f020 0007 	bic.w	r0, r0, #7
 8022f24:	1ac2      	subs	r2, r0, r3
 8022f26:	bf1c      	itt	ne
 8022f28:	1a1b      	subne	r3, r3, r0
 8022f2a:	50a3      	strne	r3, [r4, r2]
 8022f2c:	e7af      	b.n	8022e8e <_malloc_r+0x22>
 8022f2e:	6862      	ldr	r2, [r4, #4]
 8022f30:	42a3      	cmp	r3, r4
 8022f32:	bf0c      	ite	eq
 8022f34:	f8c8 2000 	streq.w	r2, [r8]
 8022f38:	605a      	strne	r2, [r3, #4]
 8022f3a:	e7eb      	b.n	8022f14 <_malloc_r+0xa8>
 8022f3c:	4623      	mov	r3, r4
 8022f3e:	6864      	ldr	r4, [r4, #4]
 8022f40:	e7ae      	b.n	8022ea0 <_malloc_r+0x34>
 8022f42:	463c      	mov	r4, r7
 8022f44:	687f      	ldr	r7, [r7, #4]
 8022f46:	e7b6      	b.n	8022eb6 <_malloc_r+0x4a>
 8022f48:	461a      	mov	r2, r3
 8022f4a:	685b      	ldr	r3, [r3, #4]
 8022f4c:	42a3      	cmp	r3, r4
 8022f4e:	d1fb      	bne.n	8022f48 <_malloc_r+0xdc>
 8022f50:	2300      	movs	r3, #0
 8022f52:	6053      	str	r3, [r2, #4]
 8022f54:	e7de      	b.n	8022f14 <_malloc_r+0xa8>
 8022f56:	230c      	movs	r3, #12
 8022f58:	6033      	str	r3, [r6, #0]
 8022f5a:	4630      	mov	r0, r6
 8022f5c:	f000 f80c 	bl	8022f78 <__malloc_unlock>
 8022f60:	e794      	b.n	8022e8c <_malloc_r+0x20>
 8022f62:	6005      	str	r5, [r0, #0]
 8022f64:	e7d6      	b.n	8022f14 <_malloc_r+0xa8>
 8022f66:	bf00      	nop
 8022f68:	2400b4dc 	.word	0x2400b4dc

08022f6c <__malloc_lock>:
 8022f6c:	4801      	ldr	r0, [pc, #4]	@ (8022f74 <__malloc_lock+0x8>)
 8022f6e:	f001 b968 	b.w	8024242 <__retarget_lock_acquire_recursive>
 8022f72:	bf00      	nop
 8022f74:	2400b620 	.word	0x2400b620

08022f78 <__malloc_unlock>:
 8022f78:	4801      	ldr	r0, [pc, #4]	@ (8022f80 <__malloc_unlock+0x8>)
 8022f7a:	f001 b963 	b.w	8024244 <__retarget_lock_release_recursive>
 8022f7e:	bf00      	nop
 8022f80:	2400b620 	.word	0x2400b620

08022f84 <__cxa_atexit>:
 8022f84:	b510      	push	{r4, lr}
 8022f86:	4604      	mov	r4, r0
 8022f88:	4804      	ldr	r0, [pc, #16]	@ (8022f9c <__cxa_atexit+0x18>)
 8022f8a:	4613      	mov	r3, r2
 8022f8c:	b120      	cbz	r0, 8022f98 <__cxa_atexit+0x14>
 8022f8e:	460a      	mov	r2, r1
 8022f90:	2002      	movs	r0, #2
 8022f92:	4621      	mov	r1, r4
 8022f94:	f001 f96c 	bl	8024270 <__register_exitproc>
 8022f98:	bd10      	pop	{r4, pc}
 8022f9a:	bf00      	nop
 8022f9c:	08024271 	.word	0x08024271

08022fa0 <__cvt>:
 8022fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fa2:	ed2d 8b02 	vpush	{d8}
 8022fa6:	eeb0 8b40 	vmov.f64	d8, d0
 8022faa:	b085      	sub	sp, #20
 8022fac:	4617      	mov	r7, r2
 8022fae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022fb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022fb2:	ee18 2a90 	vmov	r2, s17
 8022fb6:	f025 0520 	bic.w	r5, r5, #32
 8022fba:	2a00      	cmp	r2, #0
 8022fbc:	bfb6      	itet	lt
 8022fbe:	222d      	movlt	r2, #45	@ 0x2d
 8022fc0:	2200      	movge	r2, #0
 8022fc2:	eeb1 8b40 	vneglt.f64	d8, d0
 8022fc6:	2d46      	cmp	r5, #70	@ 0x46
 8022fc8:	460c      	mov	r4, r1
 8022fca:	701a      	strb	r2, [r3, #0]
 8022fcc:	d004      	beq.n	8022fd8 <__cvt+0x38>
 8022fce:	2d45      	cmp	r5, #69	@ 0x45
 8022fd0:	d100      	bne.n	8022fd4 <__cvt+0x34>
 8022fd2:	3401      	adds	r4, #1
 8022fd4:	2102      	movs	r1, #2
 8022fd6:	e000      	b.n	8022fda <__cvt+0x3a>
 8022fd8:	2103      	movs	r1, #3
 8022fda:	ab03      	add	r3, sp, #12
 8022fdc:	9301      	str	r3, [sp, #4]
 8022fde:	ab02      	add	r3, sp, #8
 8022fe0:	9300      	str	r3, [sp, #0]
 8022fe2:	4622      	mov	r2, r4
 8022fe4:	4633      	mov	r3, r6
 8022fe6:	eeb0 0b48 	vmov.f64	d0, d8
 8022fea:	f001 fa25 	bl	8024438 <_dtoa_r>
 8022fee:	2d47      	cmp	r5, #71	@ 0x47
 8022ff0:	d114      	bne.n	802301c <__cvt+0x7c>
 8022ff2:	07fb      	lsls	r3, r7, #31
 8022ff4:	d50a      	bpl.n	802300c <__cvt+0x6c>
 8022ff6:	1902      	adds	r2, r0, r4
 8022ff8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023000:	bf08      	it	eq
 8023002:	9203      	streq	r2, [sp, #12]
 8023004:	2130      	movs	r1, #48	@ 0x30
 8023006:	9b03      	ldr	r3, [sp, #12]
 8023008:	4293      	cmp	r3, r2
 802300a:	d319      	bcc.n	8023040 <__cvt+0xa0>
 802300c:	9b03      	ldr	r3, [sp, #12]
 802300e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023010:	1a1b      	subs	r3, r3, r0
 8023012:	6013      	str	r3, [r2, #0]
 8023014:	b005      	add	sp, #20
 8023016:	ecbd 8b02 	vpop	{d8}
 802301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802301c:	2d46      	cmp	r5, #70	@ 0x46
 802301e:	eb00 0204 	add.w	r2, r0, r4
 8023022:	d1e9      	bne.n	8022ff8 <__cvt+0x58>
 8023024:	7803      	ldrb	r3, [r0, #0]
 8023026:	2b30      	cmp	r3, #48	@ 0x30
 8023028:	d107      	bne.n	802303a <__cvt+0x9a>
 802302a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023032:	bf1c      	itt	ne
 8023034:	f1c4 0401 	rsbne	r4, r4, #1
 8023038:	6034      	strne	r4, [r6, #0]
 802303a:	6833      	ldr	r3, [r6, #0]
 802303c:	441a      	add	r2, r3
 802303e:	e7db      	b.n	8022ff8 <__cvt+0x58>
 8023040:	1c5c      	adds	r4, r3, #1
 8023042:	9403      	str	r4, [sp, #12]
 8023044:	7019      	strb	r1, [r3, #0]
 8023046:	e7de      	b.n	8023006 <__cvt+0x66>

08023048 <__exponent>:
 8023048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802304a:	2900      	cmp	r1, #0
 802304c:	bfba      	itte	lt
 802304e:	4249      	neglt	r1, r1
 8023050:	232d      	movlt	r3, #45	@ 0x2d
 8023052:	232b      	movge	r3, #43	@ 0x2b
 8023054:	2909      	cmp	r1, #9
 8023056:	7002      	strb	r2, [r0, #0]
 8023058:	7043      	strb	r3, [r0, #1]
 802305a:	dd29      	ble.n	80230b0 <__exponent+0x68>
 802305c:	f10d 0307 	add.w	r3, sp, #7
 8023060:	461d      	mov	r5, r3
 8023062:	270a      	movs	r7, #10
 8023064:	461a      	mov	r2, r3
 8023066:	fbb1 f6f7 	udiv	r6, r1, r7
 802306a:	fb07 1416 	mls	r4, r7, r6, r1
 802306e:	3430      	adds	r4, #48	@ 0x30
 8023070:	f802 4c01 	strb.w	r4, [r2, #-1]
 8023074:	460c      	mov	r4, r1
 8023076:	2c63      	cmp	r4, #99	@ 0x63
 8023078:	f103 33ff 	add.w	r3, r3, #4294967295
 802307c:	4631      	mov	r1, r6
 802307e:	dcf1      	bgt.n	8023064 <__exponent+0x1c>
 8023080:	3130      	adds	r1, #48	@ 0x30
 8023082:	1e94      	subs	r4, r2, #2
 8023084:	f803 1c01 	strb.w	r1, [r3, #-1]
 8023088:	1c41      	adds	r1, r0, #1
 802308a:	4623      	mov	r3, r4
 802308c:	42ab      	cmp	r3, r5
 802308e:	d30a      	bcc.n	80230a6 <__exponent+0x5e>
 8023090:	f10d 0309 	add.w	r3, sp, #9
 8023094:	1a9b      	subs	r3, r3, r2
 8023096:	42ac      	cmp	r4, r5
 8023098:	bf88      	it	hi
 802309a:	2300      	movhi	r3, #0
 802309c:	3302      	adds	r3, #2
 802309e:	4403      	add	r3, r0
 80230a0:	1a18      	subs	r0, r3, r0
 80230a2:	b003      	add	sp, #12
 80230a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80230aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80230ae:	e7ed      	b.n	802308c <__exponent+0x44>
 80230b0:	2330      	movs	r3, #48	@ 0x30
 80230b2:	3130      	adds	r1, #48	@ 0x30
 80230b4:	7083      	strb	r3, [r0, #2]
 80230b6:	70c1      	strb	r1, [r0, #3]
 80230b8:	1d03      	adds	r3, r0, #4
 80230ba:	e7f1      	b.n	80230a0 <__exponent+0x58>
 80230bc:	0000      	movs	r0, r0
	...

080230c0 <_printf_float>:
 80230c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230c4:	b08d      	sub	sp, #52	@ 0x34
 80230c6:	460c      	mov	r4, r1
 80230c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80230cc:	4616      	mov	r6, r2
 80230ce:	461f      	mov	r7, r3
 80230d0:	4605      	mov	r5, r0
 80230d2:	f001 f81d 	bl	8024110 <_localeconv_r>
 80230d6:	f8d0 b000 	ldr.w	fp, [r0]
 80230da:	4658      	mov	r0, fp
 80230dc:	f7dd f950 	bl	8000380 <strlen>
 80230e0:	2300      	movs	r3, #0
 80230e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80230e4:	f8d8 3000 	ldr.w	r3, [r8]
 80230e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80230ec:	6822      	ldr	r2, [r4, #0]
 80230ee:	9005      	str	r0, [sp, #20]
 80230f0:	3307      	adds	r3, #7
 80230f2:	f023 0307 	bic.w	r3, r3, #7
 80230f6:	f103 0108 	add.w	r1, r3, #8
 80230fa:	f8c8 1000 	str.w	r1, [r8]
 80230fe:	ed93 0b00 	vldr	d0, [r3]
 8023102:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8023360 <_printf_float+0x2a0>
 8023106:	eeb0 7bc0 	vabs.f64	d7, d0
 802310a:	eeb4 7b46 	vcmp.f64	d7, d6
 802310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023112:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8023116:	dd24      	ble.n	8023162 <_printf_float+0xa2>
 8023118:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023120:	d502      	bpl.n	8023128 <_printf_float+0x68>
 8023122:	232d      	movs	r3, #45	@ 0x2d
 8023124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023128:	498f      	ldr	r1, [pc, #572]	@ (8023368 <_printf_float+0x2a8>)
 802312a:	4b90      	ldr	r3, [pc, #576]	@ (802336c <_printf_float+0x2ac>)
 802312c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8023130:	bf94      	ite	ls
 8023132:	4688      	movls	r8, r1
 8023134:	4698      	movhi	r8, r3
 8023136:	f022 0204 	bic.w	r2, r2, #4
 802313a:	2303      	movs	r3, #3
 802313c:	6123      	str	r3, [r4, #16]
 802313e:	6022      	str	r2, [r4, #0]
 8023140:	f04f 0a00 	mov.w	sl, #0
 8023144:	9700      	str	r7, [sp, #0]
 8023146:	4633      	mov	r3, r6
 8023148:	aa0b      	add	r2, sp, #44	@ 0x2c
 802314a:	4621      	mov	r1, r4
 802314c:	4628      	mov	r0, r5
 802314e:	f000 f9d1 	bl	80234f4 <_printf_common>
 8023152:	3001      	adds	r0, #1
 8023154:	f040 8089 	bne.w	802326a <_printf_float+0x1aa>
 8023158:	f04f 30ff 	mov.w	r0, #4294967295
 802315c:	b00d      	add	sp, #52	@ 0x34
 802315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023162:	eeb4 0b40 	vcmp.f64	d0, d0
 8023166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802316a:	d709      	bvc.n	8023180 <_printf_float+0xc0>
 802316c:	ee10 3a90 	vmov	r3, s1
 8023170:	2b00      	cmp	r3, #0
 8023172:	bfbc      	itt	lt
 8023174:	232d      	movlt	r3, #45	@ 0x2d
 8023176:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802317a:	497d      	ldr	r1, [pc, #500]	@ (8023370 <_printf_float+0x2b0>)
 802317c:	4b7d      	ldr	r3, [pc, #500]	@ (8023374 <_printf_float+0x2b4>)
 802317e:	e7d5      	b.n	802312c <_printf_float+0x6c>
 8023180:	6863      	ldr	r3, [r4, #4]
 8023182:	1c59      	adds	r1, r3, #1
 8023184:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8023188:	d139      	bne.n	80231fe <_printf_float+0x13e>
 802318a:	2306      	movs	r3, #6
 802318c:	6063      	str	r3, [r4, #4]
 802318e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023192:	2300      	movs	r3, #0
 8023194:	6022      	str	r2, [r4, #0]
 8023196:	9303      	str	r3, [sp, #12]
 8023198:	ab0a      	add	r3, sp, #40	@ 0x28
 802319a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802319e:	ab09      	add	r3, sp, #36	@ 0x24
 80231a0:	9300      	str	r3, [sp, #0]
 80231a2:	6861      	ldr	r1, [r4, #4]
 80231a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80231a8:	4628      	mov	r0, r5
 80231aa:	f7ff fef9 	bl	8022fa0 <__cvt>
 80231ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80231b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80231b4:	4680      	mov	r8, r0
 80231b6:	d129      	bne.n	802320c <_printf_float+0x14c>
 80231b8:	1cc8      	adds	r0, r1, #3
 80231ba:	db02      	blt.n	80231c2 <_printf_float+0x102>
 80231bc:	6863      	ldr	r3, [r4, #4]
 80231be:	4299      	cmp	r1, r3
 80231c0:	dd41      	ble.n	8023246 <_printf_float+0x186>
 80231c2:	f1a9 0902 	sub.w	r9, r9, #2
 80231c6:	fa5f f989 	uxtb.w	r9, r9
 80231ca:	3901      	subs	r1, #1
 80231cc:	464a      	mov	r2, r9
 80231ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80231d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80231d4:	f7ff ff38 	bl	8023048 <__exponent>
 80231d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231da:	1813      	adds	r3, r2, r0
 80231dc:	2a01      	cmp	r2, #1
 80231de:	4682      	mov	sl, r0
 80231e0:	6123      	str	r3, [r4, #16]
 80231e2:	dc02      	bgt.n	80231ea <_printf_float+0x12a>
 80231e4:	6822      	ldr	r2, [r4, #0]
 80231e6:	07d2      	lsls	r2, r2, #31
 80231e8:	d501      	bpl.n	80231ee <_printf_float+0x12e>
 80231ea:	3301      	adds	r3, #1
 80231ec:	6123      	str	r3, [r4, #16]
 80231ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d0a6      	beq.n	8023144 <_printf_float+0x84>
 80231f6:	232d      	movs	r3, #45	@ 0x2d
 80231f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80231fc:	e7a2      	b.n	8023144 <_printf_float+0x84>
 80231fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8023202:	d1c4      	bne.n	802318e <_printf_float+0xce>
 8023204:	2b00      	cmp	r3, #0
 8023206:	d1c2      	bne.n	802318e <_printf_float+0xce>
 8023208:	2301      	movs	r3, #1
 802320a:	e7bf      	b.n	802318c <_printf_float+0xcc>
 802320c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8023210:	d9db      	bls.n	80231ca <_printf_float+0x10a>
 8023212:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8023216:	d118      	bne.n	802324a <_printf_float+0x18a>
 8023218:	2900      	cmp	r1, #0
 802321a:	6863      	ldr	r3, [r4, #4]
 802321c:	dd0b      	ble.n	8023236 <_printf_float+0x176>
 802321e:	6121      	str	r1, [r4, #16]
 8023220:	b913      	cbnz	r3, 8023228 <_printf_float+0x168>
 8023222:	6822      	ldr	r2, [r4, #0]
 8023224:	07d0      	lsls	r0, r2, #31
 8023226:	d502      	bpl.n	802322e <_printf_float+0x16e>
 8023228:	3301      	adds	r3, #1
 802322a:	440b      	add	r3, r1
 802322c:	6123      	str	r3, [r4, #16]
 802322e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8023230:	f04f 0a00 	mov.w	sl, #0
 8023234:	e7db      	b.n	80231ee <_printf_float+0x12e>
 8023236:	b913      	cbnz	r3, 802323e <_printf_float+0x17e>
 8023238:	6822      	ldr	r2, [r4, #0]
 802323a:	07d2      	lsls	r2, r2, #31
 802323c:	d501      	bpl.n	8023242 <_printf_float+0x182>
 802323e:	3302      	adds	r3, #2
 8023240:	e7f4      	b.n	802322c <_printf_float+0x16c>
 8023242:	2301      	movs	r3, #1
 8023244:	e7f2      	b.n	802322c <_printf_float+0x16c>
 8023246:	f04f 0967 	mov.w	r9, #103	@ 0x67
 802324a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802324c:	4299      	cmp	r1, r3
 802324e:	db05      	blt.n	802325c <_printf_float+0x19c>
 8023250:	6823      	ldr	r3, [r4, #0]
 8023252:	6121      	str	r1, [r4, #16]
 8023254:	07d8      	lsls	r0, r3, #31
 8023256:	d5ea      	bpl.n	802322e <_printf_float+0x16e>
 8023258:	1c4b      	adds	r3, r1, #1
 802325a:	e7e7      	b.n	802322c <_printf_float+0x16c>
 802325c:	2900      	cmp	r1, #0
 802325e:	bfd4      	ite	le
 8023260:	f1c1 0202 	rsble	r2, r1, #2
 8023264:	2201      	movgt	r2, #1
 8023266:	4413      	add	r3, r2
 8023268:	e7e0      	b.n	802322c <_printf_float+0x16c>
 802326a:	6823      	ldr	r3, [r4, #0]
 802326c:	055a      	lsls	r2, r3, #21
 802326e:	d407      	bmi.n	8023280 <_printf_float+0x1c0>
 8023270:	6923      	ldr	r3, [r4, #16]
 8023272:	4642      	mov	r2, r8
 8023274:	4631      	mov	r1, r6
 8023276:	4628      	mov	r0, r5
 8023278:	47b8      	blx	r7
 802327a:	3001      	adds	r0, #1
 802327c:	d12a      	bne.n	80232d4 <_printf_float+0x214>
 802327e:	e76b      	b.n	8023158 <_printf_float+0x98>
 8023280:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8023284:	f240 80e0 	bls.w	8023448 <_printf_float+0x388>
 8023288:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802328c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023294:	d133      	bne.n	80232fe <_printf_float+0x23e>
 8023296:	4a38      	ldr	r2, [pc, #224]	@ (8023378 <_printf_float+0x2b8>)
 8023298:	2301      	movs	r3, #1
 802329a:	4631      	mov	r1, r6
 802329c:	4628      	mov	r0, r5
 802329e:	47b8      	blx	r7
 80232a0:	3001      	adds	r0, #1
 80232a2:	f43f af59 	beq.w	8023158 <_printf_float+0x98>
 80232a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80232aa:	4543      	cmp	r3, r8
 80232ac:	db02      	blt.n	80232b4 <_printf_float+0x1f4>
 80232ae:	6823      	ldr	r3, [r4, #0]
 80232b0:	07d8      	lsls	r0, r3, #31
 80232b2:	d50f      	bpl.n	80232d4 <_printf_float+0x214>
 80232b4:	9b05      	ldr	r3, [sp, #20]
 80232b6:	465a      	mov	r2, fp
 80232b8:	4631      	mov	r1, r6
 80232ba:	4628      	mov	r0, r5
 80232bc:	47b8      	blx	r7
 80232be:	3001      	adds	r0, #1
 80232c0:	f43f af4a 	beq.w	8023158 <_printf_float+0x98>
 80232c4:	f04f 0900 	mov.w	r9, #0
 80232c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80232cc:	f104 0a1a 	add.w	sl, r4, #26
 80232d0:	45c8      	cmp	r8, r9
 80232d2:	dc09      	bgt.n	80232e8 <_printf_float+0x228>
 80232d4:	6823      	ldr	r3, [r4, #0]
 80232d6:	079b      	lsls	r3, r3, #30
 80232d8:	f100 8107 	bmi.w	80234ea <_printf_float+0x42a>
 80232dc:	68e0      	ldr	r0, [r4, #12]
 80232de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80232e0:	4298      	cmp	r0, r3
 80232e2:	bfb8      	it	lt
 80232e4:	4618      	movlt	r0, r3
 80232e6:	e739      	b.n	802315c <_printf_float+0x9c>
 80232e8:	2301      	movs	r3, #1
 80232ea:	4652      	mov	r2, sl
 80232ec:	4631      	mov	r1, r6
 80232ee:	4628      	mov	r0, r5
 80232f0:	47b8      	blx	r7
 80232f2:	3001      	adds	r0, #1
 80232f4:	f43f af30 	beq.w	8023158 <_printf_float+0x98>
 80232f8:	f109 0901 	add.w	r9, r9, #1
 80232fc:	e7e8      	b.n	80232d0 <_printf_float+0x210>
 80232fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023300:	2b00      	cmp	r3, #0
 8023302:	dc3b      	bgt.n	802337c <_printf_float+0x2bc>
 8023304:	4a1c      	ldr	r2, [pc, #112]	@ (8023378 <_printf_float+0x2b8>)
 8023306:	2301      	movs	r3, #1
 8023308:	4631      	mov	r1, r6
 802330a:	4628      	mov	r0, r5
 802330c:	47b8      	blx	r7
 802330e:	3001      	adds	r0, #1
 8023310:	f43f af22 	beq.w	8023158 <_printf_float+0x98>
 8023314:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8023318:	ea59 0303 	orrs.w	r3, r9, r3
 802331c:	d102      	bne.n	8023324 <_printf_float+0x264>
 802331e:	6823      	ldr	r3, [r4, #0]
 8023320:	07d9      	lsls	r1, r3, #31
 8023322:	d5d7      	bpl.n	80232d4 <_printf_float+0x214>
 8023324:	9b05      	ldr	r3, [sp, #20]
 8023326:	465a      	mov	r2, fp
 8023328:	4631      	mov	r1, r6
 802332a:	4628      	mov	r0, r5
 802332c:	47b8      	blx	r7
 802332e:	3001      	adds	r0, #1
 8023330:	f43f af12 	beq.w	8023158 <_printf_float+0x98>
 8023334:	f04f 0a00 	mov.w	sl, #0
 8023338:	f104 0b1a 	add.w	fp, r4, #26
 802333c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802333e:	425b      	negs	r3, r3
 8023340:	4553      	cmp	r3, sl
 8023342:	dc01      	bgt.n	8023348 <_printf_float+0x288>
 8023344:	464b      	mov	r3, r9
 8023346:	e794      	b.n	8023272 <_printf_float+0x1b2>
 8023348:	2301      	movs	r3, #1
 802334a:	465a      	mov	r2, fp
 802334c:	4631      	mov	r1, r6
 802334e:	4628      	mov	r0, r5
 8023350:	47b8      	blx	r7
 8023352:	3001      	adds	r0, #1
 8023354:	f43f af00 	beq.w	8023158 <_printf_float+0x98>
 8023358:	f10a 0a01 	add.w	sl, sl, #1
 802335c:	e7ee      	b.n	802333c <_printf_float+0x27c>
 802335e:	bf00      	nop
 8023360:	ffffffff 	.word	0xffffffff
 8023364:	7fefffff 	.word	0x7fefffff
 8023368:	08029d88 	.word	0x08029d88
 802336c:	08029d8c 	.word	0x08029d8c
 8023370:	08029d90 	.word	0x08029d90
 8023374:	08029d94 	.word	0x08029d94
 8023378:	08029d98 	.word	0x08029d98
 802337c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802337e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8023382:	4553      	cmp	r3, sl
 8023384:	bfa8      	it	ge
 8023386:	4653      	movge	r3, sl
 8023388:	2b00      	cmp	r3, #0
 802338a:	4699      	mov	r9, r3
 802338c:	dc37      	bgt.n	80233fe <_printf_float+0x33e>
 802338e:	2300      	movs	r3, #0
 8023390:	9307      	str	r3, [sp, #28]
 8023392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023396:	f104 021a 	add.w	r2, r4, #26
 802339a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802339c:	9907      	ldr	r1, [sp, #28]
 802339e:	9306      	str	r3, [sp, #24]
 80233a0:	eba3 0309 	sub.w	r3, r3, r9
 80233a4:	428b      	cmp	r3, r1
 80233a6:	dc31      	bgt.n	802340c <_printf_float+0x34c>
 80233a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233aa:	459a      	cmp	sl, r3
 80233ac:	dc3b      	bgt.n	8023426 <_printf_float+0x366>
 80233ae:	6823      	ldr	r3, [r4, #0]
 80233b0:	07da      	lsls	r2, r3, #31
 80233b2:	d438      	bmi.n	8023426 <_printf_float+0x366>
 80233b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233b6:	ebaa 0903 	sub.w	r9, sl, r3
 80233ba:	9b06      	ldr	r3, [sp, #24]
 80233bc:	ebaa 0303 	sub.w	r3, sl, r3
 80233c0:	4599      	cmp	r9, r3
 80233c2:	bfa8      	it	ge
 80233c4:	4699      	movge	r9, r3
 80233c6:	f1b9 0f00 	cmp.w	r9, #0
 80233ca:	dc34      	bgt.n	8023436 <_printf_float+0x376>
 80233cc:	f04f 0800 	mov.w	r8, #0
 80233d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80233d4:	f104 0b1a 	add.w	fp, r4, #26
 80233d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233da:	ebaa 0303 	sub.w	r3, sl, r3
 80233de:	eba3 0309 	sub.w	r3, r3, r9
 80233e2:	4543      	cmp	r3, r8
 80233e4:	f77f af76 	ble.w	80232d4 <_printf_float+0x214>
 80233e8:	2301      	movs	r3, #1
 80233ea:	465a      	mov	r2, fp
 80233ec:	4631      	mov	r1, r6
 80233ee:	4628      	mov	r0, r5
 80233f0:	47b8      	blx	r7
 80233f2:	3001      	adds	r0, #1
 80233f4:	f43f aeb0 	beq.w	8023158 <_printf_float+0x98>
 80233f8:	f108 0801 	add.w	r8, r8, #1
 80233fc:	e7ec      	b.n	80233d8 <_printf_float+0x318>
 80233fe:	4642      	mov	r2, r8
 8023400:	4631      	mov	r1, r6
 8023402:	4628      	mov	r0, r5
 8023404:	47b8      	blx	r7
 8023406:	3001      	adds	r0, #1
 8023408:	d1c1      	bne.n	802338e <_printf_float+0x2ce>
 802340a:	e6a5      	b.n	8023158 <_printf_float+0x98>
 802340c:	2301      	movs	r3, #1
 802340e:	4631      	mov	r1, r6
 8023410:	4628      	mov	r0, r5
 8023412:	9206      	str	r2, [sp, #24]
 8023414:	47b8      	blx	r7
 8023416:	3001      	adds	r0, #1
 8023418:	f43f ae9e 	beq.w	8023158 <_printf_float+0x98>
 802341c:	9b07      	ldr	r3, [sp, #28]
 802341e:	9a06      	ldr	r2, [sp, #24]
 8023420:	3301      	adds	r3, #1
 8023422:	9307      	str	r3, [sp, #28]
 8023424:	e7b9      	b.n	802339a <_printf_float+0x2da>
 8023426:	9b05      	ldr	r3, [sp, #20]
 8023428:	465a      	mov	r2, fp
 802342a:	4631      	mov	r1, r6
 802342c:	4628      	mov	r0, r5
 802342e:	47b8      	blx	r7
 8023430:	3001      	adds	r0, #1
 8023432:	d1bf      	bne.n	80233b4 <_printf_float+0x2f4>
 8023434:	e690      	b.n	8023158 <_printf_float+0x98>
 8023436:	9a06      	ldr	r2, [sp, #24]
 8023438:	464b      	mov	r3, r9
 802343a:	4442      	add	r2, r8
 802343c:	4631      	mov	r1, r6
 802343e:	4628      	mov	r0, r5
 8023440:	47b8      	blx	r7
 8023442:	3001      	adds	r0, #1
 8023444:	d1c2      	bne.n	80233cc <_printf_float+0x30c>
 8023446:	e687      	b.n	8023158 <_printf_float+0x98>
 8023448:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802344c:	f1b9 0f01 	cmp.w	r9, #1
 8023450:	dc01      	bgt.n	8023456 <_printf_float+0x396>
 8023452:	07db      	lsls	r3, r3, #31
 8023454:	d536      	bpl.n	80234c4 <_printf_float+0x404>
 8023456:	2301      	movs	r3, #1
 8023458:	4642      	mov	r2, r8
 802345a:	4631      	mov	r1, r6
 802345c:	4628      	mov	r0, r5
 802345e:	47b8      	blx	r7
 8023460:	3001      	adds	r0, #1
 8023462:	f43f ae79 	beq.w	8023158 <_printf_float+0x98>
 8023466:	9b05      	ldr	r3, [sp, #20]
 8023468:	465a      	mov	r2, fp
 802346a:	4631      	mov	r1, r6
 802346c:	4628      	mov	r0, r5
 802346e:	47b8      	blx	r7
 8023470:	3001      	adds	r0, #1
 8023472:	f43f ae71 	beq.w	8023158 <_printf_float+0x98>
 8023476:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802347a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023482:	f109 39ff 	add.w	r9, r9, #4294967295
 8023486:	d018      	beq.n	80234ba <_printf_float+0x3fa>
 8023488:	464b      	mov	r3, r9
 802348a:	f108 0201 	add.w	r2, r8, #1
 802348e:	4631      	mov	r1, r6
 8023490:	4628      	mov	r0, r5
 8023492:	47b8      	blx	r7
 8023494:	3001      	adds	r0, #1
 8023496:	d10c      	bne.n	80234b2 <_printf_float+0x3f2>
 8023498:	e65e      	b.n	8023158 <_printf_float+0x98>
 802349a:	2301      	movs	r3, #1
 802349c:	465a      	mov	r2, fp
 802349e:	4631      	mov	r1, r6
 80234a0:	4628      	mov	r0, r5
 80234a2:	47b8      	blx	r7
 80234a4:	3001      	adds	r0, #1
 80234a6:	f43f ae57 	beq.w	8023158 <_printf_float+0x98>
 80234aa:	f108 0801 	add.w	r8, r8, #1
 80234ae:	45c8      	cmp	r8, r9
 80234b0:	dbf3      	blt.n	802349a <_printf_float+0x3da>
 80234b2:	4653      	mov	r3, sl
 80234b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80234b8:	e6dc      	b.n	8023274 <_printf_float+0x1b4>
 80234ba:	f04f 0800 	mov.w	r8, #0
 80234be:	f104 0b1a 	add.w	fp, r4, #26
 80234c2:	e7f4      	b.n	80234ae <_printf_float+0x3ee>
 80234c4:	2301      	movs	r3, #1
 80234c6:	4642      	mov	r2, r8
 80234c8:	e7e1      	b.n	802348e <_printf_float+0x3ce>
 80234ca:	2301      	movs	r3, #1
 80234cc:	464a      	mov	r2, r9
 80234ce:	4631      	mov	r1, r6
 80234d0:	4628      	mov	r0, r5
 80234d2:	47b8      	blx	r7
 80234d4:	3001      	adds	r0, #1
 80234d6:	f43f ae3f 	beq.w	8023158 <_printf_float+0x98>
 80234da:	f108 0801 	add.w	r8, r8, #1
 80234de:	68e3      	ldr	r3, [r4, #12]
 80234e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80234e2:	1a5b      	subs	r3, r3, r1
 80234e4:	4543      	cmp	r3, r8
 80234e6:	dcf0      	bgt.n	80234ca <_printf_float+0x40a>
 80234e8:	e6f8      	b.n	80232dc <_printf_float+0x21c>
 80234ea:	f04f 0800 	mov.w	r8, #0
 80234ee:	f104 0919 	add.w	r9, r4, #25
 80234f2:	e7f4      	b.n	80234de <_printf_float+0x41e>

080234f4 <_printf_common>:
 80234f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234f8:	4616      	mov	r6, r2
 80234fa:	4698      	mov	r8, r3
 80234fc:	688a      	ldr	r2, [r1, #8]
 80234fe:	690b      	ldr	r3, [r1, #16]
 8023500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023504:	4293      	cmp	r3, r2
 8023506:	bfb8      	it	lt
 8023508:	4613      	movlt	r3, r2
 802350a:	6033      	str	r3, [r6, #0]
 802350c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023510:	4607      	mov	r7, r0
 8023512:	460c      	mov	r4, r1
 8023514:	b10a      	cbz	r2, 802351a <_printf_common+0x26>
 8023516:	3301      	adds	r3, #1
 8023518:	6033      	str	r3, [r6, #0]
 802351a:	6823      	ldr	r3, [r4, #0]
 802351c:	0699      	lsls	r1, r3, #26
 802351e:	bf42      	ittt	mi
 8023520:	6833      	ldrmi	r3, [r6, #0]
 8023522:	3302      	addmi	r3, #2
 8023524:	6033      	strmi	r3, [r6, #0]
 8023526:	6825      	ldr	r5, [r4, #0]
 8023528:	f015 0506 	ands.w	r5, r5, #6
 802352c:	d106      	bne.n	802353c <_printf_common+0x48>
 802352e:	f104 0a19 	add.w	sl, r4, #25
 8023532:	68e3      	ldr	r3, [r4, #12]
 8023534:	6832      	ldr	r2, [r6, #0]
 8023536:	1a9b      	subs	r3, r3, r2
 8023538:	42ab      	cmp	r3, r5
 802353a:	dc26      	bgt.n	802358a <_printf_common+0x96>
 802353c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023540:	6822      	ldr	r2, [r4, #0]
 8023542:	3b00      	subs	r3, #0
 8023544:	bf18      	it	ne
 8023546:	2301      	movne	r3, #1
 8023548:	0692      	lsls	r2, r2, #26
 802354a:	d42b      	bmi.n	80235a4 <_printf_common+0xb0>
 802354c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023550:	4641      	mov	r1, r8
 8023552:	4638      	mov	r0, r7
 8023554:	47c8      	blx	r9
 8023556:	3001      	adds	r0, #1
 8023558:	d01e      	beq.n	8023598 <_printf_common+0xa4>
 802355a:	6823      	ldr	r3, [r4, #0]
 802355c:	6922      	ldr	r2, [r4, #16]
 802355e:	f003 0306 	and.w	r3, r3, #6
 8023562:	2b04      	cmp	r3, #4
 8023564:	bf02      	ittt	eq
 8023566:	68e5      	ldreq	r5, [r4, #12]
 8023568:	6833      	ldreq	r3, [r6, #0]
 802356a:	1aed      	subeq	r5, r5, r3
 802356c:	68a3      	ldr	r3, [r4, #8]
 802356e:	bf0c      	ite	eq
 8023570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023574:	2500      	movne	r5, #0
 8023576:	4293      	cmp	r3, r2
 8023578:	bfc4      	itt	gt
 802357a:	1a9b      	subgt	r3, r3, r2
 802357c:	18ed      	addgt	r5, r5, r3
 802357e:	2600      	movs	r6, #0
 8023580:	341a      	adds	r4, #26
 8023582:	42b5      	cmp	r5, r6
 8023584:	d11a      	bne.n	80235bc <_printf_common+0xc8>
 8023586:	2000      	movs	r0, #0
 8023588:	e008      	b.n	802359c <_printf_common+0xa8>
 802358a:	2301      	movs	r3, #1
 802358c:	4652      	mov	r2, sl
 802358e:	4641      	mov	r1, r8
 8023590:	4638      	mov	r0, r7
 8023592:	47c8      	blx	r9
 8023594:	3001      	adds	r0, #1
 8023596:	d103      	bne.n	80235a0 <_printf_common+0xac>
 8023598:	f04f 30ff 	mov.w	r0, #4294967295
 802359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235a0:	3501      	adds	r5, #1
 80235a2:	e7c6      	b.n	8023532 <_printf_common+0x3e>
 80235a4:	18e1      	adds	r1, r4, r3
 80235a6:	1c5a      	adds	r2, r3, #1
 80235a8:	2030      	movs	r0, #48	@ 0x30
 80235aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80235ae:	4422      	add	r2, r4
 80235b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80235b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80235b8:	3302      	adds	r3, #2
 80235ba:	e7c7      	b.n	802354c <_printf_common+0x58>
 80235bc:	2301      	movs	r3, #1
 80235be:	4622      	mov	r2, r4
 80235c0:	4641      	mov	r1, r8
 80235c2:	4638      	mov	r0, r7
 80235c4:	47c8      	blx	r9
 80235c6:	3001      	adds	r0, #1
 80235c8:	d0e6      	beq.n	8023598 <_printf_common+0xa4>
 80235ca:	3601      	adds	r6, #1
 80235cc:	e7d9      	b.n	8023582 <_printf_common+0x8e>
	...

080235d0 <_printf_i>:
 80235d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80235d4:	7e0f      	ldrb	r7, [r1, #24]
 80235d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80235d8:	2f78      	cmp	r7, #120	@ 0x78
 80235da:	4691      	mov	r9, r2
 80235dc:	4680      	mov	r8, r0
 80235de:	460c      	mov	r4, r1
 80235e0:	469a      	mov	sl, r3
 80235e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80235e6:	d807      	bhi.n	80235f8 <_printf_i+0x28>
 80235e8:	2f62      	cmp	r7, #98	@ 0x62
 80235ea:	d80a      	bhi.n	8023602 <_printf_i+0x32>
 80235ec:	2f00      	cmp	r7, #0
 80235ee:	f000 80d2 	beq.w	8023796 <_printf_i+0x1c6>
 80235f2:	2f58      	cmp	r7, #88	@ 0x58
 80235f4:	f000 80b9 	beq.w	802376a <_printf_i+0x19a>
 80235f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80235fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023600:	e03a      	b.n	8023678 <_printf_i+0xa8>
 8023602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023606:	2b15      	cmp	r3, #21
 8023608:	d8f6      	bhi.n	80235f8 <_printf_i+0x28>
 802360a:	a101      	add	r1, pc, #4	@ (adr r1, 8023610 <_printf_i+0x40>)
 802360c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023610:	08023669 	.word	0x08023669
 8023614:	0802367d 	.word	0x0802367d
 8023618:	080235f9 	.word	0x080235f9
 802361c:	080235f9 	.word	0x080235f9
 8023620:	080235f9 	.word	0x080235f9
 8023624:	080235f9 	.word	0x080235f9
 8023628:	0802367d 	.word	0x0802367d
 802362c:	080235f9 	.word	0x080235f9
 8023630:	080235f9 	.word	0x080235f9
 8023634:	080235f9 	.word	0x080235f9
 8023638:	080235f9 	.word	0x080235f9
 802363c:	0802377d 	.word	0x0802377d
 8023640:	080236a7 	.word	0x080236a7
 8023644:	08023737 	.word	0x08023737
 8023648:	080235f9 	.word	0x080235f9
 802364c:	080235f9 	.word	0x080235f9
 8023650:	0802379f 	.word	0x0802379f
 8023654:	080235f9 	.word	0x080235f9
 8023658:	080236a7 	.word	0x080236a7
 802365c:	080235f9 	.word	0x080235f9
 8023660:	080235f9 	.word	0x080235f9
 8023664:	0802373f 	.word	0x0802373f
 8023668:	6833      	ldr	r3, [r6, #0]
 802366a:	1d1a      	adds	r2, r3, #4
 802366c:	681b      	ldr	r3, [r3, #0]
 802366e:	6032      	str	r2, [r6, #0]
 8023670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023678:	2301      	movs	r3, #1
 802367a:	e09d      	b.n	80237b8 <_printf_i+0x1e8>
 802367c:	6833      	ldr	r3, [r6, #0]
 802367e:	6820      	ldr	r0, [r4, #0]
 8023680:	1d19      	adds	r1, r3, #4
 8023682:	6031      	str	r1, [r6, #0]
 8023684:	0606      	lsls	r6, r0, #24
 8023686:	d501      	bpl.n	802368c <_printf_i+0xbc>
 8023688:	681d      	ldr	r5, [r3, #0]
 802368a:	e003      	b.n	8023694 <_printf_i+0xc4>
 802368c:	0645      	lsls	r5, r0, #25
 802368e:	d5fb      	bpl.n	8023688 <_printf_i+0xb8>
 8023690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023694:	2d00      	cmp	r5, #0
 8023696:	da03      	bge.n	80236a0 <_printf_i+0xd0>
 8023698:	232d      	movs	r3, #45	@ 0x2d
 802369a:	426d      	negs	r5, r5
 802369c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236a0:	4859      	ldr	r0, [pc, #356]	@ (8023808 <_printf_i+0x238>)
 80236a2:	230a      	movs	r3, #10
 80236a4:	e011      	b.n	80236ca <_printf_i+0xfa>
 80236a6:	6821      	ldr	r1, [r4, #0]
 80236a8:	6833      	ldr	r3, [r6, #0]
 80236aa:	0608      	lsls	r0, r1, #24
 80236ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80236b0:	d402      	bmi.n	80236b8 <_printf_i+0xe8>
 80236b2:	0649      	lsls	r1, r1, #25
 80236b4:	bf48      	it	mi
 80236b6:	b2ad      	uxthmi	r5, r5
 80236b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80236ba:	4853      	ldr	r0, [pc, #332]	@ (8023808 <_printf_i+0x238>)
 80236bc:	6033      	str	r3, [r6, #0]
 80236be:	bf14      	ite	ne
 80236c0:	230a      	movne	r3, #10
 80236c2:	2308      	moveq	r3, #8
 80236c4:	2100      	movs	r1, #0
 80236c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80236ca:	6866      	ldr	r6, [r4, #4]
 80236cc:	60a6      	str	r6, [r4, #8]
 80236ce:	2e00      	cmp	r6, #0
 80236d0:	bfa2      	ittt	ge
 80236d2:	6821      	ldrge	r1, [r4, #0]
 80236d4:	f021 0104 	bicge.w	r1, r1, #4
 80236d8:	6021      	strge	r1, [r4, #0]
 80236da:	b90d      	cbnz	r5, 80236e0 <_printf_i+0x110>
 80236dc:	2e00      	cmp	r6, #0
 80236de:	d04b      	beq.n	8023778 <_printf_i+0x1a8>
 80236e0:	4616      	mov	r6, r2
 80236e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80236e6:	fb03 5711 	mls	r7, r3, r1, r5
 80236ea:	5dc7      	ldrb	r7, [r0, r7]
 80236ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80236f0:	462f      	mov	r7, r5
 80236f2:	42bb      	cmp	r3, r7
 80236f4:	460d      	mov	r5, r1
 80236f6:	d9f4      	bls.n	80236e2 <_printf_i+0x112>
 80236f8:	2b08      	cmp	r3, #8
 80236fa:	d10b      	bne.n	8023714 <_printf_i+0x144>
 80236fc:	6823      	ldr	r3, [r4, #0]
 80236fe:	07df      	lsls	r7, r3, #31
 8023700:	d508      	bpl.n	8023714 <_printf_i+0x144>
 8023702:	6923      	ldr	r3, [r4, #16]
 8023704:	6861      	ldr	r1, [r4, #4]
 8023706:	4299      	cmp	r1, r3
 8023708:	bfde      	ittt	le
 802370a:	2330      	movle	r3, #48	@ 0x30
 802370c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023714:	1b92      	subs	r2, r2, r6
 8023716:	6122      	str	r2, [r4, #16]
 8023718:	f8cd a000 	str.w	sl, [sp]
 802371c:	464b      	mov	r3, r9
 802371e:	aa03      	add	r2, sp, #12
 8023720:	4621      	mov	r1, r4
 8023722:	4640      	mov	r0, r8
 8023724:	f7ff fee6 	bl	80234f4 <_printf_common>
 8023728:	3001      	adds	r0, #1
 802372a:	d14a      	bne.n	80237c2 <_printf_i+0x1f2>
 802372c:	f04f 30ff 	mov.w	r0, #4294967295
 8023730:	b004      	add	sp, #16
 8023732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023736:	6823      	ldr	r3, [r4, #0]
 8023738:	f043 0320 	orr.w	r3, r3, #32
 802373c:	6023      	str	r3, [r4, #0]
 802373e:	4833      	ldr	r0, [pc, #204]	@ (802380c <_printf_i+0x23c>)
 8023740:	2778      	movs	r7, #120	@ 0x78
 8023742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023746:	6823      	ldr	r3, [r4, #0]
 8023748:	6831      	ldr	r1, [r6, #0]
 802374a:	061f      	lsls	r7, r3, #24
 802374c:	f851 5b04 	ldr.w	r5, [r1], #4
 8023750:	d402      	bmi.n	8023758 <_printf_i+0x188>
 8023752:	065f      	lsls	r7, r3, #25
 8023754:	bf48      	it	mi
 8023756:	b2ad      	uxthmi	r5, r5
 8023758:	6031      	str	r1, [r6, #0]
 802375a:	07d9      	lsls	r1, r3, #31
 802375c:	bf44      	itt	mi
 802375e:	f043 0320 	orrmi.w	r3, r3, #32
 8023762:	6023      	strmi	r3, [r4, #0]
 8023764:	b11d      	cbz	r5, 802376e <_printf_i+0x19e>
 8023766:	2310      	movs	r3, #16
 8023768:	e7ac      	b.n	80236c4 <_printf_i+0xf4>
 802376a:	4827      	ldr	r0, [pc, #156]	@ (8023808 <_printf_i+0x238>)
 802376c:	e7e9      	b.n	8023742 <_printf_i+0x172>
 802376e:	6823      	ldr	r3, [r4, #0]
 8023770:	f023 0320 	bic.w	r3, r3, #32
 8023774:	6023      	str	r3, [r4, #0]
 8023776:	e7f6      	b.n	8023766 <_printf_i+0x196>
 8023778:	4616      	mov	r6, r2
 802377a:	e7bd      	b.n	80236f8 <_printf_i+0x128>
 802377c:	6833      	ldr	r3, [r6, #0]
 802377e:	6825      	ldr	r5, [r4, #0]
 8023780:	6961      	ldr	r1, [r4, #20]
 8023782:	1d18      	adds	r0, r3, #4
 8023784:	6030      	str	r0, [r6, #0]
 8023786:	062e      	lsls	r6, r5, #24
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	d501      	bpl.n	8023790 <_printf_i+0x1c0>
 802378c:	6019      	str	r1, [r3, #0]
 802378e:	e002      	b.n	8023796 <_printf_i+0x1c6>
 8023790:	0668      	lsls	r0, r5, #25
 8023792:	d5fb      	bpl.n	802378c <_printf_i+0x1bc>
 8023794:	8019      	strh	r1, [r3, #0]
 8023796:	2300      	movs	r3, #0
 8023798:	6123      	str	r3, [r4, #16]
 802379a:	4616      	mov	r6, r2
 802379c:	e7bc      	b.n	8023718 <_printf_i+0x148>
 802379e:	6833      	ldr	r3, [r6, #0]
 80237a0:	1d1a      	adds	r2, r3, #4
 80237a2:	6032      	str	r2, [r6, #0]
 80237a4:	681e      	ldr	r6, [r3, #0]
 80237a6:	6862      	ldr	r2, [r4, #4]
 80237a8:	2100      	movs	r1, #0
 80237aa:	4630      	mov	r0, r6
 80237ac:	f7dc fd98 	bl	80002e0 <memchr>
 80237b0:	b108      	cbz	r0, 80237b6 <_printf_i+0x1e6>
 80237b2:	1b80      	subs	r0, r0, r6
 80237b4:	6060      	str	r0, [r4, #4]
 80237b6:	6863      	ldr	r3, [r4, #4]
 80237b8:	6123      	str	r3, [r4, #16]
 80237ba:	2300      	movs	r3, #0
 80237bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80237c0:	e7aa      	b.n	8023718 <_printf_i+0x148>
 80237c2:	6923      	ldr	r3, [r4, #16]
 80237c4:	4632      	mov	r2, r6
 80237c6:	4649      	mov	r1, r9
 80237c8:	4640      	mov	r0, r8
 80237ca:	47d0      	blx	sl
 80237cc:	3001      	adds	r0, #1
 80237ce:	d0ad      	beq.n	802372c <_printf_i+0x15c>
 80237d0:	6823      	ldr	r3, [r4, #0]
 80237d2:	079b      	lsls	r3, r3, #30
 80237d4:	d413      	bmi.n	80237fe <_printf_i+0x22e>
 80237d6:	68e0      	ldr	r0, [r4, #12]
 80237d8:	9b03      	ldr	r3, [sp, #12]
 80237da:	4298      	cmp	r0, r3
 80237dc:	bfb8      	it	lt
 80237de:	4618      	movlt	r0, r3
 80237e0:	e7a6      	b.n	8023730 <_printf_i+0x160>
 80237e2:	2301      	movs	r3, #1
 80237e4:	4632      	mov	r2, r6
 80237e6:	4649      	mov	r1, r9
 80237e8:	4640      	mov	r0, r8
 80237ea:	47d0      	blx	sl
 80237ec:	3001      	adds	r0, #1
 80237ee:	d09d      	beq.n	802372c <_printf_i+0x15c>
 80237f0:	3501      	adds	r5, #1
 80237f2:	68e3      	ldr	r3, [r4, #12]
 80237f4:	9903      	ldr	r1, [sp, #12]
 80237f6:	1a5b      	subs	r3, r3, r1
 80237f8:	42ab      	cmp	r3, r5
 80237fa:	dcf2      	bgt.n	80237e2 <_printf_i+0x212>
 80237fc:	e7eb      	b.n	80237d6 <_printf_i+0x206>
 80237fe:	2500      	movs	r5, #0
 8023800:	f104 0619 	add.w	r6, r4, #25
 8023804:	e7f5      	b.n	80237f2 <_printf_i+0x222>
 8023806:	bf00      	nop
 8023808:	08029d9a 	.word	0x08029d9a
 802380c:	08029dab 	.word	0x08029dab

08023810 <_scanf_float>:
 8023810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023814:	b087      	sub	sp, #28
 8023816:	4617      	mov	r7, r2
 8023818:	9303      	str	r3, [sp, #12]
 802381a:	688b      	ldr	r3, [r1, #8]
 802381c:	1e5a      	subs	r2, r3, #1
 802381e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8023822:	bf81      	itttt	hi
 8023824:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8023828:	eb03 0b05 	addhi.w	fp, r3, r5
 802382c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8023830:	608b      	strhi	r3, [r1, #8]
 8023832:	680b      	ldr	r3, [r1, #0]
 8023834:	460a      	mov	r2, r1
 8023836:	f04f 0500 	mov.w	r5, #0
 802383a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 802383e:	f842 3b1c 	str.w	r3, [r2], #28
 8023842:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8023846:	4680      	mov	r8, r0
 8023848:	460c      	mov	r4, r1
 802384a:	bf98      	it	ls
 802384c:	f04f 0b00 	movls.w	fp, #0
 8023850:	9201      	str	r2, [sp, #4]
 8023852:	4616      	mov	r6, r2
 8023854:	46aa      	mov	sl, r5
 8023856:	46a9      	mov	r9, r5
 8023858:	9502      	str	r5, [sp, #8]
 802385a:	68a2      	ldr	r2, [r4, #8]
 802385c:	b152      	cbz	r2, 8023874 <_scanf_float+0x64>
 802385e:	683b      	ldr	r3, [r7, #0]
 8023860:	781b      	ldrb	r3, [r3, #0]
 8023862:	2b4e      	cmp	r3, #78	@ 0x4e
 8023864:	d864      	bhi.n	8023930 <_scanf_float+0x120>
 8023866:	2b40      	cmp	r3, #64	@ 0x40
 8023868:	d83c      	bhi.n	80238e4 <_scanf_float+0xd4>
 802386a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802386e:	b2c8      	uxtb	r0, r1
 8023870:	280e      	cmp	r0, #14
 8023872:	d93a      	bls.n	80238ea <_scanf_float+0xda>
 8023874:	f1b9 0f00 	cmp.w	r9, #0
 8023878:	d003      	beq.n	8023882 <_scanf_float+0x72>
 802387a:	6823      	ldr	r3, [r4, #0]
 802387c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023880:	6023      	str	r3, [r4, #0]
 8023882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023886:	f1ba 0f01 	cmp.w	sl, #1
 802388a:	f200 8117 	bhi.w	8023abc <_scanf_float+0x2ac>
 802388e:	9b01      	ldr	r3, [sp, #4]
 8023890:	429e      	cmp	r6, r3
 8023892:	f200 8108 	bhi.w	8023aa6 <_scanf_float+0x296>
 8023896:	2001      	movs	r0, #1
 8023898:	b007      	add	sp, #28
 802389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802389e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80238a2:	2a0d      	cmp	r2, #13
 80238a4:	d8e6      	bhi.n	8023874 <_scanf_float+0x64>
 80238a6:	a101      	add	r1, pc, #4	@ (adr r1, 80238ac <_scanf_float+0x9c>)
 80238a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80238ac:	080239f3 	.word	0x080239f3
 80238b0:	08023875 	.word	0x08023875
 80238b4:	08023875 	.word	0x08023875
 80238b8:	08023875 	.word	0x08023875
 80238bc:	08023a53 	.word	0x08023a53
 80238c0:	08023a2b 	.word	0x08023a2b
 80238c4:	08023875 	.word	0x08023875
 80238c8:	08023875 	.word	0x08023875
 80238cc:	08023a01 	.word	0x08023a01
 80238d0:	08023875 	.word	0x08023875
 80238d4:	08023875 	.word	0x08023875
 80238d8:	08023875 	.word	0x08023875
 80238dc:	08023875 	.word	0x08023875
 80238e0:	080239b9 	.word	0x080239b9
 80238e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80238e8:	e7db      	b.n	80238a2 <_scanf_float+0x92>
 80238ea:	290e      	cmp	r1, #14
 80238ec:	d8c2      	bhi.n	8023874 <_scanf_float+0x64>
 80238ee:	a001      	add	r0, pc, #4	@ (adr r0, 80238f4 <_scanf_float+0xe4>)
 80238f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80238f4:	080239a9 	.word	0x080239a9
 80238f8:	08023875 	.word	0x08023875
 80238fc:	080239a9 	.word	0x080239a9
 8023900:	08023a3f 	.word	0x08023a3f
 8023904:	08023875 	.word	0x08023875
 8023908:	08023951 	.word	0x08023951
 802390c:	0802398f 	.word	0x0802398f
 8023910:	0802398f 	.word	0x0802398f
 8023914:	0802398f 	.word	0x0802398f
 8023918:	0802398f 	.word	0x0802398f
 802391c:	0802398f 	.word	0x0802398f
 8023920:	0802398f 	.word	0x0802398f
 8023924:	0802398f 	.word	0x0802398f
 8023928:	0802398f 	.word	0x0802398f
 802392c:	0802398f 	.word	0x0802398f
 8023930:	2b6e      	cmp	r3, #110	@ 0x6e
 8023932:	d809      	bhi.n	8023948 <_scanf_float+0x138>
 8023934:	2b60      	cmp	r3, #96	@ 0x60
 8023936:	d8b2      	bhi.n	802389e <_scanf_float+0x8e>
 8023938:	2b54      	cmp	r3, #84	@ 0x54
 802393a:	d07b      	beq.n	8023a34 <_scanf_float+0x224>
 802393c:	2b59      	cmp	r3, #89	@ 0x59
 802393e:	d199      	bne.n	8023874 <_scanf_float+0x64>
 8023940:	2d07      	cmp	r5, #7
 8023942:	d197      	bne.n	8023874 <_scanf_float+0x64>
 8023944:	2508      	movs	r5, #8
 8023946:	e02c      	b.n	80239a2 <_scanf_float+0x192>
 8023948:	2b74      	cmp	r3, #116	@ 0x74
 802394a:	d073      	beq.n	8023a34 <_scanf_float+0x224>
 802394c:	2b79      	cmp	r3, #121	@ 0x79
 802394e:	e7f6      	b.n	802393e <_scanf_float+0x12e>
 8023950:	6821      	ldr	r1, [r4, #0]
 8023952:	05c8      	lsls	r0, r1, #23
 8023954:	d51b      	bpl.n	802398e <_scanf_float+0x17e>
 8023956:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802395a:	6021      	str	r1, [r4, #0]
 802395c:	f109 0901 	add.w	r9, r9, #1
 8023960:	f1bb 0f00 	cmp.w	fp, #0
 8023964:	d003      	beq.n	802396e <_scanf_float+0x15e>
 8023966:	3201      	adds	r2, #1
 8023968:	f10b 3bff 	add.w	fp, fp, #4294967295
 802396c:	60a2      	str	r2, [r4, #8]
 802396e:	68a3      	ldr	r3, [r4, #8]
 8023970:	3b01      	subs	r3, #1
 8023972:	60a3      	str	r3, [r4, #8]
 8023974:	6923      	ldr	r3, [r4, #16]
 8023976:	3301      	adds	r3, #1
 8023978:	6123      	str	r3, [r4, #16]
 802397a:	687b      	ldr	r3, [r7, #4]
 802397c:	3b01      	subs	r3, #1
 802397e:	2b00      	cmp	r3, #0
 8023980:	607b      	str	r3, [r7, #4]
 8023982:	f340 8087 	ble.w	8023a94 <_scanf_float+0x284>
 8023986:	683b      	ldr	r3, [r7, #0]
 8023988:	3301      	adds	r3, #1
 802398a:	603b      	str	r3, [r7, #0]
 802398c:	e765      	b.n	802385a <_scanf_float+0x4a>
 802398e:	eb1a 0105 	adds.w	r1, sl, r5
 8023992:	f47f af6f 	bne.w	8023874 <_scanf_float+0x64>
 8023996:	6822      	ldr	r2, [r4, #0]
 8023998:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 802399c:	6022      	str	r2, [r4, #0]
 802399e:	460d      	mov	r5, r1
 80239a0:	468a      	mov	sl, r1
 80239a2:	f806 3b01 	strb.w	r3, [r6], #1
 80239a6:	e7e2      	b.n	802396e <_scanf_float+0x15e>
 80239a8:	6822      	ldr	r2, [r4, #0]
 80239aa:	0610      	lsls	r0, r2, #24
 80239ac:	f57f af62 	bpl.w	8023874 <_scanf_float+0x64>
 80239b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80239b4:	6022      	str	r2, [r4, #0]
 80239b6:	e7f4      	b.n	80239a2 <_scanf_float+0x192>
 80239b8:	f1ba 0f00 	cmp.w	sl, #0
 80239bc:	d10e      	bne.n	80239dc <_scanf_float+0x1cc>
 80239be:	f1b9 0f00 	cmp.w	r9, #0
 80239c2:	d10e      	bne.n	80239e2 <_scanf_float+0x1d2>
 80239c4:	6822      	ldr	r2, [r4, #0]
 80239c6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80239ca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80239ce:	d108      	bne.n	80239e2 <_scanf_float+0x1d2>
 80239d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80239d4:	6022      	str	r2, [r4, #0]
 80239d6:	f04f 0a01 	mov.w	sl, #1
 80239da:	e7e2      	b.n	80239a2 <_scanf_float+0x192>
 80239dc:	f1ba 0f02 	cmp.w	sl, #2
 80239e0:	d055      	beq.n	8023a8e <_scanf_float+0x27e>
 80239e2:	2d01      	cmp	r5, #1
 80239e4:	d002      	beq.n	80239ec <_scanf_float+0x1dc>
 80239e6:	2d04      	cmp	r5, #4
 80239e8:	f47f af44 	bne.w	8023874 <_scanf_float+0x64>
 80239ec:	3501      	adds	r5, #1
 80239ee:	b2ed      	uxtb	r5, r5
 80239f0:	e7d7      	b.n	80239a2 <_scanf_float+0x192>
 80239f2:	f1ba 0f01 	cmp.w	sl, #1
 80239f6:	f47f af3d 	bne.w	8023874 <_scanf_float+0x64>
 80239fa:	f04f 0a02 	mov.w	sl, #2
 80239fe:	e7d0      	b.n	80239a2 <_scanf_float+0x192>
 8023a00:	b97d      	cbnz	r5, 8023a22 <_scanf_float+0x212>
 8023a02:	f1b9 0f00 	cmp.w	r9, #0
 8023a06:	f47f af38 	bne.w	802387a <_scanf_float+0x6a>
 8023a0a:	6822      	ldr	r2, [r4, #0]
 8023a0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8023a10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8023a14:	f040 8101 	bne.w	8023c1a <_scanf_float+0x40a>
 8023a18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8023a1c:	6022      	str	r2, [r4, #0]
 8023a1e:	2501      	movs	r5, #1
 8023a20:	e7bf      	b.n	80239a2 <_scanf_float+0x192>
 8023a22:	2d03      	cmp	r5, #3
 8023a24:	d0e2      	beq.n	80239ec <_scanf_float+0x1dc>
 8023a26:	2d05      	cmp	r5, #5
 8023a28:	e7de      	b.n	80239e8 <_scanf_float+0x1d8>
 8023a2a:	2d02      	cmp	r5, #2
 8023a2c:	f47f af22 	bne.w	8023874 <_scanf_float+0x64>
 8023a30:	2503      	movs	r5, #3
 8023a32:	e7b6      	b.n	80239a2 <_scanf_float+0x192>
 8023a34:	2d06      	cmp	r5, #6
 8023a36:	f47f af1d 	bne.w	8023874 <_scanf_float+0x64>
 8023a3a:	2507      	movs	r5, #7
 8023a3c:	e7b1      	b.n	80239a2 <_scanf_float+0x192>
 8023a3e:	6822      	ldr	r2, [r4, #0]
 8023a40:	0591      	lsls	r1, r2, #22
 8023a42:	f57f af17 	bpl.w	8023874 <_scanf_float+0x64>
 8023a46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8023a4a:	6022      	str	r2, [r4, #0]
 8023a4c:	f8cd 9008 	str.w	r9, [sp, #8]
 8023a50:	e7a7      	b.n	80239a2 <_scanf_float+0x192>
 8023a52:	6822      	ldr	r2, [r4, #0]
 8023a54:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8023a58:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8023a5c:	d006      	beq.n	8023a6c <_scanf_float+0x25c>
 8023a5e:	0550      	lsls	r0, r2, #21
 8023a60:	f57f af08 	bpl.w	8023874 <_scanf_float+0x64>
 8023a64:	f1b9 0f00 	cmp.w	r9, #0
 8023a68:	f000 80d7 	beq.w	8023c1a <_scanf_float+0x40a>
 8023a6c:	0591      	lsls	r1, r2, #22
 8023a6e:	bf58      	it	pl
 8023a70:	9902      	ldrpl	r1, [sp, #8]
 8023a72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8023a76:	bf58      	it	pl
 8023a78:	eba9 0101 	subpl.w	r1, r9, r1
 8023a7c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8023a80:	bf58      	it	pl
 8023a82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8023a86:	6022      	str	r2, [r4, #0]
 8023a88:	f04f 0900 	mov.w	r9, #0
 8023a8c:	e789      	b.n	80239a2 <_scanf_float+0x192>
 8023a8e:	f04f 0a03 	mov.w	sl, #3
 8023a92:	e786      	b.n	80239a2 <_scanf_float+0x192>
 8023a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8023a98:	4639      	mov	r1, r7
 8023a9a:	4640      	mov	r0, r8
 8023a9c:	4798      	blx	r3
 8023a9e:	2800      	cmp	r0, #0
 8023aa0:	f43f aedb 	beq.w	802385a <_scanf_float+0x4a>
 8023aa4:	e6e6      	b.n	8023874 <_scanf_float+0x64>
 8023aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8023aae:	463a      	mov	r2, r7
 8023ab0:	4640      	mov	r0, r8
 8023ab2:	4798      	blx	r3
 8023ab4:	6923      	ldr	r3, [r4, #16]
 8023ab6:	3b01      	subs	r3, #1
 8023ab8:	6123      	str	r3, [r4, #16]
 8023aba:	e6e8      	b.n	802388e <_scanf_float+0x7e>
 8023abc:	1e6b      	subs	r3, r5, #1
 8023abe:	2b06      	cmp	r3, #6
 8023ac0:	d824      	bhi.n	8023b0c <_scanf_float+0x2fc>
 8023ac2:	2d02      	cmp	r5, #2
 8023ac4:	d836      	bhi.n	8023b34 <_scanf_float+0x324>
 8023ac6:	9b01      	ldr	r3, [sp, #4]
 8023ac8:	429e      	cmp	r6, r3
 8023aca:	f67f aee4 	bls.w	8023896 <_scanf_float+0x86>
 8023ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8023ad6:	463a      	mov	r2, r7
 8023ad8:	4640      	mov	r0, r8
 8023ada:	4798      	blx	r3
 8023adc:	6923      	ldr	r3, [r4, #16]
 8023ade:	3b01      	subs	r3, #1
 8023ae0:	6123      	str	r3, [r4, #16]
 8023ae2:	e7f0      	b.n	8023ac6 <_scanf_float+0x2b6>
 8023ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023ae8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8023aec:	463a      	mov	r2, r7
 8023aee:	4640      	mov	r0, r8
 8023af0:	4798      	blx	r3
 8023af2:	6923      	ldr	r3, [r4, #16]
 8023af4:	3b01      	subs	r3, #1
 8023af6:	6123      	str	r3, [r4, #16]
 8023af8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023afc:	fa5f fa8a 	uxtb.w	sl, sl
 8023b00:	f1ba 0f02 	cmp.w	sl, #2
 8023b04:	d1ee      	bne.n	8023ae4 <_scanf_float+0x2d4>
 8023b06:	3d03      	subs	r5, #3
 8023b08:	b2ed      	uxtb	r5, r5
 8023b0a:	1b76      	subs	r6, r6, r5
 8023b0c:	6823      	ldr	r3, [r4, #0]
 8023b0e:	05da      	lsls	r2, r3, #23
 8023b10:	d530      	bpl.n	8023b74 <_scanf_float+0x364>
 8023b12:	055b      	lsls	r3, r3, #21
 8023b14:	d511      	bpl.n	8023b3a <_scanf_float+0x32a>
 8023b16:	9b01      	ldr	r3, [sp, #4]
 8023b18:	429e      	cmp	r6, r3
 8023b1a:	f67f aebc 	bls.w	8023896 <_scanf_float+0x86>
 8023b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8023b26:	463a      	mov	r2, r7
 8023b28:	4640      	mov	r0, r8
 8023b2a:	4798      	blx	r3
 8023b2c:	6923      	ldr	r3, [r4, #16]
 8023b2e:	3b01      	subs	r3, #1
 8023b30:	6123      	str	r3, [r4, #16]
 8023b32:	e7f0      	b.n	8023b16 <_scanf_float+0x306>
 8023b34:	46aa      	mov	sl, r5
 8023b36:	46b3      	mov	fp, r6
 8023b38:	e7de      	b.n	8023af8 <_scanf_float+0x2e8>
 8023b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8023b3e:	6923      	ldr	r3, [r4, #16]
 8023b40:	2965      	cmp	r1, #101	@ 0x65
 8023b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8023b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8023b4a:	6123      	str	r3, [r4, #16]
 8023b4c:	d00c      	beq.n	8023b68 <_scanf_float+0x358>
 8023b4e:	2945      	cmp	r1, #69	@ 0x45
 8023b50:	d00a      	beq.n	8023b68 <_scanf_float+0x358>
 8023b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023b56:	463a      	mov	r2, r7
 8023b58:	4640      	mov	r0, r8
 8023b5a:	4798      	blx	r3
 8023b5c:	6923      	ldr	r3, [r4, #16]
 8023b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8023b62:	3b01      	subs	r3, #1
 8023b64:	1eb5      	subs	r5, r6, #2
 8023b66:	6123      	str	r3, [r4, #16]
 8023b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8023b6c:	463a      	mov	r2, r7
 8023b6e:	4640      	mov	r0, r8
 8023b70:	4798      	blx	r3
 8023b72:	462e      	mov	r6, r5
 8023b74:	6822      	ldr	r2, [r4, #0]
 8023b76:	f012 0210 	ands.w	r2, r2, #16
 8023b7a:	d001      	beq.n	8023b80 <_scanf_float+0x370>
 8023b7c:	2000      	movs	r0, #0
 8023b7e:	e68b      	b.n	8023898 <_scanf_float+0x88>
 8023b80:	7032      	strb	r2, [r6, #0]
 8023b82:	6823      	ldr	r3, [r4, #0]
 8023b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8023b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023b8c:	d11a      	bne.n	8023bc4 <_scanf_float+0x3b4>
 8023b8e:	9b02      	ldr	r3, [sp, #8]
 8023b90:	454b      	cmp	r3, r9
 8023b92:	eba3 0209 	sub.w	r2, r3, r9
 8023b96:	d121      	bne.n	8023bdc <_scanf_float+0x3cc>
 8023b98:	9901      	ldr	r1, [sp, #4]
 8023b9a:	2200      	movs	r2, #0
 8023b9c:	4640      	mov	r0, r8
 8023b9e:	f002 fc4d 	bl	802643c <_strtod_r>
 8023ba2:	9b03      	ldr	r3, [sp, #12]
 8023ba4:	6821      	ldr	r1, [r4, #0]
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	f011 0f02 	tst.w	r1, #2
 8023bac:	f103 0204 	add.w	r2, r3, #4
 8023bb0:	d01f      	beq.n	8023bf2 <_scanf_float+0x3e2>
 8023bb2:	9903      	ldr	r1, [sp, #12]
 8023bb4:	600a      	str	r2, [r1, #0]
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	ed83 0b00 	vstr	d0, [r3]
 8023bbc:	68e3      	ldr	r3, [r4, #12]
 8023bbe:	3301      	adds	r3, #1
 8023bc0:	60e3      	str	r3, [r4, #12]
 8023bc2:	e7db      	b.n	8023b7c <_scanf_float+0x36c>
 8023bc4:	9b04      	ldr	r3, [sp, #16]
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	d0e6      	beq.n	8023b98 <_scanf_float+0x388>
 8023bca:	9905      	ldr	r1, [sp, #20]
 8023bcc:	230a      	movs	r3, #10
 8023bce:	3101      	adds	r1, #1
 8023bd0:	4640      	mov	r0, r8
 8023bd2:	f002 fcb3 	bl	802653c <_strtol_r>
 8023bd6:	9b04      	ldr	r3, [sp, #16]
 8023bd8:	9e05      	ldr	r6, [sp, #20]
 8023bda:	1ac2      	subs	r2, r0, r3
 8023bdc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8023be0:	429e      	cmp	r6, r3
 8023be2:	bf28      	it	cs
 8023be4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8023be8:	490d      	ldr	r1, [pc, #52]	@ (8023c20 <_scanf_float+0x410>)
 8023bea:	4630      	mov	r0, r6
 8023bec:	f000 f960 	bl	8023eb0 <siprintf>
 8023bf0:	e7d2      	b.n	8023b98 <_scanf_float+0x388>
 8023bf2:	f011 0f04 	tst.w	r1, #4
 8023bf6:	9903      	ldr	r1, [sp, #12]
 8023bf8:	600a      	str	r2, [r1, #0]
 8023bfa:	d1dc      	bne.n	8023bb6 <_scanf_float+0x3a6>
 8023bfc:	eeb4 0b40 	vcmp.f64	d0, d0
 8023c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c04:	681d      	ldr	r5, [r3, #0]
 8023c06:	d705      	bvc.n	8023c14 <_scanf_float+0x404>
 8023c08:	4806      	ldr	r0, [pc, #24]	@ (8023c24 <_scanf_float+0x414>)
 8023c0a:	f000 fb2b 	bl	8024264 <nanf>
 8023c0e:	ed85 0a00 	vstr	s0, [r5]
 8023c12:	e7d3      	b.n	8023bbc <_scanf_float+0x3ac>
 8023c14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8023c18:	e7f9      	b.n	8023c0e <_scanf_float+0x3fe>
 8023c1a:	f04f 0900 	mov.w	r9, #0
 8023c1e:	e630      	b.n	8023882 <_scanf_float+0x72>
 8023c20:	08029dbc 	.word	0x08029dbc
 8023c24:	08029d87 	.word	0x08029d87

08023c28 <std>:
 8023c28:	2300      	movs	r3, #0
 8023c2a:	b510      	push	{r4, lr}
 8023c2c:	4604      	mov	r4, r0
 8023c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8023c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023c36:	6083      	str	r3, [r0, #8]
 8023c38:	8181      	strh	r1, [r0, #12]
 8023c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8023c3c:	81c2      	strh	r2, [r0, #14]
 8023c3e:	6183      	str	r3, [r0, #24]
 8023c40:	4619      	mov	r1, r3
 8023c42:	2208      	movs	r2, #8
 8023c44:	305c      	adds	r0, #92	@ 0x5c
 8023c46:	f000 fa2b 	bl	80240a0 <memset>
 8023c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8023c80 <std+0x58>)
 8023c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8023c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8023c84 <std+0x5c>)
 8023c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023c52:	4b0d      	ldr	r3, [pc, #52]	@ (8023c88 <std+0x60>)
 8023c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023c56:	4b0d      	ldr	r3, [pc, #52]	@ (8023c8c <std+0x64>)
 8023c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8023c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8023c90 <std+0x68>)
 8023c5c:	6224      	str	r4, [r4, #32]
 8023c5e:	429c      	cmp	r4, r3
 8023c60:	d006      	beq.n	8023c70 <std+0x48>
 8023c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023c66:	4294      	cmp	r4, r2
 8023c68:	d002      	beq.n	8023c70 <std+0x48>
 8023c6a:	33d0      	adds	r3, #208	@ 0xd0
 8023c6c:	429c      	cmp	r4, r3
 8023c6e:	d105      	bne.n	8023c7c <std+0x54>
 8023c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c78:	f000 bae2 	b.w	8024240 <__retarget_lock_init_recursive>
 8023c7c:	bd10      	pop	{r4, pc}
 8023c7e:	bf00      	nop
 8023c80:	08023ef1 	.word	0x08023ef1
 8023c84:	08023f13 	.word	0x08023f13
 8023c88:	08023f4b 	.word	0x08023f4b
 8023c8c:	08023f6f 	.word	0x08023f6f
 8023c90:	2400b4e0 	.word	0x2400b4e0

08023c94 <stdio_exit_handler>:
 8023c94:	4a02      	ldr	r2, [pc, #8]	@ (8023ca0 <stdio_exit_handler+0xc>)
 8023c96:	4903      	ldr	r1, [pc, #12]	@ (8023ca4 <stdio_exit_handler+0x10>)
 8023c98:	4803      	ldr	r0, [pc, #12]	@ (8023ca8 <stdio_exit_handler+0x14>)
 8023c9a:	f000 b87b 	b.w	8023d94 <_fwalk_sglue>
 8023c9e:	bf00      	nop
 8023ca0:	240000b0 	.word	0x240000b0
 8023ca4:	08026b7d 	.word	0x08026b7d
 8023ca8:	240000c0 	.word	0x240000c0

08023cac <cleanup_stdio>:
 8023cac:	6841      	ldr	r1, [r0, #4]
 8023cae:	4b0c      	ldr	r3, [pc, #48]	@ (8023ce0 <cleanup_stdio+0x34>)
 8023cb0:	4299      	cmp	r1, r3
 8023cb2:	b510      	push	{r4, lr}
 8023cb4:	4604      	mov	r4, r0
 8023cb6:	d001      	beq.n	8023cbc <cleanup_stdio+0x10>
 8023cb8:	f002 ff60 	bl	8026b7c <_fflush_r>
 8023cbc:	68a1      	ldr	r1, [r4, #8]
 8023cbe:	4b09      	ldr	r3, [pc, #36]	@ (8023ce4 <cleanup_stdio+0x38>)
 8023cc0:	4299      	cmp	r1, r3
 8023cc2:	d002      	beq.n	8023cca <cleanup_stdio+0x1e>
 8023cc4:	4620      	mov	r0, r4
 8023cc6:	f002 ff59 	bl	8026b7c <_fflush_r>
 8023cca:	68e1      	ldr	r1, [r4, #12]
 8023ccc:	4b06      	ldr	r3, [pc, #24]	@ (8023ce8 <cleanup_stdio+0x3c>)
 8023cce:	4299      	cmp	r1, r3
 8023cd0:	d004      	beq.n	8023cdc <cleanup_stdio+0x30>
 8023cd2:	4620      	mov	r0, r4
 8023cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023cd8:	f002 bf50 	b.w	8026b7c <_fflush_r>
 8023cdc:	bd10      	pop	{r4, pc}
 8023cde:	bf00      	nop
 8023ce0:	2400b4e0 	.word	0x2400b4e0
 8023ce4:	2400b548 	.word	0x2400b548
 8023ce8:	2400b5b0 	.word	0x2400b5b0

08023cec <global_stdio_init.part.0>:
 8023cec:	b510      	push	{r4, lr}
 8023cee:	4b0b      	ldr	r3, [pc, #44]	@ (8023d1c <global_stdio_init.part.0+0x30>)
 8023cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8023d20 <global_stdio_init.part.0+0x34>)
 8023cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8023d24 <global_stdio_init.part.0+0x38>)
 8023cf4:	601a      	str	r2, [r3, #0]
 8023cf6:	4620      	mov	r0, r4
 8023cf8:	2200      	movs	r2, #0
 8023cfa:	2104      	movs	r1, #4
 8023cfc:	f7ff ff94 	bl	8023c28 <std>
 8023d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023d04:	2201      	movs	r2, #1
 8023d06:	2109      	movs	r1, #9
 8023d08:	f7ff ff8e 	bl	8023c28 <std>
 8023d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023d10:	2202      	movs	r2, #2
 8023d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d16:	2112      	movs	r1, #18
 8023d18:	f7ff bf86 	b.w	8023c28 <std>
 8023d1c:	2400b618 	.word	0x2400b618
 8023d20:	2400b4e0 	.word	0x2400b4e0
 8023d24:	08023c95 	.word	0x08023c95

08023d28 <__sfp_lock_acquire>:
 8023d28:	4801      	ldr	r0, [pc, #4]	@ (8023d30 <__sfp_lock_acquire+0x8>)
 8023d2a:	f000 ba8a 	b.w	8024242 <__retarget_lock_acquire_recursive>
 8023d2e:	bf00      	nop
 8023d30:	2400b622 	.word	0x2400b622

08023d34 <__sfp_lock_release>:
 8023d34:	4801      	ldr	r0, [pc, #4]	@ (8023d3c <__sfp_lock_release+0x8>)
 8023d36:	f000 ba85 	b.w	8024244 <__retarget_lock_release_recursive>
 8023d3a:	bf00      	nop
 8023d3c:	2400b622 	.word	0x2400b622

08023d40 <__sinit>:
 8023d40:	b510      	push	{r4, lr}
 8023d42:	4604      	mov	r4, r0
 8023d44:	f7ff fff0 	bl	8023d28 <__sfp_lock_acquire>
 8023d48:	6a23      	ldr	r3, [r4, #32]
 8023d4a:	b11b      	cbz	r3, 8023d54 <__sinit+0x14>
 8023d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d50:	f7ff bff0 	b.w	8023d34 <__sfp_lock_release>
 8023d54:	4b04      	ldr	r3, [pc, #16]	@ (8023d68 <__sinit+0x28>)
 8023d56:	6223      	str	r3, [r4, #32]
 8023d58:	4b04      	ldr	r3, [pc, #16]	@ (8023d6c <__sinit+0x2c>)
 8023d5a:	681b      	ldr	r3, [r3, #0]
 8023d5c:	2b00      	cmp	r3, #0
 8023d5e:	d1f5      	bne.n	8023d4c <__sinit+0xc>
 8023d60:	f7ff ffc4 	bl	8023cec <global_stdio_init.part.0>
 8023d64:	e7f2      	b.n	8023d4c <__sinit+0xc>
 8023d66:	bf00      	nop
 8023d68:	08023cad 	.word	0x08023cad
 8023d6c:	2400b618 	.word	0x2400b618

08023d70 <fiprintf>:
 8023d70:	b40e      	push	{r1, r2, r3}
 8023d72:	b503      	push	{r0, r1, lr}
 8023d74:	4601      	mov	r1, r0
 8023d76:	ab03      	add	r3, sp, #12
 8023d78:	4805      	ldr	r0, [pc, #20]	@ (8023d90 <fiprintf+0x20>)
 8023d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8023d7e:	6800      	ldr	r0, [r0, #0]
 8023d80:	9301      	str	r3, [sp, #4]
 8023d82:	f002 fd5f 	bl	8026844 <_vfiprintf_r>
 8023d86:	b002      	add	sp, #8
 8023d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8023d8c:	b003      	add	sp, #12
 8023d8e:	4770      	bx	lr
 8023d90:	240000bc 	.word	0x240000bc

08023d94 <_fwalk_sglue>:
 8023d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d98:	4607      	mov	r7, r0
 8023d9a:	4688      	mov	r8, r1
 8023d9c:	4614      	mov	r4, r2
 8023d9e:	2600      	movs	r6, #0
 8023da0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023da4:	f1b9 0901 	subs.w	r9, r9, #1
 8023da8:	d505      	bpl.n	8023db6 <_fwalk_sglue+0x22>
 8023daa:	6824      	ldr	r4, [r4, #0]
 8023dac:	2c00      	cmp	r4, #0
 8023dae:	d1f7      	bne.n	8023da0 <_fwalk_sglue+0xc>
 8023db0:	4630      	mov	r0, r6
 8023db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023db6:	89ab      	ldrh	r3, [r5, #12]
 8023db8:	2b01      	cmp	r3, #1
 8023dba:	d907      	bls.n	8023dcc <_fwalk_sglue+0x38>
 8023dbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023dc0:	3301      	adds	r3, #1
 8023dc2:	d003      	beq.n	8023dcc <_fwalk_sglue+0x38>
 8023dc4:	4629      	mov	r1, r5
 8023dc6:	4638      	mov	r0, r7
 8023dc8:	47c0      	blx	r8
 8023dca:	4306      	orrs	r6, r0
 8023dcc:	3568      	adds	r5, #104	@ 0x68
 8023dce:	e7e9      	b.n	8023da4 <_fwalk_sglue+0x10>

08023dd0 <iprintf>:
 8023dd0:	b40f      	push	{r0, r1, r2, r3}
 8023dd2:	b507      	push	{r0, r1, r2, lr}
 8023dd4:	4906      	ldr	r1, [pc, #24]	@ (8023df0 <iprintf+0x20>)
 8023dd6:	ab04      	add	r3, sp, #16
 8023dd8:	6808      	ldr	r0, [r1, #0]
 8023dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8023dde:	6881      	ldr	r1, [r0, #8]
 8023de0:	9301      	str	r3, [sp, #4]
 8023de2:	f002 fd2f 	bl	8026844 <_vfiprintf_r>
 8023de6:	b003      	add	sp, #12
 8023de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8023dec:	b004      	add	sp, #16
 8023dee:	4770      	bx	lr
 8023df0:	240000bc 	.word	0x240000bc

08023df4 <_puts_r>:
 8023df4:	6a03      	ldr	r3, [r0, #32]
 8023df6:	b570      	push	{r4, r5, r6, lr}
 8023df8:	6884      	ldr	r4, [r0, #8]
 8023dfa:	4605      	mov	r5, r0
 8023dfc:	460e      	mov	r6, r1
 8023dfe:	b90b      	cbnz	r3, 8023e04 <_puts_r+0x10>
 8023e00:	f7ff ff9e 	bl	8023d40 <__sinit>
 8023e04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023e06:	07db      	lsls	r3, r3, #31
 8023e08:	d405      	bmi.n	8023e16 <_puts_r+0x22>
 8023e0a:	89a3      	ldrh	r3, [r4, #12]
 8023e0c:	0598      	lsls	r0, r3, #22
 8023e0e:	d402      	bmi.n	8023e16 <_puts_r+0x22>
 8023e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e12:	f000 fa16 	bl	8024242 <__retarget_lock_acquire_recursive>
 8023e16:	89a3      	ldrh	r3, [r4, #12]
 8023e18:	0719      	lsls	r1, r3, #28
 8023e1a:	d502      	bpl.n	8023e22 <_puts_r+0x2e>
 8023e1c:	6923      	ldr	r3, [r4, #16]
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d135      	bne.n	8023e8e <_puts_r+0x9a>
 8023e22:	4621      	mov	r1, r4
 8023e24:	4628      	mov	r0, r5
 8023e26:	f000 f8e5 	bl	8023ff4 <__swsetup_r>
 8023e2a:	b380      	cbz	r0, 8023e8e <_puts_r+0x9a>
 8023e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8023e30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023e32:	07da      	lsls	r2, r3, #31
 8023e34:	d405      	bmi.n	8023e42 <_puts_r+0x4e>
 8023e36:	89a3      	ldrh	r3, [r4, #12]
 8023e38:	059b      	lsls	r3, r3, #22
 8023e3a:	d402      	bmi.n	8023e42 <_puts_r+0x4e>
 8023e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e3e:	f000 fa01 	bl	8024244 <__retarget_lock_release_recursive>
 8023e42:	4628      	mov	r0, r5
 8023e44:	bd70      	pop	{r4, r5, r6, pc}
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	da04      	bge.n	8023e54 <_puts_r+0x60>
 8023e4a:	69a2      	ldr	r2, [r4, #24]
 8023e4c:	429a      	cmp	r2, r3
 8023e4e:	dc17      	bgt.n	8023e80 <_puts_r+0x8c>
 8023e50:	290a      	cmp	r1, #10
 8023e52:	d015      	beq.n	8023e80 <_puts_r+0x8c>
 8023e54:	6823      	ldr	r3, [r4, #0]
 8023e56:	1c5a      	adds	r2, r3, #1
 8023e58:	6022      	str	r2, [r4, #0]
 8023e5a:	7019      	strb	r1, [r3, #0]
 8023e5c:	68a3      	ldr	r3, [r4, #8]
 8023e5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8023e62:	3b01      	subs	r3, #1
 8023e64:	60a3      	str	r3, [r4, #8]
 8023e66:	2900      	cmp	r1, #0
 8023e68:	d1ed      	bne.n	8023e46 <_puts_r+0x52>
 8023e6a:	2b00      	cmp	r3, #0
 8023e6c:	da11      	bge.n	8023e92 <_puts_r+0x9e>
 8023e6e:	4622      	mov	r2, r4
 8023e70:	210a      	movs	r1, #10
 8023e72:	4628      	mov	r0, r5
 8023e74:	f000 f87f 	bl	8023f76 <__swbuf_r>
 8023e78:	3001      	adds	r0, #1
 8023e7a:	d0d7      	beq.n	8023e2c <_puts_r+0x38>
 8023e7c:	250a      	movs	r5, #10
 8023e7e:	e7d7      	b.n	8023e30 <_puts_r+0x3c>
 8023e80:	4622      	mov	r2, r4
 8023e82:	4628      	mov	r0, r5
 8023e84:	f000 f877 	bl	8023f76 <__swbuf_r>
 8023e88:	3001      	adds	r0, #1
 8023e8a:	d1e7      	bne.n	8023e5c <_puts_r+0x68>
 8023e8c:	e7ce      	b.n	8023e2c <_puts_r+0x38>
 8023e8e:	3e01      	subs	r6, #1
 8023e90:	e7e4      	b.n	8023e5c <_puts_r+0x68>
 8023e92:	6823      	ldr	r3, [r4, #0]
 8023e94:	1c5a      	adds	r2, r3, #1
 8023e96:	6022      	str	r2, [r4, #0]
 8023e98:	220a      	movs	r2, #10
 8023e9a:	701a      	strb	r2, [r3, #0]
 8023e9c:	e7ee      	b.n	8023e7c <_puts_r+0x88>
	...

08023ea0 <puts>:
 8023ea0:	4b02      	ldr	r3, [pc, #8]	@ (8023eac <puts+0xc>)
 8023ea2:	4601      	mov	r1, r0
 8023ea4:	6818      	ldr	r0, [r3, #0]
 8023ea6:	f7ff bfa5 	b.w	8023df4 <_puts_r>
 8023eaa:	bf00      	nop
 8023eac:	240000bc 	.word	0x240000bc

08023eb0 <siprintf>:
 8023eb0:	b40e      	push	{r1, r2, r3}
 8023eb2:	b500      	push	{lr}
 8023eb4:	b09c      	sub	sp, #112	@ 0x70
 8023eb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8023eb8:	9002      	str	r0, [sp, #8]
 8023eba:	9006      	str	r0, [sp, #24]
 8023ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8023ec0:	4809      	ldr	r0, [pc, #36]	@ (8023ee8 <siprintf+0x38>)
 8023ec2:	9107      	str	r1, [sp, #28]
 8023ec4:	9104      	str	r1, [sp, #16]
 8023ec6:	4909      	ldr	r1, [pc, #36]	@ (8023eec <siprintf+0x3c>)
 8023ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8023ecc:	9105      	str	r1, [sp, #20]
 8023ece:	6800      	ldr	r0, [r0, #0]
 8023ed0:	9301      	str	r3, [sp, #4]
 8023ed2:	a902      	add	r1, sp, #8
 8023ed4:	f002 fb90 	bl	80265f8 <_svfiprintf_r>
 8023ed8:	9b02      	ldr	r3, [sp, #8]
 8023eda:	2200      	movs	r2, #0
 8023edc:	701a      	strb	r2, [r3, #0]
 8023ede:	b01c      	add	sp, #112	@ 0x70
 8023ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8023ee4:	b003      	add	sp, #12
 8023ee6:	4770      	bx	lr
 8023ee8:	240000bc 	.word	0x240000bc
 8023eec:	ffff0208 	.word	0xffff0208

08023ef0 <__sread>:
 8023ef0:	b510      	push	{r4, lr}
 8023ef2:	460c      	mov	r4, r1
 8023ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ef8:	f000 f930 	bl	802415c <_read_r>
 8023efc:	2800      	cmp	r0, #0
 8023efe:	bfab      	itete	ge
 8023f00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023f02:	89a3      	ldrhlt	r3, [r4, #12]
 8023f04:	181b      	addge	r3, r3, r0
 8023f06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023f0a:	bfac      	ite	ge
 8023f0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023f0e:	81a3      	strhlt	r3, [r4, #12]
 8023f10:	bd10      	pop	{r4, pc}

08023f12 <__swrite>:
 8023f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f16:	461f      	mov	r7, r3
 8023f18:	898b      	ldrh	r3, [r1, #12]
 8023f1a:	05db      	lsls	r3, r3, #23
 8023f1c:	4605      	mov	r5, r0
 8023f1e:	460c      	mov	r4, r1
 8023f20:	4616      	mov	r6, r2
 8023f22:	d505      	bpl.n	8023f30 <__swrite+0x1e>
 8023f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f28:	2302      	movs	r3, #2
 8023f2a:	2200      	movs	r2, #0
 8023f2c:	f000 f904 	bl	8024138 <_lseek_r>
 8023f30:	89a3      	ldrh	r3, [r4, #12]
 8023f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023f3a:	81a3      	strh	r3, [r4, #12]
 8023f3c:	4632      	mov	r2, r6
 8023f3e:	463b      	mov	r3, r7
 8023f40:	4628      	mov	r0, r5
 8023f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023f46:	f000 b93f 	b.w	80241c8 <_write_r>

08023f4a <__sseek>:
 8023f4a:	b510      	push	{r4, lr}
 8023f4c:	460c      	mov	r4, r1
 8023f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f52:	f000 f8f1 	bl	8024138 <_lseek_r>
 8023f56:	1c43      	adds	r3, r0, #1
 8023f58:	89a3      	ldrh	r3, [r4, #12]
 8023f5a:	bf15      	itete	ne
 8023f5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023f5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023f62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023f66:	81a3      	strheq	r3, [r4, #12]
 8023f68:	bf18      	it	ne
 8023f6a:	81a3      	strhne	r3, [r4, #12]
 8023f6c:	bd10      	pop	{r4, pc}

08023f6e <__sclose>:
 8023f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f72:	f000 b8d1 	b.w	8024118 <_close_r>

08023f76 <__swbuf_r>:
 8023f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f78:	460e      	mov	r6, r1
 8023f7a:	4614      	mov	r4, r2
 8023f7c:	4605      	mov	r5, r0
 8023f7e:	b118      	cbz	r0, 8023f88 <__swbuf_r+0x12>
 8023f80:	6a03      	ldr	r3, [r0, #32]
 8023f82:	b90b      	cbnz	r3, 8023f88 <__swbuf_r+0x12>
 8023f84:	f7ff fedc 	bl	8023d40 <__sinit>
 8023f88:	69a3      	ldr	r3, [r4, #24]
 8023f8a:	60a3      	str	r3, [r4, #8]
 8023f8c:	89a3      	ldrh	r3, [r4, #12]
 8023f8e:	071a      	lsls	r2, r3, #28
 8023f90:	d501      	bpl.n	8023f96 <__swbuf_r+0x20>
 8023f92:	6923      	ldr	r3, [r4, #16]
 8023f94:	b943      	cbnz	r3, 8023fa8 <__swbuf_r+0x32>
 8023f96:	4621      	mov	r1, r4
 8023f98:	4628      	mov	r0, r5
 8023f9a:	f000 f82b 	bl	8023ff4 <__swsetup_r>
 8023f9e:	b118      	cbz	r0, 8023fa8 <__swbuf_r+0x32>
 8023fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8023fa4:	4638      	mov	r0, r7
 8023fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023fa8:	6823      	ldr	r3, [r4, #0]
 8023faa:	6922      	ldr	r2, [r4, #16]
 8023fac:	1a98      	subs	r0, r3, r2
 8023fae:	6963      	ldr	r3, [r4, #20]
 8023fb0:	b2f6      	uxtb	r6, r6
 8023fb2:	4283      	cmp	r3, r0
 8023fb4:	4637      	mov	r7, r6
 8023fb6:	dc05      	bgt.n	8023fc4 <__swbuf_r+0x4e>
 8023fb8:	4621      	mov	r1, r4
 8023fba:	4628      	mov	r0, r5
 8023fbc:	f002 fdde 	bl	8026b7c <_fflush_r>
 8023fc0:	2800      	cmp	r0, #0
 8023fc2:	d1ed      	bne.n	8023fa0 <__swbuf_r+0x2a>
 8023fc4:	68a3      	ldr	r3, [r4, #8]
 8023fc6:	3b01      	subs	r3, #1
 8023fc8:	60a3      	str	r3, [r4, #8]
 8023fca:	6823      	ldr	r3, [r4, #0]
 8023fcc:	1c5a      	adds	r2, r3, #1
 8023fce:	6022      	str	r2, [r4, #0]
 8023fd0:	701e      	strb	r6, [r3, #0]
 8023fd2:	6962      	ldr	r2, [r4, #20]
 8023fd4:	1c43      	adds	r3, r0, #1
 8023fd6:	429a      	cmp	r2, r3
 8023fd8:	d004      	beq.n	8023fe4 <__swbuf_r+0x6e>
 8023fda:	89a3      	ldrh	r3, [r4, #12]
 8023fdc:	07db      	lsls	r3, r3, #31
 8023fde:	d5e1      	bpl.n	8023fa4 <__swbuf_r+0x2e>
 8023fe0:	2e0a      	cmp	r6, #10
 8023fe2:	d1df      	bne.n	8023fa4 <__swbuf_r+0x2e>
 8023fe4:	4621      	mov	r1, r4
 8023fe6:	4628      	mov	r0, r5
 8023fe8:	f002 fdc8 	bl	8026b7c <_fflush_r>
 8023fec:	2800      	cmp	r0, #0
 8023fee:	d0d9      	beq.n	8023fa4 <__swbuf_r+0x2e>
 8023ff0:	e7d6      	b.n	8023fa0 <__swbuf_r+0x2a>
	...

08023ff4 <__swsetup_r>:
 8023ff4:	b538      	push	{r3, r4, r5, lr}
 8023ff6:	4b29      	ldr	r3, [pc, #164]	@ (802409c <__swsetup_r+0xa8>)
 8023ff8:	4605      	mov	r5, r0
 8023ffa:	6818      	ldr	r0, [r3, #0]
 8023ffc:	460c      	mov	r4, r1
 8023ffe:	b118      	cbz	r0, 8024008 <__swsetup_r+0x14>
 8024000:	6a03      	ldr	r3, [r0, #32]
 8024002:	b90b      	cbnz	r3, 8024008 <__swsetup_r+0x14>
 8024004:	f7ff fe9c 	bl	8023d40 <__sinit>
 8024008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802400c:	0719      	lsls	r1, r3, #28
 802400e:	d422      	bmi.n	8024056 <__swsetup_r+0x62>
 8024010:	06da      	lsls	r2, r3, #27
 8024012:	d407      	bmi.n	8024024 <__swsetup_r+0x30>
 8024014:	2209      	movs	r2, #9
 8024016:	602a      	str	r2, [r5, #0]
 8024018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802401c:	81a3      	strh	r3, [r4, #12]
 802401e:	f04f 30ff 	mov.w	r0, #4294967295
 8024022:	e033      	b.n	802408c <__swsetup_r+0x98>
 8024024:	0758      	lsls	r0, r3, #29
 8024026:	d512      	bpl.n	802404e <__swsetup_r+0x5a>
 8024028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802402a:	b141      	cbz	r1, 802403e <__swsetup_r+0x4a>
 802402c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024030:	4299      	cmp	r1, r3
 8024032:	d002      	beq.n	802403a <__swsetup_r+0x46>
 8024034:	4628      	mov	r0, r5
 8024036:	f000 ff55 	bl	8024ee4 <_free_r>
 802403a:	2300      	movs	r3, #0
 802403c:	6363      	str	r3, [r4, #52]	@ 0x34
 802403e:	89a3      	ldrh	r3, [r4, #12]
 8024040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024044:	81a3      	strh	r3, [r4, #12]
 8024046:	2300      	movs	r3, #0
 8024048:	6063      	str	r3, [r4, #4]
 802404a:	6923      	ldr	r3, [r4, #16]
 802404c:	6023      	str	r3, [r4, #0]
 802404e:	89a3      	ldrh	r3, [r4, #12]
 8024050:	f043 0308 	orr.w	r3, r3, #8
 8024054:	81a3      	strh	r3, [r4, #12]
 8024056:	6923      	ldr	r3, [r4, #16]
 8024058:	b94b      	cbnz	r3, 802406e <__swsetup_r+0x7a>
 802405a:	89a3      	ldrh	r3, [r4, #12]
 802405c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024064:	d003      	beq.n	802406e <__swsetup_r+0x7a>
 8024066:	4621      	mov	r1, r4
 8024068:	4628      	mov	r0, r5
 802406a:	f002 fdd5 	bl	8026c18 <__smakebuf_r>
 802406e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024072:	f013 0201 	ands.w	r2, r3, #1
 8024076:	d00a      	beq.n	802408e <__swsetup_r+0x9a>
 8024078:	2200      	movs	r2, #0
 802407a:	60a2      	str	r2, [r4, #8]
 802407c:	6962      	ldr	r2, [r4, #20]
 802407e:	4252      	negs	r2, r2
 8024080:	61a2      	str	r2, [r4, #24]
 8024082:	6922      	ldr	r2, [r4, #16]
 8024084:	b942      	cbnz	r2, 8024098 <__swsetup_r+0xa4>
 8024086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802408a:	d1c5      	bne.n	8024018 <__swsetup_r+0x24>
 802408c:	bd38      	pop	{r3, r4, r5, pc}
 802408e:	0799      	lsls	r1, r3, #30
 8024090:	bf58      	it	pl
 8024092:	6962      	ldrpl	r2, [r4, #20]
 8024094:	60a2      	str	r2, [r4, #8]
 8024096:	e7f4      	b.n	8024082 <__swsetup_r+0x8e>
 8024098:	2000      	movs	r0, #0
 802409a:	e7f7      	b.n	802408c <__swsetup_r+0x98>
 802409c:	240000bc 	.word	0x240000bc

080240a0 <memset>:
 80240a0:	4402      	add	r2, r0
 80240a2:	4603      	mov	r3, r0
 80240a4:	4293      	cmp	r3, r2
 80240a6:	d100      	bne.n	80240aa <memset+0xa>
 80240a8:	4770      	bx	lr
 80240aa:	f803 1b01 	strb.w	r1, [r3], #1
 80240ae:	e7f9      	b.n	80240a4 <memset+0x4>

080240b0 <_raise_r>:
 80240b0:	291f      	cmp	r1, #31
 80240b2:	b538      	push	{r3, r4, r5, lr}
 80240b4:	4605      	mov	r5, r0
 80240b6:	460c      	mov	r4, r1
 80240b8:	d904      	bls.n	80240c4 <_raise_r+0x14>
 80240ba:	2316      	movs	r3, #22
 80240bc:	6003      	str	r3, [r0, #0]
 80240be:	f04f 30ff 	mov.w	r0, #4294967295
 80240c2:	bd38      	pop	{r3, r4, r5, pc}
 80240c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80240c6:	b112      	cbz	r2, 80240ce <_raise_r+0x1e>
 80240c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80240cc:	b94b      	cbnz	r3, 80240e2 <_raise_r+0x32>
 80240ce:	4628      	mov	r0, r5
 80240d0:	f000 f868 	bl	80241a4 <_getpid_r>
 80240d4:	4622      	mov	r2, r4
 80240d6:	4601      	mov	r1, r0
 80240d8:	4628      	mov	r0, r5
 80240da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80240de:	f000 b84f 	b.w	8024180 <_kill_r>
 80240e2:	2b01      	cmp	r3, #1
 80240e4:	d00a      	beq.n	80240fc <_raise_r+0x4c>
 80240e6:	1c59      	adds	r1, r3, #1
 80240e8:	d103      	bne.n	80240f2 <_raise_r+0x42>
 80240ea:	2316      	movs	r3, #22
 80240ec:	6003      	str	r3, [r0, #0]
 80240ee:	2001      	movs	r0, #1
 80240f0:	e7e7      	b.n	80240c2 <_raise_r+0x12>
 80240f2:	2100      	movs	r1, #0
 80240f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80240f8:	4620      	mov	r0, r4
 80240fa:	4798      	blx	r3
 80240fc:	2000      	movs	r0, #0
 80240fe:	e7e0      	b.n	80240c2 <_raise_r+0x12>

08024100 <raise>:
 8024100:	4b02      	ldr	r3, [pc, #8]	@ (802410c <raise+0xc>)
 8024102:	4601      	mov	r1, r0
 8024104:	6818      	ldr	r0, [r3, #0]
 8024106:	f7ff bfd3 	b.w	80240b0 <_raise_r>
 802410a:	bf00      	nop
 802410c:	240000bc 	.word	0x240000bc

08024110 <_localeconv_r>:
 8024110:	4800      	ldr	r0, [pc, #0]	@ (8024114 <_localeconv_r+0x4>)
 8024112:	4770      	bx	lr
 8024114:	24000200 	.word	0x24000200

08024118 <_close_r>:
 8024118:	b538      	push	{r3, r4, r5, lr}
 802411a:	4d06      	ldr	r5, [pc, #24]	@ (8024134 <_close_r+0x1c>)
 802411c:	2300      	movs	r3, #0
 802411e:	4604      	mov	r4, r0
 8024120:	4608      	mov	r0, r1
 8024122:	602b      	str	r3, [r5, #0]
 8024124:	f7dd fc60 	bl	80019e8 <_close>
 8024128:	1c43      	adds	r3, r0, #1
 802412a:	d102      	bne.n	8024132 <_close_r+0x1a>
 802412c:	682b      	ldr	r3, [r5, #0]
 802412e:	b103      	cbz	r3, 8024132 <_close_r+0x1a>
 8024130:	6023      	str	r3, [r4, #0]
 8024132:	bd38      	pop	{r3, r4, r5, pc}
 8024134:	2400b61c 	.word	0x2400b61c

08024138 <_lseek_r>:
 8024138:	b538      	push	{r3, r4, r5, lr}
 802413a:	4d07      	ldr	r5, [pc, #28]	@ (8024158 <_lseek_r+0x20>)
 802413c:	4604      	mov	r4, r0
 802413e:	4608      	mov	r0, r1
 8024140:	4611      	mov	r1, r2
 8024142:	2200      	movs	r2, #0
 8024144:	602a      	str	r2, [r5, #0]
 8024146:	461a      	mov	r2, r3
 8024148:	f7dd fc5a 	bl	8001a00 <_lseek>
 802414c:	1c43      	adds	r3, r0, #1
 802414e:	d102      	bne.n	8024156 <_lseek_r+0x1e>
 8024150:	682b      	ldr	r3, [r5, #0]
 8024152:	b103      	cbz	r3, 8024156 <_lseek_r+0x1e>
 8024154:	6023      	str	r3, [r4, #0]
 8024156:	bd38      	pop	{r3, r4, r5, pc}
 8024158:	2400b61c 	.word	0x2400b61c

0802415c <_read_r>:
 802415c:	b538      	push	{r3, r4, r5, lr}
 802415e:	4d07      	ldr	r5, [pc, #28]	@ (802417c <_read_r+0x20>)
 8024160:	4604      	mov	r4, r0
 8024162:	4608      	mov	r0, r1
 8024164:	4611      	mov	r1, r2
 8024166:	2200      	movs	r2, #0
 8024168:	602a      	str	r2, [r5, #0]
 802416a:	461a      	mov	r2, r3
 802416c:	f7dd fc20 	bl	80019b0 <_read>
 8024170:	1c43      	adds	r3, r0, #1
 8024172:	d102      	bne.n	802417a <_read_r+0x1e>
 8024174:	682b      	ldr	r3, [r5, #0]
 8024176:	b103      	cbz	r3, 802417a <_read_r+0x1e>
 8024178:	6023      	str	r3, [r4, #0]
 802417a:	bd38      	pop	{r3, r4, r5, pc}
 802417c:	2400b61c 	.word	0x2400b61c

08024180 <_kill_r>:
 8024180:	b538      	push	{r3, r4, r5, lr}
 8024182:	4d07      	ldr	r5, [pc, #28]	@ (80241a0 <_kill_r+0x20>)
 8024184:	2300      	movs	r3, #0
 8024186:	4604      	mov	r4, r0
 8024188:	4608      	mov	r0, r1
 802418a:	4611      	mov	r1, r2
 802418c:	602b      	str	r3, [r5, #0]
 802418e:	f7dd fbff 	bl	8001990 <_kill>
 8024192:	1c43      	adds	r3, r0, #1
 8024194:	d102      	bne.n	802419c <_kill_r+0x1c>
 8024196:	682b      	ldr	r3, [r5, #0]
 8024198:	b103      	cbz	r3, 802419c <_kill_r+0x1c>
 802419a:	6023      	str	r3, [r4, #0]
 802419c:	bd38      	pop	{r3, r4, r5, pc}
 802419e:	bf00      	nop
 80241a0:	2400b61c 	.word	0x2400b61c

080241a4 <_getpid_r>:
 80241a4:	f7dd bbf2 	b.w	800198c <_getpid>

080241a8 <_sbrk_r>:
 80241a8:	b538      	push	{r3, r4, r5, lr}
 80241aa:	4d06      	ldr	r5, [pc, #24]	@ (80241c4 <_sbrk_r+0x1c>)
 80241ac:	2300      	movs	r3, #0
 80241ae:	4604      	mov	r4, r0
 80241b0:	4608      	mov	r0, r1
 80241b2:	602b      	str	r3, [r5, #0]
 80241b4:	f7dd fc26 	bl	8001a04 <_sbrk>
 80241b8:	1c43      	adds	r3, r0, #1
 80241ba:	d102      	bne.n	80241c2 <_sbrk_r+0x1a>
 80241bc:	682b      	ldr	r3, [r5, #0]
 80241be:	b103      	cbz	r3, 80241c2 <_sbrk_r+0x1a>
 80241c0:	6023      	str	r3, [r4, #0]
 80241c2:	bd38      	pop	{r3, r4, r5, pc}
 80241c4:	2400b61c 	.word	0x2400b61c

080241c8 <_write_r>:
 80241c8:	b538      	push	{r3, r4, r5, lr}
 80241ca:	4d07      	ldr	r5, [pc, #28]	@ (80241e8 <_write_r+0x20>)
 80241cc:	4604      	mov	r4, r0
 80241ce:	4608      	mov	r0, r1
 80241d0:	4611      	mov	r1, r2
 80241d2:	2200      	movs	r2, #0
 80241d4:	602a      	str	r2, [r5, #0]
 80241d6:	461a      	mov	r2, r3
 80241d8:	f7dd fbf8 	bl	80019cc <_write>
 80241dc:	1c43      	adds	r3, r0, #1
 80241de:	d102      	bne.n	80241e6 <_write_r+0x1e>
 80241e0:	682b      	ldr	r3, [r5, #0]
 80241e2:	b103      	cbz	r3, 80241e6 <_write_r+0x1e>
 80241e4:	6023      	str	r3, [r4, #0]
 80241e6:	bd38      	pop	{r3, r4, r5, pc}
 80241e8:	2400b61c 	.word	0x2400b61c

080241ec <__errno>:
 80241ec:	4b01      	ldr	r3, [pc, #4]	@ (80241f4 <__errno+0x8>)
 80241ee:	6818      	ldr	r0, [r3, #0]
 80241f0:	4770      	bx	lr
 80241f2:	bf00      	nop
 80241f4:	240000bc 	.word	0x240000bc

080241f8 <__libc_init_array>:
 80241f8:	b570      	push	{r4, r5, r6, lr}
 80241fa:	4d0d      	ldr	r5, [pc, #52]	@ (8024230 <__libc_init_array+0x38>)
 80241fc:	4c0d      	ldr	r4, [pc, #52]	@ (8024234 <__libc_init_array+0x3c>)
 80241fe:	1b64      	subs	r4, r4, r5
 8024200:	10a4      	asrs	r4, r4, #2
 8024202:	2600      	movs	r6, #0
 8024204:	42a6      	cmp	r6, r4
 8024206:	d109      	bne.n	802421c <__libc_init_array+0x24>
 8024208:	4d0b      	ldr	r5, [pc, #44]	@ (8024238 <__libc_init_array+0x40>)
 802420a:	4c0c      	ldr	r4, [pc, #48]	@ (802423c <__libc_init_array+0x44>)
 802420c:	f003 f93a 	bl	8027484 <_init>
 8024210:	1b64      	subs	r4, r4, r5
 8024212:	10a4      	asrs	r4, r4, #2
 8024214:	2600      	movs	r6, #0
 8024216:	42a6      	cmp	r6, r4
 8024218:	d105      	bne.n	8024226 <__libc_init_array+0x2e>
 802421a:	bd70      	pop	{r4, r5, r6, pc}
 802421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8024220:	4798      	blx	r3
 8024222:	3601      	adds	r6, #1
 8024224:	e7ee      	b.n	8024204 <__libc_init_array+0xc>
 8024226:	f855 3b04 	ldr.w	r3, [r5], #4
 802422a:	4798      	blx	r3
 802422c:	3601      	adds	r6, #1
 802422e:	e7f2      	b.n	8024216 <__libc_init_array+0x1e>
 8024230:	08111248 	.word	0x08111248
 8024234:	08111248 	.word	0x08111248
 8024238:	08111248 	.word	0x08111248
 802423c:	0811125c 	.word	0x0811125c

08024240 <__retarget_lock_init_recursive>:
 8024240:	4770      	bx	lr

08024242 <__retarget_lock_acquire_recursive>:
 8024242:	4770      	bx	lr

08024244 <__retarget_lock_release_recursive>:
 8024244:	4770      	bx	lr

08024246 <memcpy>:
 8024246:	440a      	add	r2, r1
 8024248:	4291      	cmp	r1, r2
 802424a:	f100 33ff 	add.w	r3, r0, #4294967295
 802424e:	d100      	bne.n	8024252 <memcpy+0xc>
 8024250:	4770      	bx	lr
 8024252:	b510      	push	{r4, lr}
 8024254:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024258:	f803 4f01 	strb.w	r4, [r3, #1]!
 802425c:	4291      	cmp	r1, r2
 802425e:	d1f9      	bne.n	8024254 <memcpy+0xe>
 8024260:	bd10      	pop	{r4, pc}
	...

08024264 <nanf>:
 8024264:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802426c <nanf+0x8>
 8024268:	4770      	bx	lr
 802426a:	bf00      	nop
 802426c:	7fc00000 	.word	0x7fc00000

08024270 <__register_exitproc>:
 8024270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024274:	4d27      	ldr	r5, [pc, #156]	@ (8024314 <__register_exitproc+0xa4>)
 8024276:	4607      	mov	r7, r0
 8024278:	6828      	ldr	r0, [r5, #0]
 802427a:	4691      	mov	r9, r2
 802427c:	460e      	mov	r6, r1
 802427e:	4698      	mov	r8, r3
 8024280:	f7ff ffdf 	bl	8024242 <__retarget_lock_acquire_recursive>
 8024284:	4a24      	ldr	r2, [pc, #144]	@ (8024318 <__register_exitproc+0xa8>)
 8024286:	6814      	ldr	r4, [r2, #0]
 8024288:	b93c      	cbnz	r4, 802429a <__register_exitproc+0x2a>
 802428a:	4b24      	ldr	r3, [pc, #144]	@ (802431c <__register_exitproc+0xac>)
 802428c:	6013      	str	r3, [r2, #0]
 802428e:	4a24      	ldr	r2, [pc, #144]	@ (8024320 <__register_exitproc+0xb0>)
 8024290:	b112      	cbz	r2, 8024298 <__register_exitproc+0x28>
 8024292:	6812      	ldr	r2, [r2, #0]
 8024294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8024298:	4c20      	ldr	r4, [pc, #128]	@ (802431c <__register_exitproc+0xac>)
 802429a:	6863      	ldr	r3, [r4, #4]
 802429c:	2b1f      	cmp	r3, #31
 802429e:	dd06      	ble.n	80242ae <__register_exitproc+0x3e>
 80242a0:	6828      	ldr	r0, [r5, #0]
 80242a2:	f7ff ffcf 	bl	8024244 <__retarget_lock_release_recursive>
 80242a6:	f04f 30ff 	mov.w	r0, #4294967295
 80242aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80242ae:	b32f      	cbz	r7, 80242fc <__register_exitproc+0x8c>
 80242b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80242b4:	b968      	cbnz	r0, 80242d2 <__register_exitproc+0x62>
 80242b6:	4b1b      	ldr	r3, [pc, #108]	@ (8024324 <__register_exitproc+0xb4>)
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	d0f1      	beq.n	80242a0 <__register_exitproc+0x30>
 80242bc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80242c0:	f7fe fda2 	bl	8022e08 <malloc>
 80242c4:	2800      	cmp	r0, #0
 80242c6:	d0eb      	beq.n	80242a0 <__register_exitproc+0x30>
 80242c8:	2300      	movs	r3, #0
 80242ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80242ce:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80242d2:	6863      	ldr	r3, [r4, #4]
 80242d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80242d8:	2201      	movs	r2, #1
 80242da:	409a      	lsls	r2, r3
 80242dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80242e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80242e4:	4313      	orrs	r3, r2
 80242e6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80242ea:	2f02      	cmp	r7, #2
 80242ec:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80242f0:	bf02      	ittt	eq
 80242f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80242f6:	4313      	orreq	r3, r2
 80242f8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80242fc:	6863      	ldr	r3, [r4, #4]
 80242fe:	6828      	ldr	r0, [r5, #0]
 8024300:	1c5a      	adds	r2, r3, #1
 8024302:	3302      	adds	r3, #2
 8024304:	6062      	str	r2, [r4, #4]
 8024306:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802430a:	f7ff ff9b 	bl	8024244 <__retarget_lock_release_recursive>
 802430e:	2000      	movs	r0, #0
 8024310:	e7cb      	b.n	80242aa <__register_exitproc+0x3a>
 8024312:	bf00      	nop
 8024314:	2400010c 	.word	0x2400010c
 8024318:	2400b6b0 	.word	0x2400b6b0
 802431c:	2400b624 	.word	0x2400b624
 8024320:	08029fa8 	.word	0x08029fa8
 8024324:	08022e09 	.word	0x08022e09

08024328 <quorem>:
 8024328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802432c:	6903      	ldr	r3, [r0, #16]
 802432e:	690c      	ldr	r4, [r1, #16]
 8024330:	42a3      	cmp	r3, r4
 8024332:	4607      	mov	r7, r0
 8024334:	db7e      	blt.n	8024434 <quorem+0x10c>
 8024336:	3c01      	subs	r4, #1
 8024338:	f101 0814 	add.w	r8, r1, #20
 802433c:	00a3      	lsls	r3, r4, #2
 802433e:	f100 0514 	add.w	r5, r0, #20
 8024342:	9300      	str	r3, [sp, #0]
 8024344:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024348:	9301      	str	r3, [sp, #4]
 802434a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802434e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024352:	3301      	adds	r3, #1
 8024354:	429a      	cmp	r2, r3
 8024356:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802435a:	fbb2 f6f3 	udiv	r6, r2, r3
 802435e:	d32e      	bcc.n	80243be <quorem+0x96>
 8024360:	f04f 0a00 	mov.w	sl, #0
 8024364:	46c4      	mov	ip, r8
 8024366:	46ae      	mov	lr, r5
 8024368:	46d3      	mov	fp, sl
 802436a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802436e:	b298      	uxth	r0, r3
 8024370:	fb06 a000 	mla	r0, r6, r0, sl
 8024374:	0c02      	lsrs	r2, r0, #16
 8024376:	0c1b      	lsrs	r3, r3, #16
 8024378:	fb06 2303 	mla	r3, r6, r3, r2
 802437c:	f8de 2000 	ldr.w	r2, [lr]
 8024380:	b280      	uxth	r0, r0
 8024382:	b292      	uxth	r2, r2
 8024384:	1a12      	subs	r2, r2, r0
 8024386:	445a      	add	r2, fp
 8024388:	f8de 0000 	ldr.w	r0, [lr]
 802438c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8024390:	b29b      	uxth	r3, r3
 8024392:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8024396:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802439a:	b292      	uxth	r2, r2
 802439c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80243a0:	45e1      	cmp	r9, ip
 80243a2:	f84e 2b04 	str.w	r2, [lr], #4
 80243a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80243aa:	d2de      	bcs.n	802436a <quorem+0x42>
 80243ac:	9b00      	ldr	r3, [sp, #0]
 80243ae:	58eb      	ldr	r3, [r5, r3]
 80243b0:	b92b      	cbnz	r3, 80243be <quorem+0x96>
 80243b2:	9b01      	ldr	r3, [sp, #4]
 80243b4:	3b04      	subs	r3, #4
 80243b6:	429d      	cmp	r5, r3
 80243b8:	461a      	mov	r2, r3
 80243ba:	d32f      	bcc.n	802441c <quorem+0xf4>
 80243bc:	613c      	str	r4, [r7, #16]
 80243be:	4638      	mov	r0, r7
 80243c0:	f001 f89e 	bl	8025500 <__mcmp>
 80243c4:	2800      	cmp	r0, #0
 80243c6:	db25      	blt.n	8024414 <quorem+0xec>
 80243c8:	4629      	mov	r1, r5
 80243ca:	2000      	movs	r0, #0
 80243cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80243d0:	f8d1 c000 	ldr.w	ip, [r1]
 80243d4:	fa1f fe82 	uxth.w	lr, r2
 80243d8:	fa1f f38c 	uxth.w	r3, ip
 80243dc:	eba3 030e 	sub.w	r3, r3, lr
 80243e0:	4403      	add	r3, r0
 80243e2:	0c12      	lsrs	r2, r2, #16
 80243e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80243e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80243ec:	b29b      	uxth	r3, r3
 80243ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80243f2:	45c1      	cmp	r9, r8
 80243f4:	f841 3b04 	str.w	r3, [r1], #4
 80243f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80243fc:	d2e6      	bcs.n	80243cc <quorem+0xa4>
 80243fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024406:	b922      	cbnz	r2, 8024412 <quorem+0xea>
 8024408:	3b04      	subs	r3, #4
 802440a:	429d      	cmp	r5, r3
 802440c:	461a      	mov	r2, r3
 802440e:	d30b      	bcc.n	8024428 <quorem+0x100>
 8024410:	613c      	str	r4, [r7, #16]
 8024412:	3601      	adds	r6, #1
 8024414:	4630      	mov	r0, r6
 8024416:	b003      	add	sp, #12
 8024418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802441c:	6812      	ldr	r2, [r2, #0]
 802441e:	3b04      	subs	r3, #4
 8024420:	2a00      	cmp	r2, #0
 8024422:	d1cb      	bne.n	80243bc <quorem+0x94>
 8024424:	3c01      	subs	r4, #1
 8024426:	e7c6      	b.n	80243b6 <quorem+0x8e>
 8024428:	6812      	ldr	r2, [r2, #0]
 802442a:	3b04      	subs	r3, #4
 802442c:	2a00      	cmp	r2, #0
 802442e:	d1ef      	bne.n	8024410 <quorem+0xe8>
 8024430:	3c01      	subs	r4, #1
 8024432:	e7ea      	b.n	802440a <quorem+0xe2>
 8024434:	2000      	movs	r0, #0
 8024436:	e7ee      	b.n	8024416 <quorem+0xee>

08024438 <_dtoa_r>:
 8024438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802443c:	ed2d 8b02 	vpush	{d8}
 8024440:	69c7      	ldr	r7, [r0, #28]
 8024442:	b091      	sub	sp, #68	@ 0x44
 8024444:	ed8d 0b02 	vstr	d0, [sp, #8]
 8024448:	ec55 4b10 	vmov	r4, r5, d0
 802444c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802444e:	9107      	str	r1, [sp, #28]
 8024450:	4681      	mov	r9, r0
 8024452:	9209      	str	r2, [sp, #36]	@ 0x24
 8024454:	930d      	str	r3, [sp, #52]	@ 0x34
 8024456:	b97f      	cbnz	r7, 8024478 <_dtoa_r+0x40>
 8024458:	2010      	movs	r0, #16
 802445a:	f7fe fcd5 	bl	8022e08 <malloc>
 802445e:	4602      	mov	r2, r0
 8024460:	f8c9 001c 	str.w	r0, [r9, #28]
 8024464:	b920      	cbnz	r0, 8024470 <_dtoa_r+0x38>
 8024466:	4ba0      	ldr	r3, [pc, #640]	@ (80246e8 <_dtoa_r+0x2b0>)
 8024468:	21ef      	movs	r1, #239	@ 0xef
 802446a:	48a0      	ldr	r0, [pc, #640]	@ (80246ec <_dtoa_r+0x2b4>)
 802446c:	f7fe fca8 	bl	8022dc0 <__assert_func>
 8024470:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8024474:	6007      	str	r7, [r0, #0]
 8024476:	60c7      	str	r7, [r0, #12]
 8024478:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802447c:	6819      	ldr	r1, [r3, #0]
 802447e:	b159      	cbz	r1, 8024498 <_dtoa_r+0x60>
 8024480:	685a      	ldr	r2, [r3, #4]
 8024482:	604a      	str	r2, [r1, #4]
 8024484:	2301      	movs	r3, #1
 8024486:	4093      	lsls	r3, r2
 8024488:	608b      	str	r3, [r1, #8]
 802448a:	4648      	mov	r0, r9
 802448c:	f000 fdb4 	bl	8024ff8 <_Bfree>
 8024490:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8024494:	2200      	movs	r2, #0
 8024496:	601a      	str	r2, [r3, #0]
 8024498:	1e2b      	subs	r3, r5, #0
 802449a:	bfbb      	ittet	lt
 802449c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80244a0:	9303      	strlt	r3, [sp, #12]
 80244a2:	2300      	movge	r3, #0
 80244a4:	2201      	movlt	r2, #1
 80244a6:	bfac      	ite	ge
 80244a8:	6033      	strge	r3, [r6, #0]
 80244aa:	6032      	strlt	r2, [r6, #0]
 80244ac:	4b90      	ldr	r3, [pc, #576]	@ (80246f0 <_dtoa_r+0x2b8>)
 80244ae:	9e03      	ldr	r6, [sp, #12]
 80244b0:	43b3      	bics	r3, r6
 80244b2:	d110      	bne.n	80244d6 <_dtoa_r+0x9e>
 80244b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80244b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80244ba:	6013      	str	r3, [r2, #0]
 80244bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80244c0:	4323      	orrs	r3, r4
 80244c2:	f000 84de 	beq.w	8024e82 <_dtoa_r+0xa4a>
 80244c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80244c8:	4f8a      	ldr	r7, [pc, #552]	@ (80246f4 <_dtoa_r+0x2bc>)
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	f000 84e0 	beq.w	8024e90 <_dtoa_r+0xa58>
 80244d0:	1cfb      	adds	r3, r7, #3
 80244d2:	f000 bcdb 	b.w	8024e8c <_dtoa_r+0xa54>
 80244d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80244da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80244de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244e2:	d10a      	bne.n	80244fa <_dtoa_r+0xc2>
 80244e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80244e6:	2301      	movs	r3, #1
 80244e8:	6013      	str	r3, [r2, #0]
 80244ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80244ec:	b113      	cbz	r3, 80244f4 <_dtoa_r+0xbc>
 80244ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80244f0:	4b81      	ldr	r3, [pc, #516]	@ (80246f8 <_dtoa_r+0x2c0>)
 80244f2:	6013      	str	r3, [r2, #0]
 80244f4:	4f81      	ldr	r7, [pc, #516]	@ (80246fc <_dtoa_r+0x2c4>)
 80244f6:	f000 bccb 	b.w	8024e90 <_dtoa_r+0xa58>
 80244fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80244fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80244fe:	4648      	mov	r0, r9
 8024500:	eeb0 0b48 	vmov.f64	d0, d8
 8024504:	f001 f91c 	bl	8025740 <__d2b>
 8024508:	f3c6 530a 	ubfx	r3, r6, #20, #11
 802450c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802450e:	9001      	str	r0, [sp, #4]
 8024510:	2b00      	cmp	r3, #0
 8024512:	d045      	beq.n	80245a0 <_dtoa_r+0x168>
 8024514:	eeb0 7b48 	vmov.f64	d7, d8
 8024518:	ee18 1a90 	vmov	r1, s17
 802451c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8024520:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8024524:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8024528:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802452c:	2500      	movs	r5, #0
 802452e:	ee07 1a90 	vmov	s15, r1
 8024532:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8024536:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80246d0 <_dtoa_r+0x298>
 802453a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802453e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80246d8 <_dtoa_r+0x2a0>
 8024542:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024546:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80246e0 <_dtoa_r+0x2a8>
 802454a:	ee07 3a90 	vmov	s15, r3
 802454e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8024552:	eeb0 7b46 	vmov.f64	d7, d6
 8024556:	eea4 7b05 	vfma.f64	d7, d4, d5
 802455a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802455e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024566:	ee16 8a90 	vmov	r8, s13
 802456a:	d508      	bpl.n	802457e <_dtoa_r+0x146>
 802456c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8024570:	eeb4 6b47 	vcmp.f64	d6, d7
 8024574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024578:	bf18      	it	ne
 802457a:	f108 38ff 	addne.w	r8, r8, #4294967295
 802457e:	f1b8 0f16 	cmp.w	r8, #22
 8024582:	d82b      	bhi.n	80245dc <_dtoa_r+0x1a4>
 8024584:	495e      	ldr	r1, [pc, #376]	@ (8024700 <_dtoa_r+0x2c8>)
 8024586:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802458a:	ed91 7b00 	vldr	d7, [r1]
 802458e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8024592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024596:	d501      	bpl.n	802459c <_dtoa_r+0x164>
 8024598:	f108 38ff 	add.w	r8, r8, #4294967295
 802459c:	2100      	movs	r1, #0
 802459e:	e01e      	b.n	80245de <_dtoa_r+0x1a6>
 80245a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80245a2:	4413      	add	r3, r2
 80245a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80245a8:	2920      	cmp	r1, #32
 80245aa:	bfc1      	itttt	gt
 80245ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80245b0:	408e      	lslgt	r6, r1
 80245b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80245b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80245ba:	bfd6      	itet	le
 80245bc:	f1c1 0120 	rsble	r1, r1, #32
 80245c0:	4331      	orrgt	r1, r6
 80245c2:	fa04 f101 	lslle.w	r1, r4, r1
 80245c6:	ee07 1a90 	vmov	s15, r1
 80245ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80245ce:	3b01      	subs	r3, #1
 80245d0:	ee17 1a90 	vmov	r1, s15
 80245d4:	2501      	movs	r5, #1
 80245d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80245da:	e7a8      	b.n	802452e <_dtoa_r+0xf6>
 80245dc:	2101      	movs	r1, #1
 80245de:	1ad2      	subs	r2, r2, r3
 80245e0:	1e53      	subs	r3, r2, #1
 80245e2:	9306      	str	r3, [sp, #24]
 80245e4:	bf45      	ittet	mi
 80245e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80245ea:	9305      	strmi	r3, [sp, #20]
 80245ec:	2300      	movpl	r3, #0
 80245ee:	2300      	movmi	r3, #0
 80245f0:	bf4c      	ite	mi
 80245f2:	9306      	strmi	r3, [sp, #24]
 80245f4:	9305      	strpl	r3, [sp, #20]
 80245f6:	f1b8 0f00 	cmp.w	r8, #0
 80245fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80245fc:	db18      	blt.n	8024630 <_dtoa_r+0x1f8>
 80245fe:	9b06      	ldr	r3, [sp, #24]
 8024600:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8024604:	4443      	add	r3, r8
 8024606:	9306      	str	r3, [sp, #24]
 8024608:	2300      	movs	r3, #0
 802460a:	9a07      	ldr	r2, [sp, #28]
 802460c:	2a09      	cmp	r2, #9
 802460e:	d849      	bhi.n	80246a4 <_dtoa_r+0x26c>
 8024610:	2a05      	cmp	r2, #5
 8024612:	bfc4      	itt	gt
 8024614:	3a04      	subgt	r2, #4
 8024616:	9207      	strgt	r2, [sp, #28]
 8024618:	9a07      	ldr	r2, [sp, #28]
 802461a:	f1a2 0202 	sub.w	r2, r2, #2
 802461e:	bfcc      	ite	gt
 8024620:	2400      	movgt	r4, #0
 8024622:	2401      	movle	r4, #1
 8024624:	2a03      	cmp	r2, #3
 8024626:	d848      	bhi.n	80246ba <_dtoa_r+0x282>
 8024628:	e8df f002 	tbb	[pc, r2]
 802462c:	3a2c2e0b 	.word	0x3a2c2e0b
 8024630:	9b05      	ldr	r3, [sp, #20]
 8024632:	2200      	movs	r2, #0
 8024634:	eba3 0308 	sub.w	r3, r3, r8
 8024638:	9305      	str	r3, [sp, #20]
 802463a:	920a      	str	r2, [sp, #40]	@ 0x28
 802463c:	f1c8 0300 	rsb	r3, r8, #0
 8024640:	e7e3      	b.n	802460a <_dtoa_r+0x1d2>
 8024642:	2200      	movs	r2, #0
 8024644:	9208      	str	r2, [sp, #32]
 8024646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024648:	2a00      	cmp	r2, #0
 802464a:	dc39      	bgt.n	80246c0 <_dtoa_r+0x288>
 802464c:	f04f 0b01 	mov.w	fp, #1
 8024650:	46da      	mov	sl, fp
 8024652:	465a      	mov	r2, fp
 8024654:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8024658:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802465c:	2100      	movs	r1, #0
 802465e:	2004      	movs	r0, #4
 8024660:	f100 0614 	add.w	r6, r0, #20
 8024664:	4296      	cmp	r6, r2
 8024666:	d930      	bls.n	80246ca <_dtoa_r+0x292>
 8024668:	6079      	str	r1, [r7, #4]
 802466a:	4648      	mov	r0, r9
 802466c:	9304      	str	r3, [sp, #16]
 802466e:	f000 fc83 	bl	8024f78 <_Balloc>
 8024672:	9b04      	ldr	r3, [sp, #16]
 8024674:	4607      	mov	r7, r0
 8024676:	2800      	cmp	r0, #0
 8024678:	d146      	bne.n	8024708 <_dtoa_r+0x2d0>
 802467a:	4b22      	ldr	r3, [pc, #136]	@ (8024704 <_dtoa_r+0x2cc>)
 802467c:	4602      	mov	r2, r0
 802467e:	f240 11af 	movw	r1, #431	@ 0x1af
 8024682:	e6f2      	b.n	802446a <_dtoa_r+0x32>
 8024684:	2201      	movs	r2, #1
 8024686:	e7dd      	b.n	8024644 <_dtoa_r+0x20c>
 8024688:	2200      	movs	r2, #0
 802468a:	9208      	str	r2, [sp, #32]
 802468c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802468e:	eb08 0b02 	add.w	fp, r8, r2
 8024692:	f10b 0a01 	add.w	sl, fp, #1
 8024696:	4652      	mov	r2, sl
 8024698:	2a01      	cmp	r2, #1
 802469a:	bfb8      	it	lt
 802469c:	2201      	movlt	r2, #1
 802469e:	e7db      	b.n	8024658 <_dtoa_r+0x220>
 80246a0:	2201      	movs	r2, #1
 80246a2:	e7f2      	b.n	802468a <_dtoa_r+0x252>
 80246a4:	2401      	movs	r4, #1
 80246a6:	2200      	movs	r2, #0
 80246a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80246ac:	f04f 3bff 	mov.w	fp, #4294967295
 80246b0:	2100      	movs	r1, #0
 80246b2:	46da      	mov	sl, fp
 80246b4:	2212      	movs	r2, #18
 80246b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80246b8:	e7ce      	b.n	8024658 <_dtoa_r+0x220>
 80246ba:	2201      	movs	r2, #1
 80246bc:	9208      	str	r2, [sp, #32]
 80246be:	e7f5      	b.n	80246ac <_dtoa_r+0x274>
 80246c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80246c4:	46da      	mov	sl, fp
 80246c6:	465a      	mov	r2, fp
 80246c8:	e7c6      	b.n	8024658 <_dtoa_r+0x220>
 80246ca:	3101      	adds	r1, #1
 80246cc:	0040      	lsls	r0, r0, #1
 80246ce:	e7c7      	b.n	8024660 <_dtoa_r+0x228>
 80246d0:	636f4361 	.word	0x636f4361
 80246d4:	3fd287a7 	.word	0x3fd287a7
 80246d8:	8b60c8b3 	.word	0x8b60c8b3
 80246dc:	3fc68a28 	.word	0x3fc68a28
 80246e0:	509f79fb 	.word	0x509f79fb
 80246e4:	3fd34413 	.word	0x3fd34413
 80246e8:	08029dce 	.word	0x08029dce
 80246ec:	08029de5 	.word	0x08029de5
 80246f0:	7ff00000 	.word	0x7ff00000
 80246f4:	08029dca 	.word	0x08029dca
 80246f8:	08029d99 	.word	0x08029d99
 80246fc:	08029d98 	.word	0x08029d98
 8024700:	08029ee0 	.word	0x08029ee0
 8024704:	08029e3d 	.word	0x08029e3d
 8024708:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802470c:	f1ba 0f0e 	cmp.w	sl, #14
 8024710:	6010      	str	r0, [r2, #0]
 8024712:	d86f      	bhi.n	80247f4 <_dtoa_r+0x3bc>
 8024714:	2c00      	cmp	r4, #0
 8024716:	d06d      	beq.n	80247f4 <_dtoa_r+0x3bc>
 8024718:	f1b8 0f00 	cmp.w	r8, #0
 802471c:	f340 80c2 	ble.w	80248a4 <_dtoa_r+0x46c>
 8024720:	4aca      	ldr	r2, [pc, #808]	@ (8024a4c <_dtoa_r+0x614>)
 8024722:	f008 010f 	and.w	r1, r8, #15
 8024726:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802472a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802472e:	ed92 7b00 	vldr	d7, [r2]
 8024732:	ea4f 1128 	mov.w	r1, r8, asr #4
 8024736:	f000 80a9 	beq.w	802488c <_dtoa_r+0x454>
 802473a:	4ac5      	ldr	r2, [pc, #788]	@ (8024a50 <_dtoa_r+0x618>)
 802473c:	ed92 6b08 	vldr	d6, [r2, #32]
 8024740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8024744:	ed8d 6b02 	vstr	d6, [sp, #8]
 8024748:	f001 010f 	and.w	r1, r1, #15
 802474c:	2203      	movs	r2, #3
 802474e:	48c0      	ldr	r0, [pc, #768]	@ (8024a50 <_dtoa_r+0x618>)
 8024750:	2900      	cmp	r1, #0
 8024752:	f040 809d 	bne.w	8024890 <_dtoa_r+0x458>
 8024756:	ed9d 6b02 	vldr	d6, [sp, #8]
 802475a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802475e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024768:	2900      	cmp	r1, #0
 802476a:	f000 80c1 	beq.w	80248f0 <_dtoa_r+0x4b8>
 802476e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8024772:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8024776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802477a:	f140 80b9 	bpl.w	80248f0 <_dtoa_r+0x4b8>
 802477e:	f1ba 0f00 	cmp.w	sl, #0
 8024782:	f000 80b5 	beq.w	80248f0 <_dtoa_r+0x4b8>
 8024786:	f1bb 0f00 	cmp.w	fp, #0
 802478a:	dd31      	ble.n	80247f0 <_dtoa_r+0x3b8>
 802478c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8024790:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024798:	f108 31ff 	add.w	r1, r8, #4294967295
 802479c:	9104      	str	r1, [sp, #16]
 802479e:	3201      	adds	r2, #1
 80247a0:	465c      	mov	r4, fp
 80247a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80247a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80247aa:	ee07 2a90 	vmov	s15, r2
 80247ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80247b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80247b6:	ee15 2a90 	vmov	r2, s11
 80247ba:	ec51 0b15 	vmov	r0, r1, d5
 80247be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80247c2:	2c00      	cmp	r4, #0
 80247c4:	f040 8098 	bne.w	80248f8 <_dtoa_r+0x4c0>
 80247c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80247cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80247d0:	ec41 0b17 	vmov	d7, r0, r1
 80247d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80247d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247dc:	f300 8261 	bgt.w	8024ca2 <_dtoa_r+0x86a>
 80247e0:	eeb1 7b47 	vneg.f64	d7, d7
 80247e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80247e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247ec:	f100 80f5 	bmi.w	80249da <_dtoa_r+0x5a2>
 80247f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80247f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80247f6:	2a00      	cmp	r2, #0
 80247f8:	f2c0 812c 	blt.w	8024a54 <_dtoa_r+0x61c>
 80247fc:	f1b8 0f0e 	cmp.w	r8, #14
 8024800:	f300 8128 	bgt.w	8024a54 <_dtoa_r+0x61c>
 8024804:	4b91      	ldr	r3, [pc, #580]	@ (8024a4c <_dtoa_r+0x614>)
 8024806:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802480a:	ed93 6b00 	vldr	d6, [r3]
 802480e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024810:	2b00      	cmp	r3, #0
 8024812:	da03      	bge.n	802481c <_dtoa_r+0x3e4>
 8024814:	f1ba 0f00 	cmp.w	sl, #0
 8024818:	f340 80d2 	ble.w	80249c0 <_dtoa_r+0x588>
 802481c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8024820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024824:	463e      	mov	r6, r7
 8024826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802482a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802482e:	ee15 3a10 	vmov	r3, s10
 8024832:	3330      	adds	r3, #48	@ 0x30
 8024834:	f806 3b01 	strb.w	r3, [r6], #1
 8024838:	1bf3      	subs	r3, r6, r7
 802483a:	459a      	cmp	sl, r3
 802483c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8024840:	eea3 7b46 	vfms.f64	d7, d3, d6
 8024844:	f040 80f8 	bne.w	8024a38 <_dtoa_r+0x600>
 8024848:	ee37 7b07 	vadd.f64	d7, d7, d7
 802484c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8024850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024854:	f300 80dd 	bgt.w	8024a12 <_dtoa_r+0x5da>
 8024858:	eeb4 7b46 	vcmp.f64	d7, d6
 802485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024860:	d104      	bne.n	802486c <_dtoa_r+0x434>
 8024862:	ee15 3a10 	vmov	r3, s10
 8024866:	07db      	lsls	r3, r3, #31
 8024868:	f100 80d3 	bmi.w	8024a12 <_dtoa_r+0x5da>
 802486c:	9901      	ldr	r1, [sp, #4]
 802486e:	4648      	mov	r0, r9
 8024870:	f000 fbc2 	bl	8024ff8 <_Bfree>
 8024874:	2300      	movs	r3, #0
 8024876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024878:	7033      	strb	r3, [r6, #0]
 802487a:	f108 0301 	add.w	r3, r8, #1
 802487e:	6013      	str	r3, [r2, #0]
 8024880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024882:	2b00      	cmp	r3, #0
 8024884:	f000 8304 	beq.w	8024e90 <_dtoa_r+0xa58>
 8024888:	601e      	str	r6, [r3, #0]
 802488a:	e301      	b.n	8024e90 <_dtoa_r+0xa58>
 802488c:	2202      	movs	r2, #2
 802488e:	e75e      	b.n	802474e <_dtoa_r+0x316>
 8024890:	07cc      	lsls	r4, r1, #31
 8024892:	d504      	bpl.n	802489e <_dtoa_r+0x466>
 8024894:	ed90 6b00 	vldr	d6, [r0]
 8024898:	3201      	adds	r2, #1
 802489a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802489e:	1049      	asrs	r1, r1, #1
 80248a0:	3008      	adds	r0, #8
 80248a2:	e755      	b.n	8024750 <_dtoa_r+0x318>
 80248a4:	d022      	beq.n	80248ec <_dtoa_r+0x4b4>
 80248a6:	f1c8 0100 	rsb	r1, r8, #0
 80248aa:	4a68      	ldr	r2, [pc, #416]	@ (8024a4c <_dtoa_r+0x614>)
 80248ac:	f001 000f 	and.w	r0, r1, #15
 80248b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80248b4:	ed92 7b00 	vldr	d7, [r2]
 80248b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80248bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80248c0:	4863      	ldr	r0, [pc, #396]	@ (8024a50 <_dtoa_r+0x618>)
 80248c2:	1109      	asrs	r1, r1, #4
 80248c4:	2400      	movs	r4, #0
 80248c6:	2202      	movs	r2, #2
 80248c8:	b929      	cbnz	r1, 80248d6 <_dtoa_r+0x49e>
 80248ca:	2c00      	cmp	r4, #0
 80248cc:	f43f af49 	beq.w	8024762 <_dtoa_r+0x32a>
 80248d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80248d4:	e745      	b.n	8024762 <_dtoa_r+0x32a>
 80248d6:	07ce      	lsls	r6, r1, #31
 80248d8:	d505      	bpl.n	80248e6 <_dtoa_r+0x4ae>
 80248da:	ed90 6b00 	vldr	d6, [r0]
 80248de:	3201      	adds	r2, #1
 80248e0:	2401      	movs	r4, #1
 80248e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80248e6:	1049      	asrs	r1, r1, #1
 80248e8:	3008      	adds	r0, #8
 80248ea:	e7ed      	b.n	80248c8 <_dtoa_r+0x490>
 80248ec:	2202      	movs	r2, #2
 80248ee:	e738      	b.n	8024762 <_dtoa_r+0x32a>
 80248f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80248f4:	4654      	mov	r4, sl
 80248f6:	e754      	b.n	80247a2 <_dtoa_r+0x36a>
 80248f8:	4a54      	ldr	r2, [pc, #336]	@ (8024a4c <_dtoa_r+0x614>)
 80248fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80248fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8024902:	9a08      	ldr	r2, [sp, #32]
 8024904:	ec41 0b17 	vmov	d7, r0, r1
 8024908:	443c      	add	r4, r7
 802490a:	b34a      	cbz	r2, 8024960 <_dtoa_r+0x528>
 802490c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8024910:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8024914:	463e      	mov	r6, r7
 8024916:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802491a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802491e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8024922:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024926:	ee14 2a90 	vmov	r2, s9
 802492a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802492e:	3230      	adds	r2, #48	@ 0x30
 8024930:	ee36 6b45 	vsub.f64	d6, d6, d5
 8024934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802493c:	f806 2b01 	strb.w	r2, [r6], #1
 8024940:	d438      	bmi.n	80249b4 <_dtoa_r+0x57c>
 8024942:	ee32 5b46 	vsub.f64	d5, d2, d6
 8024946:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802494e:	d462      	bmi.n	8024a16 <_dtoa_r+0x5de>
 8024950:	42a6      	cmp	r6, r4
 8024952:	f43f af4d 	beq.w	80247f0 <_dtoa_r+0x3b8>
 8024956:	ee27 7b03 	vmul.f64	d7, d7, d3
 802495a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802495e:	e7e0      	b.n	8024922 <_dtoa_r+0x4ea>
 8024960:	4621      	mov	r1, r4
 8024962:	463e      	mov	r6, r7
 8024964:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024968:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802496c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024970:	ee14 2a90 	vmov	r2, s9
 8024974:	3230      	adds	r2, #48	@ 0x30
 8024976:	f806 2b01 	strb.w	r2, [r6], #1
 802497a:	42a6      	cmp	r6, r4
 802497c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8024980:	ee36 6b45 	vsub.f64	d6, d6, d5
 8024984:	d119      	bne.n	80249ba <_dtoa_r+0x582>
 8024986:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802498a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802498e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8024992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024996:	dc3e      	bgt.n	8024a16 <_dtoa_r+0x5de>
 8024998:	ee35 5b47 	vsub.f64	d5, d5, d7
 802499c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80249a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249a4:	f57f af24 	bpl.w	80247f0 <_dtoa_r+0x3b8>
 80249a8:	460e      	mov	r6, r1
 80249aa:	3901      	subs	r1, #1
 80249ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80249b0:	2b30      	cmp	r3, #48	@ 0x30
 80249b2:	d0f9      	beq.n	80249a8 <_dtoa_r+0x570>
 80249b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80249b8:	e758      	b.n	802486c <_dtoa_r+0x434>
 80249ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80249be:	e7d5      	b.n	802496c <_dtoa_r+0x534>
 80249c0:	d10b      	bne.n	80249da <_dtoa_r+0x5a2>
 80249c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80249c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80249ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80249ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80249d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249d6:	f2c0 8161 	blt.w	8024c9c <_dtoa_r+0x864>
 80249da:	2400      	movs	r4, #0
 80249dc:	4625      	mov	r5, r4
 80249de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80249e0:	43db      	mvns	r3, r3
 80249e2:	9304      	str	r3, [sp, #16]
 80249e4:	463e      	mov	r6, r7
 80249e6:	f04f 0800 	mov.w	r8, #0
 80249ea:	4621      	mov	r1, r4
 80249ec:	4648      	mov	r0, r9
 80249ee:	f000 fb03 	bl	8024ff8 <_Bfree>
 80249f2:	2d00      	cmp	r5, #0
 80249f4:	d0de      	beq.n	80249b4 <_dtoa_r+0x57c>
 80249f6:	f1b8 0f00 	cmp.w	r8, #0
 80249fa:	d005      	beq.n	8024a08 <_dtoa_r+0x5d0>
 80249fc:	45a8      	cmp	r8, r5
 80249fe:	d003      	beq.n	8024a08 <_dtoa_r+0x5d0>
 8024a00:	4641      	mov	r1, r8
 8024a02:	4648      	mov	r0, r9
 8024a04:	f000 faf8 	bl	8024ff8 <_Bfree>
 8024a08:	4629      	mov	r1, r5
 8024a0a:	4648      	mov	r0, r9
 8024a0c:	f000 faf4 	bl	8024ff8 <_Bfree>
 8024a10:	e7d0      	b.n	80249b4 <_dtoa_r+0x57c>
 8024a12:	f8cd 8010 	str.w	r8, [sp, #16]
 8024a16:	4633      	mov	r3, r6
 8024a18:	461e      	mov	r6, r3
 8024a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024a1e:	2a39      	cmp	r2, #57	@ 0x39
 8024a20:	d106      	bne.n	8024a30 <_dtoa_r+0x5f8>
 8024a22:	429f      	cmp	r7, r3
 8024a24:	d1f8      	bne.n	8024a18 <_dtoa_r+0x5e0>
 8024a26:	9a04      	ldr	r2, [sp, #16]
 8024a28:	3201      	adds	r2, #1
 8024a2a:	9204      	str	r2, [sp, #16]
 8024a2c:	2230      	movs	r2, #48	@ 0x30
 8024a2e:	703a      	strb	r2, [r7, #0]
 8024a30:	781a      	ldrb	r2, [r3, #0]
 8024a32:	3201      	adds	r2, #1
 8024a34:	701a      	strb	r2, [r3, #0]
 8024a36:	e7bd      	b.n	80249b4 <_dtoa_r+0x57c>
 8024a38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024a3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a44:	f47f aeef 	bne.w	8024826 <_dtoa_r+0x3ee>
 8024a48:	e710      	b.n	802486c <_dtoa_r+0x434>
 8024a4a:	bf00      	nop
 8024a4c:	08029ee0 	.word	0x08029ee0
 8024a50:	08029eb8 	.word	0x08029eb8
 8024a54:	9908      	ldr	r1, [sp, #32]
 8024a56:	2900      	cmp	r1, #0
 8024a58:	f000 80e3 	beq.w	8024c22 <_dtoa_r+0x7ea>
 8024a5c:	9907      	ldr	r1, [sp, #28]
 8024a5e:	2901      	cmp	r1, #1
 8024a60:	f300 80c8 	bgt.w	8024bf4 <_dtoa_r+0x7bc>
 8024a64:	2d00      	cmp	r5, #0
 8024a66:	f000 80c1 	beq.w	8024bec <_dtoa_r+0x7b4>
 8024a6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8024a6e:	9e05      	ldr	r6, [sp, #20]
 8024a70:	461c      	mov	r4, r3
 8024a72:	9304      	str	r3, [sp, #16]
 8024a74:	9b05      	ldr	r3, [sp, #20]
 8024a76:	4413      	add	r3, r2
 8024a78:	9305      	str	r3, [sp, #20]
 8024a7a:	9b06      	ldr	r3, [sp, #24]
 8024a7c:	2101      	movs	r1, #1
 8024a7e:	4413      	add	r3, r2
 8024a80:	4648      	mov	r0, r9
 8024a82:	9306      	str	r3, [sp, #24]
 8024a84:	f000 fbb6 	bl	80251f4 <__i2b>
 8024a88:	9b04      	ldr	r3, [sp, #16]
 8024a8a:	4605      	mov	r5, r0
 8024a8c:	b166      	cbz	r6, 8024aa8 <_dtoa_r+0x670>
 8024a8e:	9a06      	ldr	r2, [sp, #24]
 8024a90:	2a00      	cmp	r2, #0
 8024a92:	dd09      	ble.n	8024aa8 <_dtoa_r+0x670>
 8024a94:	42b2      	cmp	r2, r6
 8024a96:	9905      	ldr	r1, [sp, #20]
 8024a98:	bfa8      	it	ge
 8024a9a:	4632      	movge	r2, r6
 8024a9c:	1a89      	subs	r1, r1, r2
 8024a9e:	9105      	str	r1, [sp, #20]
 8024aa0:	9906      	ldr	r1, [sp, #24]
 8024aa2:	1ab6      	subs	r6, r6, r2
 8024aa4:	1a8a      	subs	r2, r1, r2
 8024aa6:	9206      	str	r2, [sp, #24]
 8024aa8:	b1fb      	cbz	r3, 8024aea <_dtoa_r+0x6b2>
 8024aaa:	9a08      	ldr	r2, [sp, #32]
 8024aac:	2a00      	cmp	r2, #0
 8024aae:	f000 80bc 	beq.w	8024c2a <_dtoa_r+0x7f2>
 8024ab2:	b19c      	cbz	r4, 8024adc <_dtoa_r+0x6a4>
 8024ab4:	4629      	mov	r1, r5
 8024ab6:	4622      	mov	r2, r4
 8024ab8:	4648      	mov	r0, r9
 8024aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024abc:	f000 fc5a 	bl	8025374 <__pow5mult>
 8024ac0:	9a01      	ldr	r2, [sp, #4]
 8024ac2:	4601      	mov	r1, r0
 8024ac4:	4605      	mov	r5, r0
 8024ac6:	4648      	mov	r0, r9
 8024ac8:	f000 fbaa 	bl	8025220 <__multiply>
 8024acc:	9901      	ldr	r1, [sp, #4]
 8024ace:	9004      	str	r0, [sp, #16]
 8024ad0:	4648      	mov	r0, r9
 8024ad2:	f000 fa91 	bl	8024ff8 <_Bfree>
 8024ad6:	9a04      	ldr	r2, [sp, #16]
 8024ad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ada:	9201      	str	r2, [sp, #4]
 8024adc:	1b1a      	subs	r2, r3, r4
 8024ade:	d004      	beq.n	8024aea <_dtoa_r+0x6b2>
 8024ae0:	9901      	ldr	r1, [sp, #4]
 8024ae2:	4648      	mov	r0, r9
 8024ae4:	f000 fc46 	bl	8025374 <__pow5mult>
 8024ae8:	9001      	str	r0, [sp, #4]
 8024aea:	2101      	movs	r1, #1
 8024aec:	4648      	mov	r0, r9
 8024aee:	f000 fb81 	bl	80251f4 <__i2b>
 8024af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024af4:	4604      	mov	r4, r0
 8024af6:	2b00      	cmp	r3, #0
 8024af8:	f000 81d0 	beq.w	8024e9c <_dtoa_r+0xa64>
 8024afc:	461a      	mov	r2, r3
 8024afe:	4601      	mov	r1, r0
 8024b00:	4648      	mov	r0, r9
 8024b02:	f000 fc37 	bl	8025374 <__pow5mult>
 8024b06:	9b07      	ldr	r3, [sp, #28]
 8024b08:	2b01      	cmp	r3, #1
 8024b0a:	4604      	mov	r4, r0
 8024b0c:	f300 8095 	bgt.w	8024c3a <_dtoa_r+0x802>
 8024b10:	9b02      	ldr	r3, [sp, #8]
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	f040 808b 	bne.w	8024c2e <_dtoa_r+0x7f6>
 8024b18:	9b03      	ldr	r3, [sp, #12]
 8024b1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8024b1e:	2a00      	cmp	r2, #0
 8024b20:	f040 8087 	bne.w	8024c32 <_dtoa_r+0x7fa>
 8024b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8024b28:	0d12      	lsrs	r2, r2, #20
 8024b2a:	0512      	lsls	r2, r2, #20
 8024b2c:	2a00      	cmp	r2, #0
 8024b2e:	f000 8082 	beq.w	8024c36 <_dtoa_r+0x7fe>
 8024b32:	9b05      	ldr	r3, [sp, #20]
 8024b34:	3301      	adds	r3, #1
 8024b36:	9305      	str	r3, [sp, #20]
 8024b38:	9b06      	ldr	r3, [sp, #24]
 8024b3a:	3301      	adds	r3, #1
 8024b3c:	9306      	str	r3, [sp, #24]
 8024b3e:	2301      	movs	r3, #1
 8024b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	f000 81af 	beq.w	8024ea8 <_dtoa_r+0xa70>
 8024b4a:	6922      	ldr	r2, [r4, #16]
 8024b4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8024b50:	6910      	ldr	r0, [r2, #16]
 8024b52:	f000 fb03 	bl	802515c <__hi0bits>
 8024b56:	f1c0 0020 	rsb	r0, r0, #32
 8024b5a:	9b06      	ldr	r3, [sp, #24]
 8024b5c:	4418      	add	r0, r3
 8024b5e:	f010 001f 	ands.w	r0, r0, #31
 8024b62:	d076      	beq.n	8024c52 <_dtoa_r+0x81a>
 8024b64:	f1c0 0220 	rsb	r2, r0, #32
 8024b68:	2a04      	cmp	r2, #4
 8024b6a:	dd69      	ble.n	8024c40 <_dtoa_r+0x808>
 8024b6c:	9b05      	ldr	r3, [sp, #20]
 8024b6e:	f1c0 001c 	rsb	r0, r0, #28
 8024b72:	4403      	add	r3, r0
 8024b74:	9305      	str	r3, [sp, #20]
 8024b76:	9b06      	ldr	r3, [sp, #24]
 8024b78:	4406      	add	r6, r0
 8024b7a:	4403      	add	r3, r0
 8024b7c:	9306      	str	r3, [sp, #24]
 8024b7e:	9b05      	ldr	r3, [sp, #20]
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	dd05      	ble.n	8024b90 <_dtoa_r+0x758>
 8024b84:	9901      	ldr	r1, [sp, #4]
 8024b86:	461a      	mov	r2, r3
 8024b88:	4648      	mov	r0, r9
 8024b8a:	f000 fc4d 	bl	8025428 <__lshift>
 8024b8e:	9001      	str	r0, [sp, #4]
 8024b90:	9b06      	ldr	r3, [sp, #24]
 8024b92:	2b00      	cmp	r3, #0
 8024b94:	dd05      	ble.n	8024ba2 <_dtoa_r+0x76a>
 8024b96:	4621      	mov	r1, r4
 8024b98:	461a      	mov	r2, r3
 8024b9a:	4648      	mov	r0, r9
 8024b9c:	f000 fc44 	bl	8025428 <__lshift>
 8024ba0:	4604      	mov	r4, r0
 8024ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ba4:	2b00      	cmp	r3, #0
 8024ba6:	d056      	beq.n	8024c56 <_dtoa_r+0x81e>
 8024ba8:	9801      	ldr	r0, [sp, #4]
 8024baa:	4621      	mov	r1, r4
 8024bac:	f000 fca8 	bl	8025500 <__mcmp>
 8024bb0:	2800      	cmp	r0, #0
 8024bb2:	da50      	bge.n	8024c56 <_dtoa_r+0x81e>
 8024bb4:	f108 33ff 	add.w	r3, r8, #4294967295
 8024bb8:	9304      	str	r3, [sp, #16]
 8024bba:	9901      	ldr	r1, [sp, #4]
 8024bbc:	2300      	movs	r3, #0
 8024bbe:	220a      	movs	r2, #10
 8024bc0:	4648      	mov	r0, r9
 8024bc2:	f000 fa3b 	bl	802503c <__multadd>
 8024bc6:	9b08      	ldr	r3, [sp, #32]
 8024bc8:	9001      	str	r0, [sp, #4]
 8024bca:	2b00      	cmp	r3, #0
 8024bcc:	f000 816e 	beq.w	8024eac <_dtoa_r+0xa74>
 8024bd0:	4629      	mov	r1, r5
 8024bd2:	2300      	movs	r3, #0
 8024bd4:	220a      	movs	r2, #10
 8024bd6:	4648      	mov	r0, r9
 8024bd8:	f000 fa30 	bl	802503c <__multadd>
 8024bdc:	f1bb 0f00 	cmp.w	fp, #0
 8024be0:	4605      	mov	r5, r0
 8024be2:	dc64      	bgt.n	8024cae <_dtoa_r+0x876>
 8024be4:	9b07      	ldr	r3, [sp, #28]
 8024be6:	2b02      	cmp	r3, #2
 8024be8:	dc3e      	bgt.n	8024c68 <_dtoa_r+0x830>
 8024bea:	e060      	b.n	8024cae <_dtoa_r+0x876>
 8024bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024bee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8024bf2:	e73c      	b.n	8024a6e <_dtoa_r+0x636>
 8024bf4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8024bf8:	42a3      	cmp	r3, r4
 8024bfa:	bfbf      	itttt	lt
 8024bfc:	1ae2      	sublt	r2, r4, r3
 8024bfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8024c00:	189b      	addlt	r3, r3, r2
 8024c02:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8024c04:	bfae      	itee	ge
 8024c06:	1b1c      	subge	r4, r3, r4
 8024c08:	4623      	movlt	r3, r4
 8024c0a:	2400      	movlt	r4, #0
 8024c0c:	f1ba 0f00 	cmp.w	sl, #0
 8024c10:	bfb5      	itete	lt
 8024c12:	9a05      	ldrlt	r2, [sp, #20]
 8024c14:	9e05      	ldrge	r6, [sp, #20]
 8024c16:	eba2 060a 	sublt.w	r6, r2, sl
 8024c1a:	4652      	movge	r2, sl
 8024c1c:	bfb8      	it	lt
 8024c1e:	2200      	movlt	r2, #0
 8024c20:	e727      	b.n	8024a72 <_dtoa_r+0x63a>
 8024c22:	9e05      	ldr	r6, [sp, #20]
 8024c24:	9d08      	ldr	r5, [sp, #32]
 8024c26:	461c      	mov	r4, r3
 8024c28:	e730      	b.n	8024a8c <_dtoa_r+0x654>
 8024c2a:	461a      	mov	r2, r3
 8024c2c:	e758      	b.n	8024ae0 <_dtoa_r+0x6a8>
 8024c2e:	2300      	movs	r3, #0
 8024c30:	e786      	b.n	8024b40 <_dtoa_r+0x708>
 8024c32:	9b02      	ldr	r3, [sp, #8]
 8024c34:	e784      	b.n	8024b40 <_dtoa_r+0x708>
 8024c36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024c38:	e783      	b.n	8024b42 <_dtoa_r+0x70a>
 8024c3a:	2300      	movs	r3, #0
 8024c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c3e:	e784      	b.n	8024b4a <_dtoa_r+0x712>
 8024c40:	d09d      	beq.n	8024b7e <_dtoa_r+0x746>
 8024c42:	9b05      	ldr	r3, [sp, #20]
 8024c44:	321c      	adds	r2, #28
 8024c46:	4413      	add	r3, r2
 8024c48:	9305      	str	r3, [sp, #20]
 8024c4a:	9b06      	ldr	r3, [sp, #24]
 8024c4c:	4416      	add	r6, r2
 8024c4e:	4413      	add	r3, r2
 8024c50:	e794      	b.n	8024b7c <_dtoa_r+0x744>
 8024c52:	4602      	mov	r2, r0
 8024c54:	e7f5      	b.n	8024c42 <_dtoa_r+0x80a>
 8024c56:	f1ba 0f00 	cmp.w	sl, #0
 8024c5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8024c5e:	46d3      	mov	fp, sl
 8024c60:	dc21      	bgt.n	8024ca6 <_dtoa_r+0x86e>
 8024c62:	9b07      	ldr	r3, [sp, #28]
 8024c64:	2b02      	cmp	r3, #2
 8024c66:	dd1e      	ble.n	8024ca6 <_dtoa_r+0x86e>
 8024c68:	f1bb 0f00 	cmp.w	fp, #0
 8024c6c:	f47f aeb7 	bne.w	80249de <_dtoa_r+0x5a6>
 8024c70:	4621      	mov	r1, r4
 8024c72:	465b      	mov	r3, fp
 8024c74:	2205      	movs	r2, #5
 8024c76:	4648      	mov	r0, r9
 8024c78:	f000 f9e0 	bl	802503c <__multadd>
 8024c7c:	4601      	mov	r1, r0
 8024c7e:	4604      	mov	r4, r0
 8024c80:	9801      	ldr	r0, [sp, #4]
 8024c82:	f000 fc3d 	bl	8025500 <__mcmp>
 8024c86:	2800      	cmp	r0, #0
 8024c88:	f77f aea9 	ble.w	80249de <_dtoa_r+0x5a6>
 8024c8c:	463e      	mov	r6, r7
 8024c8e:	2331      	movs	r3, #49	@ 0x31
 8024c90:	f806 3b01 	strb.w	r3, [r6], #1
 8024c94:	9b04      	ldr	r3, [sp, #16]
 8024c96:	3301      	adds	r3, #1
 8024c98:	9304      	str	r3, [sp, #16]
 8024c9a:	e6a4      	b.n	80249e6 <_dtoa_r+0x5ae>
 8024c9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8024ca0:	4654      	mov	r4, sl
 8024ca2:	4625      	mov	r5, r4
 8024ca4:	e7f2      	b.n	8024c8c <_dtoa_r+0x854>
 8024ca6:	9b08      	ldr	r3, [sp, #32]
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	f000 8103 	beq.w	8024eb4 <_dtoa_r+0xa7c>
 8024cae:	2e00      	cmp	r6, #0
 8024cb0:	dd05      	ble.n	8024cbe <_dtoa_r+0x886>
 8024cb2:	4629      	mov	r1, r5
 8024cb4:	4632      	mov	r2, r6
 8024cb6:	4648      	mov	r0, r9
 8024cb8:	f000 fbb6 	bl	8025428 <__lshift>
 8024cbc:	4605      	mov	r5, r0
 8024cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024cc0:	2b00      	cmp	r3, #0
 8024cc2:	d058      	beq.n	8024d76 <_dtoa_r+0x93e>
 8024cc4:	6869      	ldr	r1, [r5, #4]
 8024cc6:	4648      	mov	r0, r9
 8024cc8:	f000 f956 	bl	8024f78 <_Balloc>
 8024ccc:	4606      	mov	r6, r0
 8024cce:	b928      	cbnz	r0, 8024cdc <_dtoa_r+0x8a4>
 8024cd0:	4b82      	ldr	r3, [pc, #520]	@ (8024edc <_dtoa_r+0xaa4>)
 8024cd2:	4602      	mov	r2, r0
 8024cd4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8024cd8:	f7ff bbc7 	b.w	802446a <_dtoa_r+0x32>
 8024cdc:	692a      	ldr	r2, [r5, #16]
 8024cde:	3202      	adds	r2, #2
 8024ce0:	0092      	lsls	r2, r2, #2
 8024ce2:	f105 010c 	add.w	r1, r5, #12
 8024ce6:	300c      	adds	r0, #12
 8024ce8:	f7ff faad 	bl	8024246 <memcpy>
 8024cec:	2201      	movs	r2, #1
 8024cee:	4631      	mov	r1, r6
 8024cf0:	4648      	mov	r0, r9
 8024cf2:	f000 fb99 	bl	8025428 <__lshift>
 8024cf6:	1c7b      	adds	r3, r7, #1
 8024cf8:	9305      	str	r3, [sp, #20]
 8024cfa:	eb07 030b 	add.w	r3, r7, fp
 8024cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d00:	9b02      	ldr	r3, [sp, #8]
 8024d02:	f003 0301 	and.w	r3, r3, #1
 8024d06:	46a8      	mov	r8, r5
 8024d08:	9308      	str	r3, [sp, #32]
 8024d0a:	4605      	mov	r5, r0
 8024d0c:	9b05      	ldr	r3, [sp, #20]
 8024d0e:	9801      	ldr	r0, [sp, #4]
 8024d10:	4621      	mov	r1, r4
 8024d12:	f103 3bff 	add.w	fp, r3, #4294967295
 8024d16:	f7ff fb07 	bl	8024328 <quorem>
 8024d1a:	4641      	mov	r1, r8
 8024d1c:	9002      	str	r0, [sp, #8]
 8024d1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8024d22:	9801      	ldr	r0, [sp, #4]
 8024d24:	f000 fbec 	bl	8025500 <__mcmp>
 8024d28:	462a      	mov	r2, r5
 8024d2a:	9006      	str	r0, [sp, #24]
 8024d2c:	4621      	mov	r1, r4
 8024d2e:	4648      	mov	r0, r9
 8024d30:	f000 fc02 	bl	8025538 <__mdiff>
 8024d34:	68c2      	ldr	r2, [r0, #12]
 8024d36:	4606      	mov	r6, r0
 8024d38:	b9fa      	cbnz	r2, 8024d7a <_dtoa_r+0x942>
 8024d3a:	4601      	mov	r1, r0
 8024d3c:	9801      	ldr	r0, [sp, #4]
 8024d3e:	f000 fbdf 	bl	8025500 <__mcmp>
 8024d42:	4602      	mov	r2, r0
 8024d44:	4631      	mov	r1, r6
 8024d46:	4648      	mov	r0, r9
 8024d48:	920a      	str	r2, [sp, #40]	@ 0x28
 8024d4a:	f000 f955 	bl	8024ff8 <_Bfree>
 8024d4e:	9b07      	ldr	r3, [sp, #28]
 8024d50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024d52:	9e05      	ldr	r6, [sp, #20]
 8024d54:	ea43 0102 	orr.w	r1, r3, r2
 8024d58:	9b08      	ldr	r3, [sp, #32]
 8024d5a:	4319      	orrs	r1, r3
 8024d5c:	d10f      	bne.n	8024d7e <_dtoa_r+0x946>
 8024d5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024d62:	d028      	beq.n	8024db6 <_dtoa_r+0x97e>
 8024d64:	9b06      	ldr	r3, [sp, #24]
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	dd02      	ble.n	8024d70 <_dtoa_r+0x938>
 8024d6a:	9b02      	ldr	r3, [sp, #8]
 8024d6c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8024d70:	f88b a000 	strb.w	sl, [fp]
 8024d74:	e639      	b.n	80249ea <_dtoa_r+0x5b2>
 8024d76:	4628      	mov	r0, r5
 8024d78:	e7bd      	b.n	8024cf6 <_dtoa_r+0x8be>
 8024d7a:	2201      	movs	r2, #1
 8024d7c:	e7e2      	b.n	8024d44 <_dtoa_r+0x90c>
 8024d7e:	9b06      	ldr	r3, [sp, #24]
 8024d80:	2b00      	cmp	r3, #0
 8024d82:	db04      	blt.n	8024d8e <_dtoa_r+0x956>
 8024d84:	9907      	ldr	r1, [sp, #28]
 8024d86:	430b      	orrs	r3, r1
 8024d88:	9908      	ldr	r1, [sp, #32]
 8024d8a:	430b      	orrs	r3, r1
 8024d8c:	d120      	bne.n	8024dd0 <_dtoa_r+0x998>
 8024d8e:	2a00      	cmp	r2, #0
 8024d90:	ddee      	ble.n	8024d70 <_dtoa_r+0x938>
 8024d92:	9901      	ldr	r1, [sp, #4]
 8024d94:	2201      	movs	r2, #1
 8024d96:	4648      	mov	r0, r9
 8024d98:	f000 fb46 	bl	8025428 <__lshift>
 8024d9c:	4621      	mov	r1, r4
 8024d9e:	9001      	str	r0, [sp, #4]
 8024da0:	f000 fbae 	bl	8025500 <__mcmp>
 8024da4:	2800      	cmp	r0, #0
 8024da6:	dc03      	bgt.n	8024db0 <_dtoa_r+0x978>
 8024da8:	d1e2      	bne.n	8024d70 <_dtoa_r+0x938>
 8024daa:	f01a 0f01 	tst.w	sl, #1
 8024dae:	d0df      	beq.n	8024d70 <_dtoa_r+0x938>
 8024db0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024db4:	d1d9      	bne.n	8024d6a <_dtoa_r+0x932>
 8024db6:	2339      	movs	r3, #57	@ 0x39
 8024db8:	f88b 3000 	strb.w	r3, [fp]
 8024dbc:	4633      	mov	r3, r6
 8024dbe:	461e      	mov	r6, r3
 8024dc0:	3b01      	subs	r3, #1
 8024dc2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8024dc6:	2a39      	cmp	r2, #57	@ 0x39
 8024dc8:	d053      	beq.n	8024e72 <_dtoa_r+0xa3a>
 8024dca:	3201      	adds	r2, #1
 8024dcc:	701a      	strb	r2, [r3, #0]
 8024dce:	e60c      	b.n	80249ea <_dtoa_r+0x5b2>
 8024dd0:	2a00      	cmp	r2, #0
 8024dd2:	dd07      	ble.n	8024de4 <_dtoa_r+0x9ac>
 8024dd4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8024dd8:	d0ed      	beq.n	8024db6 <_dtoa_r+0x97e>
 8024dda:	f10a 0301 	add.w	r3, sl, #1
 8024dde:	f88b 3000 	strb.w	r3, [fp]
 8024de2:	e602      	b.n	80249ea <_dtoa_r+0x5b2>
 8024de4:	9b05      	ldr	r3, [sp, #20]
 8024de6:	9a05      	ldr	r2, [sp, #20]
 8024de8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8024dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024dee:	4293      	cmp	r3, r2
 8024df0:	d029      	beq.n	8024e46 <_dtoa_r+0xa0e>
 8024df2:	9901      	ldr	r1, [sp, #4]
 8024df4:	2300      	movs	r3, #0
 8024df6:	220a      	movs	r2, #10
 8024df8:	4648      	mov	r0, r9
 8024dfa:	f000 f91f 	bl	802503c <__multadd>
 8024dfe:	45a8      	cmp	r8, r5
 8024e00:	9001      	str	r0, [sp, #4]
 8024e02:	f04f 0300 	mov.w	r3, #0
 8024e06:	f04f 020a 	mov.w	r2, #10
 8024e0a:	4641      	mov	r1, r8
 8024e0c:	4648      	mov	r0, r9
 8024e0e:	d107      	bne.n	8024e20 <_dtoa_r+0x9e8>
 8024e10:	f000 f914 	bl	802503c <__multadd>
 8024e14:	4680      	mov	r8, r0
 8024e16:	4605      	mov	r5, r0
 8024e18:	9b05      	ldr	r3, [sp, #20]
 8024e1a:	3301      	adds	r3, #1
 8024e1c:	9305      	str	r3, [sp, #20]
 8024e1e:	e775      	b.n	8024d0c <_dtoa_r+0x8d4>
 8024e20:	f000 f90c 	bl	802503c <__multadd>
 8024e24:	4629      	mov	r1, r5
 8024e26:	4680      	mov	r8, r0
 8024e28:	2300      	movs	r3, #0
 8024e2a:	220a      	movs	r2, #10
 8024e2c:	4648      	mov	r0, r9
 8024e2e:	f000 f905 	bl	802503c <__multadd>
 8024e32:	4605      	mov	r5, r0
 8024e34:	e7f0      	b.n	8024e18 <_dtoa_r+0x9e0>
 8024e36:	f1bb 0f00 	cmp.w	fp, #0
 8024e3a:	bfcc      	ite	gt
 8024e3c:	465e      	movgt	r6, fp
 8024e3e:	2601      	movle	r6, #1
 8024e40:	443e      	add	r6, r7
 8024e42:	f04f 0800 	mov.w	r8, #0
 8024e46:	9901      	ldr	r1, [sp, #4]
 8024e48:	2201      	movs	r2, #1
 8024e4a:	4648      	mov	r0, r9
 8024e4c:	f000 faec 	bl	8025428 <__lshift>
 8024e50:	4621      	mov	r1, r4
 8024e52:	9001      	str	r0, [sp, #4]
 8024e54:	f000 fb54 	bl	8025500 <__mcmp>
 8024e58:	2800      	cmp	r0, #0
 8024e5a:	dcaf      	bgt.n	8024dbc <_dtoa_r+0x984>
 8024e5c:	d102      	bne.n	8024e64 <_dtoa_r+0xa2c>
 8024e5e:	f01a 0f01 	tst.w	sl, #1
 8024e62:	d1ab      	bne.n	8024dbc <_dtoa_r+0x984>
 8024e64:	4633      	mov	r3, r6
 8024e66:	461e      	mov	r6, r3
 8024e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024e6c:	2a30      	cmp	r2, #48	@ 0x30
 8024e6e:	d0fa      	beq.n	8024e66 <_dtoa_r+0xa2e>
 8024e70:	e5bb      	b.n	80249ea <_dtoa_r+0x5b2>
 8024e72:	429f      	cmp	r7, r3
 8024e74:	d1a3      	bne.n	8024dbe <_dtoa_r+0x986>
 8024e76:	9b04      	ldr	r3, [sp, #16]
 8024e78:	3301      	adds	r3, #1
 8024e7a:	9304      	str	r3, [sp, #16]
 8024e7c:	2331      	movs	r3, #49	@ 0x31
 8024e7e:	703b      	strb	r3, [r7, #0]
 8024e80:	e5b3      	b.n	80249ea <_dtoa_r+0x5b2>
 8024e82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e84:	4f16      	ldr	r7, [pc, #88]	@ (8024ee0 <_dtoa_r+0xaa8>)
 8024e86:	b11b      	cbz	r3, 8024e90 <_dtoa_r+0xa58>
 8024e88:	f107 0308 	add.w	r3, r7, #8
 8024e8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024e8e:	6013      	str	r3, [r2, #0]
 8024e90:	4638      	mov	r0, r7
 8024e92:	b011      	add	sp, #68	@ 0x44
 8024e94:	ecbd 8b02 	vpop	{d8}
 8024e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e9c:	9b07      	ldr	r3, [sp, #28]
 8024e9e:	2b01      	cmp	r3, #1
 8024ea0:	f77f ae36 	ble.w	8024b10 <_dtoa_r+0x6d8>
 8024ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ea8:	2001      	movs	r0, #1
 8024eaa:	e656      	b.n	8024b5a <_dtoa_r+0x722>
 8024eac:	f1bb 0f00 	cmp.w	fp, #0
 8024eb0:	f77f aed7 	ble.w	8024c62 <_dtoa_r+0x82a>
 8024eb4:	463e      	mov	r6, r7
 8024eb6:	9801      	ldr	r0, [sp, #4]
 8024eb8:	4621      	mov	r1, r4
 8024eba:	f7ff fa35 	bl	8024328 <quorem>
 8024ebe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8024ec2:	f806 ab01 	strb.w	sl, [r6], #1
 8024ec6:	1bf2      	subs	r2, r6, r7
 8024ec8:	4593      	cmp	fp, r2
 8024eca:	ddb4      	ble.n	8024e36 <_dtoa_r+0x9fe>
 8024ecc:	9901      	ldr	r1, [sp, #4]
 8024ece:	2300      	movs	r3, #0
 8024ed0:	220a      	movs	r2, #10
 8024ed2:	4648      	mov	r0, r9
 8024ed4:	f000 f8b2 	bl	802503c <__multadd>
 8024ed8:	9001      	str	r0, [sp, #4]
 8024eda:	e7ec      	b.n	8024eb6 <_dtoa_r+0xa7e>
 8024edc:	08029e3d 	.word	0x08029e3d
 8024ee0:	08029dc1 	.word	0x08029dc1

08024ee4 <_free_r>:
 8024ee4:	b538      	push	{r3, r4, r5, lr}
 8024ee6:	4605      	mov	r5, r0
 8024ee8:	2900      	cmp	r1, #0
 8024eea:	d041      	beq.n	8024f70 <_free_r+0x8c>
 8024eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024ef0:	1f0c      	subs	r4, r1, #4
 8024ef2:	2b00      	cmp	r3, #0
 8024ef4:	bfb8      	it	lt
 8024ef6:	18e4      	addlt	r4, r4, r3
 8024ef8:	f7fe f838 	bl	8022f6c <__malloc_lock>
 8024efc:	4a1d      	ldr	r2, [pc, #116]	@ (8024f74 <_free_r+0x90>)
 8024efe:	6813      	ldr	r3, [r2, #0]
 8024f00:	b933      	cbnz	r3, 8024f10 <_free_r+0x2c>
 8024f02:	6063      	str	r3, [r4, #4]
 8024f04:	6014      	str	r4, [r2, #0]
 8024f06:	4628      	mov	r0, r5
 8024f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f0c:	f7fe b834 	b.w	8022f78 <__malloc_unlock>
 8024f10:	42a3      	cmp	r3, r4
 8024f12:	d908      	bls.n	8024f26 <_free_r+0x42>
 8024f14:	6820      	ldr	r0, [r4, #0]
 8024f16:	1821      	adds	r1, r4, r0
 8024f18:	428b      	cmp	r3, r1
 8024f1a:	bf01      	itttt	eq
 8024f1c:	6819      	ldreq	r1, [r3, #0]
 8024f1e:	685b      	ldreq	r3, [r3, #4]
 8024f20:	1809      	addeq	r1, r1, r0
 8024f22:	6021      	streq	r1, [r4, #0]
 8024f24:	e7ed      	b.n	8024f02 <_free_r+0x1e>
 8024f26:	461a      	mov	r2, r3
 8024f28:	685b      	ldr	r3, [r3, #4]
 8024f2a:	b10b      	cbz	r3, 8024f30 <_free_r+0x4c>
 8024f2c:	42a3      	cmp	r3, r4
 8024f2e:	d9fa      	bls.n	8024f26 <_free_r+0x42>
 8024f30:	6811      	ldr	r1, [r2, #0]
 8024f32:	1850      	adds	r0, r2, r1
 8024f34:	42a0      	cmp	r0, r4
 8024f36:	d10b      	bne.n	8024f50 <_free_r+0x6c>
 8024f38:	6820      	ldr	r0, [r4, #0]
 8024f3a:	4401      	add	r1, r0
 8024f3c:	1850      	adds	r0, r2, r1
 8024f3e:	4283      	cmp	r3, r0
 8024f40:	6011      	str	r1, [r2, #0]
 8024f42:	d1e0      	bne.n	8024f06 <_free_r+0x22>
 8024f44:	6818      	ldr	r0, [r3, #0]
 8024f46:	685b      	ldr	r3, [r3, #4]
 8024f48:	6053      	str	r3, [r2, #4]
 8024f4a:	4408      	add	r0, r1
 8024f4c:	6010      	str	r0, [r2, #0]
 8024f4e:	e7da      	b.n	8024f06 <_free_r+0x22>
 8024f50:	d902      	bls.n	8024f58 <_free_r+0x74>
 8024f52:	230c      	movs	r3, #12
 8024f54:	602b      	str	r3, [r5, #0]
 8024f56:	e7d6      	b.n	8024f06 <_free_r+0x22>
 8024f58:	6820      	ldr	r0, [r4, #0]
 8024f5a:	1821      	adds	r1, r4, r0
 8024f5c:	428b      	cmp	r3, r1
 8024f5e:	bf04      	itt	eq
 8024f60:	6819      	ldreq	r1, [r3, #0]
 8024f62:	685b      	ldreq	r3, [r3, #4]
 8024f64:	6063      	str	r3, [r4, #4]
 8024f66:	bf04      	itt	eq
 8024f68:	1809      	addeq	r1, r1, r0
 8024f6a:	6021      	streq	r1, [r4, #0]
 8024f6c:	6054      	str	r4, [r2, #4]
 8024f6e:	e7ca      	b.n	8024f06 <_free_r+0x22>
 8024f70:	bd38      	pop	{r3, r4, r5, pc}
 8024f72:	bf00      	nop
 8024f74:	2400b4dc 	.word	0x2400b4dc

08024f78 <_Balloc>:
 8024f78:	b570      	push	{r4, r5, r6, lr}
 8024f7a:	69c6      	ldr	r6, [r0, #28]
 8024f7c:	4604      	mov	r4, r0
 8024f7e:	460d      	mov	r5, r1
 8024f80:	b976      	cbnz	r6, 8024fa0 <_Balloc+0x28>
 8024f82:	2010      	movs	r0, #16
 8024f84:	f7fd ff40 	bl	8022e08 <malloc>
 8024f88:	4602      	mov	r2, r0
 8024f8a:	61e0      	str	r0, [r4, #28]
 8024f8c:	b920      	cbnz	r0, 8024f98 <_Balloc+0x20>
 8024f8e:	4b18      	ldr	r3, [pc, #96]	@ (8024ff0 <_Balloc+0x78>)
 8024f90:	4818      	ldr	r0, [pc, #96]	@ (8024ff4 <_Balloc+0x7c>)
 8024f92:	216b      	movs	r1, #107	@ 0x6b
 8024f94:	f7fd ff14 	bl	8022dc0 <__assert_func>
 8024f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024f9c:	6006      	str	r6, [r0, #0]
 8024f9e:	60c6      	str	r6, [r0, #12]
 8024fa0:	69e6      	ldr	r6, [r4, #28]
 8024fa2:	68f3      	ldr	r3, [r6, #12]
 8024fa4:	b183      	cbz	r3, 8024fc8 <_Balloc+0x50>
 8024fa6:	69e3      	ldr	r3, [r4, #28]
 8024fa8:	68db      	ldr	r3, [r3, #12]
 8024faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8024fae:	b9b8      	cbnz	r0, 8024fe0 <_Balloc+0x68>
 8024fb0:	2101      	movs	r1, #1
 8024fb2:	fa01 f605 	lsl.w	r6, r1, r5
 8024fb6:	1d72      	adds	r2, r6, #5
 8024fb8:	0092      	lsls	r2, r2, #2
 8024fba:	4620      	mov	r0, r4
 8024fbc:	f001 fec0 	bl	8026d40 <_calloc_r>
 8024fc0:	b160      	cbz	r0, 8024fdc <_Balloc+0x64>
 8024fc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024fc6:	e00e      	b.n	8024fe6 <_Balloc+0x6e>
 8024fc8:	2221      	movs	r2, #33	@ 0x21
 8024fca:	2104      	movs	r1, #4
 8024fcc:	4620      	mov	r0, r4
 8024fce:	f001 feb7 	bl	8026d40 <_calloc_r>
 8024fd2:	69e3      	ldr	r3, [r4, #28]
 8024fd4:	60f0      	str	r0, [r6, #12]
 8024fd6:	68db      	ldr	r3, [r3, #12]
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	d1e4      	bne.n	8024fa6 <_Balloc+0x2e>
 8024fdc:	2000      	movs	r0, #0
 8024fde:	bd70      	pop	{r4, r5, r6, pc}
 8024fe0:	6802      	ldr	r2, [r0, #0]
 8024fe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024fe6:	2300      	movs	r3, #0
 8024fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024fec:	e7f7      	b.n	8024fde <_Balloc+0x66>
 8024fee:	bf00      	nop
 8024ff0:	08029dce 	.word	0x08029dce
 8024ff4:	08029e4e 	.word	0x08029e4e

08024ff8 <_Bfree>:
 8024ff8:	b570      	push	{r4, r5, r6, lr}
 8024ffa:	69c6      	ldr	r6, [r0, #28]
 8024ffc:	4605      	mov	r5, r0
 8024ffe:	460c      	mov	r4, r1
 8025000:	b976      	cbnz	r6, 8025020 <_Bfree+0x28>
 8025002:	2010      	movs	r0, #16
 8025004:	f7fd ff00 	bl	8022e08 <malloc>
 8025008:	4602      	mov	r2, r0
 802500a:	61e8      	str	r0, [r5, #28]
 802500c:	b920      	cbnz	r0, 8025018 <_Bfree+0x20>
 802500e:	4b09      	ldr	r3, [pc, #36]	@ (8025034 <_Bfree+0x3c>)
 8025010:	4809      	ldr	r0, [pc, #36]	@ (8025038 <_Bfree+0x40>)
 8025012:	218f      	movs	r1, #143	@ 0x8f
 8025014:	f7fd fed4 	bl	8022dc0 <__assert_func>
 8025018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802501c:	6006      	str	r6, [r0, #0]
 802501e:	60c6      	str	r6, [r0, #12]
 8025020:	b13c      	cbz	r4, 8025032 <_Bfree+0x3a>
 8025022:	69eb      	ldr	r3, [r5, #28]
 8025024:	6862      	ldr	r2, [r4, #4]
 8025026:	68db      	ldr	r3, [r3, #12]
 8025028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802502c:	6021      	str	r1, [r4, #0]
 802502e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025032:	bd70      	pop	{r4, r5, r6, pc}
 8025034:	08029dce 	.word	0x08029dce
 8025038:	08029e4e 	.word	0x08029e4e

0802503c <__multadd>:
 802503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025040:	690d      	ldr	r5, [r1, #16]
 8025042:	4607      	mov	r7, r0
 8025044:	460c      	mov	r4, r1
 8025046:	461e      	mov	r6, r3
 8025048:	f101 0c14 	add.w	ip, r1, #20
 802504c:	2000      	movs	r0, #0
 802504e:	f8dc 3000 	ldr.w	r3, [ip]
 8025052:	b299      	uxth	r1, r3
 8025054:	fb02 6101 	mla	r1, r2, r1, r6
 8025058:	0c1e      	lsrs	r6, r3, #16
 802505a:	0c0b      	lsrs	r3, r1, #16
 802505c:	fb02 3306 	mla	r3, r2, r6, r3
 8025060:	b289      	uxth	r1, r1
 8025062:	3001      	adds	r0, #1
 8025064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025068:	4285      	cmp	r5, r0
 802506a:	f84c 1b04 	str.w	r1, [ip], #4
 802506e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025072:	dcec      	bgt.n	802504e <__multadd+0x12>
 8025074:	b30e      	cbz	r6, 80250ba <__multadd+0x7e>
 8025076:	68a3      	ldr	r3, [r4, #8]
 8025078:	42ab      	cmp	r3, r5
 802507a:	dc19      	bgt.n	80250b0 <__multadd+0x74>
 802507c:	6861      	ldr	r1, [r4, #4]
 802507e:	4638      	mov	r0, r7
 8025080:	3101      	adds	r1, #1
 8025082:	f7ff ff79 	bl	8024f78 <_Balloc>
 8025086:	4680      	mov	r8, r0
 8025088:	b928      	cbnz	r0, 8025096 <__multadd+0x5a>
 802508a:	4602      	mov	r2, r0
 802508c:	4b0c      	ldr	r3, [pc, #48]	@ (80250c0 <__multadd+0x84>)
 802508e:	480d      	ldr	r0, [pc, #52]	@ (80250c4 <__multadd+0x88>)
 8025090:	21ba      	movs	r1, #186	@ 0xba
 8025092:	f7fd fe95 	bl	8022dc0 <__assert_func>
 8025096:	6922      	ldr	r2, [r4, #16]
 8025098:	3202      	adds	r2, #2
 802509a:	f104 010c 	add.w	r1, r4, #12
 802509e:	0092      	lsls	r2, r2, #2
 80250a0:	300c      	adds	r0, #12
 80250a2:	f7ff f8d0 	bl	8024246 <memcpy>
 80250a6:	4621      	mov	r1, r4
 80250a8:	4638      	mov	r0, r7
 80250aa:	f7ff ffa5 	bl	8024ff8 <_Bfree>
 80250ae:	4644      	mov	r4, r8
 80250b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80250b4:	3501      	adds	r5, #1
 80250b6:	615e      	str	r6, [r3, #20]
 80250b8:	6125      	str	r5, [r4, #16]
 80250ba:	4620      	mov	r0, r4
 80250bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80250c0:	08029e3d 	.word	0x08029e3d
 80250c4:	08029e4e 	.word	0x08029e4e

080250c8 <__s2b>:
 80250c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80250cc:	460c      	mov	r4, r1
 80250ce:	4615      	mov	r5, r2
 80250d0:	461f      	mov	r7, r3
 80250d2:	2209      	movs	r2, #9
 80250d4:	3308      	adds	r3, #8
 80250d6:	4606      	mov	r6, r0
 80250d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80250dc:	2100      	movs	r1, #0
 80250de:	2201      	movs	r2, #1
 80250e0:	429a      	cmp	r2, r3
 80250e2:	db09      	blt.n	80250f8 <__s2b+0x30>
 80250e4:	4630      	mov	r0, r6
 80250e6:	f7ff ff47 	bl	8024f78 <_Balloc>
 80250ea:	b940      	cbnz	r0, 80250fe <__s2b+0x36>
 80250ec:	4602      	mov	r2, r0
 80250ee:	4b19      	ldr	r3, [pc, #100]	@ (8025154 <__s2b+0x8c>)
 80250f0:	4819      	ldr	r0, [pc, #100]	@ (8025158 <__s2b+0x90>)
 80250f2:	21d3      	movs	r1, #211	@ 0xd3
 80250f4:	f7fd fe64 	bl	8022dc0 <__assert_func>
 80250f8:	0052      	lsls	r2, r2, #1
 80250fa:	3101      	adds	r1, #1
 80250fc:	e7f0      	b.n	80250e0 <__s2b+0x18>
 80250fe:	9b08      	ldr	r3, [sp, #32]
 8025100:	6143      	str	r3, [r0, #20]
 8025102:	2d09      	cmp	r5, #9
 8025104:	f04f 0301 	mov.w	r3, #1
 8025108:	6103      	str	r3, [r0, #16]
 802510a:	dd16      	ble.n	802513a <__s2b+0x72>
 802510c:	f104 0909 	add.w	r9, r4, #9
 8025110:	46c8      	mov	r8, r9
 8025112:	442c      	add	r4, r5
 8025114:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025118:	4601      	mov	r1, r0
 802511a:	3b30      	subs	r3, #48	@ 0x30
 802511c:	220a      	movs	r2, #10
 802511e:	4630      	mov	r0, r6
 8025120:	f7ff ff8c 	bl	802503c <__multadd>
 8025124:	45a0      	cmp	r8, r4
 8025126:	d1f5      	bne.n	8025114 <__s2b+0x4c>
 8025128:	f1a5 0408 	sub.w	r4, r5, #8
 802512c:	444c      	add	r4, r9
 802512e:	1b2d      	subs	r5, r5, r4
 8025130:	1963      	adds	r3, r4, r5
 8025132:	42bb      	cmp	r3, r7
 8025134:	db04      	blt.n	8025140 <__s2b+0x78>
 8025136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802513a:	340a      	adds	r4, #10
 802513c:	2509      	movs	r5, #9
 802513e:	e7f6      	b.n	802512e <__s2b+0x66>
 8025140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025144:	4601      	mov	r1, r0
 8025146:	3b30      	subs	r3, #48	@ 0x30
 8025148:	220a      	movs	r2, #10
 802514a:	4630      	mov	r0, r6
 802514c:	f7ff ff76 	bl	802503c <__multadd>
 8025150:	e7ee      	b.n	8025130 <__s2b+0x68>
 8025152:	bf00      	nop
 8025154:	08029e3d 	.word	0x08029e3d
 8025158:	08029e4e 	.word	0x08029e4e

0802515c <__hi0bits>:
 802515c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8025160:	4603      	mov	r3, r0
 8025162:	bf36      	itet	cc
 8025164:	0403      	lslcc	r3, r0, #16
 8025166:	2000      	movcs	r0, #0
 8025168:	2010      	movcc	r0, #16
 802516a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802516e:	bf3c      	itt	cc
 8025170:	021b      	lslcc	r3, r3, #8
 8025172:	3008      	addcc	r0, #8
 8025174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8025178:	bf3c      	itt	cc
 802517a:	011b      	lslcc	r3, r3, #4
 802517c:	3004      	addcc	r0, #4
 802517e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025182:	bf3c      	itt	cc
 8025184:	009b      	lslcc	r3, r3, #2
 8025186:	3002      	addcc	r0, #2
 8025188:	2b00      	cmp	r3, #0
 802518a:	db05      	blt.n	8025198 <__hi0bits+0x3c>
 802518c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8025190:	f100 0001 	add.w	r0, r0, #1
 8025194:	bf08      	it	eq
 8025196:	2020      	moveq	r0, #32
 8025198:	4770      	bx	lr

0802519a <__lo0bits>:
 802519a:	6803      	ldr	r3, [r0, #0]
 802519c:	4602      	mov	r2, r0
 802519e:	f013 0007 	ands.w	r0, r3, #7
 80251a2:	d00b      	beq.n	80251bc <__lo0bits+0x22>
 80251a4:	07d9      	lsls	r1, r3, #31
 80251a6:	d421      	bmi.n	80251ec <__lo0bits+0x52>
 80251a8:	0798      	lsls	r0, r3, #30
 80251aa:	bf49      	itett	mi
 80251ac:	085b      	lsrmi	r3, r3, #1
 80251ae:	089b      	lsrpl	r3, r3, #2
 80251b0:	2001      	movmi	r0, #1
 80251b2:	6013      	strmi	r3, [r2, #0]
 80251b4:	bf5c      	itt	pl
 80251b6:	6013      	strpl	r3, [r2, #0]
 80251b8:	2002      	movpl	r0, #2
 80251ba:	4770      	bx	lr
 80251bc:	b299      	uxth	r1, r3
 80251be:	b909      	cbnz	r1, 80251c4 <__lo0bits+0x2a>
 80251c0:	0c1b      	lsrs	r3, r3, #16
 80251c2:	2010      	movs	r0, #16
 80251c4:	b2d9      	uxtb	r1, r3
 80251c6:	b909      	cbnz	r1, 80251cc <__lo0bits+0x32>
 80251c8:	3008      	adds	r0, #8
 80251ca:	0a1b      	lsrs	r3, r3, #8
 80251cc:	0719      	lsls	r1, r3, #28
 80251ce:	bf04      	itt	eq
 80251d0:	091b      	lsreq	r3, r3, #4
 80251d2:	3004      	addeq	r0, #4
 80251d4:	0799      	lsls	r1, r3, #30
 80251d6:	bf04      	itt	eq
 80251d8:	089b      	lsreq	r3, r3, #2
 80251da:	3002      	addeq	r0, #2
 80251dc:	07d9      	lsls	r1, r3, #31
 80251de:	d403      	bmi.n	80251e8 <__lo0bits+0x4e>
 80251e0:	085b      	lsrs	r3, r3, #1
 80251e2:	f100 0001 	add.w	r0, r0, #1
 80251e6:	d003      	beq.n	80251f0 <__lo0bits+0x56>
 80251e8:	6013      	str	r3, [r2, #0]
 80251ea:	4770      	bx	lr
 80251ec:	2000      	movs	r0, #0
 80251ee:	4770      	bx	lr
 80251f0:	2020      	movs	r0, #32
 80251f2:	4770      	bx	lr

080251f4 <__i2b>:
 80251f4:	b510      	push	{r4, lr}
 80251f6:	460c      	mov	r4, r1
 80251f8:	2101      	movs	r1, #1
 80251fa:	f7ff febd 	bl	8024f78 <_Balloc>
 80251fe:	4602      	mov	r2, r0
 8025200:	b928      	cbnz	r0, 802520e <__i2b+0x1a>
 8025202:	4b05      	ldr	r3, [pc, #20]	@ (8025218 <__i2b+0x24>)
 8025204:	4805      	ldr	r0, [pc, #20]	@ (802521c <__i2b+0x28>)
 8025206:	f240 1145 	movw	r1, #325	@ 0x145
 802520a:	f7fd fdd9 	bl	8022dc0 <__assert_func>
 802520e:	2301      	movs	r3, #1
 8025210:	6144      	str	r4, [r0, #20]
 8025212:	6103      	str	r3, [r0, #16]
 8025214:	bd10      	pop	{r4, pc}
 8025216:	bf00      	nop
 8025218:	08029e3d 	.word	0x08029e3d
 802521c:	08029e4e 	.word	0x08029e4e

08025220 <__multiply>:
 8025220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025224:	4614      	mov	r4, r2
 8025226:	690a      	ldr	r2, [r1, #16]
 8025228:	6923      	ldr	r3, [r4, #16]
 802522a:	429a      	cmp	r2, r3
 802522c:	bfa8      	it	ge
 802522e:	4623      	movge	r3, r4
 8025230:	460f      	mov	r7, r1
 8025232:	bfa4      	itt	ge
 8025234:	460c      	movge	r4, r1
 8025236:	461f      	movge	r7, r3
 8025238:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802523c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8025240:	68a3      	ldr	r3, [r4, #8]
 8025242:	6861      	ldr	r1, [r4, #4]
 8025244:	eb0a 0609 	add.w	r6, sl, r9
 8025248:	42b3      	cmp	r3, r6
 802524a:	b085      	sub	sp, #20
 802524c:	bfb8      	it	lt
 802524e:	3101      	addlt	r1, #1
 8025250:	f7ff fe92 	bl	8024f78 <_Balloc>
 8025254:	b930      	cbnz	r0, 8025264 <__multiply+0x44>
 8025256:	4602      	mov	r2, r0
 8025258:	4b44      	ldr	r3, [pc, #272]	@ (802536c <__multiply+0x14c>)
 802525a:	4845      	ldr	r0, [pc, #276]	@ (8025370 <__multiply+0x150>)
 802525c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8025260:	f7fd fdae 	bl	8022dc0 <__assert_func>
 8025264:	f100 0514 	add.w	r5, r0, #20
 8025268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802526c:	462b      	mov	r3, r5
 802526e:	2200      	movs	r2, #0
 8025270:	4543      	cmp	r3, r8
 8025272:	d321      	bcc.n	80252b8 <__multiply+0x98>
 8025274:	f107 0114 	add.w	r1, r7, #20
 8025278:	f104 0214 	add.w	r2, r4, #20
 802527c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8025280:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8025284:	9302      	str	r3, [sp, #8]
 8025286:	1b13      	subs	r3, r2, r4
 8025288:	3b15      	subs	r3, #21
 802528a:	f023 0303 	bic.w	r3, r3, #3
 802528e:	3304      	adds	r3, #4
 8025290:	f104 0715 	add.w	r7, r4, #21
 8025294:	42ba      	cmp	r2, r7
 8025296:	bf38      	it	cc
 8025298:	2304      	movcc	r3, #4
 802529a:	9301      	str	r3, [sp, #4]
 802529c:	9b02      	ldr	r3, [sp, #8]
 802529e:	9103      	str	r1, [sp, #12]
 80252a0:	428b      	cmp	r3, r1
 80252a2:	d80c      	bhi.n	80252be <__multiply+0x9e>
 80252a4:	2e00      	cmp	r6, #0
 80252a6:	dd03      	ble.n	80252b0 <__multiply+0x90>
 80252a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80252ac:	2b00      	cmp	r3, #0
 80252ae:	d05b      	beq.n	8025368 <__multiply+0x148>
 80252b0:	6106      	str	r6, [r0, #16]
 80252b2:	b005      	add	sp, #20
 80252b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252b8:	f843 2b04 	str.w	r2, [r3], #4
 80252bc:	e7d8      	b.n	8025270 <__multiply+0x50>
 80252be:	f8b1 a000 	ldrh.w	sl, [r1]
 80252c2:	f1ba 0f00 	cmp.w	sl, #0
 80252c6:	d024      	beq.n	8025312 <__multiply+0xf2>
 80252c8:	f104 0e14 	add.w	lr, r4, #20
 80252cc:	46a9      	mov	r9, r5
 80252ce:	f04f 0c00 	mov.w	ip, #0
 80252d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80252d6:	f8d9 3000 	ldr.w	r3, [r9]
 80252da:	fa1f fb87 	uxth.w	fp, r7
 80252de:	b29b      	uxth	r3, r3
 80252e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80252e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80252e8:	f8d9 7000 	ldr.w	r7, [r9]
 80252ec:	4463      	add	r3, ip
 80252ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80252f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80252f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80252fa:	b29b      	uxth	r3, r3
 80252fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8025300:	4572      	cmp	r2, lr
 8025302:	f849 3b04 	str.w	r3, [r9], #4
 8025306:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802530a:	d8e2      	bhi.n	80252d2 <__multiply+0xb2>
 802530c:	9b01      	ldr	r3, [sp, #4]
 802530e:	f845 c003 	str.w	ip, [r5, r3]
 8025312:	9b03      	ldr	r3, [sp, #12]
 8025314:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8025318:	3104      	adds	r1, #4
 802531a:	f1b9 0f00 	cmp.w	r9, #0
 802531e:	d021      	beq.n	8025364 <__multiply+0x144>
 8025320:	682b      	ldr	r3, [r5, #0]
 8025322:	f104 0c14 	add.w	ip, r4, #20
 8025326:	46ae      	mov	lr, r5
 8025328:	f04f 0a00 	mov.w	sl, #0
 802532c:	f8bc b000 	ldrh.w	fp, [ip]
 8025330:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8025334:	fb09 770b 	mla	r7, r9, fp, r7
 8025338:	4457      	add	r7, sl
 802533a:	b29b      	uxth	r3, r3
 802533c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8025340:	f84e 3b04 	str.w	r3, [lr], #4
 8025344:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025348:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802534c:	f8be 3000 	ldrh.w	r3, [lr]
 8025350:	fb09 330a 	mla	r3, r9, sl, r3
 8025354:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8025358:	4562      	cmp	r2, ip
 802535a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802535e:	d8e5      	bhi.n	802532c <__multiply+0x10c>
 8025360:	9f01      	ldr	r7, [sp, #4]
 8025362:	51eb      	str	r3, [r5, r7]
 8025364:	3504      	adds	r5, #4
 8025366:	e799      	b.n	802529c <__multiply+0x7c>
 8025368:	3e01      	subs	r6, #1
 802536a:	e79b      	b.n	80252a4 <__multiply+0x84>
 802536c:	08029e3d 	.word	0x08029e3d
 8025370:	08029e4e 	.word	0x08029e4e

08025374 <__pow5mult>:
 8025374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025378:	4615      	mov	r5, r2
 802537a:	f012 0203 	ands.w	r2, r2, #3
 802537e:	4607      	mov	r7, r0
 8025380:	460e      	mov	r6, r1
 8025382:	d007      	beq.n	8025394 <__pow5mult+0x20>
 8025384:	4c25      	ldr	r4, [pc, #148]	@ (802541c <__pow5mult+0xa8>)
 8025386:	3a01      	subs	r2, #1
 8025388:	2300      	movs	r3, #0
 802538a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802538e:	f7ff fe55 	bl	802503c <__multadd>
 8025392:	4606      	mov	r6, r0
 8025394:	10ad      	asrs	r5, r5, #2
 8025396:	d03d      	beq.n	8025414 <__pow5mult+0xa0>
 8025398:	69fc      	ldr	r4, [r7, #28]
 802539a:	b97c      	cbnz	r4, 80253bc <__pow5mult+0x48>
 802539c:	2010      	movs	r0, #16
 802539e:	f7fd fd33 	bl	8022e08 <malloc>
 80253a2:	4602      	mov	r2, r0
 80253a4:	61f8      	str	r0, [r7, #28]
 80253a6:	b928      	cbnz	r0, 80253b4 <__pow5mult+0x40>
 80253a8:	4b1d      	ldr	r3, [pc, #116]	@ (8025420 <__pow5mult+0xac>)
 80253aa:	481e      	ldr	r0, [pc, #120]	@ (8025424 <__pow5mult+0xb0>)
 80253ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80253b0:	f7fd fd06 	bl	8022dc0 <__assert_func>
 80253b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80253b8:	6004      	str	r4, [r0, #0]
 80253ba:	60c4      	str	r4, [r0, #12]
 80253bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80253c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80253c4:	b94c      	cbnz	r4, 80253da <__pow5mult+0x66>
 80253c6:	f240 2171 	movw	r1, #625	@ 0x271
 80253ca:	4638      	mov	r0, r7
 80253cc:	f7ff ff12 	bl	80251f4 <__i2b>
 80253d0:	2300      	movs	r3, #0
 80253d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80253d6:	4604      	mov	r4, r0
 80253d8:	6003      	str	r3, [r0, #0]
 80253da:	f04f 0900 	mov.w	r9, #0
 80253de:	07eb      	lsls	r3, r5, #31
 80253e0:	d50a      	bpl.n	80253f8 <__pow5mult+0x84>
 80253e2:	4631      	mov	r1, r6
 80253e4:	4622      	mov	r2, r4
 80253e6:	4638      	mov	r0, r7
 80253e8:	f7ff ff1a 	bl	8025220 <__multiply>
 80253ec:	4631      	mov	r1, r6
 80253ee:	4680      	mov	r8, r0
 80253f0:	4638      	mov	r0, r7
 80253f2:	f7ff fe01 	bl	8024ff8 <_Bfree>
 80253f6:	4646      	mov	r6, r8
 80253f8:	106d      	asrs	r5, r5, #1
 80253fa:	d00b      	beq.n	8025414 <__pow5mult+0xa0>
 80253fc:	6820      	ldr	r0, [r4, #0]
 80253fe:	b938      	cbnz	r0, 8025410 <__pow5mult+0x9c>
 8025400:	4622      	mov	r2, r4
 8025402:	4621      	mov	r1, r4
 8025404:	4638      	mov	r0, r7
 8025406:	f7ff ff0b 	bl	8025220 <__multiply>
 802540a:	6020      	str	r0, [r4, #0]
 802540c:	f8c0 9000 	str.w	r9, [r0]
 8025410:	4604      	mov	r4, r0
 8025412:	e7e4      	b.n	80253de <__pow5mult+0x6a>
 8025414:	4630      	mov	r0, r6
 8025416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802541a:	bf00      	nop
 802541c:	08029ea8 	.word	0x08029ea8
 8025420:	08029dce 	.word	0x08029dce
 8025424:	08029e4e 	.word	0x08029e4e

08025428 <__lshift>:
 8025428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802542c:	460c      	mov	r4, r1
 802542e:	6849      	ldr	r1, [r1, #4]
 8025430:	6923      	ldr	r3, [r4, #16]
 8025432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8025436:	68a3      	ldr	r3, [r4, #8]
 8025438:	4607      	mov	r7, r0
 802543a:	4691      	mov	r9, r2
 802543c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8025440:	f108 0601 	add.w	r6, r8, #1
 8025444:	42b3      	cmp	r3, r6
 8025446:	db0b      	blt.n	8025460 <__lshift+0x38>
 8025448:	4638      	mov	r0, r7
 802544a:	f7ff fd95 	bl	8024f78 <_Balloc>
 802544e:	4605      	mov	r5, r0
 8025450:	b948      	cbnz	r0, 8025466 <__lshift+0x3e>
 8025452:	4602      	mov	r2, r0
 8025454:	4b28      	ldr	r3, [pc, #160]	@ (80254f8 <__lshift+0xd0>)
 8025456:	4829      	ldr	r0, [pc, #164]	@ (80254fc <__lshift+0xd4>)
 8025458:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802545c:	f7fd fcb0 	bl	8022dc0 <__assert_func>
 8025460:	3101      	adds	r1, #1
 8025462:	005b      	lsls	r3, r3, #1
 8025464:	e7ee      	b.n	8025444 <__lshift+0x1c>
 8025466:	2300      	movs	r3, #0
 8025468:	f100 0114 	add.w	r1, r0, #20
 802546c:	f100 0210 	add.w	r2, r0, #16
 8025470:	4618      	mov	r0, r3
 8025472:	4553      	cmp	r3, sl
 8025474:	db33      	blt.n	80254de <__lshift+0xb6>
 8025476:	6920      	ldr	r0, [r4, #16]
 8025478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802547c:	f104 0314 	add.w	r3, r4, #20
 8025480:	f019 091f 	ands.w	r9, r9, #31
 8025484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8025488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802548c:	d02b      	beq.n	80254e6 <__lshift+0xbe>
 802548e:	f1c9 0e20 	rsb	lr, r9, #32
 8025492:	468a      	mov	sl, r1
 8025494:	2200      	movs	r2, #0
 8025496:	6818      	ldr	r0, [r3, #0]
 8025498:	fa00 f009 	lsl.w	r0, r0, r9
 802549c:	4310      	orrs	r0, r2
 802549e:	f84a 0b04 	str.w	r0, [sl], #4
 80254a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80254a6:	459c      	cmp	ip, r3
 80254a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80254ac:	d8f3      	bhi.n	8025496 <__lshift+0x6e>
 80254ae:	ebac 0304 	sub.w	r3, ip, r4
 80254b2:	3b15      	subs	r3, #21
 80254b4:	f023 0303 	bic.w	r3, r3, #3
 80254b8:	3304      	adds	r3, #4
 80254ba:	f104 0015 	add.w	r0, r4, #21
 80254be:	4584      	cmp	ip, r0
 80254c0:	bf38      	it	cc
 80254c2:	2304      	movcc	r3, #4
 80254c4:	50ca      	str	r2, [r1, r3]
 80254c6:	b10a      	cbz	r2, 80254cc <__lshift+0xa4>
 80254c8:	f108 0602 	add.w	r6, r8, #2
 80254cc:	3e01      	subs	r6, #1
 80254ce:	4638      	mov	r0, r7
 80254d0:	612e      	str	r6, [r5, #16]
 80254d2:	4621      	mov	r1, r4
 80254d4:	f7ff fd90 	bl	8024ff8 <_Bfree>
 80254d8:	4628      	mov	r0, r5
 80254da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254de:	f842 0f04 	str.w	r0, [r2, #4]!
 80254e2:	3301      	adds	r3, #1
 80254e4:	e7c5      	b.n	8025472 <__lshift+0x4a>
 80254e6:	3904      	subs	r1, #4
 80254e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80254ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80254f0:	459c      	cmp	ip, r3
 80254f2:	d8f9      	bhi.n	80254e8 <__lshift+0xc0>
 80254f4:	e7ea      	b.n	80254cc <__lshift+0xa4>
 80254f6:	bf00      	nop
 80254f8:	08029e3d 	.word	0x08029e3d
 80254fc:	08029e4e 	.word	0x08029e4e

08025500 <__mcmp>:
 8025500:	690a      	ldr	r2, [r1, #16]
 8025502:	4603      	mov	r3, r0
 8025504:	6900      	ldr	r0, [r0, #16]
 8025506:	1a80      	subs	r0, r0, r2
 8025508:	b530      	push	{r4, r5, lr}
 802550a:	d10e      	bne.n	802552a <__mcmp+0x2a>
 802550c:	3314      	adds	r3, #20
 802550e:	3114      	adds	r1, #20
 8025510:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8025514:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8025518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802551c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8025520:	4295      	cmp	r5, r2
 8025522:	d003      	beq.n	802552c <__mcmp+0x2c>
 8025524:	d205      	bcs.n	8025532 <__mcmp+0x32>
 8025526:	f04f 30ff 	mov.w	r0, #4294967295
 802552a:	bd30      	pop	{r4, r5, pc}
 802552c:	42a3      	cmp	r3, r4
 802552e:	d3f3      	bcc.n	8025518 <__mcmp+0x18>
 8025530:	e7fb      	b.n	802552a <__mcmp+0x2a>
 8025532:	2001      	movs	r0, #1
 8025534:	e7f9      	b.n	802552a <__mcmp+0x2a>
	...

08025538 <__mdiff>:
 8025538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802553c:	4689      	mov	r9, r1
 802553e:	4606      	mov	r6, r0
 8025540:	4611      	mov	r1, r2
 8025542:	4648      	mov	r0, r9
 8025544:	4614      	mov	r4, r2
 8025546:	f7ff ffdb 	bl	8025500 <__mcmp>
 802554a:	1e05      	subs	r5, r0, #0
 802554c:	d112      	bne.n	8025574 <__mdiff+0x3c>
 802554e:	4629      	mov	r1, r5
 8025550:	4630      	mov	r0, r6
 8025552:	f7ff fd11 	bl	8024f78 <_Balloc>
 8025556:	4602      	mov	r2, r0
 8025558:	b928      	cbnz	r0, 8025566 <__mdiff+0x2e>
 802555a:	4b3f      	ldr	r3, [pc, #252]	@ (8025658 <__mdiff+0x120>)
 802555c:	f240 2137 	movw	r1, #567	@ 0x237
 8025560:	483e      	ldr	r0, [pc, #248]	@ (802565c <__mdiff+0x124>)
 8025562:	f7fd fc2d 	bl	8022dc0 <__assert_func>
 8025566:	2301      	movs	r3, #1
 8025568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802556c:	4610      	mov	r0, r2
 802556e:	b003      	add	sp, #12
 8025570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025574:	bfbc      	itt	lt
 8025576:	464b      	movlt	r3, r9
 8025578:	46a1      	movlt	r9, r4
 802557a:	4630      	mov	r0, r6
 802557c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8025580:	bfba      	itte	lt
 8025582:	461c      	movlt	r4, r3
 8025584:	2501      	movlt	r5, #1
 8025586:	2500      	movge	r5, #0
 8025588:	f7ff fcf6 	bl	8024f78 <_Balloc>
 802558c:	4602      	mov	r2, r0
 802558e:	b918      	cbnz	r0, 8025598 <__mdiff+0x60>
 8025590:	4b31      	ldr	r3, [pc, #196]	@ (8025658 <__mdiff+0x120>)
 8025592:	f240 2145 	movw	r1, #581	@ 0x245
 8025596:	e7e3      	b.n	8025560 <__mdiff+0x28>
 8025598:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802559c:	6926      	ldr	r6, [r4, #16]
 802559e:	60c5      	str	r5, [r0, #12]
 80255a0:	f109 0310 	add.w	r3, r9, #16
 80255a4:	f109 0514 	add.w	r5, r9, #20
 80255a8:	f104 0e14 	add.w	lr, r4, #20
 80255ac:	f100 0b14 	add.w	fp, r0, #20
 80255b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80255b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80255b8:	9301      	str	r3, [sp, #4]
 80255ba:	46d9      	mov	r9, fp
 80255bc:	f04f 0c00 	mov.w	ip, #0
 80255c0:	9b01      	ldr	r3, [sp, #4]
 80255c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80255c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80255ca:	9301      	str	r3, [sp, #4]
 80255cc:	fa1f f38a 	uxth.w	r3, sl
 80255d0:	4619      	mov	r1, r3
 80255d2:	b283      	uxth	r3, r0
 80255d4:	1acb      	subs	r3, r1, r3
 80255d6:	0c00      	lsrs	r0, r0, #16
 80255d8:	4463      	add	r3, ip
 80255da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80255de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80255e2:	b29b      	uxth	r3, r3
 80255e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80255e8:	4576      	cmp	r6, lr
 80255ea:	f849 3b04 	str.w	r3, [r9], #4
 80255ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80255f2:	d8e5      	bhi.n	80255c0 <__mdiff+0x88>
 80255f4:	1b33      	subs	r3, r6, r4
 80255f6:	3b15      	subs	r3, #21
 80255f8:	f023 0303 	bic.w	r3, r3, #3
 80255fc:	3415      	adds	r4, #21
 80255fe:	3304      	adds	r3, #4
 8025600:	42a6      	cmp	r6, r4
 8025602:	bf38      	it	cc
 8025604:	2304      	movcc	r3, #4
 8025606:	441d      	add	r5, r3
 8025608:	445b      	add	r3, fp
 802560a:	461e      	mov	r6, r3
 802560c:	462c      	mov	r4, r5
 802560e:	4544      	cmp	r4, r8
 8025610:	d30e      	bcc.n	8025630 <__mdiff+0xf8>
 8025612:	f108 0103 	add.w	r1, r8, #3
 8025616:	1b49      	subs	r1, r1, r5
 8025618:	f021 0103 	bic.w	r1, r1, #3
 802561c:	3d03      	subs	r5, #3
 802561e:	45a8      	cmp	r8, r5
 8025620:	bf38      	it	cc
 8025622:	2100      	movcc	r1, #0
 8025624:	440b      	add	r3, r1
 8025626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802562a:	b191      	cbz	r1, 8025652 <__mdiff+0x11a>
 802562c:	6117      	str	r7, [r2, #16]
 802562e:	e79d      	b.n	802556c <__mdiff+0x34>
 8025630:	f854 1b04 	ldr.w	r1, [r4], #4
 8025634:	46e6      	mov	lr, ip
 8025636:	0c08      	lsrs	r0, r1, #16
 8025638:	fa1c fc81 	uxtah	ip, ip, r1
 802563c:	4471      	add	r1, lr
 802563e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8025642:	b289      	uxth	r1, r1
 8025644:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8025648:	f846 1b04 	str.w	r1, [r6], #4
 802564c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8025650:	e7dd      	b.n	802560e <__mdiff+0xd6>
 8025652:	3f01      	subs	r7, #1
 8025654:	e7e7      	b.n	8025626 <__mdiff+0xee>
 8025656:	bf00      	nop
 8025658:	08029e3d 	.word	0x08029e3d
 802565c:	08029e4e 	.word	0x08029e4e

08025660 <__ulp>:
 8025660:	b082      	sub	sp, #8
 8025662:	ed8d 0b00 	vstr	d0, [sp]
 8025666:	9a01      	ldr	r2, [sp, #4]
 8025668:	4b0f      	ldr	r3, [pc, #60]	@ (80256a8 <__ulp+0x48>)
 802566a:	4013      	ands	r3, r2
 802566c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8025670:	2b00      	cmp	r3, #0
 8025672:	dc08      	bgt.n	8025686 <__ulp+0x26>
 8025674:	425b      	negs	r3, r3
 8025676:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802567a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802567e:	da04      	bge.n	802568a <__ulp+0x2a>
 8025680:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8025684:	4113      	asrs	r3, r2
 8025686:	2200      	movs	r2, #0
 8025688:	e008      	b.n	802569c <__ulp+0x3c>
 802568a:	f1a2 0314 	sub.w	r3, r2, #20
 802568e:	2b1e      	cmp	r3, #30
 8025690:	bfda      	itte	le
 8025692:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8025696:	40da      	lsrle	r2, r3
 8025698:	2201      	movgt	r2, #1
 802569a:	2300      	movs	r3, #0
 802569c:	4619      	mov	r1, r3
 802569e:	4610      	mov	r0, r2
 80256a0:	ec41 0b10 	vmov	d0, r0, r1
 80256a4:	b002      	add	sp, #8
 80256a6:	4770      	bx	lr
 80256a8:	7ff00000 	.word	0x7ff00000

080256ac <__b2d>:
 80256ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256b0:	6906      	ldr	r6, [r0, #16]
 80256b2:	f100 0814 	add.w	r8, r0, #20
 80256b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80256ba:	1f37      	subs	r7, r6, #4
 80256bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80256c0:	4610      	mov	r0, r2
 80256c2:	f7ff fd4b 	bl	802515c <__hi0bits>
 80256c6:	f1c0 0320 	rsb	r3, r0, #32
 80256ca:	280a      	cmp	r0, #10
 80256cc:	600b      	str	r3, [r1, #0]
 80256ce:	491b      	ldr	r1, [pc, #108]	@ (802573c <__b2d+0x90>)
 80256d0:	dc15      	bgt.n	80256fe <__b2d+0x52>
 80256d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80256d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80256da:	45b8      	cmp	r8, r7
 80256dc:	ea43 0501 	orr.w	r5, r3, r1
 80256e0:	bf34      	ite	cc
 80256e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80256e6:	2300      	movcs	r3, #0
 80256e8:	3015      	adds	r0, #21
 80256ea:	fa02 f000 	lsl.w	r0, r2, r0
 80256ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80256f2:	4303      	orrs	r3, r0
 80256f4:	461c      	mov	r4, r3
 80256f6:	ec45 4b10 	vmov	d0, r4, r5
 80256fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80256fe:	45b8      	cmp	r8, r7
 8025700:	bf3a      	itte	cc
 8025702:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8025706:	f1a6 0708 	subcc.w	r7, r6, #8
 802570a:	2300      	movcs	r3, #0
 802570c:	380b      	subs	r0, #11
 802570e:	d012      	beq.n	8025736 <__b2d+0x8a>
 8025710:	f1c0 0120 	rsb	r1, r0, #32
 8025714:	fa23 f401 	lsr.w	r4, r3, r1
 8025718:	4082      	lsls	r2, r0
 802571a:	4322      	orrs	r2, r4
 802571c:	4547      	cmp	r7, r8
 802571e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8025722:	bf8c      	ite	hi
 8025724:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8025728:	2200      	movls	r2, #0
 802572a:	4083      	lsls	r3, r0
 802572c:	40ca      	lsrs	r2, r1
 802572e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8025732:	4313      	orrs	r3, r2
 8025734:	e7de      	b.n	80256f4 <__b2d+0x48>
 8025736:	ea42 0501 	orr.w	r5, r2, r1
 802573a:	e7db      	b.n	80256f4 <__b2d+0x48>
 802573c:	3ff00000 	.word	0x3ff00000

08025740 <__d2b>:
 8025740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025744:	460f      	mov	r7, r1
 8025746:	2101      	movs	r1, #1
 8025748:	ec59 8b10 	vmov	r8, r9, d0
 802574c:	4616      	mov	r6, r2
 802574e:	f7ff fc13 	bl	8024f78 <_Balloc>
 8025752:	4604      	mov	r4, r0
 8025754:	b930      	cbnz	r0, 8025764 <__d2b+0x24>
 8025756:	4602      	mov	r2, r0
 8025758:	4b23      	ldr	r3, [pc, #140]	@ (80257e8 <__d2b+0xa8>)
 802575a:	4824      	ldr	r0, [pc, #144]	@ (80257ec <__d2b+0xac>)
 802575c:	f240 310f 	movw	r1, #783	@ 0x30f
 8025760:	f7fd fb2e 	bl	8022dc0 <__assert_func>
 8025764:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8025768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802576c:	b10d      	cbz	r5, 8025772 <__d2b+0x32>
 802576e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8025772:	9301      	str	r3, [sp, #4]
 8025774:	f1b8 0300 	subs.w	r3, r8, #0
 8025778:	d023      	beq.n	80257c2 <__d2b+0x82>
 802577a:	4668      	mov	r0, sp
 802577c:	9300      	str	r3, [sp, #0]
 802577e:	f7ff fd0c 	bl	802519a <__lo0bits>
 8025782:	e9dd 1200 	ldrd	r1, r2, [sp]
 8025786:	b1d0      	cbz	r0, 80257be <__d2b+0x7e>
 8025788:	f1c0 0320 	rsb	r3, r0, #32
 802578c:	fa02 f303 	lsl.w	r3, r2, r3
 8025790:	430b      	orrs	r3, r1
 8025792:	40c2      	lsrs	r2, r0
 8025794:	6163      	str	r3, [r4, #20]
 8025796:	9201      	str	r2, [sp, #4]
 8025798:	9b01      	ldr	r3, [sp, #4]
 802579a:	61a3      	str	r3, [r4, #24]
 802579c:	2b00      	cmp	r3, #0
 802579e:	bf0c      	ite	eq
 80257a0:	2201      	moveq	r2, #1
 80257a2:	2202      	movne	r2, #2
 80257a4:	6122      	str	r2, [r4, #16]
 80257a6:	b1a5      	cbz	r5, 80257d2 <__d2b+0x92>
 80257a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80257ac:	4405      	add	r5, r0
 80257ae:	603d      	str	r5, [r7, #0]
 80257b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80257b4:	6030      	str	r0, [r6, #0]
 80257b6:	4620      	mov	r0, r4
 80257b8:	b003      	add	sp, #12
 80257ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80257be:	6161      	str	r1, [r4, #20]
 80257c0:	e7ea      	b.n	8025798 <__d2b+0x58>
 80257c2:	a801      	add	r0, sp, #4
 80257c4:	f7ff fce9 	bl	802519a <__lo0bits>
 80257c8:	9b01      	ldr	r3, [sp, #4]
 80257ca:	6163      	str	r3, [r4, #20]
 80257cc:	3020      	adds	r0, #32
 80257ce:	2201      	movs	r2, #1
 80257d0:	e7e8      	b.n	80257a4 <__d2b+0x64>
 80257d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80257d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80257da:	6038      	str	r0, [r7, #0]
 80257dc:	6918      	ldr	r0, [r3, #16]
 80257de:	f7ff fcbd 	bl	802515c <__hi0bits>
 80257e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80257e6:	e7e5      	b.n	80257b4 <__d2b+0x74>
 80257e8:	08029e3d 	.word	0x08029e3d
 80257ec:	08029e4e 	.word	0x08029e4e

080257f0 <__ratio>:
 80257f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257f4:	4688      	mov	r8, r1
 80257f6:	4669      	mov	r1, sp
 80257f8:	4681      	mov	r9, r0
 80257fa:	f7ff ff57 	bl	80256ac <__b2d>
 80257fe:	a901      	add	r1, sp, #4
 8025800:	4640      	mov	r0, r8
 8025802:	ec55 4b10 	vmov	r4, r5, d0
 8025806:	f7ff ff51 	bl	80256ac <__b2d>
 802580a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802580e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8025812:	1ad2      	subs	r2, r2, r3
 8025814:	e9dd 3100 	ldrd	r3, r1, [sp]
 8025818:	1a5b      	subs	r3, r3, r1
 802581a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802581e:	ec57 6b10 	vmov	r6, r7, d0
 8025822:	2b00      	cmp	r3, #0
 8025824:	bfd6      	itet	le
 8025826:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802582a:	462a      	movgt	r2, r5
 802582c:	463a      	movle	r2, r7
 802582e:	46ab      	mov	fp, r5
 8025830:	46a2      	mov	sl, r4
 8025832:	bfce      	itee	gt
 8025834:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8025838:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 802583c:	ee00 3a90 	vmovle	s1, r3
 8025840:	ec4b ab17 	vmov	d7, sl, fp
 8025844:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8025848:	b003      	add	sp, #12
 802584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802584e <__copybits>:
 802584e:	3901      	subs	r1, #1
 8025850:	b570      	push	{r4, r5, r6, lr}
 8025852:	1149      	asrs	r1, r1, #5
 8025854:	6914      	ldr	r4, [r2, #16]
 8025856:	3101      	adds	r1, #1
 8025858:	f102 0314 	add.w	r3, r2, #20
 802585c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8025860:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025864:	1f05      	subs	r5, r0, #4
 8025866:	42a3      	cmp	r3, r4
 8025868:	d30c      	bcc.n	8025884 <__copybits+0x36>
 802586a:	1aa3      	subs	r3, r4, r2
 802586c:	3b11      	subs	r3, #17
 802586e:	f023 0303 	bic.w	r3, r3, #3
 8025872:	3211      	adds	r2, #17
 8025874:	42a2      	cmp	r2, r4
 8025876:	bf88      	it	hi
 8025878:	2300      	movhi	r3, #0
 802587a:	4418      	add	r0, r3
 802587c:	2300      	movs	r3, #0
 802587e:	4288      	cmp	r0, r1
 8025880:	d305      	bcc.n	802588e <__copybits+0x40>
 8025882:	bd70      	pop	{r4, r5, r6, pc}
 8025884:	f853 6b04 	ldr.w	r6, [r3], #4
 8025888:	f845 6f04 	str.w	r6, [r5, #4]!
 802588c:	e7eb      	b.n	8025866 <__copybits+0x18>
 802588e:	f840 3b04 	str.w	r3, [r0], #4
 8025892:	e7f4      	b.n	802587e <__copybits+0x30>

08025894 <__any_on>:
 8025894:	f100 0214 	add.w	r2, r0, #20
 8025898:	6900      	ldr	r0, [r0, #16]
 802589a:	114b      	asrs	r3, r1, #5
 802589c:	4298      	cmp	r0, r3
 802589e:	b510      	push	{r4, lr}
 80258a0:	db11      	blt.n	80258c6 <__any_on+0x32>
 80258a2:	dd0a      	ble.n	80258ba <__any_on+0x26>
 80258a4:	f011 011f 	ands.w	r1, r1, #31
 80258a8:	d007      	beq.n	80258ba <__any_on+0x26>
 80258aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80258ae:	fa24 f001 	lsr.w	r0, r4, r1
 80258b2:	fa00 f101 	lsl.w	r1, r0, r1
 80258b6:	428c      	cmp	r4, r1
 80258b8:	d10b      	bne.n	80258d2 <__any_on+0x3e>
 80258ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80258be:	4293      	cmp	r3, r2
 80258c0:	d803      	bhi.n	80258ca <__any_on+0x36>
 80258c2:	2000      	movs	r0, #0
 80258c4:	bd10      	pop	{r4, pc}
 80258c6:	4603      	mov	r3, r0
 80258c8:	e7f7      	b.n	80258ba <__any_on+0x26>
 80258ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80258ce:	2900      	cmp	r1, #0
 80258d0:	d0f5      	beq.n	80258be <__any_on+0x2a>
 80258d2:	2001      	movs	r0, #1
 80258d4:	e7f6      	b.n	80258c4 <__any_on+0x30>

080258d6 <sulp>:
 80258d6:	b570      	push	{r4, r5, r6, lr}
 80258d8:	4604      	mov	r4, r0
 80258da:	460d      	mov	r5, r1
 80258dc:	4616      	mov	r6, r2
 80258de:	ec45 4b10 	vmov	d0, r4, r5
 80258e2:	f7ff febd 	bl	8025660 <__ulp>
 80258e6:	b17e      	cbz	r6, 8025908 <sulp+0x32>
 80258e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80258ec:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80258f0:	2b00      	cmp	r3, #0
 80258f2:	dd09      	ble.n	8025908 <sulp+0x32>
 80258f4:	051b      	lsls	r3, r3, #20
 80258f6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80258fa:	2000      	movs	r0, #0
 80258fc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8025900:	ec41 0b17 	vmov	d7, r0, r1
 8025904:	ee20 0b07 	vmul.f64	d0, d0, d7
 8025908:	bd70      	pop	{r4, r5, r6, pc}
 802590a:	0000      	movs	r0, r0
 802590c:	0000      	movs	r0, r0
	...

08025910 <_strtod_l>:
 8025910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025914:	ed2d 8b0a 	vpush	{d8-d12}
 8025918:	b097      	sub	sp, #92	@ 0x5c
 802591a:	4688      	mov	r8, r1
 802591c:	920e      	str	r2, [sp, #56]	@ 0x38
 802591e:	2200      	movs	r2, #0
 8025920:	9212      	str	r2, [sp, #72]	@ 0x48
 8025922:	9005      	str	r0, [sp, #20]
 8025924:	f04f 0a00 	mov.w	sl, #0
 8025928:	f04f 0b00 	mov.w	fp, #0
 802592c:	460a      	mov	r2, r1
 802592e:	9211      	str	r2, [sp, #68]	@ 0x44
 8025930:	7811      	ldrb	r1, [r2, #0]
 8025932:	292b      	cmp	r1, #43	@ 0x2b
 8025934:	d04c      	beq.n	80259d0 <_strtod_l+0xc0>
 8025936:	d839      	bhi.n	80259ac <_strtod_l+0x9c>
 8025938:	290d      	cmp	r1, #13
 802593a:	d833      	bhi.n	80259a4 <_strtod_l+0x94>
 802593c:	2908      	cmp	r1, #8
 802593e:	d833      	bhi.n	80259a8 <_strtod_l+0x98>
 8025940:	2900      	cmp	r1, #0
 8025942:	d03c      	beq.n	80259be <_strtod_l+0xae>
 8025944:	2200      	movs	r2, #0
 8025946:	9208      	str	r2, [sp, #32]
 8025948:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802594a:	782a      	ldrb	r2, [r5, #0]
 802594c:	2a30      	cmp	r2, #48	@ 0x30
 802594e:	f040 80b5 	bne.w	8025abc <_strtod_l+0x1ac>
 8025952:	786a      	ldrb	r2, [r5, #1]
 8025954:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8025958:	2a58      	cmp	r2, #88	@ 0x58
 802595a:	d170      	bne.n	8025a3e <_strtod_l+0x12e>
 802595c:	9302      	str	r3, [sp, #8]
 802595e:	9b08      	ldr	r3, [sp, #32]
 8025960:	9301      	str	r3, [sp, #4]
 8025962:	ab12      	add	r3, sp, #72	@ 0x48
 8025964:	9300      	str	r3, [sp, #0]
 8025966:	4a8b      	ldr	r2, [pc, #556]	@ (8025b94 <_strtod_l+0x284>)
 8025968:	9805      	ldr	r0, [sp, #20]
 802596a:	ab13      	add	r3, sp, #76	@ 0x4c
 802596c:	a911      	add	r1, sp, #68	@ 0x44
 802596e:	f001 fa63 	bl	8026e38 <__gethex>
 8025972:	f010 060f 	ands.w	r6, r0, #15
 8025976:	4604      	mov	r4, r0
 8025978:	d005      	beq.n	8025986 <_strtod_l+0x76>
 802597a:	2e06      	cmp	r6, #6
 802597c:	d12a      	bne.n	80259d4 <_strtod_l+0xc4>
 802597e:	3501      	adds	r5, #1
 8025980:	2300      	movs	r3, #0
 8025982:	9511      	str	r5, [sp, #68]	@ 0x44
 8025984:	9308      	str	r3, [sp, #32]
 8025986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025988:	2b00      	cmp	r3, #0
 802598a:	f040 852f 	bne.w	80263ec <_strtod_l+0xadc>
 802598e:	9b08      	ldr	r3, [sp, #32]
 8025990:	ec4b ab10 	vmov	d0, sl, fp
 8025994:	b1cb      	cbz	r3, 80259ca <_strtod_l+0xba>
 8025996:	eeb1 0b40 	vneg.f64	d0, d0
 802599a:	b017      	add	sp, #92	@ 0x5c
 802599c:	ecbd 8b0a 	vpop	{d8-d12}
 80259a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259a4:	2920      	cmp	r1, #32
 80259a6:	d1cd      	bne.n	8025944 <_strtod_l+0x34>
 80259a8:	3201      	adds	r2, #1
 80259aa:	e7c0      	b.n	802592e <_strtod_l+0x1e>
 80259ac:	292d      	cmp	r1, #45	@ 0x2d
 80259ae:	d1c9      	bne.n	8025944 <_strtod_l+0x34>
 80259b0:	2101      	movs	r1, #1
 80259b2:	9108      	str	r1, [sp, #32]
 80259b4:	1c51      	adds	r1, r2, #1
 80259b6:	9111      	str	r1, [sp, #68]	@ 0x44
 80259b8:	7852      	ldrb	r2, [r2, #1]
 80259ba:	2a00      	cmp	r2, #0
 80259bc:	d1c4      	bne.n	8025948 <_strtod_l+0x38>
 80259be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80259c0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80259c4:	2b00      	cmp	r3, #0
 80259c6:	f040 850f 	bne.w	80263e8 <_strtod_l+0xad8>
 80259ca:	ec4b ab10 	vmov	d0, sl, fp
 80259ce:	e7e4      	b.n	802599a <_strtod_l+0x8a>
 80259d0:	2100      	movs	r1, #0
 80259d2:	e7ee      	b.n	80259b2 <_strtod_l+0xa2>
 80259d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80259d6:	b13a      	cbz	r2, 80259e8 <_strtod_l+0xd8>
 80259d8:	2135      	movs	r1, #53	@ 0x35
 80259da:	a814      	add	r0, sp, #80	@ 0x50
 80259dc:	f7ff ff37 	bl	802584e <__copybits>
 80259e0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80259e2:	9805      	ldr	r0, [sp, #20]
 80259e4:	f7ff fb08 	bl	8024ff8 <_Bfree>
 80259e8:	1e73      	subs	r3, r6, #1
 80259ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80259ec:	2b04      	cmp	r3, #4
 80259ee:	d806      	bhi.n	80259fe <_strtod_l+0xee>
 80259f0:	e8df f003 	tbb	[pc, r3]
 80259f4:	201d0314 	.word	0x201d0314
 80259f8:	14          	.byte	0x14
 80259f9:	00          	.byte	0x00
 80259fa:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80259fe:	05e3      	lsls	r3, r4, #23
 8025a00:	bf48      	it	mi
 8025a02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8025a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025a0a:	0d1b      	lsrs	r3, r3, #20
 8025a0c:	051b      	lsls	r3, r3, #20
 8025a0e:	2b00      	cmp	r3, #0
 8025a10:	d1b9      	bne.n	8025986 <_strtod_l+0x76>
 8025a12:	f7fe fbeb 	bl	80241ec <__errno>
 8025a16:	2322      	movs	r3, #34	@ 0x22
 8025a18:	6003      	str	r3, [r0, #0]
 8025a1a:	e7b4      	b.n	8025986 <_strtod_l+0x76>
 8025a1c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8025a20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025a24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8025a28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8025a2c:	e7e7      	b.n	80259fe <_strtod_l+0xee>
 8025a2e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8025b9c <_strtod_l+0x28c>
 8025a32:	e7e4      	b.n	80259fe <_strtod_l+0xee>
 8025a34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8025a38:	f04f 3aff 	mov.w	sl, #4294967295
 8025a3c:	e7df      	b.n	80259fe <_strtod_l+0xee>
 8025a3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a40:	1c5a      	adds	r2, r3, #1
 8025a42:	9211      	str	r2, [sp, #68]	@ 0x44
 8025a44:	785b      	ldrb	r3, [r3, #1]
 8025a46:	2b30      	cmp	r3, #48	@ 0x30
 8025a48:	d0f9      	beq.n	8025a3e <_strtod_l+0x12e>
 8025a4a:	2b00      	cmp	r3, #0
 8025a4c:	d09b      	beq.n	8025986 <_strtod_l+0x76>
 8025a4e:	2301      	movs	r3, #1
 8025a50:	2600      	movs	r6, #0
 8025a52:	9307      	str	r3, [sp, #28]
 8025a54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8025a58:	46b1      	mov	r9, r6
 8025a5a:	4635      	mov	r5, r6
 8025a5c:	220a      	movs	r2, #10
 8025a5e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025a60:	7804      	ldrb	r4, [r0, #0]
 8025a62:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8025a66:	b2d9      	uxtb	r1, r3
 8025a68:	2909      	cmp	r1, #9
 8025a6a:	d929      	bls.n	8025ac0 <_strtod_l+0x1b0>
 8025a6c:	494a      	ldr	r1, [pc, #296]	@ (8025b98 <_strtod_l+0x288>)
 8025a6e:	2201      	movs	r2, #1
 8025a70:	f001 f928 	bl	8026cc4 <strncmp>
 8025a74:	b378      	cbz	r0, 8025ad6 <_strtod_l+0x1c6>
 8025a76:	2000      	movs	r0, #0
 8025a78:	4622      	mov	r2, r4
 8025a7a:	462b      	mov	r3, r5
 8025a7c:	4607      	mov	r7, r0
 8025a7e:	9006      	str	r0, [sp, #24]
 8025a80:	2a65      	cmp	r2, #101	@ 0x65
 8025a82:	d001      	beq.n	8025a88 <_strtod_l+0x178>
 8025a84:	2a45      	cmp	r2, #69	@ 0x45
 8025a86:	d117      	bne.n	8025ab8 <_strtod_l+0x1a8>
 8025a88:	b91b      	cbnz	r3, 8025a92 <_strtod_l+0x182>
 8025a8a:	9b07      	ldr	r3, [sp, #28]
 8025a8c:	4303      	orrs	r3, r0
 8025a8e:	d096      	beq.n	80259be <_strtod_l+0xae>
 8025a90:	2300      	movs	r3, #0
 8025a92:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8025a96:	f108 0201 	add.w	r2, r8, #1
 8025a9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8025a9c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025aa0:	2a2b      	cmp	r2, #43	@ 0x2b
 8025aa2:	d06b      	beq.n	8025b7c <_strtod_l+0x26c>
 8025aa4:	2a2d      	cmp	r2, #45	@ 0x2d
 8025aa6:	d071      	beq.n	8025b8c <_strtod_l+0x27c>
 8025aa8:	f04f 0e00 	mov.w	lr, #0
 8025aac:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8025ab0:	2c09      	cmp	r4, #9
 8025ab2:	d979      	bls.n	8025ba8 <_strtod_l+0x298>
 8025ab4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8025ab8:	2400      	movs	r4, #0
 8025aba:	e094      	b.n	8025be6 <_strtod_l+0x2d6>
 8025abc:	2300      	movs	r3, #0
 8025abe:	e7c7      	b.n	8025a50 <_strtod_l+0x140>
 8025ac0:	2d08      	cmp	r5, #8
 8025ac2:	f100 0001 	add.w	r0, r0, #1
 8025ac6:	bfd4      	ite	le
 8025ac8:	fb02 3909 	mlale	r9, r2, r9, r3
 8025acc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8025ad0:	3501      	adds	r5, #1
 8025ad2:	9011      	str	r0, [sp, #68]	@ 0x44
 8025ad4:	e7c3      	b.n	8025a5e <_strtod_l+0x14e>
 8025ad6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ad8:	1c5a      	adds	r2, r3, #1
 8025ada:	9211      	str	r2, [sp, #68]	@ 0x44
 8025adc:	785a      	ldrb	r2, [r3, #1]
 8025ade:	b375      	cbz	r5, 8025b3e <_strtod_l+0x22e>
 8025ae0:	4607      	mov	r7, r0
 8025ae2:	462b      	mov	r3, r5
 8025ae4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8025ae8:	2909      	cmp	r1, #9
 8025aea:	d913      	bls.n	8025b14 <_strtod_l+0x204>
 8025aec:	2101      	movs	r1, #1
 8025aee:	9106      	str	r1, [sp, #24]
 8025af0:	e7c6      	b.n	8025a80 <_strtod_l+0x170>
 8025af2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025af4:	1c5a      	adds	r2, r3, #1
 8025af6:	9211      	str	r2, [sp, #68]	@ 0x44
 8025af8:	785a      	ldrb	r2, [r3, #1]
 8025afa:	3001      	adds	r0, #1
 8025afc:	2a30      	cmp	r2, #48	@ 0x30
 8025afe:	d0f8      	beq.n	8025af2 <_strtod_l+0x1e2>
 8025b00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8025b04:	2b08      	cmp	r3, #8
 8025b06:	f200 8476 	bhi.w	80263f6 <_strtod_l+0xae6>
 8025b0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8025b0e:	4607      	mov	r7, r0
 8025b10:	2000      	movs	r0, #0
 8025b12:	4603      	mov	r3, r0
 8025b14:	3a30      	subs	r2, #48	@ 0x30
 8025b16:	f100 0101 	add.w	r1, r0, #1
 8025b1a:	d023      	beq.n	8025b64 <_strtod_l+0x254>
 8025b1c:	440f      	add	r7, r1
 8025b1e:	eb00 0c03 	add.w	ip, r0, r3
 8025b22:	4619      	mov	r1, r3
 8025b24:	240a      	movs	r4, #10
 8025b26:	4561      	cmp	r1, ip
 8025b28:	d10b      	bne.n	8025b42 <_strtod_l+0x232>
 8025b2a:	1c5c      	adds	r4, r3, #1
 8025b2c:	4403      	add	r3, r0
 8025b2e:	2b08      	cmp	r3, #8
 8025b30:	4404      	add	r4, r0
 8025b32:	dc11      	bgt.n	8025b58 <_strtod_l+0x248>
 8025b34:	230a      	movs	r3, #10
 8025b36:	fb03 2909 	mla	r9, r3, r9, r2
 8025b3a:	2100      	movs	r1, #0
 8025b3c:	e013      	b.n	8025b66 <_strtod_l+0x256>
 8025b3e:	4628      	mov	r0, r5
 8025b40:	e7dc      	b.n	8025afc <_strtod_l+0x1ec>
 8025b42:	2908      	cmp	r1, #8
 8025b44:	f101 0101 	add.w	r1, r1, #1
 8025b48:	dc02      	bgt.n	8025b50 <_strtod_l+0x240>
 8025b4a:	fb04 f909 	mul.w	r9, r4, r9
 8025b4e:	e7ea      	b.n	8025b26 <_strtod_l+0x216>
 8025b50:	2910      	cmp	r1, #16
 8025b52:	bfd8      	it	le
 8025b54:	4366      	mulle	r6, r4
 8025b56:	e7e6      	b.n	8025b26 <_strtod_l+0x216>
 8025b58:	2b0f      	cmp	r3, #15
 8025b5a:	dcee      	bgt.n	8025b3a <_strtod_l+0x22a>
 8025b5c:	230a      	movs	r3, #10
 8025b5e:	fb03 2606 	mla	r6, r3, r6, r2
 8025b62:	e7ea      	b.n	8025b3a <_strtod_l+0x22a>
 8025b64:	461c      	mov	r4, r3
 8025b66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025b68:	1c5a      	adds	r2, r3, #1
 8025b6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8025b6c:	785a      	ldrb	r2, [r3, #1]
 8025b6e:	4608      	mov	r0, r1
 8025b70:	4623      	mov	r3, r4
 8025b72:	e7b7      	b.n	8025ae4 <_strtod_l+0x1d4>
 8025b74:	2301      	movs	r3, #1
 8025b76:	2700      	movs	r7, #0
 8025b78:	9306      	str	r3, [sp, #24]
 8025b7a:	e786      	b.n	8025a8a <_strtod_l+0x17a>
 8025b7c:	f04f 0e00 	mov.w	lr, #0
 8025b80:	f108 0202 	add.w	r2, r8, #2
 8025b84:	9211      	str	r2, [sp, #68]	@ 0x44
 8025b86:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025b8a:	e78f      	b.n	8025aac <_strtod_l+0x19c>
 8025b8c:	f04f 0e01 	mov.w	lr, #1
 8025b90:	e7f6      	b.n	8025b80 <_strtod_l+0x270>
 8025b92:	bf00      	nop
 8025b94:	08029fc4 	.word	0x08029fc4
 8025b98:	08029fac 	.word	0x08029fac
 8025b9c:	7ff00000 	.word	0x7ff00000
 8025ba0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025ba2:	1c54      	adds	r4, r2, #1
 8025ba4:	9411      	str	r4, [sp, #68]	@ 0x44
 8025ba6:	7852      	ldrb	r2, [r2, #1]
 8025ba8:	2a30      	cmp	r2, #48	@ 0x30
 8025baa:	d0f9      	beq.n	8025ba0 <_strtod_l+0x290>
 8025bac:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8025bb0:	2c08      	cmp	r4, #8
 8025bb2:	d881      	bhi.n	8025ab8 <_strtod_l+0x1a8>
 8025bb4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8025bb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025bba:	9209      	str	r2, [sp, #36]	@ 0x24
 8025bbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025bbe:	1c51      	adds	r1, r2, #1
 8025bc0:	9111      	str	r1, [sp, #68]	@ 0x44
 8025bc2:	7852      	ldrb	r2, [r2, #1]
 8025bc4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8025bc8:	2c09      	cmp	r4, #9
 8025bca:	d938      	bls.n	8025c3e <_strtod_l+0x32e>
 8025bcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025bce:	1b0c      	subs	r4, r1, r4
 8025bd0:	2c08      	cmp	r4, #8
 8025bd2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8025bd6:	dc02      	bgt.n	8025bde <_strtod_l+0x2ce>
 8025bd8:	4564      	cmp	r4, ip
 8025bda:	bfa8      	it	ge
 8025bdc:	4664      	movge	r4, ip
 8025bde:	f1be 0f00 	cmp.w	lr, #0
 8025be2:	d000      	beq.n	8025be6 <_strtod_l+0x2d6>
 8025be4:	4264      	negs	r4, r4
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	d14e      	bne.n	8025c88 <_strtod_l+0x378>
 8025bea:	9b07      	ldr	r3, [sp, #28]
 8025bec:	4318      	orrs	r0, r3
 8025bee:	f47f aeca 	bne.w	8025986 <_strtod_l+0x76>
 8025bf2:	9b06      	ldr	r3, [sp, #24]
 8025bf4:	2b00      	cmp	r3, #0
 8025bf6:	f47f aee2 	bne.w	80259be <_strtod_l+0xae>
 8025bfa:	2a69      	cmp	r2, #105	@ 0x69
 8025bfc:	d027      	beq.n	8025c4e <_strtod_l+0x33e>
 8025bfe:	dc24      	bgt.n	8025c4a <_strtod_l+0x33a>
 8025c00:	2a49      	cmp	r2, #73	@ 0x49
 8025c02:	d024      	beq.n	8025c4e <_strtod_l+0x33e>
 8025c04:	2a4e      	cmp	r2, #78	@ 0x4e
 8025c06:	f47f aeda 	bne.w	80259be <_strtod_l+0xae>
 8025c0a:	4997      	ldr	r1, [pc, #604]	@ (8025e68 <_strtod_l+0x558>)
 8025c0c:	a811      	add	r0, sp, #68	@ 0x44
 8025c0e:	f001 fb35 	bl	802727c <__match>
 8025c12:	2800      	cmp	r0, #0
 8025c14:	f43f aed3 	beq.w	80259be <_strtod_l+0xae>
 8025c18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c1a:	781b      	ldrb	r3, [r3, #0]
 8025c1c:	2b28      	cmp	r3, #40	@ 0x28
 8025c1e:	d12d      	bne.n	8025c7c <_strtod_l+0x36c>
 8025c20:	4992      	ldr	r1, [pc, #584]	@ (8025e6c <_strtod_l+0x55c>)
 8025c22:	aa14      	add	r2, sp, #80	@ 0x50
 8025c24:	a811      	add	r0, sp, #68	@ 0x44
 8025c26:	f001 fb3d 	bl	80272a4 <__hexnan>
 8025c2a:	2805      	cmp	r0, #5
 8025c2c:	d126      	bne.n	8025c7c <_strtod_l+0x36c>
 8025c2e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025c30:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8025c34:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8025c38:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8025c3c:	e6a3      	b.n	8025986 <_strtod_l+0x76>
 8025c3e:	240a      	movs	r4, #10
 8025c40:	fb04 2c0c 	mla	ip, r4, ip, r2
 8025c44:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8025c48:	e7b8      	b.n	8025bbc <_strtod_l+0x2ac>
 8025c4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8025c4c:	e7db      	b.n	8025c06 <_strtod_l+0x2f6>
 8025c4e:	4988      	ldr	r1, [pc, #544]	@ (8025e70 <_strtod_l+0x560>)
 8025c50:	a811      	add	r0, sp, #68	@ 0x44
 8025c52:	f001 fb13 	bl	802727c <__match>
 8025c56:	2800      	cmp	r0, #0
 8025c58:	f43f aeb1 	beq.w	80259be <_strtod_l+0xae>
 8025c5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c5e:	4985      	ldr	r1, [pc, #532]	@ (8025e74 <_strtod_l+0x564>)
 8025c60:	3b01      	subs	r3, #1
 8025c62:	a811      	add	r0, sp, #68	@ 0x44
 8025c64:	9311      	str	r3, [sp, #68]	@ 0x44
 8025c66:	f001 fb09 	bl	802727c <__match>
 8025c6a:	b910      	cbnz	r0, 8025c72 <_strtod_l+0x362>
 8025c6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c6e:	3301      	adds	r3, #1
 8025c70:	9311      	str	r3, [sp, #68]	@ 0x44
 8025c72:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8025e88 <_strtod_l+0x578>
 8025c76:	f04f 0a00 	mov.w	sl, #0
 8025c7a:	e684      	b.n	8025986 <_strtod_l+0x76>
 8025c7c:	487e      	ldr	r0, [pc, #504]	@ (8025e78 <_strtod_l+0x568>)
 8025c7e:	f001 f857 	bl	8026d30 <nan>
 8025c82:	ec5b ab10 	vmov	sl, fp, d0
 8025c86:	e67e      	b.n	8025986 <_strtod_l+0x76>
 8025c88:	ee07 9a90 	vmov	s15, r9
 8025c8c:	1be2      	subs	r2, r4, r7
 8025c8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025c92:	2d00      	cmp	r5, #0
 8025c94:	bf08      	it	eq
 8025c96:	461d      	moveq	r5, r3
 8025c98:	2b10      	cmp	r3, #16
 8025c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8025c9c:	461a      	mov	r2, r3
 8025c9e:	bfa8      	it	ge
 8025ca0:	2210      	movge	r2, #16
 8025ca2:	2b09      	cmp	r3, #9
 8025ca4:	ec5b ab17 	vmov	sl, fp, d7
 8025ca8:	dc15      	bgt.n	8025cd6 <_strtod_l+0x3c6>
 8025caa:	1be1      	subs	r1, r4, r7
 8025cac:	2900      	cmp	r1, #0
 8025cae:	f43f ae6a 	beq.w	8025986 <_strtod_l+0x76>
 8025cb2:	eba4 0107 	sub.w	r1, r4, r7
 8025cb6:	dd72      	ble.n	8025d9e <_strtod_l+0x48e>
 8025cb8:	2916      	cmp	r1, #22
 8025cba:	dc59      	bgt.n	8025d70 <_strtod_l+0x460>
 8025cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8025e7c <_strtod_l+0x56c>)
 8025cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025cc4:	ed93 7b00 	vldr	d7, [r3]
 8025cc8:	ec4b ab16 	vmov	d6, sl, fp
 8025ccc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025cd0:	ec5b ab17 	vmov	sl, fp, d7
 8025cd4:	e657      	b.n	8025986 <_strtod_l+0x76>
 8025cd6:	4969      	ldr	r1, [pc, #420]	@ (8025e7c <_strtod_l+0x56c>)
 8025cd8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8025cdc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8025ce0:	ee06 6a90 	vmov	s13, r6
 8025ce4:	2b0f      	cmp	r3, #15
 8025ce6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8025cea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025cee:	ec5b ab16 	vmov	sl, fp, d6
 8025cf2:	ddda      	ble.n	8025caa <_strtod_l+0x39a>
 8025cf4:	1a9a      	subs	r2, r3, r2
 8025cf6:	1be1      	subs	r1, r4, r7
 8025cf8:	440a      	add	r2, r1
 8025cfa:	2a00      	cmp	r2, #0
 8025cfc:	f340 8094 	ble.w	8025e28 <_strtod_l+0x518>
 8025d00:	f012 000f 	ands.w	r0, r2, #15
 8025d04:	d00a      	beq.n	8025d1c <_strtod_l+0x40c>
 8025d06:	495d      	ldr	r1, [pc, #372]	@ (8025e7c <_strtod_l+0x56c>)
 8025d08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8025d0c:	ed91 7b00 	vldr	d7, [r1]
 8025d10:	ec4b ab16 	vmov	d6, sl, fp
 8025d14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025d18:	ec5b ab17 	vmov	sl, fp, d7
 8025d1c:	f032 020f 	bics.w	r2, r2, #15
 8025d20:	d073      	beq.n	8025e0a <_strtod_l+0x4fa>
 8025d22:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8025d26:	dd47      	ble.n	8025db8 <_strtod_l+0x4a8>
 8025d28:	2400      	movs	r4, #0
 8025d2a:	4625      	mov	r5, r4
 8025d2c:	9407      	str	r4, [sp, #28]
 8025d2e:	4626      	mov	r6, r4
 8025d30:	9a05      	ldr	r2, [sp, #20]
 8025d32:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8025e88 <_strtod_l+0x578>
 8025d36:	2322      	movs	r3, #34	@ 0x22
 8025d38:	6013      	str	r3, [r2, #0]
 8025d3a:	f04f 0a00 	mov.w	sl, #0
 8025d3e:	9b07      	ldr	r3, [sp, #28]
 8025d40:	2b00      	cmp	r3, #0
 8025d42:	f43f ae20 	beq.w	8025986 <_strtod_l+0x76>
 8025d46:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025d48:	9805      	ldr	r0, [sp, #20]
 8025d4a:	f7ff f955 	bl	8024ff8 <_Bfree>
 8025d4e:	9805      	ldr	r0, [sp, #20]
 8025d50:	4631      	mov	r1, r6
 8025d52:	f7ff f951 	bl	8024ff8 <_Bfree>
 8025d56:	9805      	ldr	r0, [sp, #20]
 8025d58:	4629      	mov	r1, r5
 8025d5a:	f7ff f94d 	bl	8024ff8 <_Bfree>
 8025d5e:	9907      	ldr	r1, [sp, #28]
 8025d60:	9805      	ldr	r0, [sp, #20]
 8025d62:	f7ff f949 	bl	8024ff8 <_Bfree>
 8025d66:	9805      	ldr	r0, [sp, #20]
 8025d68:	4621      	mov	r1, r4
 8025d6a:	f7ff f945 	bl	8024ff8 <_Bfree>
 8025d6e:	e60a      	b.n	8025986 <_strtod_l+0x76>
 8025d70:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8025d74:	1be0      	subs	r0, r4, r7
 8025d76:	4281      	cmp	r1, r0
 8025d78:	dbbc      	blt.n	8025cf4 <_strtod_l+0x3e4>
 8025d7a:	4a40      	ldr	r2, [pc, #256]	@ (8025e7c <_strtod_l+0x56c>)
 8025d7c:	f1c3 030f 	rsb	r3, r3, #15
 8025d80:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8025d84:	ed91 7b00 	vldr	d7, [r1]
 8025d88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025d8a:	ec4b ab16 	vmov	d6, sl, fp
 8025d8e:	1acb      	subs	r3, r1, r3
 8025d90:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8025d94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025d98:	ed92 6b00 	vldr	d6, [r2]
 8025d9c:	e796      	b.n	8025ccc <_strtod_l+0x3bc>
 8025d9e:	3116      	adds	r1, #22
 8025da0:	dba8      	blt.n	8025cf4 <_strtod_l+0x3e4>
 8025da2:	4b36      	ldr	r3, [pc, #216]	@ (8025e7c <_strtod_l+0x56c>)
 8025da4:	1b3c      	subs	r4, r7, r4
 8025da6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8025daa:	ed94 7b00 	vldr	d7, [r4]
 8025dae:	ec4b ab16 	vmov	d6, sl, fp
 8025db2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025db6:	e78b      	b.n	8025cd0 <_strtod_l+0x3c0>
 8025db8:	2000      	movs	r0, #0
 8025dba:	ec4b ab17 	vmov	d7, sl, fp
 8025dbe:	4e30      	ldr	r6, [pc, #192]	@ (8025e80 <_strtod_l+0x570>)
 8025dc0:	1112      	asrs	r2, r2, #4
 8025dc2:	4601      	mov	r1, r0
 8025dc4:	2a01      	cmp	r2, #1
 8025dc6:	dc23      	bgt.n	8025e10 <_strtod_l+0x500>
 8025dc8:	b108      	cbz	r0, 8025dce <_strtod_l+0x4be>
 8025dca:	ec5b ab17 	vmov	sl, fp, d7
 8025dce:	4a2c      	ldr	r2, [pc, #176]	@ (8025e80 <_strtod_l+0x570>)
 8025dd0:	482c      	ldr	r0, [pc, #176]	@ (8025e84 <_strtod_l+0x574>)
 8025dd2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8025dd6:	ed92 7b00 	vldr	d7, [r2]
 8025dda:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8025dde:	ec4b ab16 	vmov	d6, sl, fp
 8025de2:	4a29      	ldr	r2, [pc, #164]	@ (8025e88 <_strtod_l+0x578>)
 8025de4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025de8:	ee17 1a90 	vmov	r1, s15
 8025dec:	400a      	ands	r2, r1
 8025dee:	4282      	cmp	r2, r0
 8025df0:	ec5b ab17 	vmov	sl, fp, d7
 8025df4:	d898      	bhi.n	8025d28 <_strtod_l+0x418>
 8025df6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8025dfa:	4282      	cmp	r2, r0
 8025dfc:	bf86      	itte	hi
 8025dfe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8025e8c <_strtod_l+0x57c>
 8025e02:	f04f 3aff 	movhi.w	sl, #4294967295
 8025e06:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8025e0a:	2200      	movs	r2, #0
 8025e0c:	9206      	str	r2, [sp, #24]
 8025e0e:	e076      	b.n	8025efe <_strtod_l+0x5ee>
 8025e10:	f012 0f01 	tst.w	r2, #1
 8025e14:	d004      	beq.n	8025e20 <_strtod_l+0x510>
 8025e16:	ed96 6b00 	vldr	d6, [r6]
 8025e1a:	2001      	movs	r0, #1
 8025e1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025e20:	3101      	adds	r1, #1
 8025e22:	1052      	asrs	r2, r2, #1
 8025e24:	3608      	adds	r6, #8
 8025e26:	e7cd      	b.n	8025dc4 <_strtod_l+0x4b4>
 8025e28:	d0ef      	beq.n	8025e0a <_strtod_l+0x4fa>
 8025e2a:	4252      	negs	r2, r2
 8025e2c:	f012 000f 	ands.w	r0, r2, #15
 8025e30:	d00a      	beq.n	8025e48 <_strtod_l+0x538>
 8025e32:	4912      	ldr	r1, [pc, #72]	@ (8025e7c <_strtod_l+0x56c>)
 8025e34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8025e38:	ed91 7b00 	vldr	d7, [r1]
 8025e3c:	ec4b ab16 	vmov	d6, sl, fp
 8025e40:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025e44:	ec5b ab17 	vmov	sl, fp, d7
 8025e48:	1112      	asrs	r2, r2, #4
 8025e4a:	d0de      	beq.n	8025e0a <_strtod_l+0x4fa>
 8025e4c:	2a1f      	cmp	r2, #31
 8025e4e:	dd1f      	ble.n	8025e90 <_strtod_l+0x580>
 8025e50:	2400      	movs	r4, #0
 8025e52:	4625      	mov	r5, r4
 8025e54:	9407      	str	r4, [sp, #28]
 8025e56:	4626      	mov	r6, r4
 8025e58:	9a05      	ldr	r2, [sp, #20]
 8025e5a:	2322      	movs	r3, #34	@ 0x22
 8025e5c:	f04f 0a00 	mov.w	sl, #0
 8025e60:	f04f 0b00 	mov.w	fp, #0
 8025e64:	6013      	str	r3, [r2, #0]
 8025e66:	e76a      	b.n	8025d3e <_strtod_l+0x42e>
 8025e68:	08029d95 	.word	0x08029d95
 8025e6c:	08029fb0 	.word	0x08029fb0
 8025e70:	08029d8d 	.word	0x08029d8d
 8025e74:	08029dc4 	.word	0x08029dc4
 8025e78:	08029d87 	.word	0x08029d87
 8025e7c:	08029ee0 	.word	0x08029ee0
 8025e80:	08029eb8 	.word	0x08029eb8
 8025e84:	7ca00000 	.word	0x7ca00000
 8025e88:	7ff00000 	.word	0x7ff00000
 8025e8c:	7fefffff 	.word	0x7fefffff
 8025e90:	f012 0110 	ands.w	r1, r2, #16
 8025e94:	bf18      	it	ne
 8025e96:	216a      	movne	r1, #106	@ 0x6a
 8025e98:	9106      	str	r1, [sp, #24]
 8025e9a:	ec4b ab17 	vmov	d7, sl, fp
 8025e9e:	49b0      	ldr	r1, [pc, #704]	@ (8026160 <_strtod_l+0x850>)
 8025ea0:	2000      	movs	r0, #0
 8025ea2:	07d6      	lsls	r6, r2, #31
 8025ea4:	d504      	bpl.n	8025eb0 <_strtod_l+0x5a0>
 8025ea6:	ed91 6b00 	vldr	d6, [r1]
 8025eaa:	2001      	movs	r0, #1
 8025eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025eb0:	1052      	asrs	r2, r2, #1
 8025eb2:	f101 0108 	add.w	r1, r1, #8
 8025eb6:	d1f4      	bne.n	8025ea2 <_strtod_l+0x592>
 8025eb8:	b108      	cbz	r0, 8025ebe <_strtod_l+0x5ae>
 8025eba:	ec5b ab17 	vmov	sl, fp, d7
 8025ebe:	9a06      	ldr	r2, [sp, #24]
 8025ec0:	b1b2      	cbz	r2, 8025ef0 <_strtod_l+0x5e0>
 8025ec2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8025ec6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8025eca:	2a00      	cmp	r2, #0
 8025ecc:	4658      	mov	r0, fp
 8025ece:	dd0f      	ble.n	8025ef0 <_strtod_l+0x5e0>
 8025ed0:	2a1f      	cmp	r2, #31
 8025ed2:	dd55      	ble.n	8025f80 <_strtod_l+0x670>
 8025ed4:	2a34      	cmp	r2, #52	@ 0x34
 8025ed6:	bfde      	ittt	le
 8025ed8:	f04f 32ff 	movle.w	r2, #4294967295
 8025edc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8025ee0:	408a      	lslle	r2, r1
 8025ee2:	f04f 0a00 	mov.w	sl, #0
 8025ee6:	bfcc      	ite	gt
 8025ee8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8025eec:	ea02 0b00 	andle.w	fp, r2, r0
 8025ef0:	ec4b ab17 	vmov	d7, sl, fp
 8025ef4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025efc:	d0a8      	beq.n	8025e50 <_strtod_l+0x540>
 8025efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025f00:	9805      	ldr	r0, [sp, #20]
 8025f02:	f8cd 9000 	str.w	r9, [sp]
 8025f06:	462a      	mov	r2, r5
 8025f08:	f7ff f8de 	bl	80250c8 <__s2b>
 8025f0c:	9007      	str	r0, [sp, #28]
 8025f0e:	2800      	cmp	r0, #0
 8025f10:	f43f af0a 	beq.w	8025d28 <_strtod_l+0x418>
 8025f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f16:	1b3f      	subs	r7, r7, r4
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	bfb4      	ite	lt
 8025f1c:	463b      	movlt	r3, r7
 8025f1e:	2300      	movge	r3, #0
 8025f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8025f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f24:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8026150 <_strtod_l+0x840>
 8025f28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025f2c:	2400      	movs	r4, #0
 8025f2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025f30:	4625      	mov	r5, r4
 8025f32:	9b07      	ldr	r3, [sp, #28]
 8025f34:	9805      	ldr	r0, [sp, #20]
 8025f36:	6859      	ldr	r1, [r3, #4]
 8025f38:	f7ff f81e 	bl	8024f78 <_Balloc>
 8025f3c:	4606      	mov	r6, r0
 8025f3e:	2800      	cmp	r0, #0
 8025f40:	f43f aef6 	beq.w	8025d30 <_strtod_l+0x420>
 8025f44:	9b07      	ldr	r3, [sp, #28]
 8025f46:	691a      	ldr	r2, [r3, #16]
 8025f48:	ec4b ab19 	vmov	d9, sl, fp
 8025f4c:	3202      	adds	r2, #2
 8025f4e:	f103 010c 	add.w	r1, r3, #12
 8025f52:	0092      	lsls	r2, r2, #2
 8025f54:	300c      	adds	r0, #12
 8025f56:	f7fe f976 	bl	8024246 <memcpy>
 8025f5a:	eeb0 0b49 	vmov.f64	d0, d9
 8025f5e:	9805      	ldr	r0, [sp, #20]
 8025f60:	aa14      	add	r2, sp, #80	@ 0x50
 8025f62:	a913      	add	r1, sp, #76	@ 0x4c
 8025f64:	f7ff fbec 	bl	8025740 <__d2b>
 8025f68:	9012      	str	r0, [sp, #72]	@ 0x48
 8025f6a:	2800      	cmp	r0, #0
 8025f6c:	f43f aee0 	beq.w	8025d30 <_strtod_l+0x420>
 8025f70:	9805      	ldr	r0, [sp, #20]
 8025f72:	2101      	movs	r1, #1
 8025f74:	f7ff f93e 	bl	80251f4 <__i2b>
 8025f78:	4605      	mov	r5, r0
 8025f7a:	b940      	cbnz	r0, 8025f8e <_strtod_l+0x67e>
 8025f7c:	2500      	movs	r5, #0
 8025f7e:	e6d7      	b.n	8025d30 <_strtod_l+0x420>
 8025f80:	f04f 31ff 	mov.w	r1, #4294967295
 8025f84:	fa01 f202 	lsl.w	r2, r1, r2
 8025f88:	ea02 0a0a 	and.w	sl, r2, sl
 8025f8c:	e7b0      	b.n	8025ef0 <_strtod_l+0x5e0>
 8025f8e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8025f90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025f92:	2f00      	cmp	r7, #0
 8025f94:	bfab      	itete	ge
 8025f96:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8025f98:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8025f9a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8025f9e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8025fa2:	bfac      	ite	ge
 8025fa4:	eb07 0903 	addge.w	r9, r7, r3
 8025fa8:	eba3 0807 	sublt.w	r8, r3, r7
 8025fac:	9b06      	ldr	r3, [sp, #24]
 8025fae:	1aff      	subs	r7, r7, r3
 8025fb0:	4417      	add	r7, r2
 8025fb2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8025fb6:	4a6b      	ldr	r2, [pc, #428]	@ (8026164 <_strtod_l+0x854>)
 8025fb8:	3f01      	subs	r7, #1
 8025fba:	4297      	cmp	r7, r2
 8025fbc:	da51      	bge.n	8026062 <_strtod_l+0x752>
 8025fbe:	1bd1      	subs	r1, r2, r7
 8025fc0:	291f      	cmp	r1, #31
 8025fc2:	eba3 0301 	sub.w	r3, r3, r1
 8025fc6:	f04f 0201 	mov.w	r2, #1
 8025fca:	dc3e      	bgt.n	802604a <_strtod_l+0x73a>
 8025fcc:	408a      	lsls	r2, r1
 8025fce:	920c      	str	r2, [sp, #48]	@ 0x30
 8025fd0:	2200      	movs	r2, #0
 8025fd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025fd4:	eb09 0703 	add.w	r7, r9, r3
 8025fd8:	4498      	add	r8, r3
 8025fda:	9b06      	ldr	r3, [sp, #24]
 8025fdc:	45b9      	cmp	r9, r7
 8025fde:	4498      	add	r8, r3
 8025fe0:	464b      	mov	r3, r9
 8025fe2:	bfa8      	it	ge
 8025fe4:	463b      	movge	r3, r7
 8025fe6:	4543      	cmp	r3, r8
 8025fe8:	bfa8      	it	ge
 8025fea:	4643      	movge	r3, r8
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	bfc2      	ittt	gt
 8025ff0:	1aff      	subgt	r7, r7, r3
 8025ff2:	eba8 0803 	subgt.w	r8, r8, r3
 8025ff6:	eba9 0903 	subgt.w	r9, r9, r3
 8025ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ffc:	2b00      	cmp	r3, #0
 8025ffe:	dd16      	ble.n	802602e <_strtod_l+0x71e>
 8026000:	4629      	mov	r1, r5
 8026002:	9805      	ldr	r0, [sp, #20]
 8026004:	461a      	mov	r2, r3
 8026006:	f7ff f9b5 	bl	8025374 <__pow5mult>
 802600a:	4605      	mov	r5, r0
 802600c:	2800      	cmp	r0, #0
 802600e:	d0b5      	beq.n	8025f7c <_strtod_l+0x66c>
 8026010:	4601      	mov	r1, r0
 8026012:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026014:	9805      	ldr	r0, [sp, #20]
 8026016:	f7ff f903 	bl	8025220 <__multiply>
 802601a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802601c:	2800      	cmp	r0, #0
 802601e:	f43f ae87 	beq.w	8025d30 <_strtod_l+0x420>
 8026022:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026024:	9805      	ldr	r0, [sp, #20]
 8026026:	f7fe ffe7 	bl	8024ff8 <_Bfree>
 802602a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802602c:	9312      	str	r3, [sp, #72]	@ 0x48
 802602e:	2f00      	cmp	r7, #0
 8026030:	dc1b      	bgt.n	802606a <_strtod_l+0x75a>
 8026032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026034:	2b00      	cmp	r3, #0
 8026036:	dd21      	ble.n	802607c <_strtod_l+0x76c>
 8026038:	4631      	mov	r1, r6
 802603a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802603c:	9805      	ldr	r0, [sp, #20]
 802603e:	f7ff f999 	bl	8025374 <__pow5mult>
 8026042:	4606      	mov	r6, r0
 8026044:	b9d0      	cbnz	r0, 802607c <_strtod_l+0x76c>
 8026046:	2600      	movs	r6, #0
 8026048:	e672      	b.n	8025d30 <_strtod_l+0x420>
 802604a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 802604e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8026052:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8026056:	37e2      	adds	r7, #226	@ 0xe2
 8026058:	fa02 f107 	lsl.w	r1, r2, r7
 802605c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802605e:	920c      	str	r2, [sp, #48]	@ 0x30
 8026060:	e7b8      	b.n	8025fd4 <_strtod_l+0x6c4>
 8026062:	2200      	movs	r2, #0
 8026064:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026066:	2201      	movs	r2, #1
 8026068:	e7f9      	b.n	802605e <_strtod_l+0x74e>
 802606a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802606c:	9805      	ldr	r0, [sp, #20]
 802606e:	463a      	mov	r2, r7
 8026070:	f7ff f9da 	bl	8025428 <__lshift>
 8026074:	9012      	str	r0, [sp, #72]	@ 0x48
 8026076:	2800      	cmp	r0, #0
 8026078:	d1db      	bne.n	8026032 <_strtod_l+0x722>
 802607a:	e659      	b.n	8025d30 <_strtod_l+0x420>
 802607c:	f1b8 0f00 	cmp.w	r8, #0
 8026080:	dd07      	ble.n	8026092 <_strtod_l+0x782>
 8026082:	4631      	mov	r1, r6
 8026084:	9805      	ldr	r0, [sp, #20]
 8026086:	4642      	mov	r2, r8
 8026088:	f7ff f9ce 	bl	8025428 <__lshift>
 802608c:	4606      	mov	r6, r0
 802608e:	2800      	cmp	r0, #0
 8026090:	d0d9      	beq.n	8026046 <_strtod_l+0x736>
 8026092:	f1b9 0f00 	cmp.w	r9, #0
 8026096:	dd08      	ble.n	80260aa <_strtod_l+0x79a>
 8026098:	4629      	mov	r1, r5
 802609a:	9805      	ldr	r0, [sp, #20]
 802609c:	464a      	mov	r2, r9
 802609e:	f7ff f9c3 	bl	8025428 <__lshift>
 80260a2:	4605      	mov	r5, r0
 80260a4:	2800      	cmp	r0, #0
 80260a6:	f43f ae43 	beq.w	8025d30 <_strtod_l+0x420>
 80260aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80260ac:	9805      	ldr	r0, [sp, #20]
 80260ae:	4632      	mov	r2, r6
 80260b0:	f7ff fa42 	bl	8025538 <__mdiff>
 80260b4:	4604      	mov	r4, r0
 80260b6:	2800      	cmp	r0, #0
 80260b8:	f43f ae3a 	beq.w	8025d30 <_strtod_l+0x420>
 80260bc:	2300      	movs	r3, #0
 80260be:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80260c2:	60c3      	str	r3, [r0, #12]
 80260c4:	4629      	mov	r1, r5
 80260c6:	f7ff fa1b 	bl	8025500 <__mcmp>
 80260ca:	2800      	cmp	r0, #0
 80260cc:	da4e      	bge.n	802616c <_strtod_l+0x85c>
 80260ce:	ea58 080a 	orrs.w	r8, r8, sl
 80260d2:	d174      	bne.n	80261be <_strtod_l+0x8ae>
 80260d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80260d8:	2b00      	cmp	r3, #0
 80260da:	d170      	bne.n	80261be <_strtod_l+0x8ae>
 80260dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80260e0:	0d1b      	lsrs	r3, r3, #20
 80260e2:	051b      	lsls	r3, r3, #20
 80260e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80260e8:	d969      	bls.n	80261be <_strtod_l+0x8ae>
 80260ea:	6963      	ldr	r3, [r4, #20]
 80260ec:	b913      	cbnz	r3, 80260f4 <_strtod_l+0x7e4>
 80260ee:	6923      	ldr	r3, [r4, #16]
 80260f0:	2b01      	cmp	r3, #1
 80260f2:	dd64      	ble.n	80261be <_strtod_l+0x8ae>
 80260f4:	4621      	mov	r1, r4
 80260f6:	2201      	movs	r2, #1
 80260f8:	9805      	ldr	r0, [sp, #20]
 80260fa:	f7ff f995 	bl	8025428 <__lshift>
 80260fe:	4629      	mov	r1, r5
 8026100:	4604      	mov	r4, r0
 8026102:	f7ff f9fd 	bl	8025500 <__mcmp>
 8026106:	2800      	cmp	r0, #0
 8026108:	dd59      	ble.n	80261be <_strtod_l+0x8ae>
 802610a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802610e:	9a06      	ldr	r2, [sp, #24]
 8026110:	0d1b      	lsrs	r3, r3, #20
 8026112:	051b      	lsls	r3, r3, #20
 8026114:	2a00      	cmp	r2, #0
 8026116:	d070      	beq.n	80261fa <_strtod_l+0x8ea>
 8026118:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802611c:	d86d      	bhi.n	80261fa <_strtod_l+0x8ea>
 802611e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8026122:	f67f ae99 	bls.w	8025e58 <_strtod_l+0x548>
 8026126:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8026158 <_strtod_l+0x848>
 802612a:	ec4b ab16 	vmov	d6, sl, fp
 802612e:	4b0e      	ldr	r3, [pc, #56]	@ (8026168 <_strtod_l+0x858>)
 8026130:	ee26 7b07 	vmul.f64	d7, d6, d7
 8026134:	ee17 2a90 	vmov	r2, s15
 8026138:	4013      	ands	r3, r2
 802613a:	ec5b ab17 	vmov	sl, fp, d7
 802613e:	2b00      	cmp	r3, #0
 8026140:	f47f ae01 	bne.w	8025d46 <_strtod_l+0x436>
 8026144:	9a05      	ldr	r2, [sp, #20]
 8026146:	2322      	movs	r3, #34	@ 0x22
 8026148:	6013      	str	r3, [r2, #0]
 802614a:	e5fc      	b.n	8025d46 <_strtod_l+0x436>
 802614c:	f3af 8000 	nop.w
 8026150:	ffc00000 	.word	0xffc00000
 8026154:	41dfffff 	.word	0x41dfffff
 8026158:	00000000 	.word	0x00000000
 802615c:	39500000 	.word	0x39500000
 8026160:	08029fd8 	.word	0x08029fd8
 8026164:	fffffc02 	.word	0xfffffc02
 8026168:	7ff00000 	.word	0x7ff00000
 802616c:	46d9      	mov	r9, fp
 802616e:	d15d      	bne.n	802622c <_strtod_l+0x91c>
 8026170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026174:	f1b8 0f00 	cmp.w	r8, #0
 8026178:	d02a      	beq.n	80261d0 <_strtod_l+0x8c0>
 802617a:	4aab      	ldr	r2, [pc, #684]	@ (8026428 <_strtod_l+0xb18>)
 802617c:	4293      	cmp	r3, r2
 802617e:	d12a      	bne.n	80261d6 <_strtod_l+0x8c6>
 8026180:	9b06      	ldr	r3, [sp, #24]
 8026182:	4652      	mov	r2, sl
 8026184:	b1fb      	cbz	r3, 80261c6 <_strtod_l+0x8b6>
 8026186:	4ba9      	ldr	r3, [pc, #676]	@ (802642c <_strtod_l+0xb1c>)
 8026188:	ea0b 0303 	and.w	r3, fp, r3
 802618c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8026190:	f04f 31ff 	mov.w	r1, #4294967295
 8026194:	d81a      	bhi.n	80261cc <_strtod_l+0x8bc>
 8026196:	0d1b      	lsrs	r3, r3, #20
 8026198:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802619c:	fa01 f303 	lsl.w	r3, r1, r3
 80261a0:	429a      	cmp	r2, r3
 80261a2:	d118      	bne.n	80261d6 <_strtod_l+0x8c6>
 80261a4:	4ba2      	ldr	r3, [pc, #648]	@ (8026430 <_strtod_l+0xb20>)
 80261a6:	4599      	cmp	r9, r3
 80261a8:	d102      	bne.n	80261b0 <_strtod_l+0x8a0>
 80261aa:	3201      	adds	r2, #1
 80261ac:	f43f adc0 	beq.w	8025d30 <_strtod_l+0x420>
 80261b0:	4b9e      	ldr	r3, [pc, #632]	@ (802642c <_strtod_l+0xb1c>)
 80261b2:	ea09 0303 	and.w	r3, r9, r3
 80261b6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80261ba:	f04f 0a00 	mov.w	sl, #0
 80261be:	9b06      	ldr	r3, [sp, #24]
 80261c0:	2b00      	cmp	r3, #0
 80261c2:	d1b0      	bne.n	8026126 <_strtod_l+0x816>
 80261c4:	e5bf      	b.n	8025d46 <_strtod_l+0x436>
 80261c6:	f04f 33ff 	mov.w	r3, #4294967295
 80261ca:	e7e9      	b.n	80261a0 <_strtod_l+0x890>
 80261cc:	460b      	mov	r3, r1
 80261ce:	e7e7      	b.n	80261a0 <_strtod_l+0x890>
 80261d0:	ea53 030a 	orrs.w	r3, r3, sl
 80261d4:	d099      	beq.n	802610a <_strtod_l+0x7fa>
 80261d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261d8:	b1c3      	cbz	r3, 802620c <_strtod_l+0x8fc>
 80261da:	ea13 0f09 	tst.w	r3, r9
 80261de:	d0ee      	beq.n	80261be <_strtod_l+0x8ae>
 80261e0:	9a06      	ldr	r2, [sp, #24]
 80261e2:	4650      	mov	r0, sl
 80261e4:	4659      	mov	r1, fp
 80261e6:	f1b8 0f00 	cmp.w	r8, #0
 80261ea:	d013      	beq.n	8026214 <_strtod_l+0x904>
 80261ec:	f7ff fb73 	bl	80258d6 <sulp>
 80261f0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80261f4:	ec5b ab17 	vmov	sl, fp, d7
 80261f8:	e7e1      	b.n	80261be <_strtod_l+0x8ae>
 80261fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80261fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8026202:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8026206:	f04f 3aff 	mov.w	sl, #4294967295
 802620a:	e7d8      	b.n	80261be <_strtod_l+0x8ae>
 802620c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802620e:	ea13 0f0a 	tst.w	r3, sl
 8026212:	e7e4      	b.n	80261de <_strtod_l+0x8ce>
 8026214:	f7ff fb5f 	bl	80258d6 <sulp>
 8026218:	ee39 0b40 	vsub.f64	d0, d9, d0
 802621c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8026220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026224:	ec5b ab10 	vmov	sl, fp, d0
 8026228:	d1c9      	bne.n	80261be <_strtod_l+0x8ae>
 802622a:	e615      	b.n	8025e58 <_strtod_l+0x548>
 802622c:	4629      	mov	r1, r5
 802622e:	4620      	mov	r0, r4
 8026230:	f7ff fade 	bl	80257f0 <__ratio>
 8026234:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8026238:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026240:	d85d      	bhi.n	80262fe <_strtod_l+0x9ee>
 8026242:	f1b8 0f00 	cmp.w	r8, #0
 8026246:	d164      	bne.n	8026312 <_strtod_l+0xa02>
 8026248:	f1ba 0f00 	cmp.w	sl, #0
 802624c:	d14b      	bne.n	80262e6 <_strtod_l+0x9d6>
 802624e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026252:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8026256:	2b00      	cmp	r3, #0
 8026258:	d160      	bne.n	802631c <_strtod_l+0xa0c>
 802625a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802625e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8026262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026266:	d401      	bmi.n	802626c <_strtod_l+0x95c>
 8026268:	ee20 8b08 	vmul.f64	d8, d0, d8
 802626c:	eeb1 ab48 	vneg.f64	d10, d8
 8026270:	486e      	ldr	r0, [pc, #440]	@ (802642c <_strtod_l+0xb1c>)
 8026272:	4970      	ldr	r1, [pc, #448]	@ (8026434 <_strtod_l+0xb24>)
 8026274:	ea09 0700 	and.w	r7, r9, r0
 8026278:	428f      	cmp	r7, r1
 802627a:	ec53 2b1a 	vmov	r2, r3, d10
 802627e:	d17d      	bne.n	802637c <_strtod_l+0xa6c>
 8026280:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8026284:	ec4b ab1c 	vmov	d12, sl, fp
 8026288:	eeb0 0b4c 	vmov.f64	d0, d12
 802628c:	f7ff f9e8 	bl	8025660 <__ulp>
 8026290:	4866      	ldr	r0, [pc, #408]	@ (802642c <_strtod_l+0xb1c>)
 8026292:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8026296:	ee1c 3a90 	vmov	r3, s25
 802629a:	4a67      	ldr	r2, [pc, #412]	@ (8026438 <_strtod_l+0xb28>)
 802629c:	ea03 0100 	and.w	r1, r3, r0
 80262a0:	4291      	cmp	r1, r2
 80262a2:	ec5b ab1c 	vmov	sl, fp, d12
 80262a6:	d93c      	bls.n	8026322 <_strtod_l+0xa12>
 80262a8:	ee19 2a90 	vmov	r2, s19
 80262ac:	4b60      	ldr	r3, [pc, #384]	@ (8026430 <_strtod_l+0xb20>)
 80262ae:	429a      	cmp	r2, r3
 80262b0:	d104      	bne.n	80262bc <_strtod_l+0x9ac>
 80262b2:	ee19 3a10 	vmov	r3, s18
 80262b6:	3301      	adds	r3, #1
 80262b8:	f43f ad3a 	beq.w	8025d30 <_strtod_l+0x420>
 80262bc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8026430 <_strtod_l+0xb20>
 80262c0:	f04f 3aff 	mov.w	sl, #4294967295
 80262c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80262c6:	9805      	ldr	r0, [sp, #20]
 80262c8:	f7fe fe96 	bl	8024ff8 <_Bfree>
 80262cc:	9805      	ldr	r0, [sp, #20]
 80262ce:	4631      	mov	r1, r6
 80262d0:	f7fe fe92 	bl	8024ff8 <_Bfree>
 80262d4:	9805      	ldr	r0, [sp, #20]
 80262d6:	4629      	mov	r1, r5
 80262d8:	f7fe fe8e 	bl	8024ff8 <_Bfree>
 80262dc:	9805      	ldr	r0, [sp, #20]
 80262de:	4621      	mov	r1, r4
 80262e0:	f7fe fe8a 	bl	8024ff8 <_Bfree>
 80262e4:	e625      	b.n	8025f32 <_strtod_l+0x622>
 80262e6:	f1ba 0f01 	cmp.w	sl, #1
 80262ea:	d103      	bne.n	80262f4 <_strtod_l+0x9e4>
 80262ec:	f1bb 0f00 	cmp.w	fp, #0
 80262f0:	f43f adb2 	beq.w	8025e58 <_strtod_l+0x548>
 80262f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80262f8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80262fc:	e7b8      	b.n	8026270 <_strtod_l+0x960>
 80262fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8026302:	ee20 8b08 	vmul.f64	d8, d0, d8
 8026306:	f1b8 0f00 	cmp.w	r8, #0
 802630a:	d0af      	beq.n	802626c <_strtod_l+0x95c>
 802630c:	eeb0 ab48 	vmov.f64	d10, d8
 8026310:	e7ae      	b.n	8026270 <_strtod_l+0x960>
 8026312:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8026316:	eeb0 8b4a 	vmov.f64	d8, d10
 802631a:	e7a9      	b.n	8026270 <_strtod_l+0x960>
 802631c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8026320:	e7a6      	b.n	8026270 <_strtod_l+0x960>
 8026322:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8026326:	9b06      	ldr	r3, [sp, #24]
 8026328:	46d9      	mov	r9, fp
 802632a:	2b00      	cmp	r3, #0
 802632c:	d1ca      	bne.n	80262c4 <_strtod_l+0x9b4>
 802632e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026332:	0d1b      	lsrs	r3, r3, #20
 8026334:	051b      	lsls	r3, r3, #20
 8026336:	429f      	cmp	r7, r3
 8026338:	d1c4      	bne.n	80262c4 <_strtod_l+0x9b4>
 802633a:	ec51 0b18 	vmov	r0, r1, d8
 802633e:	f7da f9fb 	bl	8000738 <__aeabi_d2lz>
 8026342:	f7da f9b3 	bl	80006ac <__aeabi_l2d>
 8026346:	f3cb 0913 	ubfx	r9, fp, #0, #20
 802634a:	ec41 0b17 	vmov	d7, r0, r1
 802634e:	ea49 090a 	orr.w	r9, r9, sl
 8026352:	ea59 0908 	orrs.w	r9, r9, r8
 8026356:	ee38 8b47 	vsub.f64	d8, d8, d7
 802635a:	d03c      	beq.n	80263d6 <_strtod_l+0xac6>
 802635c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8026410 <_strtod_l+0xb00>
 8026360:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026368:	f53f aced 	bmi.w	8025d46 <_strtod_l+0x436>
 802636c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8026418 <_strtod_l+0xb08>
 8026370:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026378:	dda4      	ble.n	80262c4 <_strtod_l+0x9b4>
 802637a:	e4e4      	b.n	8025d46 <_strtod_l+0x436>
 802637c:	9906      	ldr	r1, [sp, #24]
 802637e:	b1e1      	cbz	r1, 80263ba <_strtod_l+0xaaa>
 8026380:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8026384:	d819      	bhi.n	80263ba <_strtod_l+0xaaa>
 8026386:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802638e:	d811      	bhi.n	80263b4 <_strtod_l+0xaa4>
 8026390:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8026394:	ee18 3a10 	vmov	r3, s16
 8026398:	2b01      	cmp	r3, #1
 802639a:	bf38      	it	cc
 802639c:	2301      	movcc	r3, #1
 802639e:	ee08 3a10 	vmov	s16, r3
 80263a2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80263a6:	f1b8 0f00 	cmp.w	r8, #0
 80263aa:	d111      	bne.n	80263d0 <_strtod_l+0xac0>
 80263ac:	eeb1 7b48 	vneg.f64	d7, d8
 80263b0:	ec53 2b17 	vmov	r2, r3, d7
 80263b4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80263b8:	1bcb      	subs	r3, r1, r7
 80263ba:	eeb0 0b49 	vmov.f64	d0, d9
 80263be:	ec43 2b1a 	vmov	d10, r2, r3
 80263c2:	f7ff f94d 	bl	8025660 <__ulp>
 80263c6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80263ca:	ec5b ab19 	vmov	sl, fp, d9
 80263ce:	e7aa      	b.n	8026326 <_strtod_l+0xa16>
 80263d0:	eeb0 7b48 	vmov.f64	d7, d8
 80263d4:	e7ec      	b.n	80263b0 <_strtod_l+0xaa0>
 80263d6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8026420 <_strtod_l+0xb10>
 80263da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80263de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263e2:	f57f af6f 	bpl.w	80262c4 <_strtod_l+0x9b4>
 80263e6:	e4ae      	b.n	8025d46 <_strtod_l+0x436>
 80263e8:	2300      	movs	r3, #0
 80263ea:	9308      	str	r3, [sp, #32]
 80263ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80263ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80263f0:	6013      	str	r3, [r2, #0]
 80263f2:	f7ff bacc 	b.w	802598e <_strtod_l+0x7e>
 80263f6:	2a65      	cmp	r2, #101	@ 0x65
 80263f8:	f43f abbc 	beq.w	8025b74 <_strtod_l+0x264>
 80263fc:	2a45      	cmp	r2, #69	@ 0x45
 80263fe:	f43f abb9 	beq.w	8025b74 <_strtod_l+0x264>
 8026402:	2301      	movs	r3, #1
 8026404:	9306      	str	r3, [sp, #24]
 8026406:	f7ff bbf0 	b.w	8025bea <_strtod_l+0x2da>
 802640a:	bf00      	nop
 802640c:	f3af 8000 	nop.w
 8026410:	94a03595 	.word	0x94a03595
 8026414:	3fdfffff 	.word	0x3fdfffff
 8026418:	35afe535 	.word	0x35afe535
 802641c:	3fe00000 	.word	0x3fe00000
 8026420:	94a03595 	.word	0x94a03595
 8026424:	3fcfffff 	.word	0x3fcfffff
 8026428:	000fffff 	.word	0x000fffff
 802642c:	7ff00000 	.word	0x7ff00000
 8026430:	7fefffff 	.word	0x7fefffff
 8026434:	7fe00000 	.word	0x7fe00000
 8026438:	7c9fffff 	.word	0x7c9fffff

0802643c <_strtod_r>:
 802643c:	4b01      	ldr	r3, [pc, #4]	@ (8026444 <_strtod_r+0x8>)
 802643e:	f7ff ba67 	b.w	8025910 <_strtod_l>
 8026442:	bf00      	nop
 8026444:	24000110 	.word	0x24000110

08026448 <_strtol_l.constprop.0>:
 8026448:	2b24      	cmp	r3, #36	@ 0x24
 802644a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802644e:	4686      	mov	lr, r0
 8026450:	4690      	mov	r8, r2
 8026452:	d801      	bhi.n	8026458 <_strtol_l.constprop.0+0x10>
 8026454:	2b01      	cmp	r3, #1
 8026456:	d106      	bne.n	8026466 <_strtol_l.constprop.0+0x1e>
 8026458:	f7fd fec8 	bl	80241ec <__errno>
 802645c:	2316      	movs	r3, #22
 802645e:	6003      	str	r3, [r0, #0]
 8026460:	2000      	movs	r0, #0
 8026462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026466:	4834      	ldr	r0, [pc, #208]	@ (8026538 <_strtol_l.constprop.0+0xf0>)
 8026468:	460d      	mov	r5, r1
 802646a:	462a      	mov	r2, r5
 802646c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026470:	5d06      	ldrb	r6, [r0, r4]
 8026472:	f016 0608 	ands.w	r6, r6, #8
 8026476:	d1f8      	bne.n	802646a <_strtol_l.constprop.0+0x22>
 8026478:	2c2d      	cmp	r4, #45	@ 0x2d
 802647a:	d12d      	bne.n	80264d8 <_strtol_l.constprop.0+0x90>
 802647c:	782c      	ldrb	r4, [r5, #0]
 802647e:	2601      	movs	r6, #1
 8026480:	1c95      	adds	r5, r2, #2
 8026482:	f033 0210 	bics.w	r2, r3, #16
 8026486:	d109      	bne.n	802649c <_strtol_l.constprop.0+0x54>
 8026488:	2c30      	cmp	r4, #48	@ 0x30
 802648a:	d12a      	bne.n	80264e2 <_strtol_l.constprop.0+0x9a>
 802648c:	782a      	ldrb	r2, [r5, #0]
 802648e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026492:	2a58      	cmp	r2, #88	@ 0x58
 8026494:	d125      	bne.n	80264e2 <_strtol_l.constprop.0+0x9a>
 8026496:	786c      	ldrb	r4, [r5, #1]
 8026498:	2310      	movs	r3, #16
 802649a:	3502      	adds	r5, #2
 802649c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80264a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80264a4:	2200      	movs	r2, #0
 80264a6:	fbbc f9f3 	udiv	r9, ip, r3
 80264aa:	4610      	mov	r0, r2
 80264ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80264b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80264b4:	2f09      	cmp	r7, #9
 80264b6:	d81b      	bhi.n	80264f0 <_strtol_l.constprop.0+0xa8>
 80264b8:	463c      	mov	r4, r7
 80264ba:	42a3      	cmp	r3, r4
 80264bc:	dd27      	ble.n	802650e <_strtol_l.constprop.0+0xc6>
 80264be:	1c57      	adds	r7, r2, #1
 80264c0:	d007      	beq.n	80264d2 <_strtol_l.constprop.0+0x8a>
 80264c2:	4581      	cmp	r9, r0
 80264c4:	d320      	bcc.n	8026508 <_strtol_l.constprop.0+0xc0>
 80264c6:	d101      	bne.n	80264cc <_strtol_l.constprop.0+0x84>
 80264c8:	45a2      	cmp	sl, r4
 80264ca:	db1d      	blt.n	8026508 <_strtol_l.constprop.0+0xc0>
 80264cc:	fb00 4003 	mla	r0, r0, r3, r4
 80264d0:	2201      	movs	r2, #1
 80264d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80264d6:	e7eb      	b.n	80264b0 <_strtol_l.constprop.0+0x68>
 80264d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80264da:	bf04      	itt	eq
 80264dc:	782c      	ldrbeq	r4, [r5, #0]
 80264de:	1c95      	addeq	r5, r2, #2
 80264e0:	e7cf      	b.n	8026482 <_strtol_l.constprop.0+0x3a>
 80264e2:	2b00      	cmp	r3, #0
 80264e4:	d1da      	bne.n	802649c <_strtol_l.constprop.0+0x54>
 80264e6:	2c30      	cmp	r4, #48	@ 0x30
 80264e8:	bf0c      	ite	eq
 80264ea:	2308      	moveq	r3, #8
 80264ec:	230a      	movne	r3, #10
 80264ee:	e7d5      	b.n	802649c <_strtol_l.constprop.0+0x54>
 80264f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80264f4:	2f19      	cmp	r7, #25
 80264f6:	d801      	bhi.n	80264fc <_strtol_l.constprop.0+0xb4>
 80264f8:	3c37      	subs	r4, #55	@ 0x37
 80264fa:	e7de      	b.n	80264ba <_strtol_l.constprop.0+0x72>
 80264fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8026500:	2f19      	cmp	r7, #25
 8026502:	d804      	bhi.n	802650e <_strtol_l.constprop.0+0xc6>
 8026504:	3c57      	subs	r4, #87	@ 0x57
 8026506:	e7d8      	b.n	80264ba <_strtol_l.constprop.0+0x72>
 8026508:	f04f 32ff 	mov.w	r2, #4294967295
 802650c:	e7e1      	b.n	80264d2 <_strtol_l.constprop.0+0x8a>
 802650e:	1c53      	adds	r3, r2, #1
 8026510:	d108      	bne.n	8026524 <_strtol_l.constprop.0+0xdc>
 8026512:	2322      	movs	r3, #34	@ 0x22
 8026514:	f8ce 3000 	str.w	r3, [lr]
 8026518:	4660      	mov	r0, ip
 802651a:	f1b8 0f00 	cmp.w	r8, #0
 802651e:	d0a0      	beq.n	8026462 <_strtol_l.constprop.0+0x1a>
 8026520:	1e69      	subs	r1, r5, #1
 8026522:	e006      	b.n	8026532 <_strtol_l.constprop.0+0xea>
 8026524:	b106      	cbz	r6, 8026528 <_strtol_l.constprop.0+0xe0>
 8026526:	4240      	negs	r0, r0
 8026528:	f1b8 0f00 	cmp.w	r8, #0
 802652c:	d099      	beq.n	8026462 <_strtol_l.constprop.0+0x1a>
 802652e:	2a00      	cmp	r2, #0
 8026530:	d1f6      	bne.n	8026520 <_strtol_l.constprop.0+0xd8>
 8026532:	f8c8 1000 	str.w	r1, [r8]
 8026536:	e794      	b.n	8026462 <_strtol_l.constprop.0+0x1a>
 8026538:	0802a001 	.word	0x0802a001

0802653c <_strtol_r>:
 802653c:	f7ff bf84 	b.w	8026448 <_strtol_l.constprop.0>

08026540 <__ssputs_r>:
 8026540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026544:	688e      	ldr	r6, [r1, #8]
 8026546:	461f      	mov	r7, r3
 8026548:	42be      	cmp	r6, r7
 802654a:	680b      	ldr	r3, [r1, #0]
 802654c:	4682      	mov	sl, r0
 802654e:	460c      	mov	r4, r1
 8026550:	4690      	mov	r8, r2
 8026552:	d82d      	bhi.n	80265b0 <__ssputs_r+0x70>
 8026554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026558:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802655c:	d026      	beq.n	80265ac <__ssputs_r+0x6c>
 802655e:	6965      	ldr	r5, [r4, #20]
 8026560:	6909      	ldr	r1, [r1, #16]
 8026562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026566:	eba3 0901 	sub.w	r9, r3, r1
 802656a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802656e:	1c7b      	adds	r3, r7, #1
 8026570:	444b      	add	r3, r9
 8026572:	106d      	asrs	r5, r5, #1
 8026574:	429d      	cmp	r5, r3
 8026576:	bf38      	it	cc
 8026578:	461d      	movcc	r5, r3
 802657a:	0553      	lsls	r3, r2, #21
 802657c:	d527      	bpl.n	80265ce <__ssputs_r+0x8e>
 802657e:	4629      	mov	r1, r5
 8026580:	f7fc fc74 	bl	8022e6c <_malloc_r>
 8026584:	4606      	mov	r6, r0
 8026586:	b360      	cbz	r0, 80265e2 <__ssputs_r+0xa2>
 8026588:	6921      	ldr	r1, [r4, #16]
 802658a:	464a      	mov	r2, r9
 802658c:	f7fd fe5b 	bl	8024246 <memcpy>
 8026590:	89a3      	ldrh	r3, [r4, #12]
 8026592:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8026596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802659a:	81a3      	strh	r3, [r4, #12]
 802659c:	6126      	str	r6, [r4, #16]
 802659e:	6165      	str	r5, [r4, #20]
 80265a0:	444e      	add	r6, r9
 80265a2:	eba5 0509 	sub.w	r5, r5, r9
 80265a6:	6026      	str	r6, [r4, #0]
 80265a8:	60a5      	str	r5, [r4, #8]
 80265aa:	463e      	mov	r6, r7
 80265ac:	42be      	cmp	r6, r7
 80265ae:	d900      	bls.n	80265b2 <__ssputs_r+0x72>
 80265b0:	463e      	mov	r6, r7
 80265b2:	6820      	ldr	r0, [r4, #0]
 80265b4:	4632      	mov	r2, r6
 80265b6:	4641      	mov	r1, r8
 80265b8:	f000 fb6a 	bl	8026c90 <memmove>
 80265bc:	68a3      	ldr	r3, [r4, #8]
 80265be:	1b9b      	subs	r3, r3, r6
 80265c0:	60a3      	str	r3, [r4, #8]
 80265c2:	6823      	ldr	r3, [r4, #0]
 80265c4:	4433      	add	r3, r6
 80265c6:	6023      	str	r3, [r4, #0]
 80265c8:	2000      	movs	r0, #0
 80265ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265ce:	462a      	mov	r2, r5
 80265d0:	f000 ff15 	bl	80273fe <_realloc_r>
 80265d4:	4606      	mov	r6, r0
 80265d6:	2800      	cmp	r0, #0
 80265d8:	d1e0      	bne.n	802659c <__ssputs_r+0x5c>
 80265da:	6921      	ldr	r1, [r4, #16]
 80265dc:	4650      	mov	r0, sl
 80265de:	f7fe fc81 	bl	8024ee4 <_free_r>
 80265e2:	230c      	movs	r3, #12
 80265e4:	f8ca 3000 	str.w	r3, [sl]
 80265e8:	89a3      	ldrh	r3, [r4, #12]
 80265ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80265ee:	81a3      	strh	r3, [r4, #12]
 80265f0:	f04f 30ff 	mov.w	r0, #4294967295
 80265f4:	e7e9      	b.n	80265ca <__ssputs_r+0x8a>
	...

080265f8 <_svfiprintf_r>:
 80265f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265fc:	4698      	mov	r8, r3
 80265fe:	898b      	ldrh	r3, [r1, #12]
 8026600:	061b      	lsls	r3, r3, #24
 8026602:	b09d      	sub	sp, #116	@ 0x74
 8026604:	4607      	mov	r7, r0
 8026606:	460d      	mov	r5, r1
 8026608:	4614      	mov	r4, r2
 802660a:	d510      	bpl.n	802662e <_svfiprintf_r+0x36>
 802660c:	690b      	ldr	r3, [r1, #16]
 802660e:	b973      	cbnz	r3, 802662e <_svfiprintf_r+0x36>
 8026610:	2140      	movs	r1, #64	@ 0x40
 8026612:	f7fc fc2b 	bl	8022e6c <_malloc_r>
 8026616:	6028      	str	r0, [r5, #0]
 8026618:	6128      	str	r0, [r5, #16]
 802661a:	b930      	cbnz	r0, 802662a <_svfiprintf_r+0x32>
 802661c:	230c      	movs	r3, #12
 802661e:	603b      	str	r3, [r7, #0]
 8026620:	f04f 30ff 	mov.w	r0, #4294967295
 8026624:	b01d      	add	sp, #116	@ 0x74
 8026626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802662a:	2340      	movs	r3, #64	@ 0x40
 802662c:	616b      	str	r3, [r5, #20]
 802662e:	2300      	movs	r3, #0
 8026630:	9309      	str	r3, [sp, #36]	@ 0x24
 8026632:	2320      	movs	r3, #32
 8026634:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026638:	f8cd 800c 	str.w	r8, [sp, #12]
 802663c:	2330      	movs	r3, #48	@ 0x30
 802663e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80267dc <_svfiprintf_r+0x1e4>
 8026642:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026646:	f04f 0901 	mov.w	r9, #1
 802664a:	4623      	mov	r3, r4
 802664c:	469a      	mov	sl, r3
 802664e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026652:	b10a      	cbz	r2, 8026658 <_svfiprintf_r+0x60>
 8026654:	2a25      	cmp	r2, #37	@ 0x25
 8026656:	d1f9      	bne.n	802664c <_svfiprintf_r+0x54>
 8026658:	ebba 0b04 	subs.w	fp, sl, r4
 802665c:	d00b      	beq.n	8026676 <_svfiprintf_r+0x7e>
 802665e:	465b      	mov	r3, fp
 8026660:	4622      	mov	r2, r4
 8026662:	4629      	mov	r1, r5
 8026664:	4638      	mov	r0, r7
 8026666:	f7ff ff6b 	bl	8026540 <__ssputs_r>
 802666a:	3001      	adds	r0, #1
 802666c:	f000 80a7 	beq.w	80267be <_svfiprintf_r+0x1c6>
 8026670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026672:	445a      	add	r2, fp
 8026674:	9209      	str	r2, [sp, #36]	@ 0x24
 8026676:	f89a 3000 	ldrb.w	r3, [sl]
 802667a:	2b00      	cmp	r3, #0
 802667c:	f000 809f 	beq.w	80267be <_svfiprintf_r+0x1c6>
 8026680:	2300      	movs	r3, #0
 8026682:	f04f 32ff 	mov.w	r2, #4294967295
 8026686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802668a:	f10a 0a01 	add.w	sl, sl, #1
 802668e:	9304      	str	r3, [sp, #16]
 8026690:	9307      	str	r3, [sp, #28]
 8026692:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026696:	931a      	str	r3, [sp, #104]	@ 0x68
 8026698:	4654      	mov	r4, sl
 802669a:	2205      	movs	r2, #5
 802669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266a0:	484e      	ldr	r0, [pc, #312]	@ (80267dc <_svfiprintf_r+0x1e4>)
 80266a2:	f7d9 fe1d 	bl	80002e0 <memchr>
 80266a6:	9a04      	ldr	r2, [sp, #16]
 80266a8:	b9d8      	cbnz	r0, 80266e2 <_svfiprintf_r+0xea>
 80266aa:	06d0      	lsls	r0, r2, #27
 80266ac:	bf44      	itt	mi
 80266ae:	2320      	movmi	r3, #32
 80266b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80266b4:	0711      	lsls	r1, r2, #28
 80266b6:	bf44      	itt	mi
 80266b8:	232b      	movmi	r3, #43	@ 0x2b
 80266ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80266be:	f89a 3000 	ldrb.w	r3, [sl]
 80266c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80266c4:	d015      	beq.n	80266f2 <_svfiprintf_r+0xfa>
 80266c6:	9a07      	ldr	r2, [sp, #28]
 80266c8:	4654      	mov	r4, sl
 80266ca:	2000      	movs	r0, #0
 80266cc:	f04f 0c0a 	mov.w	ip, #10
 80266d0:	4621      	mov	r1, r4
 80266d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80266d6:	3b30      	subs	r3, #48	@ 0x30
 80266d8:	2b09      	cmp	r3, #9
 80266da:	d94b      	bls.n	8026774 <_svfiprintf_r+0x17c>
 80266dc:	b1b0      	cbz	r0, 802670c <_svfiprintf_r+0x114>
 80266de:	9207      	str	r2, [sp, #28]
 80266e0:	e014      	b.n	802670c <_svfiprintf_r+0x114>
 80266e2:	eba0 0308 	sub.w	r3, r0, r8
 80266e6:	fa09 f303 	lsl.w	r3, r9, r3
 80266ea:	4313      	orrs	r3, r2
 80266ec:	9304      	str	r3, [sp, #16]
 80266ee:	46a2      	mov	sl, r4
 80266f0:	e7d2      	b.n	8026698 <_svfiprintf_r+0xa0>
 80266f2:	9b03      	ldr	r3, [sp, #12]
 80266f4:	1d19      	adds	r1, r3, #4
 80266f6:	681b      	ldr	r3, [r3, #0]
 80266f8:	9103      	str	r1, [sp, #12]
 80266fa:	2b00      	cmp	r3, #0
 80266fc:	bfbb      	ittet	lt
 80266fe:	425b      	neglt	r3, r3
 8026700:	f042 0202 	orrlt.w	r2, r2, #2
 8026704:	9307      	strge	r3, [sp, #28]
 8026706:	9307      	strlt	r3, [sp, #28]
 8026708:	bfb8      	it	lt
 802670a:	9204      	strlt	r2, [sp, #16]
 802670c:	7823      	ldrb	r3, [r4, #0]
 802670e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026710:	d10a      	bne.n	8026728 <_svfiprintf_r+0x130>
 8026712:	7863      	ldrb	r3, [r4, #1]
 8026714:	2b2a      	cmp	r3, #42	@ 0x2a
 8026716:	d132      	bne.n	802677e <_svfiprintf_r+0x186>
 8026718:	9b03      	ldr	r3, [sp, #12]
 802671a:	1d1a      	adds	r2, r3, #4
 802671c:	681b      	ldr	r3, [r3, #0]
 802671e:	9203      	str	r2, [sp, #12]
 8026720:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026724:	3402      	adds	r4, #2
 8026726:	9305      	str	r3, [sp, #20]
 8026728:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80267ec <_svfiprintf_r+0x1f4>
 802672c:	7821      	ldrb	r1, [r4, #0]
 802672e:	2203      	movs	r2, #3
 8026730:	4650      	mov	r0, sl
 8026732:	f7d9 fdd5 	bl	80002e0 <memchr>
 8026736:	b138      	cbz	r0, 8026748 <_svfiprintf_r+0x150>
 8026738:	9b04      	ldr	r3, [sp, #16]
 802673a:	eba0 000a 	sub.w	r0, r0, sl
 802673e:	2240      	movs	r2, #64	@ 0x40
 8026740:	4082      	lsls	r2, r0
 8026742:	4313      	orrs	r3, r2
 8026744:	3401      	adds	r4, #1
 8026746:	9304      	str	r3, [sp, #16]
 8026748:	f814 1b01 	ldrb.w	r1, [r4], #1
 802674c:	4824      	ldr	r0, [pc, #144]	@ (80267e0 <_svfiprintf_r+0x1e8>)
 802674e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026752:	2206      	movs	r2, #6
 8026754:	f7d9 fdc4 	bl	80002e0 <memchr>
 8026758:	2800      	cmp	r0, #0
 802675a:	d036      	beq.n	80267ca <_svfiprintf_r+0x1d2>
 802675c:	4b21      	ldr	r3, [pc, #132]	@ (80267e4 <_svfiprintf_r+0x1ec>)
 802675e:	bb1b      	cbnz	r3, 80267a8 <_svfiprintf_r+0x1b0>
 8026760:	9b03      	ldr	r3, [sp, #12]
 8026762:	3307      	adds	r3, #7
 8026764:	f023 0307 	bic.w	r3, r3, #7
 8026768:	3308      	adds	r3, #8
 802676a:	9303      	str	r3, [sp, #12]
 802676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802676e:	4433      	add	r3, r6
 8026770:	9309      	str	r3, [sp, #36]	@ 0x24
 8026772:	e76a      	b.n	802664a <_svfiprintf_r+0x52>
 8026774:	fb0c 3202 	mla	r2, ip, r2, r3
 8026778:	460c      	mov	r4, r1
 802677a:	2001      	movs	r0, #1
 802677c:	e7a8      	b.n	80266d0 <_svfiprintf_r+0xd8>
 802677e:	2300      	movs	r3, #0
 8026780:	3401      	adds	r4, #1
 8026782:	9305      	str	r3, [sp, #20]
 8026784:	4619      	mov	r1, r3
 8026786:	f04f 0c0a 	mov.w	ip, #10
 802678a:	4620      	mov	r0, r4
 802678c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026790:	3a30      	subs	r2, #48	@ 0x30
 8026792:	2a09      	cmp	r2, #9
 8026794:	d903      	bls.n	802679e <_svfiprintf_r+0x1a6>
 8026796:	2b00      	cmp	r3, #0
 8026798:	d0c6      	beq.n	8026728 <_svfiprintf_r+0x130>
 802679a:	9105      	str	r1, [sp, #20]
 802679c:	e7c4      	b.n	8026728 <_svfiprintf_r+0x130>
 802679e:	fb0c 2101 	mla	r1, ip, r1, r2
 80267a2:	4604      	mov	r4, r0
 80267a4:	2301      	movs	r3, #1
 80267a6:	e7f0      	b.n	802678a <_svfiprintf_r+0x192>
 80267a8:	ab03      	add	r3, sp, #12
 80267aa:	9300      	str	r3, [sp, #0]
 80267ac:	462a      	mov	r2, r5
 80267ae:	4b0e      	ldr	r3, [pc, #56]	@ (80267e8 <_svfiprintf_r+0x1f0>)
 80267b0:	a904      	add	r1, sp, #16
 80267b2:	4638      	mov	r0, r7
 80267b4:	f7fc fc84 	bl	80230c0 <_printf_float>
 80267b8:	1c42      	adds	r2, r0, #1
 80267ba:	4606      	mov	r6, r0
 80267bc:	d1d6      	bne.n	802676c <_svfiprintf_r+0x174>
 80267be:	89ab      	ldrh	r3, [r5, #12]
 80267c0:	065b      	lsls	r3, r3, #25
 80267c2:	f53f af2d 	bmi.w	8026620 <_svfiprintf_r+0x28>
 80267c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80267c8:	e72c      	b.n	8026624 <_svfiprintf_r+0x2c>
 80267ca:	ab03      	add	r3, sp, #12
 80267cc:	9300      	str	r3, [sp, #0]
 80267ce:	462a      	mov	r2, r5
 80267d0:	4b05      	ldr	r3, [pc, #20]	@ (80267e8 <_svfiprintf_r+0x1f0>)
 80267d2:	a904      	add	r1, sp, #16
 80267d4:	4638      	mov	r0, r7
 80267d6:	f7fc fefb 	bl	80235d0 <_printf_i>
 80267da:	e7ed      	b.n	80267b8 <_svfiprintf_r+0x1c0>
 80267dc:	0802a101 	.word	0x0802a101
 80267e0:	0802a10b 	.word	0x0802a10b
 80267e4:	080230c1 	.word	0x080230c1
 80267e8:	08026541 	.word	0x08026541
 80267ec:	0802a107 	.word	0x0802a107

080267f0 <__sfputc_r>:
 80267f0:	6893      	ldr	r3, [r2, #8]
 80267f2:	3b01      	subs	r3, #1
 80267f4:	2b00      	cmp	r3, #0
 80267f6:	b410      	push	{r4}
 80267f8:	6093      	str	r3, [r2, #8]
 80267fa:	da08      	bge.n	802680e <__sfputc_r+0x1e>
 80267fc:	6994      	ldr	r4, [r2, #24]
 80267fe:	42a3      	cmp	r3, r4
 8026800:	db01      	blt.n	8026806 <__sfputc_r+0x16>
 8026802:	290a      	cmp	r1, #10
 8026804:	d103      	bne.n	802680e <__sfputc_r+0x1e>
 8026806:	f85d 4b04 	ldr.w	r4, [sp], #4
 802680a:	f7fd bbb4 	b.w	8023f76 <__swbuf_r>
 802680e:	6813      	ldr	r3, [r2, #0]
 8026810:	1c58      	adds	r0, r3, #1
 8026812:	6010      	str	r0, [r2, #0]
 8026814:	7019      	strb	r1, [r3, #0]
 8026816:	4608      	mov	r0, r1
 8026818:	f85d 4b04 	ldr.w	r4, [sp], #4
 802681c:	4770      	bx	lr

0802681e <__sfputs_r>:
 802681e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026820:	4606      	mov	r6, r0
 8026822:	460f      	mov	r7, r1
 8026824:	4614      	mov	r4, r2
 8026826:	18d5      	adds	r5, r2, r3
 8026828:	42ac      	cmp	r4, r5
 802682a:	d101      	bne.n	8026830 <__sfputs_r+0x12>
 802682c:	2000      	movs	r0, #0
 802682e:	e007      	b.n	8026840 <__sfputs_r+0x22>
 8026830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026834:	463a      	mov	r2, r7
 8026836:	4630      	mov	r0, r6
 8026838:	f7ff ffda 	bl	80267f0 <__sfputc_r>
 802683c:	1c43      	adds	r3, r0, #1
 802683e:	d1f3      	bne.n	8026828 <__sfputs_r+0xa>
 8026840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026844 <_vfiprintf_r>:
 8026844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026848:	460d      	mov	r5, r1
 802684a:	b09d      	sub	sp, #116	@ 0x74
 802684c:	4614      	mov	r4, r2
 802684e:	4698      	mov	r8, r3
 8026850:	4606      	mov	r6, r0
 8026852:	b118      	cbz	r0, 802685c <_vfiprintf_r+0x18>
 8026854:	6a03      	ldr	r3, [r0, #32]
 8026856:	b90b      	cbnz	r3, 802685c <_vfiprintf_r+0x18>
 8026858:	f7fd fa72 	bl	8023d40 <__sinit>
 802685c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802685e:	07d9      	lsls	r1, r3, #31
 8026860:	d405      	bmi.n	802686e <_vfiprintf_r+0x2a>
 8026862:	89ab      	ldrh	r3, [r5, #12]
 8026864:	059a      	lsls	r2, r3, #22
 8026866:	d402      	bmi.n	802686e <_vfiprintf_r+0x2a>
 8026868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802686a:	f7fd fcea 	bl	8024242 <__retarget_lock_acquire_recursive>
 802686e:	89ab      	ldrh	r3, [r5, #12]
 8026870:	071b      	lsls	r3, r3, #28
 8026872:	d501      	bpl.n	8026878 <_vfiprintf_r+0x34>
 8026874:	692b      	ldr	r3, [r5, #16]
 8026876:	b99b      	cbnz	r3, 80268a0 <_vfiprintf_r+0x5c>
 8026878:	4629      	mov	r1, r5
 802687a:	4630      	mov	r0, r6
 802687c:	f7fd fbba 	bl	8023ff4 <__swsetup_r>
 8026880:	b170      	cbz	r0, 80268a0 <_vfiprintf_r+0x5c>
 8026882:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026884:	07dc      	lsls	r4, r3, #31
 8026886:	d504      	bpl.n	8026892 <_vfiprintf_r+0x4e>
 8026888:	f04f 30ff 	mov.w	r0, #4294967295
 802688c:	b01d      	add	sp, #116	@ 0x74
 802688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026892:	89ab      	ldrh	r3, [r5, #12]
 8026894:	0598      	lsls	r0, r3, #22
 8026896:	d4f7      	bmi.n	8026888 <_vfiprintf_r+0x44>
 8026898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802689a:	f7fd fcd3 	bl	8024244 <__retarget_lock_release_recursive>
 802689e:	e7f3      	b.n	8026888 <_vfiprintf_r+0x44>
 80268a0:	2300      	movs	r3, #0
 80268a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80268a4:	2320      	movs	r3, #32
 80268a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80268aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80268ae:	2330      	movs	r3, #48	@ 0x30
 80268b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026a60 <_vfiprintf_r+0x21c>
 80268b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80268b8:	f04f 0901 	mov.w	r9, #1
 80268bc:	4623      	mov	r3, r4
 80268be:	469a      	mov	sl, r3
 80268c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80268c4:	b10a      	cbz	r2, 80268ca <_vfiprintf_r+0x86>
 80268c6:	2a25      	cmp	r2, #37	@ 0x25
 80268c8:	d1f9      	bne.n	80268be <_vfiprintf_r+0x7a>
 80268ca:	ebba 0b04 	subs.w	fp, sl, r4
 80268ce:	d00b      	beq.n	80268e8 <_vfiprintf_r+0xa4>
 80268d0:	465b      	mov	r3, fp
 80268d2:	4622      	mov	r2, r4
 80268d4:	4629      	mov	r1, r5
 80268d6:	4630      	mov	r0, r6
 80268d8:	f7ff ffa1 	bl	802681e <__sfputs_r>
 80268dc:	3001      	adds	r0, #1
 80268de:	f000 80a7 	beq.w	8026a30 <_vfiprintf_r+0x1ec>
 80268e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80268e4:	445a      	add	r2, fp
 80268e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80268e8:	f89a 3000 	ldrb.w	r3, [sl]
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	f000 809f 	beq.w	8026a30 <_vfiprintf_r+0x1ec>
 80268f2:	2300      	movs	r3, #0
 80268f4:	f04f 32ff 	mov.w	r2, #4294967295
 80268f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80268fc:	f10a 0a01 	add.w	sl, sl, #1
 8026900:	9304      	str	r3, [sp, #16]
 8026902:	9307      	str	r3, [sp, #28]
 8026904:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026908:	931a      	str	r3, [sp, #104]	@ 0x68
 802690a:	4654      	mov	r4, sl
 802690c:	2205      	movs	r2, #5
 802690e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026912:	4853      	ldr	r0, [pc, #332]	@ (8026a60 <_vfiprintf_r+0x21c>)
 8026914:	f7d9 fce4 	bl	80002e0 <memchr>
 8026918:	9a04      	ldr	r2, [sp, #16]
 802691a:	b9d8      	cbnz	r0, 8026954 <_vfiprintf_r+0x110>
 802691c:	06d1      	lsls	r1, r2, #27
 802691e:	bf44      	itt	mi
 8026920:	2320      	movmi	r3, #32
 8026922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026926:	0713      	lsls	r3, r2, #28
 8026928:	bf44      	itt	mi
 802692a:	232b      	movmi	r3, #43	@ 0x2b
 802692c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026930:	f89a 3000 	ldrb.w	r3, [sl]
 8026934:	2b2a      	cmp	r3, #42	@ 0x2a
 8026936:	d015      	beq.n	8026964 <_vfiprintf_r+0x120>
 8026938:	9a07      	ldr	r2, [sp, #28]
 802693a:	4654      	mov	r4, sl
 802693c:	2000      	movs	r0, #0
 802693e:	f04f 0c0a 	mov.w	ip, #10
 8026942:	4621      	mov	r1, r4
 8026944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026948:	3b30      	subs	r3, #48	@ 0x30
 802694a:	2b09      	cmp	r3, #9
 802694c:	d94b      	bls.n	80269e6 <_vfiprintf_r+0x1a2>
 802694e:	b1b0      	cbz	r0, 802697e <_vfiprintf_r+0x13a>
 8026950:	9207      	str	r2, [sp, #28]
 8026952:	e014      	b.n	802697e <_vfiprintf_r+0x13a>
 8026954:	eba0 0308 	sub.w	r3, r0, r8
 8026958:	fa09 f303 	lsl.w	r3, r9, r3
 802695c:	4313      	orrs	r3, r2
 802695e:	9304      	str	r3, [sp, #16]
 8026960:	46a2      	mov	sl, r4
 8026962:	e7d2      	b.n	802690a <_vfiprintf_r+0xc6>
 8026964:	9b03      	ldr	r3, [sp, #12]
 8026966:	1d19      	adds	r1, r3, #4
 8026968:	681b      	ldr	r3, [r3, #0]
 802696a:	9103      	str	r1, [sp, #12]
 802696c:	2b00      	cmp	r3, #0
 802696e:	bfbb      	ittet	lt
 8026970:	425b      	neglt	r3, r3
 8026972:	f042 0202 	orrlt.w	r2, r2, #2
 8026976:	9307      	strge	r3, [sp, #28]
 8026978:	9307      	strlt	r3, [sp, #28]
 802697a:	bfb8      	it	lt
 802697c:	9204      	strlt	r2, [sp, #16]
 802697e:	7823      	ldrb	r3, [r4, #0]
 8026980:	2b2e      	cmp	r3, #46	@ 0x2e
 8026982:	d10a      	bne.n	802699a <_vfiprintf_r+0x156>
 8026984:	7863      	ldrb	r3, [r4, #1]
 8026986:	2b2a      	cmp	r3, #42	@ 0x2a
 8026988:	d132      	bne.n	80269f0 <_vfiprintf_r+0x1ac>
 802698a:	9b03      	ldr	r3, [sp, #12]
 802698c:	1d1a      	adds	r2, r3, #4
 802698e:	681b      	ldr	r3, [r3, #0]
 8026990:	9203      	str	r2, [sp, #12]
 8026992:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026996:	3402      	adds	r4, #2
 8026998:	9305      	str	r3, [sp, #20]
 802699a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026a70 <_vfiprintf_r+0x22c>
 802699e:	7821      	ldrb	r1, [r4, #0]
 80269a0:	2203      	movs	r2, #3
 80269a2:	4650      	mov	r0, sl
 80269a4:	f7d9 fc9c 	bl	80002e0 <memchr>
 80269a8:	b138      	cbz	r0, 80269ba <_vfiprintf_r+0x176>
 80269aa:	9b04      	ldr	r3, [sp, #16]
 80269ac:	eba0 000a 	sub.w	r0, r0, sl
 80269b0:	2240      	movs	r2, #64	@ 0x40
 80269b2:	4082      	lsls	r2, r0
 80269b4:	4313      	orrs	r3, r2
 80269b6:	3401      	adds	r4, #1
 80269b8:	9304      	str	r3, [sp, #16]
 80269ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80269be:	4829      	ldr	r0, [pc, #164]	@ (8026a64 <_vfiprintf_r+0x220>)
 80269c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80269c4:	2206      	movs	r2, #6
 80269c6:	f7d9 fc8b 	bl	80002e0 <memchr>
 80269ca:	2800      	cmp	r0, #0
 80269cc:	d03f      	beq.n	8026a4e <_vfiprintf_r+0x20a>
 80269ce:	4b26      	ldr	r3, [pc, #152]	@ (8026a68 <_vfiprintf_r+0x224>)
 80269d0:	bb1b      	cbnz	r3, 8026a1a <_vfiprintf_r+0x1d6>
 80269d2:	9b03      	ldr	r3, [sp, #12]
 80269d4:	3307      	adds	r3, #7
 80269d6:	f023 0307 	bic.w	r3, r3, #7
 80269da:	3308      	adds	r3, #8
 80269dc:	9303      	str	r3, [sp, #12]
 80269de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80269e0:	443b      	add	r3, r7
 80269e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80269e4:	e76a      	b.n	80268bc <_vfiprintf_r+0x78>
 80269e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80269ea:	460c      	mov	r4, r1
 80269ec:	2001      	movs	r0, #1
 80269ee:	e7a8      	b.n	8026942 <_vfiprintf_r+0xfe>
 80269f0:	2300      	movs	r3, #0
 80269f2:	3401      	adds	r4, #1
 80269f4:	9305      	str	r3, [sp, #20]
 80269f6:	4619      	mov	r1, r3
 80269f8:	f04f 0c0a 	mov.w	ip, #10
 80269fc:	4620      	mov	r0, r4
 80269fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026a02:	3a30      	subs	r2, #48	@ 0x30
 8026a04:	2a09      	cmp	r2, #9
 8026a06:	d903      	bls.n	8026a10 <_vfiprintf_r+0x1cc>
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	d0c6      	beq.n	802699a <_vfiprintf_r+0x156>
 8026a0c:	9105      	str	r1, [sp, #20]
 8026a0e:	e7c4      	b.n	802699a <_vfiprintf_r+0x156>
 8026a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8026a14:	4604      	mov	r4, r0
 8026a16:	2301      	movs	r3, #1
 8026a18:	e7f0      	b.n	80269fc <_vfiprintf_r+0x1b8>
 8026a1a:	ab03      	add	r3, sp, #12
 8026a1c:	9300      	str	r3, [sp, #0]
 8026a1e:	462a      	mov	r2, r5
 8026a20:	4b12      	ldr	r3, [pc, #72]	@ (8026a6c <_vfiprintf_r+0x228>)
 8026a22:	a904      	add	r1, sp, #16
 8026a24:	4630      	mov	r0, r6
 8026a26:	f7fc fb4b 	bl	80230c0 <_printf_float>
 8026a2a:	4607      	mov	r7, r0
 8026a2c:	1c78      	adds	r0, r7, #1
 8026a2e:	d1d6      	bne.n	80269de <_vfiprintf_r+0x19a>
 8026a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026a32:	07d9      	lsls	r1, r3, #31
 8026a34:	d405      	bmi.n	8026a42 <_vfiprintf_r+0x1fe>
 8026a36:	89ab      	ldrh	r3, [r5, #12]
 8026a38:	059a      	lsls	r2, r3, #22
 8026a3a:	d402      	bmi.n	8026a42 <_vfiprintf_r+0x1fe>
 8026a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026a3e:	f7fd fc01 	bl	8024244 <__retarget_lock_release_recursive>
 8026a42:	89ab      	ldrh	r3, [r5, #12]
 8026a44:	065b      	lsls	r3, r3, #25
 8026a46:	f53f af1f 	bmi.w	8026888 <_vfiprintf_r+0x44>
 8026a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026a4c:	e71e      	b.n	802688c <_vfiprintf_r+0x48>
 8026a4e:	ab03      	add	r3, sp, #12
 8026a50:	9300      	str	r3, [sp, #0]
 8026a52:	462a      	mov	r2, r5
 8026a54:	4b05      	ldr	r3, [pc, #20]	@ (8026a6c <_vfiprintf_r+0x228>)
 8026a56:	a904      	add	r1, sp, #16
 8026a58:	4630      	mov	r0, r6
 8026a5a:	f7fc fdb9 	bl	80235d0 <_printf_i>
 8026a5e:	e7e4      	b.n	8026a2a <_vfiprintf_r+0x1e6>
 8026a60:	0802a101 	.word	0x0802a101
 8026a64:	0802a10b 	.word	0x0802a10b
 8026a68:	080230c1 	.word	0x080230c1
 8026a6c:	0802681f 	.word	0x0802681f
 8026a70:	0802a107 	.word	0x0802a107

08026a74 <__sflush_r>:
 8026a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a7c:	0716      	lsls	r6, r2, #28
 8026a7e:	4605      	mov	r5, r0
 8026a80:	460c      	mov	r4, r1
 8026a82:	d454      	bmi.n	8026b2e <__sflush_r+0xba>
 8026a84:	684b      	ldr	r3, [r1, #4]
 8026a86:	2b00      	cmp	r3, #0
 8026a88:	dc02      	bgt.n	8026a90 <__sflush_r+0x1c>
 8026a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026a8c:	2b00      	cmp	r3, #0
 8026a8e:	dd48      	ble.n	8026b22 <__sflush_r+0xae>
 8026a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026a92:	2e00      	cmp	r6, #0
 8026a94:	d045      	beq.n	8026b22 <__sflush_r+0xae>
 8026a96:	2300      	movs	r3, #0
 8026a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026a9c:	682f      	ldr	r7, [r5, #0]
 8026a9e:	6a21      	ldr	r1, [r4, #32]
 8026aa0:	602b      	str	r3, [r5, #0]
 8026aa2:	d030      	beq.n	8026b06 <__sflush_r+0x92>
 8026aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026aa6:	89a3      	ldrh	r3, [r4, #12]
 8026aa8:	0759      	lsls	r1, r3, #29
 8026aaa:	d505      	bpl.n	8026ab8 <__sflush_r+0x44>
 8026aac:	6863      	ldr	r3, [r4, #4]
 8026aae:	1ad2      	subs	r2, r2, r3
 8026ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026ab2:	b10b      	cbz	r3, 8026ab8 <__sflush_r+0x44>
 8026ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026ab6:	1ad2      	subs	r2, r2, r3
 8026ab8:	2300      	movs	r3, #0
 8026aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026abc:	6a21      	ldr	r1, [r4, #32]
 8026abe:	4628      	mov	r0, r5
 8026ac0:	47b0      	blx	r6
 8026ac2:	1c43      	adds	r3, r0, #1
 8026ac4:	89a3      	ldrh	r3, [r4, #12]
 8026ac6:	d106      	bne.n	8026ad6 <__sflush_r+0x62>
 8026ac8:	6829      	ldr	r1, [r5, #0]
 8026aca:	291d      	cmp	r1, #29
 8026acc:	d82b      	bhi.n	8026b26 <__sflush_r+0xb2>
 8026ace:	4a2a      	ldr	r2, [pc, #168]	@ (8026b78 <__sflush_r+0x104>)
 8026ad0:	410a      	asrs	r2, r1
 8026ad2:	07d6      	lsls	r6, r2, #31
 8026ad4:	d427      	bmi.n	8026b26 <__sflush_r+0xb2>
 8026ad6:	2200      	movs	r2, #0
 8026ad8:	6062      	str	r2, [r4, #4]
 8026ada:	04d9      	lsls	r1, r3, #19
 8026adc:	6922      	ldr	r2, [r4, #16]
 8026ade:	6022      	str	r2, [r4, #0]
 8026ae0:	d504      	bpl.n	8026aec <__sflush_r+0x78>
 8026ae2:	1c42      	adds	r2, r0, #1
 8026ae4:	d101      	bne.n	8026aea <__sflush_r+0x76>
 8026ae6:	682b      	ldr	r3, [r5, #0]
 8026ae8:	b903      	cbnz	r3, 8026aec <__sflush_r+0x78>
 8026aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8026aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026aee:	602f      	str	r7, [r5, #0]
 8026af0:	b1b9      	cbz	r1, 8026b22 <__sflush_r+0xae>
 8026af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026af6:	4299      	cmp	r1, r3
 8026af8:	d002      	beq.n	8026b00 <__sflush_r+0x8c>
 8026afa:	4628      	mov	r0, r5
 8026afc:	f7fe f9f2 	bl	8024ee4 <_free_r>
 8026b00:	2300      	movs	r3, #0
 8026b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8026b04:	e00d      	b.n	8026b22 <__sflush_r+0xae>
 8026b06:	2301      	movs	r3, #1
 8026b08:	4628      	mov	r0, r5
 8026b0a:	47b0      	blx	r6
 8026b0c:	4602      	mov	r2, r0
 8026b0e:	1c50      	adds	r0, r2, #1
 8026b10:	d1c9      	bne.n	8026aa6 <__sflush_r+0x32>
 8026b12:	682b      	ldr	r3, [r5, #0]
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d0c6      	beq.n	8026aa6 <__sflush_r+0x32>
 8026b18:	2b1d      	cmp	r3, #29
 8026b1a:	d001      	beq.n	8026b20 <__sflush_r+0xac>
 8026b1c:	2b16      	cmp	r3, #22
 8026b1e:	d11e      	bne.n	8026b5e <__sflush_r+0xea>
 8026b20:	602f      	str	r7, [r5, #0]
 8026b22:	2000      	movs	r0, #0
 8026b24:	e022      	b.n	8026b6c <__sflush_r+0xf8>
 8026b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026b2a:	b21b      	sxth	r3, r3
 8026b2c:	e01b      	b.n	8026b66 <__sflush_r+0xf2>
 8026b2e:	690f      	ldr	r7, [r1, #16]
 8026b30:	2f00      	cmp	r7, #0
 8026b32:	d0f6      	beq.n	8026b22 <__sflush_r+0xae>
 8026b34:	0793      	lsls	r3, r2, #30
 8026b36:	680e      	ldr	r6, [r1, #0]
 8026b38:	bf08      	it	eq
 8026b3a:	694b      	ldreq	r3, [r1, #20]
 8026b3c:	600f      	str	r7, [r1, #0]
 8026b3e:	bf18      	it	ne
 8026b40:	2300      	movne	r3, #0
 8026b42:	eba6 0807 	sub.w	r8, r6, r7
 8026b46:	608b      	str	r3, [r1, #8]
 8026b48:	f1b8 0f00 	cmp.w	r8, #0
 8026b4c:	dde9      	ble.n	8026b22 <__sflush_r+0xae>
 8026b4e:	6a21      	ldr	r1, [r4, #32]
 8026b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026b52:	4643      	mov	r3, r8
 8026b54:	463a      	mov	r2, r7
 8026b56:	4628      	mov	r0, r5
 8026b58:	47b0      	blx	r6
 8026b5a:	2800      	cmp	r0, #0
 8026b5c:	dc08      	bgt.n	8026b70 <__sflush_r+0xfc>
 8026b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026b66:	81a3      	strh	r3, [r4, #12]
 8026b68:	f04f 30ff 	mov.w	r0, #4294967295
 8026b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b70:	4407      	add	r7, r0
 8026b72:	eba8 0800 	sub.w	r8, r8, r0
 8026b76:	e7e7      	b.n	8026b48 <__sflush_r+0xd4>
 8026b78:	dfbffffe 	.word	0xdfbffffe

08026b7c <_fflush_r>:
 8026b7c:	b538      	push	{r3, r4, r5, lr}
 8026b7e:	690b      	ldr	r3, [r1, #16]
 8026b80:	4605      	mov	r5, r0
 8026b82:	460c      	mov	r4, r1
 8026b84:	b913      	cbnz	r3, 8026b8c <_fflush_r+0x10>
 8026b86:	2500      	movs	r5, #0
 8026b88:	4628      	mov	r0, r5
 8026b8a:	bd38      	pop	{r3, r4, r5, pc}
 8026b8c:	b118      	cbz	r0, 8026b96 <_fflush_r+0x1a>
 8026b8e:	6a03      	ldr	r3, [r0, #32]
 8026b90:	b90b      	cbnz	r3, 8026b96 <_fflush_r+0x1a>
 8026b92:	f7fd f8d5 	bl	8023d40 <__sinit>
 8026b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	d0f3      	beq.n	8026b86 <_fflush_r+0xa>
 8026b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026ba0:	07d0      	lsls	r0, r2, #31
 8026ba2:	d404      	bmi.n	8026bae <_fflush_r+0x32>
 8026ba4:	0599      	lsls	r1, r3, #22
 8026ba6:	d402      	bmi.n	8026bae <_fflush_r+0x32>
 8026ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026baa:	f7fd fb4a 	bl	8024242 <__retarget_lock_acquire_recursive>
 8026bae:	4628      	mov	r0, r5
 8026bb0:	4621      	mov	r1, r4
 8026bb2:	f7ff ff5f 	bl	8026a74 <__sflush_r>
 8026bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026bb8:	07da      	lsls	r2, r3, #31
 8026bba:	4605      	mov	r5, r0
 8026bbc:	d4e4      	bmi.n	8026b88 <_fflush_r+0xc>
 8026bbe:	89a3      	ldrh	r3, [r4, #12]
 8026bc0:	059b      	lsls	r3, r3, #22
 8026bc2:	d4e1      	bmi.n	8026b88 <_fflush_r+0xc>
 8026bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026bc6:	f7fd fb3d 	bl	8024244 <__retarget_lock_release_recursive>
 8026bca:	e7dd      	b.n	8026b88 <_fflush_r+0xc>

08026bcc <__swhatbuf_r>:
 8026bcc:	b570      	push	{r4, r5, r6, lr}
 8026bce:	460c      	mov	r4, r1
 8026bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bd4:	2900      	cmp	r1, #0
 8026bd6:	b096      	sub	sp, #88	@ 0x58
 8026bd8:	4615      	mov	r5, r2
 8026bda:	461e      	mov	r6, r3
 8026bdc:	da0d      	bge.n	8026bfa <__swhatbuf_r+0x2e>
 8026bde:	89a3      	ldrh	r3, [r4, #12]
 8026be0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026be4:	f04f 0100 	mov.w	r1, #0
 8026be8:	bf14      	ite	ne
 8026bea:	2340      	movne	r3, #64	@ 0x40
 8026bec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026bf0:	2000      	movs	r0, #0
 8026bf2:	6031      	str	r1, [r6, #0]
 8026bf4:	602b      	str	r3, [r5, #0]
 8026bf6:	b016      	add	sp, #88	@ 0x58
 8026bf8:	bd70      	pop	{r4, r5, r6, pc}
 8026bfa:	466a      	mov	r2, sp
 8026bfc:	f000 f874 	bl	8026ce8 <_fstat_r>
 8026c00:	2800      	cmp	r0, #0
 8026c02:	dbec      	blt.n	8026bde <__swhatbuf_r+0x12>
 8026c04:	9901      	ldr	r1, [sp, #4]
 8026c06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026c0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026c0e:	4259      	negs	r1, r3
 8026c10:	4159      	adcs	r1, r3
 8026c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026c16:	e7eb      	b.n	8026bf0 <__swhatbuf_r+0x24>

08026c18 <__smakebuf_r>:
 8026c18:	898b      	ldrh	r3, [r1, #12]
 8026c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026c1c:	079d      	lsls	r5, r3, #30
 8026c1e:	4606      	mov	r6, r0
 8026c20:	460c      	mov	r4, r1
 8026c22:	d507      	bpl.n	8026c34 <__smakebuf_r+0x1c>
 8026c24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026c28:	6023      	str	r3, [r4, #0]
 8026c2a:	6123      	str	r3, [r4, #16]
 8026c2c:	2301      	movs	r3, #1
 8026c2e:	6163      	str	r3, [r4, #20]
 8026c30:	b003      	add	sp, #12
 8026c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c34:	ab01      	add	r3, sp, #4
 8026c36:	466a      	mov	r2, sp
 8026c38:	f7ff ffc8 	bl	8026bcc <__swhatbuf_r>
 8026c3c:	9f00      	ldr	r7, [sp, #0]
 8026c3e:	4605      	mov	r5, r0
 8026c40:	4639      	mov	r1, r7
 8026c42:	4630      	mov	r0, r6
 8026c44:	f7fc f912 	bl	8022e6c <_malloc_r>
 8026c48:	b948      	cbnz	r0, 8026c5e <__smakebuf_r+0x46>
 8026c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c4e:	059a      	lsls	r2, r3, #22
 8026c50:	d4ee      	bmi.n	8026c30 <__smakebuf_r+0x18>
 8026c52:	f023 0303 	bic.w	r3, r3, #3
 8026c56:	f043 0302 	orr.w	r3, r3, #2
 8026c5a:	81a3      	strh	r3, [r4, #12]
 8026c5c:	e7e2      	b.n	8026c24 <__smakebuf_r+0xc>
 8026c5e:	89a3      	ldrh	r3, [r4, #12]
 8026c60:	6020      	str	r0, [r4, #0]
 8026c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026c66:	81a3      	strh	r3, [r4, #12]
 8026c68:	9b01      	ldr	r3, [sp, #4]
 8026c6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026c6e:	b15b      	cbz	r3, 8026c88 <__smakebuf_r+0x70>
 8026c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c74:	4630      	mov	r0, r6
 8026c76:	f000 f849 	bl	8026d0c <_isatty_r>
 8026c7a:	b128      	cbz	r0, 8026c88 <__smakebuf_r+0x70>
 8026c7c:	89a3      	ldrh	r3, [r4, #12]
 8026c7e:	f023 0303 	bic.w	r3, r3, #3
 8026c82:	f043 0301 	orr.w	r3, r3, #1
 8026c86:	81a3      	strh	r3, [r4, #12]
 8026c88:	89a3      	ldrh	r3, [r4, #12]
 8026c8a:	431d      	orrs	r5, r3
 8026c8c:	81a5      	strh	r5, [r4, #12]
 8026c8e:	e7cf      	b.n	8026c30 <__smakebuf_r+0x18>

08026c90 <memmove>:
 8026c90:	4288      	cmp	r0, r1
 8026c92:	b510      	push	{r4, lr}
 8026c94:	eb01 0402 	add.w	r4, r1, r2
 8026c98:	d902      	bls.n	8026ca0 <memmove+0x10>
 8026c9a:	4284      	cmp	r4, r0
 8026c9c:	4623      	mov	r3, r4
 8026c9e:	d807      	bhi.n	8026cb0 <memmove+0x20>
 8026ca0:	1e43      	subs	r3, r0, #1
 8026ca2:	42a1      	cmp	r1, r4
 8026ca4:	d008      	beq.n	8026cb8 <memmove+0x28>
 8026ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026cae:	e7f8      	b.n	8026ca2 <memmove+0x12>
 8026cb0:	4402      	add	r2, r0
 8026cb2:	4601      	mov	r1, r0
 8026cb4:	428a      	cmp	r2, r1
 8026cb6:	d100      	bne.n	8026cba <memmove+0x2a>
 8026cb8:	bd10      	pop	{r4, pc}
 8026cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026cc2:	e7f7      	b.n	8026cb4 <memmove+0x24>

08026cc4 <strncmp>:
 8026cc4:	b510      	push	{r4, lr}
 8026cc6:	b16a      	cbz	r2, 8026ce4 <strncmp+0x20>
 8026cc8:	3901      	subs	r1, #1
 8026cca:	1884      	adds	r4, r0, r2
 8026ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026cd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8026cd4:	429a      	cmp	r2, r3
 8026cd6:	d103      	bne.n	8026ce0 <strncmp+0x1c>
 8026cd8:	42a0      	cmp	r0, r4
 8026cda:	d001      	beq.n	8026ce0 <strncmp+0x1c>
 8026cdc:	2a00      	cmp	r2, #0
 8026cde:	d1f5      	bne.n	8026ccc <strncmp+0x8>
 8026ce0:	1ad0      	subs	r0, r2, r3
 8026ce2:	bd10      	pop	{r4, pc}
 8026ce4:	4610      	mov	r0, r2
 8026ce6:	e7fc      	b.n	8026ce2 <strncmp+0x1e>

08026ce8 <_fstat_r>:
 8026ce8:	b538      	push	{r3, r4, r5, lr}
 8026cea:	4d07      	ldr	r5, [pc, #28]	@ (8026d08 <_fstat_r+0x20>)
 8026cec:	2300      	movs	r3, #0
 8026cee:	4604      	mov	r4, r0
 8026cf0:	4608      	mov	r0, r1
 8026cf2:	4611      	mov	r1, r2
 8026cf4:	602b      	str	r3, [r5, #0]
 8026cf6:	f7da fe7b 	bl	80019f0 <_fstat>
 8026cfa:	1c43      	adds	r3, r0, #1
 8026cfc:	d102      	bne.n	8026d04 <_fstat_r+0x1c>
 8026cfe:	682b      	ldr	r3, [r5, #0]
 8026d00:	b103      	cbz	r3, 8026d04 <_fstat_r+0x1c>
 8026d02:	6023      	str	r3, [r4, #0]
 8026d04:	bd38      	pop	{r3, r4, r5, pc}
 8026d06:	bf00      	nop
 8026d08:	2400b61c 	.word	0x2400b61c

08026d0c <_isatty_r>:
 8026d0c:	b538      	push	{r3, r4, r5, lr}
 8026d0e:	4d06      	ldr	r5, [pc, #24]	@ (8026d28 <_isatty_r+0x1c>)
 8026d10:	2300      	movs	r3, #0
 8026d12:	4604      	mov	r4, r0
 8026d14:	4608      	mov	r0, r1
 8026d16:	602b      	str	r3, [r5, #0]
 8026d18:	f7da fe70 	bl	80019fc <_isatty>
 8026d1c:	1c43      	adds	r3, r0, #1
 8026d1e:	d102      	bne.n	8026d26 <_isatty_r+0x1a>
 8026d20:	682b      	ldr	r3, [r5, #0]
 8026d22:	b103      	cbz	r3, 8026d26 <_isatty_r+0x1a>
 8026d24:	6023      	str	r3, [r4, #0]
 8026d26:	bd38      	pop	{r3, r4, r5, pc}
 8026d28:	2400b61c 	.word	0x2400b61c
 8026d2c:	00000000 	.word	0x00000000

08026d30 <nan>:
 8026d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8026d38 <nan+0x8>
 8026d34:	4770      	bx	lr
 8026d36:	bf00      	nop
 8026d38:	00000000 	.word	0x00000000
 8026d3c:	7ff80000 	.word	0x7ff80000

08026d40 <_calloc_r>:
 8026d40:	b570      	push	{r4, r5, r6, lr}
 8026d42:	fba1 5402 	umull	r5, r4, r1, r2
 8026d46:	b93c      	cbnz	r4, 8026d58 <_calloc_r+0x18>
 8026d48:	4629      	mov	r1, r5
 8026d4a:	f7fc f88f 	bl	8022e6c <_malloc_r>
 8026d4e:	4606      	mov	r6, r0
 8026d50:	b928      	cbnz	r0, 8026d5e <_calloc_r+0x1e>
 8026d52:	2600      	movs	r6, #0
 8026d54:	4630      	mov	r0, r6
 8026d56:	bd70      	pop	{r4, r5, r6, pc}
 8026d58:	220c      	movs	r2, #12
 8026d5a:	6002      	str	r2, [r0, #0]
 8026d5c:	e7f9      	b.n	8026d52 <_calloc_r+0x12>
 8026d5e:	462a      	mov	r2, r5
 8026d60:	4621      	mov	r1, r4
 8026d62:	f7fd f99d 	bl	80240a0 <memset>
 8026d66:	e7f5      	b.n	8026d54 <_calloc_r+0x14>

08026d68 <rshift>:
 8026d68:	6903      	ldr	r3, [r0, #16]
 8026d6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8026d6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026d72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8026d76:	f100 0414 	add.w	r4, r0, #20
 8026d7a:	dd45      	ble.n	8026e08 <rshift+0xa0>
 8026d7c:	f011 011f 	ands.w	r1, r1, #31
 8026d80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8026d84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8026d88:	d10c      	bne.n	8026da4 <rshift+0x3c>
 8026d8a:	f100 0710 	add.w	r7, r0, #16
 8026d8e:	4629      	mov	r1, r5
 8026d90:	42b1      	cmp	r1, r6
 8026d92:	d334      	bcc.n	8026dfe <rshift+0x96>
 8026d94:	1a9b      	subs	r3, r3, r2
 8026d96:	009b      	lsls	r3, r3, #2
 8026d98:	1eea      	subs	r2, r5, #3
 8026d9a:	4296      	cmp	r6, r2
 8026d9c:	bf38      	it	cc
 8026d9e:	2300      	movcc	r3, #0
 8026da0:	4423      	add	r3, r4
 8026da2:	e015      	b.n	8026dd0 <rshift+0x68>
 8026da4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8026da8:	f1c1 0820 	rsb	r8, r1, #32
 8026dac:	40cf      	lsrs	r7, r1
 8026dae:	f105 0e04 	add.w	lr, r5, #4
 8026db2:	46a1      	mov	r9, r4
 8026db4:	4576      	cmp	r6, lr
 8026db6:	46f4      	mov	ip, lr
 8026db8:	d815      	bhi.n	8026de6 <rshift+0x7e>
 8026dba:	1a9a      	subs	r2, r3, r2
 8026dbc:	0092      	lsls	r2, r2, #2
 8026dbe:	3a04      	subs	r2, #4
 8026dc0:	3501      	adds	r5, #1
 8026dc2:	42ae      	cmp	r6, r5
 8026dc4:	bf38      	it	cc
 8026dc6:	2200      	movcc	r2, #0
 8026dc8:	18a3      	adds	r3, r4, r2
 8026dca:	50a7      	str	r7, [r4, r2]
 8026dcc:	b107      	cbz	r7, 8026dd0 <rshift+0x68>
 8026dce:	3304      	adds	r3, #4
 8026dd0:	1b1a      	subs	r2, r3, r4
 8026dd2:	42a3      	cmp	r3, r4
 8026dd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8026dd8:	bf08      	it	eq
 8026dda:	2300      	moveq	r3, #0
 8026ddc:	6102      	str	r2, [r0, #16]
 8026dde:	bf08      	it	eq
 8026de0:	6143      	streq	r3, [r0, #20]
 8026de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026de6:	f8dc c000 	ldr.w	ip, [ip]
 8026dea:	fa0c fc08 	lsl.w	ip, ip, r8
 8026dee:	ea4c 0707 	orr.w	r7, ip, r7
 8026df2:	f849 7b04 	str.w	r7, [r9], #4
 8026df6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026dfa:	40cf      	lsrs	r7, r1
 8026dfc:	e7da      	b.n	8026db4 <rshift+0x4c>
 8026dfe:	f851 cb04 	ldr.w	ip, [r1], #4
 8026e02:	f847 cf04 	str.w	ip, [r7, #4]!
 8026e06:	e7c3      	b.n	8026d90 <rshift+0x28>
 8026e08:	4623      	mov	r3, r4
 8026e0a:	e7e1      	b.n	8026dd0 <rshift+0x68>

08026e0c <__hexdig_fun>:
 8026e0c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8026e10:	2b09      	cmp	r3, #9
 8026e12:	d802      	bhi.n	8026e1a <__hexdig_fun+0xe>
 8026e14:	3820      	subs	r0, #32
 8026e16:	b2c0      	uxtb	r0, r0
 8026e18:	4770      	bx	lr
 8026e1a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8026e1e:	2b05      	cmp	r3, #5
 8026e20:	d801      	bhi.n	8026e26 <__hexdig_fun+0x1a>
 8026e22:	3847      	subs	r0, #71	@ 0x47
 8026e24:	e7f7      	b.n	8026e16 <__hexdig_fun+0xa>
 8026e26:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8026e2a:	2b05      	cmp	r3, #5
 8026e2c:	d801      	bhi.n	8026e32 <__hexdig_fun+0x26>
 8026e2e:	3827      	subs	r0, #39	@ 0x27
 8026e30:	e7f1      	b.n	8026e16 <__hexdig_fun+0xa>
 8026e32:	2000      	movs	r0, #0
 8026e34:	4770      	bx	lr
	...

08026e38 <__gethex>:
 8026e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e3c:	b085      	sub	sp, #20
 8026e3e:	468a      	mov	sl, r1
 8026e40:	9302      	str	r3, [sp, #8]
 8026e42:	680b      	ldr	r3, [r1, #0]
 8026e44:	9001      	str	r0, [sp, #4]
 8026e46:	4690      	mov	r8, r2
 8026e48:	1c9c      	adds	r4, r3, #2
 8026e4a:	46a1      	mov	r9, r4
 8026e4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8026e50:	2830      	cmp	r0, #48	@ 0x30
 8026e52:	d0fa      	beq.n	8026e4a <__gethex+0x12>
 8026e54:	eba9 0303 	sub.w	r3, r9, r3
 8026e58:	f1a3 0b02 	sub.w	fp, r3, #2
 8026e5c:	f7ff ffd6 	bl	8026e0c <__hexdig_fun>
 8026e60:	4605      	mov	r5, r0
 8026e62:	2800      	cmp	r0, #0
 8026e64:	d168      	bne.n	8026f38 <__gethex+0x100>
 8026e66:	49a0      	ldr	r1, [pc, #640]	@ (80270e8 <__gethex+0x2b0>)
 8026e68:	2201      	movs	r2, #1
 8026e6a:	4648      	mov	r0, r9
 8026e6c:	f7ff ff2a 	bl	8026cc4 <strncmp>
 8026e70:	4607      	mov	r7, r0
 8026e72:	2800      	cmp	r0, #0
 8026e74:	d167      	bne.n	8026f46 <__gethex+0x10e>
 8026e76:	f899 0001 	ldrb.w	r0, [r9, #1]
 8026e7a:	4626      	mov	r6, r4
 8026e7c:	f7ff ffc6 	bl	8026e0c <__hexdig_fun>
 8026e80:	2800      	cmp	r0, #0
 8026e82:	d062      	beq.n	8026f4a <__gethex+0x112>
 8026e84:	4623      	mov	r3, r4
 8026e86:	7818      	ldrb	r0, [r3, #0]
 8026e88:	2830      	cmp	r0, #48	@ 0x30
 8026e8a:	4699      	mov	r9, r3
 8026e8c:	f103 0301 	add.w	r3, r3, #1
 8026e90:	d0f9      	beq.n	8026e86 <__gethex+0x4e>
 8026e92:	f7ff ffbb 	bl	8026e0c <__hexdig_fun>
 8026e96:	fab0 f580 	clz	r5, r0
 8026e9a:	096d      	lsrs	r5, r5, #5
 8026e9c:	f04f 0b01 	mov.w	fp, #1
 8026ea0:	464a      	mov	r2, r9
 8026ea2:	4616      	mov	r6, r2
 8026ea4:	3201      	adds	r2, #1
 8026ea6:	7830      	ldrb	r0, [r6, #0]
 8026ea8:	f7ff ffb0 	bl	8026e0c <__hexdig_fun>
 8026eac:	2800      	cmp	r0, #0
 8026eae:	d1f8      	bne.n	8026ea2 <__gethex+0x6a>
 8026eb0:	498d      	ldr	r1, [pc, #564]	@ (80270e8 <__gethex+0x2b0>)
 8026eb2:	2201      	movs	r2, #1
 8026eb4:	4630      	mov	r0, r6
 8026eb6:	f7ff ff05 	bl	8026cc4 <strncmp>
 8026eba:	2800      	cmp	r0, #0
 8026ebc:	d13f      	bne.n	8026f3e <__gethex+0x106>
 8026ebe:	b944      	cbnz	r4, 8026ed2 <__gethex+0x9a>
 8026ec0:	1c74      	adds	r4, r6, #1
 8026ec2:	4622      	mov	r2, r4
 8026ec4:	4616      	mov	r6, r2
 8026ec6:	3201      	adds	r2, #1
 8026ec8:	7830      	ldrb	r0, [r6, #0]
 8026eca:	f7ff ff9f 	bl	8026e0c <__hexdig_fun>
 8026ece:	2800      	cmp	r0, #0
 8026ed0:	d1f8      	bne.n	8026ec4 <__gethex+0x8c>
 8026ed2:	1ba4      	subs	r4, r4, r6
 8026ed4:	00a7      	lsls	r7, r4, #2
 8026ed6:	7833      	ldrb	r3, [r6, #0]
 8026ed8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8026edc:	2b50      	cmp	r3, #80	@ 0x50
 8026ede:	d13e      	bne.n	8026f5e <__gethex+0x126>
 8026ee0:	7873      	ldrb	r3, [r6, #1]
 8026ee2:	2b2b      	cmp	r3, #43	@ 0x2b
 8026ee4:	d033      	beq.n	8026f4e <__gethex+0x116>
 8026ee6:	2b2d      	cmp	r3, #45	@ 0x2d
 8026ee8:	d034      	beq.n	8026f54 <__gethex+0x11c>
 8026eea:	1c71      	adds	r1, r6, #1
 8026eec:	2400      	movs	r4, #0
 8026eee:	7808      	ldrb	r0, [r1, #0]
 8026ef0:	f7ff ff8c 	bl	8026e0c <__hexdig_fun>
 8026ef4:	1e43      	subs	r3, r0, #1
 8026ef6:	b2db      	uxtb	r3, r3
 8026ef8:	2b18      	cmp	r3, #24
 8026efa:	d830      	bhi.n	8026f5e <__gethex+0x126>
 8026efc:	f1a0 0210 	sub.w	r2, r0, #16
 8026f00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8026f04:	f7ff ff82 	bl	8026e0c <__hexdig_fun>
 8026f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8026f0c:	fa5f fc8c 	uxtb.w	ip, ip
 8026f10:	f1bc 0f18 	cmp.w	ip, #24
 8026f14:	f04f 030a 	mov.w	r3, #10
 8026f18:	d91e      	bls.n	8026f58 <__gethex+0x120>
 8026f1a:	b104      	cbz	r4, 8026f1e <__gethex+0xe6>
 8026f1c:	4252      	negs	r2, r2
 8026f1e:	4417      	add	r7, r2
 8026f20:	f8ca 1000 	str.w	r1, [sl]
 8026f24:	b1ed      	cbz	r5, 8026f62 <__gethex+0x12a>
 8026f26:	f1bb 0f00 	cmp.w	fp, #0
 8026f2a:	bf0c      	ite	eq
 8026f2c:	2506      	moveq	r5, #6
 8026f2e:	2500      	movne	r5, #0
 8026f30:	4628      	mov	r0, r5
 8026f32:	b005      	add	sp, #20
 8026f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f38:	2500      	movs	r5, #0
 8026f3a:	462c      	mov	r4, r5
 8026f3c:	e7b0      	b.n	8026ea0 <__gethex+0x68>
 8026f3e:	2c00      	cmp	r4, #0
 8026f40:	d1c7      	bne.n	8026ed2 <__gethex+0x9a>
 8026f42:	4627      	mov	r7, r4
 8026f44:	e7c7      	b.n	8026ed6 <__gethex+0x9e>
 8026f46:	464e      	mov	r6, r9
 8026f48:	462f      	mov	r7, r5
 8026f4a:	2501      	movs	r5, #1
 8026f4c:	e7c3      	b.n	8026ed6 <__gethex+0x9e>
 8026f4e:	2400      	movs	r4, #0
 8026f50:	1cb1      	adds	r1, r6, #2
 8026f52:	e7cc      	b.n	8026eee <__gethex+0xb6>
 8026f54:	2401      	movs	r4, #1
 8026f56:	e7fb      	b.n	8026f50 <__gethex+0x118>
 8026f58:	fb03 0002 	mla	r0, r3, r2, r0
 8026f5c:	e7ce      	b.n	8026efc <__gethex+0xc4>
 8026f5e:	4631      	mov	r1, r6
 8026f60:	e7de      	b.n	8026f20 <__gethex+0xe8>
 8026f62:	eba6 0309 	sub.w	r3, r6, r9
 8026f66:	3b01      	subs	r3, #1
 8026f68:	4629      	mov	r1, r5
 8026f6a:	2b07      	cmp	r3, #7
 8026f6c:	dc0a      	bgt.n	8026f84 <__gethex+0x14c>
 8026f6e:	9801      	ldr	r0, [sp, #4]
 8026f70:	f7fe f802 	bl	8024f78 <_Balloc>
 8026f74:	4604      	mov	r4, r0
 8026f76:	b940      	cbnz	r0, 8026f8a <__gethex+0x152>
 8026f78:	4b5c      	ldr	r3, [pc, #368]	@ (80270ec <__gethex+0x2b4>)
 8026f7a:	4602      	mov	r2, r0
 8026f7c:	21e4      	movs	r1, #228	@ 0xe4
 8026f7e:	485c      	ldr	r0, [pc, #368]	@ (80270f0 <__gethex+0x2b8>)
 8026f80:	f7fb ff1e 	bl	8022dc0 <__assert_func>
 8026f84:	3101      	adds	r1, #1
 8026f86:	105b      	asrs	r3, r3, #1
 8026f88:	e7ef      	b.n	8026f6a <__gethex+0x132>
 8026f8a:	f100 0a14 	add.w	sl, r0, #20
 8026f8e:	2300      	movs	r3, #0
 8026f90:	4655      	mov	r5, sl
 8026f92:	469b      	mov	fp, r3
 8026f94:	45b1      	cmp	r9, r6
 8026f96:	d337      	bcc.n	8027008 <__gethex+0x1d0>
 8026f98:	f845 bb04 	str.w	fp, [r5], #4
 8026f9c:	eba5 050a 	sub.w	r5, r5, sl
 8026fa0:	10ad      	asrs	r5, r5, #2
 8026fa2:	6125      	str	r5, [r4, #16]
 8026fa4:	4658      	mov	r0, fp
 8026fa6:	f7fe f8d9 	bl	802515c <__hi0bits>
 8026faa:	016d      	lsls	r5, r5, #5
 8026fac:	f8d8 6000 	ldr.w	r6, [r8]
 8026fb0:	1a2d      	subs	r5, r5, r0
 8026fb2:	42b5      	cmp	r5, r6
 8026fb4:	dd54      	ble.n	8027060 <__gethex+0x228>
 8026fb6:	1bad      	subs	r5, r5, r6
 8026fb8:	4629      	mov	r1, r5
 8026fba:	4620      	mov	r0, r4
 8026fbc:	f7fe fc6a 	bl	8025894 <__any_on>
 8026fc0:	4681      	mov	r9, r0
 8026fc2:	b178      	cbz	r0, 8026fe4 <__gethex+0x1ac>
 8026fc4:	1e6b      	subs	r3, r5, #1
 8026fc6:	1159      	asrs	r1, r3, #5
 8026fc8:	f003 021f 	and.w	r2, r3, #31
 8026fcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8026fd0:	f04f 0901 	mov.w	r9, #1
 8026fd4:	fa09 f202 	lsl.w	r2, r9, r2
 8026fd8:	420a      	tst	r2, r1
 8026fda:	d003      	beq.n	8026fe4 <__gethex+0x1ac>
 8026fdc:	454b      	cmp	r3, r9
 8026fde:	dc36      	bgt.n	802704e <__gethex+0x216>
 8026fe0:	f04f 0902 	mov.w	r9, #2
 8026fe4:	4629      	mov	r1, r5
 8026fe6:	4620      	mov	r0, r4
 8026fe8:	f7ff febe 	bl	8026d68 <rshift>
 8026fec:	442f      	add	r7, r5
 8026fee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026ff2:	42bb      	cmp	r3, r7
 8026ff4:	da42      	bge.n	802707c <__gethex+0x244>
 8026ff6:	9801      	ldr	r0, [sp, #4]
 8026ff8:	4621      	mov	r1, r4
 8026ffa:	f7fd fffd 	bl	8024ff8 <_Bfree>
 8026ffe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027000:	2300      	movs	r3, #0
 8027002:	6013      	str	r3, [r2, #0]
 8027004:	25a3      	movs	r5, #163	@ 0xa3
 8027006:	e793      	b.n	8026f30 <__gethex+0xf8>
 8027008:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802700c:	2a2e      	cmp	r2, #46	@ 0x2e
 802700e:	d012      	beq.n	8027036 <__gethex+0x1fe>
 8027010:	2b20      	cmp	r3, #32
 8027012:	d104      	bne.n	802701e <__gethex+0x1e6>
 8027014:	f845 bb04 	str.w	fp, [r5], #4
 8027018:	f04f 0b00 	mov.w	fp, #0
 802701c:	465b      	mov	r3, fp
 802701e:	7830      	ldrb	r0, [r6, #0]
 8027020:	9303      	str	r3, [sp, #12]
 8027022:	f7ff fef3 	bl	8026e0c <__hexdig_fun>
 8027026:	9b03      	ldr	r3, [sp, #12]
 8027028:	f000 000f 	and.w	r0, r0, #15
 802702c:	4098      	lsls	r0, r3
 802702e:	ea4b 0b00 	orr.w	fp, fp, r0
 8027032:	3304      	adds	r3, #4
 8027034:	e7ae      	b.n	8026f94 <__gethex+0x15c>
 8027036:	45b1      	cmp	r9, r6
 8027038:	d8ea      	bhi.n	8027010 <__gethex+0x1d8>
 802703a:	492b      	ldr	r1, [pc, #172]	@ (80270e8 <__gethex+0x2b0>)
 802703c:	9303      	str	r3, [sp, #12]
 802703e:	2201      	movs	r2, #1
 8027040:	4630      	mov	r0, r6
 8027042:	f7ff fe3f 	bl	8026cc4 <strncmp>
 8027046:	9b03      	ldr	r3, [sp, #12]
 8027048:	2800      	cmp	r0, #0
 802704a:	d1e1      	bne.n	8027010 <__gethex+0x1d8>
 802704c:	e7a2      	b.n	8026f94 <__gethex+0x15c>
 802704e:	1ea9      	subs	r1, r5, #2
 8027050:	4620      	mov	r0, r4
 8027052:	f7fe fc1f 	bl	8025894 <__any_on>
 8027056:	2800      	cmp	r0, #0
 8027058:	d0c2      	beq.n	8026fe0 <__gethex+0x1a8>
 802705a:	f04f 0903 	mov.w	r9, #3
 802705e:	e7c1      	b.n	8026fe4 <__gethex+0x1ac>
 8027060:	da09      	bge.n	8027076 <__gethex+0x23e>
 8027062:	1b75      	subs	r5, r6, r5
 8027064:	4621      	mov	r1, r4
 8027066:	9801      	ldr	r0, [sp, #4]
 8027068:	462a      	mov	r2, r5
 802706a:	f7fe f9dd 	bl	8025428 <__lshift>
 802706e:	1b7f      	subs	r7, r7, r5
 8027070:	4604      	mov	r4, r0
 8027072:	f100 0a14 	add.w	sl, r0, #20
 8027076:	f04f 0900 	mov.w	r9, #0
 802707a:	e7b8      	b.n	8026fee <__gethex+0x1b6>
 802707c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027080:	42bd      	cmp	r5, r7
 8027082:	dd6f      	ble.n	8027164 <__gethex+0x32c>
 8027084:	1bed      	subs	r5, r5, r7
 8027086:	42ae      	cmp	r6, r5
 8027088:	dc34      	bgt.n	80270f4 <__gethex+0x2bc>
 802708a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802708e:	2b02      	cmp	r3, #2
 8027090:	d022      	beq.n	80270d8 <__gethex+0x2a0>
 8027092:	2b03      	cmp	r3, #3
 8027094:	d024      	beq.n	80270e0 <__gethex+0x2a8>
 8027096:	2b01      	cmp	r3, #1
 8027098:	d115      	bne.n	80270c6 <__gethex+0x28e>
 802709a:	42ae      	cmp	r6, r5
 802709c:	d113      	bne.n	80270c6 <__gethex+0x28e>
 802709e:	2e01      	cmp	r6, #1
 80270a0:	d10b      	bne.n	80270ba <__gethex+0x282>
 80270a2:	9a02      	ldr	r2, [sp, #8]
 80270a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80270a8:	6013      	str	r3, [r2, #0]
 80270aa:	2301      	movs	r3, #1
 80270ac:	6123      	str	r3, [r4, #16]
 80270ae:	f8ca 3000 	str.w	r3, [sl]
 80270b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80270b4:	2562      	movs	r5, #98	@ 0x62
 80270b6:	601c      	str	r4, [r3, #0]
 80270b8:	e73a      	b.n	8026f30 <__gethex+0xf8>
 80270ba:	1e71      	subs	r1, r6, #1
 80270bc:	4620      	mov	r0, r4
 80270be:	f7fe fbe9 	bl	8025894 <__any_on>
 80270c2:	2800      	cmp	r0, #0
 80270c4:	d1ed      	bne.n	80270a2 <__gethex+0x26a>
 80270c6:	9801      	ldr	r0, [sp, #4]
 80270c8:	4621      	mov	r1, r4
 80270ca:	f7fd ff95 	bl	8024ff8 <_Bfree>
 80270ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80270d0:	2300      	movs	r3, #0
 80270d2:	6013      	str	r3, [r2, #0]
 80270d4:	2550      	movs	r5, #80	@ 0x50
 80270d6:	e72b      	b.n	8026f30 <__gethex+0xf8>
 80270d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80270da:	2b00      	cmp	r3, #0
 80270dc:	d1f3      	bne.n	80270c6 <__gethex+0x28e>
 80270de:	e7e0      	b.n	80270a2 <__gethex+0x26a>
 80270e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80270e2:	2b00      	cmp	r3, #0
 80270e4:	d1dd      	bne.n	80270a2 <__gethex+0x26a>
 80270e6:	e7ee      	b.n	80270c6 <__gethex+0x28e>
 80270e8:	08029fac 	.word	0x08029fac
 80270ec:	08029e3d 	.word	0x08029e3d
 80270f0:	0802a11a 	.word	0x0802a11a
 80270f4:	1e6f      	subs	r7, r5, #1
 80270f6:	f1b9 0f00 	cmp.w	r9, #0
 80270fa:	d130      	bne.n	802715e <__gethex+0x326>
 80270fc:	b127      	cbz	r7, 8027108 <__gethex+0x2d0>
 80270fe:	4639      	mov	r1, r7
 8027100:	4620      	mov	r0, r4
 8027102:	f7fe fbc7 	bl	8025894 <__any_on>
 8027106:	4681      	mov	r9, r0
 8027108:	117a      	asrs	r2, r7, #5
 802710a:	2301      	movs	r3, #1
 802710c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8027110:	f007 071f 	and.w	r7, r7, #31
 8027114:	40bb      	lsls	r3, r7
 8027116:	4213      	tst	r3, r2
 8027118:	4629      	mov	r1, r5
 802711a:	4620      	mov	r0, r4
 802711c:	bf18      	it	ne
 802711e:	f049 0902 	orrne.w	r9, r9, #2
 8027122:	f7ff fe21 	bl	8026d68 <rshift>
 8027126:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802712a:	1b76      	subs	r6, r6, r5
 802712c:	2502      	movs	r5, #2
 802712e:	f1b9 0f00 	cmp.w	r9, #0
 8027132:	d047      	beq.n	80271c4 <__gethex+0x38c>
 8027134:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027138:	2b02      	cmp	r3, #2
 802713a:	d015      	beq.n	8027168 <__gethex+0x330>
 802713c:	2b03      	cmp	r3, #3
 802713e:	d017      	beq.n	8027170 <__gethex+0x338>
 8027140:	2b01      	cmp	r3, #1
 8027142:	d109      	bne.n	8027158 <__gethex+0x320>
 8027144:	f019 0f02 	tst.w	r9, #2
 8027148:	d006      	beq.n	8027158 <__gethex+0x320>
 802714a:	f8da 3000 	ldr.w	r3, [sl]
 802714e:	ea49 0903 	orr.w	r9, r9, r3
 8027152:	f019 0f01 	tst.w	r9, #1
 8027156:	d10e      	bne.n	8027176 <__gethex+0x33e>
 8027158:	f045 0510 	orr.w	r5, r5, #16
 802715c:	e032      	b.n	80271c4 <__gethex+0x38c>
 802715e:	f04f 0901 	mov.w	r9, #1
 8027162:	e7d1      	b.n	8027108 <__gethex+0x2d0>
 8027164:	2501      	movs	r5, #1
 8027166:	e7e2      	b.n	802712e <__gethex+0x2f6>
 8027168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802716a:	f1c3 0301 	rsb	r3, r3, #1
 802716e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027172:	2b00      	cmp	r3, #0
 8027174:	d0f0      	beq.n	8027158 <__gethex+0x320>
 8027176:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802717a:	f104 0314 	add.w	r3, r4, #20
 802717e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8027182:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8027186:	f04f 0c00 	mov.w	ip, #0
 802718a:	4618      	mov	r0, r3
 802718c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027190:	f1b2 3fff 	cmp.w	r2, #4294967295
 8027194:	d01b      	beq.n	80271ce <__gethex+0x396>
 8027196:	3201      	adds	r2, #1
 8027198:	6002      	str	r2, [r0, #0]
 802719a:	2d02      	cmp	r5, #2
 802719c:	f104 0314 	add.w	r3, r4, #20
 80271a0:	d13c      	bne.n	802721c <__gethex+0x3e4>
 80271a2:	f8d8 2000 	ldr.w	r2, [r8]
 80271a6:	3a01      	subs	r2, #1
 80271a8:	42b2      	cmp	r2, r6
 80271aa:	d109      	bne.n	80271c0 <__gethex+0x388>
 80271ac:	1171      	asrs	r1, r6, #5
 80271ae:	2201      	movs	r2, #1
 80271b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80271b4:	f006 061f 	and.w	r6, r6, #31
 80271b8:	fa02 f606 	lsl.w	r6, r2, r6
 80271bc:	421e      	tst	r6, r3
 80271be:	d13a      	bne.n	8027236 <__gethex+0x3fe>
 80271c0:	f045 0520 	orr.w	r5, r5, #32
 80271c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80271c6:	601c      	str	r4, [r3, #0]
 80271c8:	9b02      	ldr	r3, [sp, #8]
 80271ca:	601f      	str	r7, [r3, #0]
 80271cc:	e6b0      	b.n	8026f30 <__gethex+0xf8>
 80271ce:	4299      	cmp	r1, r3
 80271d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80271d4:	d8d9      	bhi.n	802718a <__gethex+0x352>
 80271d6:	68a3      	ldr	r3, [r4, #8]
 80271d8:	459b      	cmp	fp, r3
 80271da:	db17      	blt.n	802720c <__gethex+0x3d4>
 80271dc:	6861      	ldr	r1, [r4, #4]
 80271de:	9801      	ldr	r0, [sp, #4]
 80271e0:	3101      	adds	r1, #1
 80271e2:	f7fd fec9 	bl	8024f78 <_Balloc>
 80271e6:	4681      	mov	r9, r0
 80271e8:	b918      	cbnz	r0, 80271f2 <__gethex+0x3ba>
 80271ea:	4b1a      	ldr	r3, [pc, #104]	@ (8027254 <__gethex+0x41c>)
 80271ec:	4602      	mov	r2, r0
 80271ee:	2184      	movs	r1, #132	@ 0x84
 80271f0:	e6c5      	b.n	8026f7e <__gethex+0x146>
 80271f2:	6922      	ldr	r2, [r4, #16]
 80271f4:	3202      	adds	r2, #2
 80271f6:	f104 010c 	add.w	r1, r4, #12
 80271fa:	0092      	lsls	r2, r2, #2
 80271fc:	300c      	adds	r0, #12
 80271fe:	f7fd f822 	bl	8024246 <memcpy>
 8027202:	4621      	mov	r1, r4
 8027204:	9801      	ldr	r0, [sp, #4]
 8027206:	f7fd fef7 	bl	8024ff8 <_Bfree>
 802720a:	464c      	mov	r4, r9
 802720c:	6923      	ldr	r3, [r4, #16]
 802720e:	1c5a      	adds	r2, r3, #1
 8027210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027214:	6122      	str	r2, [r4, #16]
 8027216:	2201      	movs	r2, #1
 8027218:	615a      	str	r2, [r3, #20]
 802721a:	e7be      	b.n	802719a <__gethex+0x362>
 802721c:	6922      	ldr	r2, [r4, #16]
 802721e:	455a      	cmp	r2, fp
 8027220:	dd0b      	ble.n	802723a <__gethex+0x402>
 8027222:	2101      	movs	r1, #1
 8027224:	4620      	mov	r0, r4
 8027226:	f7ff fd9f 	bl	8026d68 <rshift>
 802722a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802722e:	3701      	adds	r7, #1
 8027230:	42bb      	cmp	r3, r7
 8027232:	f6ff aee0 	blt.w	8026ff6 <__gethex+0x1be>
 8027236:	2501      	movs	r5, #1
 8027238:	e7c2      	b.n	80271c0 <__gethex+0x388>
 802723a:	f016 061f 	ands.w	r6, r6, #31
 802723e:	d0fa      	beq.n	8027236 <__gethex+0x3fe>
 8027240:	4453      	add	r3, sl
 8027242:	f1c6 0620 	rsb	r6, r6, #32
 8027246:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802724a:	f7fd ff87 	bl	802515c <__hi0bits>
 802724e:	42b0      	cmp	r0, r6
 8027250:	dbe7      	blt.n	8027222 <__gethex+0x3ea>
 8027252:	e7f0      	b.n	8027236 <__gethex+0x3fe>
 8027254:	08029e3d 	.word	0x08029e3d

08027258 <L_shift>:
 8027258:	f1c2 0208 	rsb	r2, r2, #8
 802725c:	0092      	lsls	r2, r2, #2
 802725e:	b570      	push	{r4, r5, r6, lr}
 8027260:	f1c2 0620 	rsb	r6, r2, #32
 8027264:	6843      	ldr	r3, [r0, #4]
 8027266:	6804      	ldr	r4, [r0, #0]
 8027268:	fa03 f506 	lsl.w	r5, r3, r6
 802726c:	432c      	orrs	r4, r5
 802726e:	40d3      	lsrs	r3, r2
 8027270:	6004      	str	r4, [r0, #0]
 8027272:	f840 3f04 	str.w	r3, [r0, #4]!
 8027276:	4288      	cmp	r0, r1
 8027278:	d3f4      	bcc.n	8027264 <L_shift+0xc>
 802727a:	bd70      	pop	{r4, r5, r6, pc}

0802727c <__match>:
 802727c:	b530      	push	{r4, r5, lr}
 802727e:	6803      	ldr	r3, [r0, #0]
 8027280:	3301      	adds	r3, #1
 8027282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027286:	b914      	cbnz	r4, 802728e <__match+0x12>
 8027288:	6003      	str	r3, [r0, #0]
 802728a:	2001      	movs	r0, #1
 802728c:	bd30      	pop	{r4, r5, pc}
 802728e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027292:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8027296:	2d19      	cmp	r5, #25
 8027298:	bf98      	it	ls
 802729a:	3220      	addls	r2, #32
 802729c:	42a2      	cmp	r2, r4
 802729e:	d0f0      	beq.n	8027282 <__match+0x6>
 80272a0:	2000      	movs	r0, #0
 80272a2:	e7f3      	b.n	802728c <__match+0x10>

080272a4 <__hexnan>:
 80272a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272a8:	680b      	ldr	r3, [r1, #0]
 80272aa:	6801      	ldr	r1, [r0, #0]
 80272ac:	115e      	asrs	r6, r3, #5
 80272ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80272b2:	f013 031f 	ands.w	r3, r3, #31
 80272b6:	b087      	sub	sp, #28
 80272b8:	bf18      	it	ne
 80272ba:	3604      	addne	r6, #4
 80272bc:	2500      	movs	r5, #0
 80272be:	1f37      	subs	r7, r6, #4
 80272c0:	4682      	mov	sl, r0
 80272c2:	4690      	mov	r8, r2
 80272c4:	9301      	str	r3, [sp, #4]
 80272c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80272ca:	46b9      	mov	r9, r7
 80272cc:	463c      	mov	r4, r7
 80272ce:	9502      	str	r5, [sp, #8]
 80272d0:	46ab      	mov	fp, r5
 80272d2:	784a      	ldrb	r2, [r1, #1]
 80272d4:	1c4b      	adds	r3, r1, #1
 80272d6:	9303      	str	r3, [sp, #12]
 80272d8:	b342      	cbz	r2, 802732c <__hexnan+0x88>
 80272da:	4610      	mov	r0, r2
 80272dc:	9105      	str	r1, [sp, #20]
 80272de:	9204      	str	r2, [sp, #16]
 80272e0:	f7ff fd94 	bl	8026e0c <__hexdig_fun>
 80272e4:	2800      	cmp	r0, #0
 80272e6:	d151      	bne.n	802738c <__hexnan+0xe8>
 80272e8:	9a04      	ldr	r2, [sp, #16]
 80272ea:	9905      	ldr	r1, [sp, #20]
 80272ec:	2a20      	cmp	r2, #32
 80272ee:	d818      	bhi.n	8027322 <__hexnan+0x7e>
 80272f0:	9b02      	ldr	r3, [sp, #8]
 80272f2:	459b      	cmp	fp, r3
 80272f4:	dd13      	ble.n	802731e <__hexnan+0x7a>
 80272f6:	454c      	cmp	r4, r9
 80272f8:	d206      	bcs.n	8027308 <__hexnan+0x64>
 80272fa:	2d07      	cmp	r5, #7
 80272fc:	dc04      	bgt.n	8027308 <__hexnan+0x64>
 80272fe:	462a      	mov	r2, r5
 8027300:	4649      	mov	r1, r9
 8027302:	4620      	mov	r0, r4
 8027304:	f7ff ffa8 	bl	8027258 <L_shift>
 8027308:	4544      	cmp	r4, r8
 802730a:	d952      	bls.n	80273b2 <__hexnan+0x10e>
 802730c:	2300      	movs	r3, #0
 802730e:	f1a4 0904 	sub.w	r9, r4, #4
 8027312:	f844 3c04 	str.w	r3, [r4, #-4]
 8027316:	f8cd b008 	str.w	fp, [sp, #8]
 802731a:	464c      	mov	r4, r9
 802731c:	461d      	mov	r5, r3
 802731e:	9903      	ldr	r1, [sp, #12]
 8027320:	e7d7      	b.n	80272d2 <__hexnan+0x2e>
 8027322:	2a29      	cmp	r2, #41	@ 0x29
 8027324:	d157      	bne.n	80273d6 <__hexnan+0x132>
 8027326:	3102      	adds	r1, #2
 8027328:	f8ca 1000 	str.w	r1, [sl]
 802732c:	f1bb 0f00 	cmp.w	fp, #0
 8027330:	d051      	beq.n	80273d6 <__hexnan+0x132>
 8027332:	454c      	cmp	r4, r9
 8027334:	d206      	bcs.n	8027344 <__hexnan+0xa0>
 8027336:	2d07      	cmp	r5, #7
 8027338:	dc04      	bgt.n	8027344 <__hexnan+0xa0>
 802733a:	462a      	mov	r2, r5
 802733c:	4649      	mov	r1, r9
 802733e:	4620      	mov	r0, r4
 8027340:	f7ff ff8a 	bl	8027258 <L_shift>
 8027344:	4544      	cmp	r4, r8
 8027346:	d936      	bls.n	80273b6 <__hexnan+0x112>
 8027348:	f1a8 0204 	sub.w	r2, r8, #4
 802734c:	4623      	mov	r3, r4
 802734e:	f853 1b04 	ldr.w	r1, [r3], #4
 8027352:	f842 1f04 	str.w	r1, [r2, #4]!
 8027356:	429f      	cmp	r7, r3
 8027358:	d2f9      	bcs.n	802734e <__hexnan+0xaa>
 802735a:	1b3b      	subs	r3, r7, r4
 802735c:	f023 0303 	bic.w	r3, r3, #3
 8027360:	3304      	adds	r3, #4
 8027362:	3401      	adds	r4, #1
 8027364:	3e03      	subs	r6, #3
 8027366:	42b4      	cmp	r4, r6
 8027368:	bf88      	it	hi
 802736a:	2304      	movhi	r3, #4
 802736c:	4443      	add	r3, r8
 802736e:	2200      	movs	r2, #0
 8027370:	f843 2b04 	str.w	r2, [r3], #4
 8027374:	429f      	cmp	r7, r3
 8027376:	d2fb      	bcs.n	8027370 <__hexnan+0xcc>
 8027378:	683b      	ldr	r3, [r7, #0]
 802737a:	b91b      	cbnz	r3, 8027384 <__hexnan+0xe0>
 802737c:	4547      	cmp	r7, r8
 802737e:	d128      	bne.n	80273d2 <__hexnan+0x12e>
 8027380:	2301      	movs	r3, #1
 8027382:	603b      	str	r3, [r7, #0]
 8027384:	2005      	movs	r0, #5
 8027386:	b007      	add	sp, #28
 8027388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802738c:	3501      	adds	r5, #1
 802738e:	2d08      	cmp	r5, #8
 8027390:	f10b 0b01 	add.w	fp, fp, #1
 8027394:	dd06      	ble.n	80273a4 <__hexnan+0x100>
 8027396:	4544      	cmp	r4, r8
 8027398:	d9c1      	bls.n	802731e <__hexnan+0x7a>
 802739a:	2300      	movs	r3, #0
 802739c:	f844 3c04 	str.w	r3, [r4, #-4]
 80273a0:	2501      	movs	r5, #1
 80273a2:	3c04      	subs	r4, #4
 80273a4:	6822      	ldr	r2, [r4, #0]
 80273a6:	f000 000f 	and.w	r0, r0, #15
 80273aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80273ae:	6020      	str	r0, [r4, #0]
 80273b0:	e7b5      	b.n	802731e <__hexnan+0x7a>
 80273b2:	2508      	movs	r5, #8
 80273b4:	e7b3      	b.n	802731e <__hexnan+0x7a>
 80273b6:	9b01      	ldr	r3, [sp, #4]
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	d0dd      	beq.n	8027378 <__hexnan+0xd4>
 80273bc:	f1c3 0320 	rsb	r3, r3, #32
 80273c0:	f04f 32ff 	mov.w	r2, #4294967295
 80273c4:	40da      	lsrs	r2, r3
 80273c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80273ca:	4013      	ands	r3, r2
 80273cc:	f846 3c04 	str.w	r3, [r6, #-4]
 80273d0:	e7d2      	b.n	8027378 <__hexnan+0xd4>
 80273d2:	3f04      	subs	r7, #4
 80273d4:	e7d0      	b.n	8027378 <__hexnan+0xd4>
 80273d6:	2004      	movs	r0, #4
 80273d8:	e7d5      	b.n	8027386 <__hexnan+0xe2>

080273da <__ascii_mbtowc>:
 80273da:	b082      	sub	sp, #8
 80273dc:	b901      	cbnz	r1, 80273e0 <__ascii_mbtowc+0x6>
 80273de:	a901      	add	r1, sp, #4
 80273e0:	b142      	cbz	r2, 80273f4 <__ascii_mbtowc+0x1a>
 80273e2:	b14b      	cbz	r3, 80273f8 <__ascii_mbtowc+0x1e>
 80273e4:	7813      	ldrb	r3, [r2, #0]
 80273e6:	600b      	str	r3, [r1, #0]
 80273e8:	7812      	ldrb	r2, [r2, #0]
 80273ea:	1e10      	subs	r0, r2, #0
 80273ec:	bf18      	it	ne
 80273ee:	2001      	movne	r0, #1
 80273f0:	b002      	add	sp, #8
 80273f2:	4770      	bx	lr
 80273f4:	4610      	mov	r0, r2
 80273f6:	e7fb      	b.n	80273f0 <__ascii_mbtowc+0x16>
 80273f8:	f06f 0001 	mvn.w	r0, #1
 80273fc:	e7f8      	b.n	80273f0 <__ascii_mbtowc+0x16>

080273fe <_realloc_r>:
 80273fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027402:	4680      	mov	r8, r0
 8027404:	4615      	mov	r5, r2
 8027406:	460c      	mov	r4, r1
 8027408:	b921      	cbnz	r1, 8027414 <_realloc_r+0x16>
 802740a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802740e:	4611      	mov	r1, r2
 8027410:	f7fb bd2c 	b.w	8022e6c <_malloc_r>
 8027414:	b92a      	cbnz	r2, 8027422 <_realloc_r+0x24>
 8027416:	f7fd fd65 	bl	8024ee4 <_free_r>
 802741a:	2400      	movs	r4, #0
 802741c:	4620      	mov	r0, r4
 802741e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027422:	f000 f827 	bl	8027474 <_malloc_usable_size_r>
 8027426:	4285      	cmp	r5, r0
 8027428:	4606      	mov	r6, r0
 802742a:	d802      	bhi.n	8027432 <_realloc_r+0x34>
 802742c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8027430:	d8f4      	bhi.n	802741c <_realloc_r+0x1e>
 8027432:	4629      	mov	r1, r5
 8027434:	4640      	mov	r0, r8
 8027436:	f7fb fd19 	bl	8022e6c <_malloc_r>
 802743a:	4607      	mov	r7, r0
 802743c:	2800      	cmp	r0, #0
 802743e:	d0ec      	beq.n	802741a <_realloc_r+0x1c>
 8027440:	42b5      	cmp	r5, r6
 8027442:	462a      	mov	r2, r5
 8027444:	4621      	mov	r1, r4
 8027446:	bf28      	it	cs
 8027448:	4632      	movcs	r2, r6
 802744a:	f7fc fefc 	bl	8024246 <memcpy>
 802744e:	4621      	mov	r1, r4
 8027450:	4640      	mov	r0, r8
 8027452:	f7fd fd47 	bl	8024ee4 <_free_r>
 8027456:	463c      	mov	r4, r7
 8027458:	e7e0      	b.n	802741c <_realloc_r+0x1e>

0802745a <__ascii_wctomb>:
 802745a:	4603      	mov	r3, r0
 802745c:	4608      	mov	r0, r1
 802745e:	b141      	cbz	r1, 8027472 <__ascii_wctomb+0x18>
 8027460:	2aff      	cmp	r2, #255	@ 0xff
 8027462:	d904      	bls.n	802746e <__ascii_wctomb+0x14>
 8027464:	228a      	movs	r2, #138	@ 0x8a
 8027466:	601a      	str	r2, [r3, #0]
 8027468:	f04f 30ff 	mov.w	r0, #4294967295
 802746c:	4770      	bx	lr
 802746e:	700a      	strb	r2, [r1, #0]
 8027470:	2001      	movs	r0, #1
 8027472:	4770      	bx	lr

08027474 <_malloc_usable_size_r>:
 8027474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027478:	1f18      	subs	r0, r3, #4
 802747a:	2b00      	cmp	r3, #0
 802747c:	bfbc      	itt	lt
 802747e:	580b      	ldrlt	r3, [r1, r0]
 8027480:	18c0      	addlt	r0, r0, r3
 8027482:	4770      	bx	lr

08027484 <_init>:
 8027484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027486:	bf00      	nop
 8027488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802748a:	bc08      	pop	{r3}
 802748c:	469e      	mov	lr, r3
 802748e:	4770      	bx	lr

08027490 <_fini>:
 8027490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027492:	bf00      	nop
 8027494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027496:	bc08      	pop	{r3}
 8027498:	469e      	mov	lr, r3
 802749a:	4770      	bx	lr
